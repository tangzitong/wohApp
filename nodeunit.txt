vue test
<template>
  <span>{{ message }}</span>
</template>

<script>
  export default {
    data () {
      return {
        message: 'hello!'
      }
    },
    created () {
      this.message = 'bye!'
    }
  }
</script>

// Vue �� �e�X�g�Ώۂ̃R���|�[�l���g���C���|�[�g����
import Vue from 'vue'
import MyComponent from 'path/to/MyComponent.vue'

// �e�X�g�����i�[�⌟�؂ɂ́A�ǂ̂悤�ȃ��C�u������p���Ă��\���܂���
// �����ł� Jasmine 2.0 ��p�����e�X�g�L�q���s���Ă��܂��B
describe('MyComponent', () => {
  // �R���|�[�l���g�� options �𒼐ڌ��؂��܂��B
  it('has a created hook', () => {
    expect(typeof MyComponent.created).toBe('function')
  })

  // �R���|�[�l���g�� options ���ɂ���֐������s���A
  // ���ʂ����؂��܂��B
  it('sets the correct default data', () => {
    expect(typeof MyComponent.data).toBe('function')
    const defaultData = MyComponent.data()
    expect(defaultData.message).toBe('hello!')
  })

  // �R���|�[�l���g�C���X�^���X���}�E���g���Č��؂��܂��B
  it('correctly sets the message when created', () => {
    const vm = new Vue(MyComponent).$mount()
    expect(vm.message).toBe('bye!')
  })

  // �}�E���g���ꂽ�R���|�[�l���g�C���X�^���X��`�悵�Č��؂��܂��B
  it('renders the correct message', () => {
    const Constructor = Vue.extend(MyComponent)
    const vm = new Constructor().$mount()
    expect(vm.$el.textContent).toBe('bye!')
  })
})

nodeunit
test/test-divided.js 
var divided = require('../lib/divided');

exports['calculate'] = function(test) {
    test.equal(divided.calculate(4), 2);
    test.done();
};

nodeunit 
~nodeprj$ nodeunit test

module.js:340
    throw err;
          ^
Error: Cannot find module '../lib/divided'
    at Function.Module._resolveFilename (module.js:338:15)
    at Function.Module._load (module.js:280:25)
    ...
    at Module.require (module.js:364:17)
    
    
lib/divided.js 
/** �^����ꂽ�l��2 �Ŋ����ď����_�ȉ���؂�̂Ă����ʂ�Ԃ��֐� */
exports.calculate = function(num) {
	return num / 2;
};

virefire unittest

import Vuefire from '../src'

import { db, tick, Vue } from '@posva/vuefire-test-helpers'



Vue.use(Vuefire)



let collection, document, vm

beforeEach(async () => {

  collection = db.collection()

  document = collection.doc()

  vm = new Vue({

    // purposely set items as null

    // but it's a good practice to set it to an empty array

    data: () => ({

      items: null,

      item: null

    }),

    firestore: {

      items: collection,

      item: document

    }

  })

  await tick()

})



test('does nothing with no firestore', () => {

  const vm = new Vue({

    data: () => ({ items: null })

  })

  expect(vm.items).toEqual(null)

})



test('setups _firestoreUnbinds', () => {

  expect(vm._firestoreUnbinds).toBeTruthy()

  expect(Object.keys(vm._firestoreUnbinds).sort()).toEqual(['item', 'items'])

})



test('setups _firestoreUnbinds with no firestore options', () => {

  const vm = new Vue({

    data: () => ({ items: null })

  })

  expect(vm._firestoreUnbinds).toBeTruthy()

  expect(Object.keys(vm._firestoreUnbinds)).toEqual([])

})



test('setups $firestoreRefs', () => {

  expect(Object.keys(vm.$firestoreRefs).sort()).toEqual(['item', 'items'])

  expect(vm.$firestoreRefs.item).toBe(document)

  expect(vm.$firestoreRefs.items).toBe(collection)

})



test('clears $firestoreRefs on $destroy', () => {

  vm.$destroy()

  expect(vm.$firestoreRefs).toEqual(null)

})



