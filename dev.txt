1. git install
https://qiita.com/toshi-click/items/dcf3dd48fdc74c91b409

create :
cd D:\work\wohapp
git init
git clone https://github.com/highwayns/wohApp.git
git remote add origin/master https://github.com/highwayns/wohApp.git

update:
git reset --hard origin/master
git fetch
git pull

commit:
git add .
git commit -m "XXX modified"
git push

2.json
https://github.com/highwayns/json-server
https://json.org/

3.js
https://qiita.com/takeharu/items/809114f943208aaf55b3
https://momentjs.com/
https://underscorejs.org/

4.html/css
http://www.ituore.com/entry/html-css-basic
https://www.webopixel.net/html-css/503.html
https://qiita.com/ritukiii/items/67b3c50002b48c6186d6

5.nodejs
https://qiita.com/taiponrock/items/9001ae194571feb63a5e
https://nodejs.org/en/docs/
npm install
npm start
npm run build

6.phonegap
http://docs.phonegap.com/

7.vs install cordova
https://algorithm.joho.info/programming/vs2017-visual-studio-tools-for-apache-cordova-install/
debug
https://jp.vuejs.org/v2/cookbook/debugging-in-vscode.html
https://docs.microsoft.com/en-us/visualstudio/cross-platform/tools-for-cordova/debug-test/debug-using-visual-studio?view=toolsforcordova-2017

8.firebase
https://firebase.google.com/docs/reference/js/firebase
firebase tools:
npm i firebase-tools
npm i -g firebase-tools
firebase login
firebase init
firebase use --add
firebase serve --only hosting
firebase deploy
firebase open hosting:site

firebase auth:
firebase database:
firebase firestore:
firebase storage:
firebase hosting:
firebase mlkit:

firebase performance monitor:
  アプリケーションにPerformance Monitoring SDKを追加する
  （Optional）SDKを使用してアプリケーションのカスタムトレースとカウンタを定義する
  Firebaseコンソールでのパフォーマンスデータの監視
firebase Crashlytics:
firebase Test Lab:

firebase In-App messaging:
firebase Predictions:
firebase A/B Testing:
firebase Cloud messaging:
firebase Remote Config:
firebase Dynamic Links:
firebase App Index:
firebase invite:
firebase admob:

9.cordova
https://cordova.apache.org/docs/en/latest/
npm install cordova -g
cordova create wohapp com.highwayns.wohapp wohApp
cordova requirements
cordova platform add ios --save
cordova plugin add cordova-plugin-whitelist cordova-plugin-statusbar cordova-plugin-camera cordova-plugin-geolocation cordova-plugin-file-transfer cordova-plugin-inappbrowser cordova-plugin-network-information

10 vue & vuex &axios
https://vuejs.org/v2/guide/
https://vuex.vuejs.org/guide/
https://jp.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html
npm install -g vue-cli
vue init webpack test-vue

11.framework7
http://v2.framework7.io/vue/
npm install framework7
npm install -g framework7-cli
framework7 create
framework7 create --ui
framework7 create --ui --port 8080
framework7 generate-assets
framework7 generate-assets --ui
framework7 cordova plugin add cordova-plugin-statusbar
framework7 cordova plugin add cordova-plugin-splashscreen
framework7 cordova build ios

12.glup
https://github.com/gulpjs/gulp/tree/master/docs
npm install glup -g
gulp Iconfont

13.jQuery
https://maketips.net/tip/223/how-to-include-jquery-into-vuejs

14.firebasebot
https://github.com/FirebaseExtended/bolt/blob/master/docs/language.md
npm install --global firebase-bolt
firebase-bolt < posts.bolt

15.firechat
https://firechat.firebaseapp.com/docs/
API - Public Methods
new Firechat(ref, options)
Firechat.setUser(userId, userName, onComplete)
Firechat.resumeSession()
Firechat.on(eventType, callback)
Firechat.createRoom(roomName, roomType, callback(roomId))
Firechat.enterRoom(roomId)
Firechat.leaveRoom(roomId)
Firechat.sendMessage(roomId, messageContent, messageType='default', callback)
Firechat.toggleUserMute(userId, callback)
Firechat.inviteUser(userId, roomId)
Firechat.acceptInvite(inviteId, callback)
Firechat.declineInvite(inviteId, callback)
Firechat.getRoomList(callback)
Firechat.getUsersByRoom(roomId, [limit=100], callback)
Firechat.getUsersByPrefix(prefix, startAt, endAt, limit, callback)
Firechat.getRoom(roomId, callback)

API - Exposed Bindings
user-update - Invoked when the user's metadata changes.
room-enter - Invoked when the user successfully enters a room.
room-exit - Invoked when the user exists a room.
message-add - Invoked when a new message is received.
message-remove - Invoked when a message is deleted.
room-invite - Invoked when a new room invite is received.
room-invite-response - Invoked when a response to a previous invite is received.

Data Structure
moderators/ 
  <user-id> - A list of user ids and their moderator status. 
    true|false - A boolean value indicating the user's moderator status.
room-messages/ 
  <room-id> 
    <message-id> 
      userId - The id of the user that sent the message.
      name - The name of the user that sent the message.
      message - The content of the message.
      timestamp - The time at which the message was sent.
room-metadata/ 
  <room-id> 
    createdAt - The time at which the room was created.
    createdByUserId- The id of the user that created the room.
    id - The id of the room.
    name - The public display name of the room.
    type - The type of room, public or private.
room-users/
user-names-online/
users/ 
  <user-id> 
    id - The id of the user.
    name - The display name of the user.
    invites - A list of invites the user has received.
    muted - A list of user ids currently muted by the user.
    rooms - A list of currently active rooms, used for sessioning.

16.android
JDKのインストール
Android SDKのインストール

export PATH=$HOME/Library/Android/sdk/platform-tools:$PATH
export PATH=$HOME/Library/Android/sdk/tools:$PATH

cordova platform add android

エミュレータでの検証:
Genymotion.appを起動
アプリケーション内で、VMをダウンロード (もしまだなければ)
VMを起動
Cordovaから起動 $ cordova run android 

実機で検証:
Android実機のUSBデバッグ機能をONに
MacにAndroid実機をUSB接続 (USBケーブルが充電専用だとNGなので注意)
次のコマンドで接続確認して、表示されればOK $ adb devices 
Cordovaから起動 $ cordova run android 
ビルドを待つ...
実機でアプリが起動!

17.ios
Apple の開発者のダウンロードアップルの開発者として登録する必要があります。
    $ npm install -g ios-sim
    $ npm install -g ios-deploy
    $ cordova run ios --device
    $ cordova emulate ios
18.windows
cordova build windows -- --appx=8.1-phone
To deploy Windows package:
cordova run windows -- --win  # explicitly specify Windows as deployment target
cordova run windows # `run` uses Windows package by default
To deploy Windows Phone package:
cordova run windows -- --phone  # deploy app to Windows Phone 8.1 emulator
cordova run windows --device -- --phone  # deploy app to connected device
This command will give you the list of all available targets:
cordova run windows --list
cordova run windows --target="Emulator 8.1 720P 4.7 inch" -- --phone
    
