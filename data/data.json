{
  "comments" : {
    "data" : {
      "0" : {
        "avatar" : "1",
        "name" : "Cory Bergman",
        "postid" : "11",
        "text" : "wow that's some serious chat action",
        "time" : "1404705240"
      },
      "1" : {
        "avatar" : "2",
        "name" : "Rhonda Irvine",
        "postid" : "12",
        "text" : "what country is covered by your food app?",
        "time" : "1404705260"
      },
      "2" : {
        "avatar" : "3",
        "name" : "Nathan Lawson",
        "postid" : "13",
        "text" : "much  more interesting than a stupid grumpy cat",
        "time" : "1404705300"
      },
      "3" : {
        "avatar" : "4",
        "name" : "Vaughn",
        "postid" : "14",
        "text" : "Signed the petition. Hope it's not too late.",
        "time" : "1404705400"
      },
      "-LbRHgPyDAMcmJnsf_nF" : {
        "-LcRMrWF6UJfJ3gH8-I-" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRMrWF6UJfJ3gH8-I-",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "text" : "sss",
          "time" : 1555254181076
        },
        "-LcRN4UeAaJJZuoRZyEP" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRN4UeAaJJZuoRZyEP",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "text" : "xxx",
          "time" : 1555254238316
        },
        "-LcRNklevQTeQlpBWx0U" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRNklevQTeQlpBWx0U",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "text" : "sss",
          "time" : 1555254414666
        },
        "-LcRPW2iMEZ6GsX-wg5u" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRPW2iMEZ6GsX-wg5u",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "text" : "test comment",
          "time" : 1555254874587
        },
        "-LcRQ3lb9EYPAUMiuq26" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRQ3lb9EYPAUMiuq26",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "text" : "sssxxxx",
          "time" : 1555255021307
        },
        "-LcRQvxtzTCO8pP38pV1" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRQvxtzTCO8pP38pV1",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "text" : "test for the last time",
          "time" : 1555255247166
        }
      },
      "-LdLmvv2SvIuEAO7e-ch" : {
        "-LdRfOl7dPjSLNuhUrCL" : {
          "avatar" : "GQxxS27YoMV4aMVZ69C9uVimoG63",
          "id" : "-LdRfOl7dPjSLNuhUrCL",
          "name" : "test5",
          "postid" : "-LdLmvv2SvIuEAO7e-ch",
          "text" : "test",
          "time" : 1556333042903
        }
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "companys" : {
    "data" : {
      "-LbW068uZTzWv84W5fNq" : {
        "Fax" : "1",
        "HP" : "1",
        "Manager" : "1",
        "Tel" : "1",
        "address" : "11",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "companytype" : "1",
        "created_at" : 1554258359052,
        "id" : "-LbW068uZTzWv84W5fNq",
        "industry" : "2",
        "like_count" : 0,
        "name" : "test company3",
        "nickname" : "test1",
        "photo" : "",
        "update_at" : 1554461027867
      },
      "-Lbfb0NmorPWFCnG4IA8" : {
        "Fax" : "",
        "HP" : "",
        "Manager" : "",
        "Tel" : "",
        "address" : "",
        "application_count" : 0,
        "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
        "companytype" : "1",
        "created_at" : 1554436069051,
        "id" : "-Lbfb0NmorPWFCnG4IA8",
        "like_count" : 0,
        "name" : "",
        "nickname" : "test1"
      },
      "-LbkD4fQjqDyGK1j_3dH" : {
        "Fax" : "sss",
        "HP" : "sss",
        "Manager" : "sss",
        "Tel" : "sss",
        "address" : "ssss",
        "application_count" : 0,
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "companytype" : "1",
        "created_at" : 1554513419106,
        "id" : "-LbkD4fQjqDyGK1j_3dH",
        "like_count" : 0,
        "name" : "ssss",
        "nickname" : "test1"
      },
      "-Lc-YqFE4hBsd-Wk1DP5" : {
        "Fax" : "",
        "HP" : "",
        "Manager" : "",
        "Tel" : "",
        "address" : "",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "companytype" : "1",
        "created_at" : 1554787558607,
        "id" : "-Lc-YqFE4hBsd-Wk1DP5",
        "industry" : "2",
        "like_count" : 0,
        "name" : "",
        "nickname" : "test1"
      },
      "-Lc-ZGlYd_AoMNoW4ArZ" : {
        "Fax" : "vvvv",
        "HP" : "https://console.firebase.google.com/",
        "Manager" : "bbb",
        "Tel" : "hjhh",
        "address" : "ssss",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "companytype" : "1",
        "created_at" : 1554787671328,
        "id" : "-Lc-ZGlYd_AoMNoW4ArZ",
        "industry" : "2",
        "like_count" : 0,
        "name" : "sss",
        "nickname" : "test1",
        "photo" : ""
      },
      "-Lc-aDeujDxx19uVyXZp" : {
        "Fax" : "ｓｓｓ",
        "HP" : "jp.highwayns.com",
        "Manager" : "ｓｓｓ",
        "Tel" : "sss",
        "address" : "sss",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "companytype" : "1",
        "created_at" : 1554788183520,
        "id" : "-Lc-aDeujDxx19uVyXZp",
        "industry" : "2",
        "like_count" : 0,
        "name" : "海威",
        "nickname" : "test1"
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "consultants" : {
    "data" : {
      "-LbW06mrQIcnI-hUSrnL" : {
        "Fax" : "1",
        "HP" : "1",
        "Manager" : "1",
        "Tel" : "1",
        "address" : "11",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "consultanttype" : "1",
        "created_at" : 1554258361670,
        "id" : "-LbW06mrQIcnI-hUSrnL",
        "industry" : "1",
        "like_count" : 0,
        "name" : "test consultant2",
        "nickname" : "test1",
        "photo" : "",
        "update_at" : 1554258362097
      },
      "-LbYYDCsAdRcUcrTtndD" : {
        "Fax" : "xxx",
        "HP" : "sss",
        "Manager" : "xxx",
        "Tel" : "xzxx",
        "address" : "xzxx",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "consultanttype" : "2",
        "created_at" : 1554300856662,
        "id" : "-LbYYDCsAdRcUcrTtndD",
        "industry" : "2",
        "like_count" : 0,
        "name" : "xxx",
        "nickname" : "test1"
      }
    }
  },
  "contacts" : {
    "data" : [ {
      "avatar" : "1",
      "header" : "A",
      "location" : "London",
      "nickname" : "Alex Black"
    }, {
      "avatar" : "5",
      "header" : "A",
      "location" : "Moscow",
      "nickname" : "Alex Proti"
    }, {
      "avatar" : "3",
      "header" : "A",
      "location" : "Kiev",
      "nickname" : "Andrew Smith"
    }, {
      "avatar" : "7",
      "header" : "A",
      "location" : "Kiev",
      "nickname" : "Ann Ryder"
    }, {
      "avatar" : "8",
      "header" : "D",
      "location" : "Kiev",
      "nickname" : "Daniel Ricci"
    }, {
      "avatar" : "3",
      "header" : "I",
      "location" : "Kiev",
      "nickname" : "Ivan Ivanov"
    }, {
      "avatar" : "6",
      "header" : "K",
      "location" : "Odessa",
      "nickname" : "Kate Lebedeva"
    }, {
      "avatar" : "10",
      "header" : "K",
      "location" : "Kiev",
      "nickname" : "Kate Shy"
    }, {
      "avatar" : "1",
      "header" : "M",
      "location" : "Praha",
      "nickname" : "Michael Fold"
    }, {
      "avatar" : "2",
      "header" : "N",
      "location" : "Moscow",
      "nickname" : "Nadya Lovin"
    }, {
      "avatar" : "4",
      "header" : "O",
      "location" : "Odessa",
      "nickname" : "Oleg Price"
    }, {
      "avatar" : "5",
      "header" : "O",
      "location" : "Kiev",
      "nickname" : "Oleg Ryzhkov"
    }, {
      "avatar" : "9",
      "header" : "O",
      "location" : "Praha",
      "nickname" : "Olga Blare"
    }, {
      "avatar" : "10",
      "header" : "S",
      "location" : "Milan",
      "nickname" : "Svetlana Kot"
    } ],
    "err_code" : 0,
    "err_msg" : "success"
  },
  "datatype" : {
    "enUS" : {
      "area" : {
        "data" : [ {
          "id" : "1",
          "text" : "Tokyo"
        }, {
          "id" : "2",
          "text" : "Beijing"
        }, {
          "id" : "3",
          "text" : "Newyork"
        }, {
          "id" : "4",
          "text" : "Osaka"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "companytype" : {
        "data" : [ {
          "id" : "1",
          "name" : "Stock Corporation",
          "nickname" : "S"
        }, {
          "id" : "2",
          "name" : "Limited Corporation",
          "nickname" : "L"
        }, {
          "id" : "3",
          "name" : "Contact Corporation",
          "nickname" : "C"
        }, {
          "id" : "4",
          "name" : "International Corporation",
          "nickname" : "I"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "consultanttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "Talent",
          "nickname" : "T"
        }, {
          "id" : "2",
          "name" : "Consultant",
          "nickname" : "C"
        }, {
          "id" : "3",
          "name" : "Dispatcher",
          "nickname" : "D"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "dispatchertype" : {
        "data" : [ {
          "id" : "1",
          "name" : "Talent",
          "nickname" : "T"
        }, {
          "id" : "2",
          "name" : "Consultant",
          "nickname" : "C"
        }, {
          "id" : "3",
          "name" : "Dispatcher",
          "nickname" : "D"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "eventtype" : {
        "data" : [ {
          "id" : "1",
          "name" : "AI Learning Event",
          "nickname" : "A"
        }, {
          "id" : "2",
          "name" : "Dispach Learning Event",
          "nickname" : "H"
        }, {
          "id" : "3",
          "name" : "System Development Event",
          "nickname" : "K"
        }, {
          "id" : "4",
          "name" : "Project Management Event",
          "nickname" : "P"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "industry" : {
        "data" : [ {
          "id" : "1",
          "text" : "System Development"
        }, {
          "id" : "2",
          "text" : "Software Development"
        }, {
          "id" : "3",
          "text" : "Mobile Development"
        }, {
          "id" : "4",
          "text" : "System Mantainence"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "jobtype" : {
        "data" : [ {
          "id" : "1",
          "name" : "Normal",
          "nickname" : "N"
        }, {
          "id" : "2",
          "name" : "Contact",
          "nickname" : "C"
        }, {
          "id" : "3",
          "name" : "Arbeit",
          "nickname" : "A"
        }, {
          "id" : "4",
          "name" : "Dispatch",
          "nickname" : "D"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "knowledgetype" : {
        "data" : [ {
          "id" : "1",
          "name" : "Program Language",
          "nickname" : "P"
        }, {
          "id" : "2",
          "name" : "Database Management",
          "nickname" : "D"
        }, {
          "id" : "3",
          "name" : "Mobile Development",
          "nickname" : "M"
        }, {
          "id" : "4",
          "name" : "Math",
          "nickname" : "M"
        }, {
          "id" : "5",
          "language" : "jaJP",
          "name" : "OS",
          "nickname" : "O"
        }, {
          "id" : "6",
          "name" : "Framework",
          "nickname" : "F"
        }, {
          "id" : "7",
          "name" : "Hardware",
          "nickname" : "H"
        }, {
          "id" : "8",
          "name" : "Cloud",
          "nickname" : "C"
        }, {
          "id" : "9",
          "name" : "Application",
          "nickname" : "A"
        }, {
          "id" : "10",
          "name" : "Project Management",
          "nickname" : "P"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "projecttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "Max Price",
          "nickname" : "M"
        }, {
          "id" : "2",
          "name" : "Fix Price",
          "nickname" : "F"
        }, {
          "id" : "3",
          "name" : "Middle Price",
          "nickname" : "M"
        }, {
          "id" : "4",
          "name" : "Valuation",
          "nickname" : "V"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "talenttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "Talent",
          "nickname" : "T"
        }, {
          "id" : "2",
          "name" : "Consultant",
          "nickname" : "C"
        }, {
          "id" : "3",
          "name" : "Dispatcher",
          "nickname" : "D"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "tooltype" : {
        "data" : [ {
          "id" : "1",
          "name" : "Voice Recognition",
          "nickname" : "V"
        }, {
          "id" : "2",
          "name" : "Image Recognition",
          "nickname" : "I"
        }, {
          "id" : "3",
          "name" : "Text Recognition",
          "nickname" : "T"
        }, {
          "id" : "4",
          "name" : "Other",
          "nickname" : "O"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      }
    },
    "err_code" : 0,
    "err_msg" : "success",
    "jaJP" : {
      "area" : {
        "data" : [ {
          "id" : "1",
          "text" : "东京"
        }, {
          "id" : "2",
          "text" : "北京"
        }, {
          "id" : "3",
          "text" : "ニューヨーク"
        }, {
          "id" : "4",
          "text" : "大阪"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "companytype" : {
        "data" : [ {
          "id" : "1",
          "name" : "株式会社",
          "nickname" : "株"
        }, {
          "id" : "2",
          "name" : "有限会社",
          "nickname" : "有"
        }, {
          "id" : "3",
          "name" : "合同会社",
          "nickname" : "合"
        }, {
          "id" : "4",
          "name" : "国際会社",
          "nickname" : "国"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "consultanttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "タレント",
          "nickname" : "タ"
        }, {
          "id" : "2",
          "name" : "コンサルタント",
          "nickname" : "コ"
        }, {
          "id" : "3",
          "name" : "派遣者",
          "nickname" : "派"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "dispatchertype" : {
        "data" : [ {
          "id" : "1",
          "name" : "タレント",
          "nickname" : "タ"
        }, {
          "id" : "2",
          "name" : "コンサルタント",
          "nickname" : "コ"
        }, {
          "id" : "3",
          "name" : "派遣者",
          "nickname" : "派"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "eventtype" : {
        "data" : [ {
          "id" : "1",
          "name" : "AI勉強会",
          "nickname" : "A"
        }, {
          "id" : "2",
          "name" : "派遣営業会",
          "nickname" : "H"
        }, {
          "id" : "3",
          "name" : "開発勉強会",
          "nickname" : "K"
        }, {
          "id" : "4",
          "name" : "プロジェクト説明会",
          "nickname" : "P"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "industry" : {
        "data" : [ {
          "id" : "1",
          "text" : "システム開発"
        }, {
          "id" : "2",
          "text" : "ソフトウェア開発"
        }, {
          "id" : "3",
          "text" : "モビール開発"
        }, {
          "id" : "4",
          "text" : "システムメンテナンス"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "jobtype" : {
        "data" : [ {
          "id" : "1",
          "name" : "正社員",
          "nickname" : "正"
        }, {
          "id" : "2",
          "name" : "契約社員",
          "nickname" : "契"
        }, {
          "id" : "3",
          "name" : "アルバイト",
          "nickname" : "ア"
        }, {
          "id" : "4",
          "name" : "派遣社員",
          "nickname" : "派"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "knowledgetype" : {
        "data" : [ {
          "id" : "1",
          "name" : "プログラム",
          "nickname" : "プ"
        }, {
          "id" : "2",
          "name" : "データベース",
          "nickname" : "デ"
        }, {
          "id" : "3",
          "name" : "モベル開発",
          "nickname" : "モ"
        }, {
          "id" : "4",
          "name" : "数学",
          "nickname" : "す"
        }, {
          "id" : "5",
          "name" : "OS",
          "nickname" : "お"
        }, {
          "id" : "6",
          "name" : "フレームワーク",
          "nickname" : "フ"
        }, {
          "id" : "7",
          "name" : "ハードウェア",
          "nickname" : "ハ"
        }, {
          "id" : "8",
          "name" : "クラウド",
          "nickname" : "ク"
        }, {
          "id" : "9",
          "name" : "アプリケーション",
          "nickname" : "ア"
        }, {
          "id" : "10",
          "name" : "マネジメント",
          "nickname" : "マ"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "projecttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "最低価格",
          "nickname" : "低"
        }, {
          "id" : "2",
          "name" : "指定価格",
          "nickname" : "定"
        }, {
          "id" : "3",
          "name" : "中間価格",
          "nickname" : "中"
        }, {
          "id" : "4",
          "name" : "評価",
          "nickname" : "評"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "talenttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "タレント",
          "nickname" : "タ"
        }, {
          "id" : "2",
          "name" : "コンサルタント",
          "nickname" : "コ"
        }, {
          "id" : "3",
          "name" : "派遣者",
          "nickname" : "派"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "tooltype" : {
        "data" : [ {
          "id" : "1",
          "name" : "音声認識",
          "nickname" : "音"
        }, {
          "id" : "2",
          "name" : "画像認識",
          "nickname" : "画"
        }, {
          "id" : "3",
          "name" : "文字認識",
          "nickname" : "文"
        }, {
          "id" : "4",
          "name" : "その他",
          "nickname" : "他"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      }
    },
    "zhCN" : {
      "area" : {
        "data" : [ {
          "id" : "1",
          "text" : "东京"
        }, {
          "id" : "2",
          "text" : "北京"
        }, {
          "id" : "3",
          "text" : "纽约"
        }, {
          "id" : "4",
          "text" : "大阪"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "companytype" : {
        "data" : [ {
          "id" : "1",
          "name" : "有限责任公司",
          "nickname" : "有"
        }, {
          "id" : "2",
          "name" : "无限责任公司",
          "nickname" : "无"
        }, {
          "id" : "3",
          "name" : "合同公司",
          "nickname" : "合"
        }, {
          "id" : "4",
          "name" : "跨国公司",
          "nickname" : "国"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "consultanttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "人才",
          "nickname" : "才"
        }, {
          "id" : "2",
          "name" : "咨询师",
          "nickname" : "咨"
        }, {
          "id" : "3",
          "name" : "派遣者",
          "nickname" : "派"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "dispatchertype" : {
        "data" : [ {
          "id" : "1",
          "name" : "人才",
          "nickname" : "才"
        }, {
          "id" : "2",
          "name" : "咨询师",
          "nickname" : "咨"
        }, {
          "id" : "3",
          "name" : "派遣者",
          "nickname" : "派"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "eventtype" : {
        "data" : [ {
          "id" : "1",
          "name" : "AI学习活动",
          "nickname" : "A"
        }, {
          "id" : "2",
          "name" : "派遣营业活动",
          "nickname" : "H"
        }, {
          "id" : "3",
          "name" : "开发学习活动",
          "nickname" : "K"
        }, {
          "id" : "4",
          "name" : "项目招标活动",
          "nickname" : "P"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "industry" : {
        "data" : [ {
          "id" : "1",
          "text" : "系统设计"
        }, {
          "id" : "2",
          "text" : "软件开发"
        }, {
          "id" : "3",
          "text" : "移动开发"
        }, {
          "id" : "4",
          "text" : "系统维护"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "jobtype" : {
        "data" : [ {
          "id" : "1",
          "name" : "正社员",
          "nickname" : "正"
        }, {
          "id" : "2",
          "name" : "契约社员",
          "nickname" : "契"
        }, {
          "id" : "3",
          "name" : "临时工",
          "nickname" : "临"
        }, {
          "id" : "4",
          "name" : "派遣社员",
          "nickname" : "派"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "knowledgetype" : {
        "data" : [ {
          "id" : "1",
          "name" : "程序设计",
          "nickname" : "程"
        }, {
          "id" : "2",
          "name" : "数据库",
          "nickname" : "数"
        }, {
          "id" : "3",
          "name" : "移动开发",
          "nickname" : "移"
        }, {
          "id" : "4",
          "name" : "数学",
          "nickname" : "数"
        }, {
          "id" : "5",
          "name" : "操作系统",
          "nickname" : "操"
        }, {
          "id" : "6",
          "name" : "系统架构",
          "nickname" : "系"
        }, {
          "id" : "7",
          "name" : "硬件",
          "nickname" : "硬"
        }, {
          "id" : "8",
          "name" : "云服务",
          "nickname" : "云"
        }, {
          "id" : "9",
          "name" : "应用开发",
          "nickname" : "应"
        }, {
          "id" : "10",
          "name" : "项目管理",
          "nickname" : "项"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "projecttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "最低价格",
          "nickname" : "低"
        }, {
          "id" : "2",
          "name" : "指定价格",
          "nickname" : "指"
        }, {
          "id" : "3",
          "name" : "中间价格",
          "nickname" : "中"
        }, {
          "id" : "4",
          "name" : "评标",
          "nickname" : "评"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "talenttype" : {
        "data" : [ {
          "id" : "1",
          "name" : "人才",
          "nickname" : "才"
        }, {
          "id" : "2",
          "name" : "咨询师",
          "nickname" : "咨"
        }, {
          "id" : "3",
          "name" : "派遣者",
          "nickname" : "派"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      },
      "tooltype" : {
        "data" : [ {
          "id" : "1",
          "name" : "语音识别",
          "nickname" : "音"
        }, {
          "id" : "2",
          "name" : "图像识别",
          "nickname" : "图"
        }, {
          "id" : "3",
          "name" : "文字识别",
          "nickname" : "文"
        }, {
          "id" : "4",
          "name" : "其他",
          "nickname" : "他"
        } ],
        "err_code" : 0,
        "err_msg" : "success"
      }
    }
  },
  "dispatchers" : {
    "data" : {
      "-LbW07-Ak4hTKCxzuXdf" : {
        "Fax" : "1",
        "HP" : "1",
        "Manager" : "1",
        "Tel" : "1",
        "address" : "11",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554258362520,
        "dispatchertype" : "1",
        "id" : "-LbW07-Ak4hTKCxzuXdf",
        "industry" : "1",
        "like_count" : 0,
        "name" : "test dispatcher2",
        "nickname" : "test1",
        "photo" : "",
        "update_at" : 1554258362971
      },
      "-LbYYS1-2FHP8nrlR4C_" : {
        "Fax" : "sss",
        "HP" : "sss",
        "Manager" : "sss",
        "Tel" : "sss",
        "address" : "xsss",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554300917341,
        "dispatchertype" : "3",
        "id" : "-LbYYS1-2FHP8nrlR4C_",
        "industry" : "2",
        "like_count" : 0,
        "name" : "sss",
        "nickname" : "test1"
      }
    }
  },
  "events" : {
    "data" : {
      "-LbW07cKyWoNzVpJvAZ5" : {
        "Fax" : "1",
        "HP" : "1",
        "Manager" : "1",
        "Tel" : "1",
        "address" : "11",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554258365093,
        "eventtype" : "1",
        "id" : "-LbW07cKyWoNzVpJvAZ5",
        "industry" : "1",
        "like_count" : 0,
        "name" : "test event2",
        "nickname" : "test1",
        "photo" : "",
        "update_at" : 1554258365514
      },
      "-LbYZw56kD55Q0BYxpAa" : {
        "Fax" : "sss",
        "HP" : "sss",
        "Manager" : "sss",
        "Tel" : "sss",
        "address" : "sss",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554301306706,
        "eventtype" : "1",
        "id" : "-LbYZw56kD55Q0BYxpAa",
        "industry" : "2",
        "like_count" : 0,
        "name" : "sss",
        "nickname" : "test1"
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "feedback" : {
    "data" : {
      "-LcQhUJS38a_tNLZ68QO" : {
        "CreateDate" : "2019/04/14",
        "content" : "ssss",
        "userid" : "test1@gmail.com"
      },
      "-LcQhZg3xkG-JGlWsdqA" : {
        "CreateDate" : "2019/04/14",
        "content" : "you are welcome",
        "userid" : "test1@gmail.com"
      },
      "-LcQi6C6yENbBkd1K9YV" : {
        "CreateDate" : "2019/04/14",
        "content" : "Thank you very much",
        "userid" : "test1@gmail.com"
      },
      "-LcQjXB_dX6HNZoHaAm0" : {
        "CreateDate" : "2019/04/14",
        "content" : "You have a good job in AI Times",
        "userid" : "test1@gmail.com"
      },
      "-LcQk-r3oBWFdCE2kfwu" : {
        "CreateDate" : "2019/04/14",
        "content" : "お送りいたします。",
        "userid" : "test1@gmail.com"
      },
      "-LcQk3BnMUXb8HTlrUyC" : {
        "CreateDate" : "2019/04/14",
        "content" : "お送りいたします。",
        "userid" : "test1@gmail.com"
      },
      "-LcQk6z0zItVlzYQKV_M" : {
        "CreateDate" : "2019/04/14",
        "content" : "ありがとうございました。",
        "userid" : "test1@gmail.com"
      },
      "-LchbsZDi8P9QUkuyEcJ" : {
        "CreateDate" : "2019/04/18",
        "content" : "出自唐代王维的《送刘司直赴安西》\n\n绝域阳关道，胡沙与塞尘。\n三春时有雁，万里少行人。\n苜蓿随天马，葡萄逐汉臣。\n当令外国惧，不敢觅和亲。",
        "userid" : "test1@gmail.com"
      },
      "-LcsZ3wCrGpQk9Iymtey" : {
        "CreateDate" : "2019/04/20",
        "content" : "test",
        "userid" : "test1@gmail.com"
      },
      "-LdSF8KI53EpZ7Lzl_dO" : {
        "CreateDate" : "2019/04/27",
        "content" : "hhhhhh",
        "userid" : "test2@gmail.com"
      },
      "-LdSF9gF_exURV9E6Svg" : {
        "CreateDate" : "2019/04/27",
        "content" : "hhhhhh",
        "userid" : "test2@gmail.com"
      },
      "-LdSFCsuhS1y7-FKc6Wh" : {
        "CreateDate" : "2019/04/27",
        "content" : "zzzzzz",
        "userid" : "test2@gmail.com"
      },
      "-LdSGb7kqBZ7NS7JiXmw" : {
        "CreateDate" : "2019/04/27",
        "content" : "123123123",
        "userid" : "test1@gmail.com"
      },
      "-LdSTo_vkgPBlJBKIybX" : {
        "CreateDate" : "2019/04/27",
        "content" : "yyyyyy",
        "userid" : "test2@gmail.com"
      },
      "-LdSTs67uljXTvx1deSP" : {
        "CreateDate" : "2019/04/27",
        "content" : "uuuuuuu",
        "userid" : "test2@gmail.com"
      },
      "-LdSUfaxMysRy4EUYts8" : {
        "CreateDate" : "2019/04/27",
        "content" : "你好好节",
        "userid" : "test2@gmail.com"
      },
      "-LdSUgvqFhnvklKOm_1X" : {
        "CreateDate" : "2019/04/27",
        "content" : "你好好节",
        "userid" : "test2@gmail.com"
      },
      "-LdSWdDnxHnEN61HLd0r" : {
        "CreateDate" : "2019/04/27",
        "content" : "6666666666666",
        "userid" : "test2@gmail.com"
      },
      "-LdSWeiolQUvPA1hSiON" : {
        "CreateDate" : "2019/04/27",
        "content" : "6666666666666",
        "userid" : "test2@gmail.com"
      },
      "-LdSWjIm3eJH4cAadymP" : {
        "CreateDate" : "2019/04/27",
        "content" : "你OK",
        "userid" : "test2@gmail.com"
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "invoices" : {
    "data" : [ {
      "bankaccount" : "みずほ銀行○○支店12345678",
      "comment" : "特になし",
      "companyId" : "2",
      "content" : "システム開発",
      "detail" : [ {
        "Unit" : "円",
        "name" : "a",
        "price" : 550000,
        "worktime" : "1人月"
      }, {
        "Unit" : "円",
        "name" : "b",
        "price" : 450000,
        "worktime" : "1人月"
      } ],
      "endDate" : "2018/10/31",
      "invoiceId" : "201810",
      "location" : "品川",
      "startDate" : "2018/10/01",
      "tax" : 0.08,
      "totalAmount" : 1080000,
      "userid" : "1"
    }, {
      "bankaccount" : "みずほ銀行○○支店12345678",
      "comment" : "特になし",
      "companyId" : "3",
      "content" : "システム開発",
      "detail" : [ {
        "Unit" : "円",
        "name" : "a",
        "price" : 550000,
        "time" : "1人月"
      }, {
        "Unit" : "円",
        "name" : "b",
        "price" : 450000,
        "time" : "1人月"
      } ],
      "endDate" : "2018/10/31",
      "invoiceId" : "201810",
      "location" : "品川",
      "startDate" : "2018/10/01",
      "tax" : 0.08,
      "totalAmount" : 1080000,
      "userid" : "1"
    } ],
    "err_code" : 0,
    "err_msg" : "success"
  },
  "jobs" : {
    "data" : {
      "-LbW05tjlGqALVI2K445" : {
        "Fax" : "1",
        "HP" : "1",
        "Manager" : "1",
        "Tel" : "1",
        "address" : "11",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554258358025,
        "id" : "-LbW05tjlGqALVI2K445",
        "industry" : "2",
        "jobtype" : "1",
        "like_count" : 0,
        "name" : "test job3",
        "nickname" : "test1",
        "photo" : "",
        "update_at" : 1554464408234
      },
      "-LbYX4GNelvo-RDc_LOb" : {
        "Fax" : "ssss",
        "HP" : "ssss",
        "Manager" : "sss",
        "Tel" : "ssss",
        "address" : "sssss",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554300557881,
        "id" : "-LbYX4GNelvo-RDc_LOb",
        "industry" : "2",
        "jobtype" : "3",
        "like_count" : 0,
        "name" : "ssss",
        "nickname" : "test1"
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "knowledgeapplications" : {
    "data" : {
      "-LbW07Cj8C37LDyZeKHF" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
          "name" : "Meiyou",
          "text" : "1234",
          "time" : 1559042494778
        },
        "SltouNWndEXkvLg3nCWCiHXdmnx1" : {
          "approvalAvatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "approvalName" : "test1",
          "approvalStatus" : true,
          "approval_at" : 1558836624510,
          "avatar" : "SltouNWndEXkvLg3nCWCiHXdmnx1",
          "id" : "SltouNWndEXkvLg3nCWCiHXdmnx1",
          "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
          "name" : "test3",
          "text" : "よろしくお願いいたします。",
          "time" : 1558836280787
        },
        "Vn8NjeM3yCh7vsK6mwhEdk9d1h73" : {
          "approvalAvatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "approvalName" : "test1",
          "approvalStatus" : true,
          "approval_at" : 1557963773388,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "id" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1557963596818
        },
        "iHmcxnnRDWPOJAE38On1nCdq0ir2" : {
          "approvalAvatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "approvalName" : "test1",
          "approvalStatus" : true,
          "approval_at" : 1556717302575,
          "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "id" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
          "name" : "tei952",
          "text" : "よろしくお願いいたします。",
          "time" : 1556717203100
        }
      },
      "-LbYZZXvYQxtpo2AWpzL" : {
        "Vn8NjeM3yCh7vsK6mwhEdk9d1h73" : {
          "approvalAvatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "approvalName" : "test1",
          "approvalStatus" : true,
          "approval_at" : 1557890334409,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "id" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
          "name" : "test2",
          "text" : "よろしくお願がいします",
          "time" : 1557890273854
        },
        "iHmcxnnRDWPOJAE38On1nCdq0ir2" : {
          "approvalAvatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "approvalName" : "test1",
          "approvalStatus" : true,
          "approval_at" : 1556744058368,
          "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "id" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
          "name" : "tei952",
          "text" : "sss",
          "time" : 1556743958723
        }
      },
      "-Ld495mtWIyObJzEEK7s" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087443509
        },
        "Vn8NjeM3yCh7vsK6mwhEdk9d1h73" : {
          "approvalAvatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "approvalName" : "test1",
          "approvalStatus" : true,
          "approval_at" : 1557963799311,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "id" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1557963616907
        }
      },
      "-LdLtODpcc-J83q1aU5f" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1559087965311,
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087514254
        },
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558007585355,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
          "name" : "test1",
          "text" : "よろしくお願いいたします。",
          "time" : 1558006972937
        }
      },
      "-LdLtaiBADqiIat-6k_3" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558393191289,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1558393068116
        }
      },
      "-LdLtaiBADqiIat-6k_4" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558393206202,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1558393088002
        }
      },
      "-LdLtaiBADqiIat-6k_5" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087523670
        }
      },
      "-LdLtaiBADqiIat-6k_6" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558393217175,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1558393097841
        }
      },
      "-LdLtaiBADqiIat-6k_7" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558393228087,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1558393108429
        }
      },
      "-LdLtaiBADqiIat-6k_8" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1559087946775,
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087530629
        },
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558914138916,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
          "name" : "test1",
          "text" : "よろしくお願がいします！",
          "time" : 1558914035881
        }
      },
      "-LdLtaiBADqiIat-6k_9" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558914111467,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
          "name" : "test1",
          "text" : "よろしくお願がいします！",
          "time" : 1558914008210
        }
      },
      "-LdLuLklhwL7keqLFNmD" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087468062
        },
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1557878954656,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1557878800801
        },
        "Vn8NjeM3yCh7vsK6mwhEdk9d1h73" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1557963906426,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "id" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1557963672862
        }
      },
      "-LdLuU-AHWwvMHDT-QpQ" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087476314
        },
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558871426106,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
          "name" : "test1",
          "text" : "李晓刚再申请",
          "time" : 1558855262769
        },
        "Vn8NjeM3yCh7vsK6mwhEdk9d1h73" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1557963924127,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "id" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1557963521001
        }
      },
      "-LdLubY6J4gW1t94t63x" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLubY6J4gW1t94t63x",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087486839
        },
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558007628579,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLubY6J4gW1t94t63x",
          "name" : "test1",
          "text" : "よろしくお願いいたします。",
          "time" : 1558006897384
        }
      },
      "-LdLv2K4G35jI5thkNgR" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087553640
        }
      },
      "-LdLvCzZr_W7DeKwDw9w" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLvCzZr_W7DeKwDw9w",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087573403
        }
      },
      "-LdLvKb6JZ4xEuew0npf" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087587390
        }
      },
      "-LdLvYhoIN8mERmK7vQo" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLvYhoIN8mERmK7vQo",
          "name" : "Meiyou",
          "text" : "111",
          "time" : 1559087700481
        }
      },
      "-LdLvjsjW3CGLyxi3Qb2" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLvjsjW3CGLyxi3Qb2",
          "name" : "Meiyou",
          "text" : "111",
          "time" : 1559087715236
        }
      },
      "-LdLvzsimpPWmPNFJwdO" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1558531124536,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
          "name" : "test1",
          "text" : "よろしくお願いいたします。",
          "time" : 1558531057296
        }
      },
      "-LdLwA6JjJepFe9MTwD2" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLwA6JjJepFe9MTwD2",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087560837
        }
      },
      "-LdLwITanyNoAGvVvlCh" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087501320
        }
      },
      "-LdLwZEoLZc4i2v8T5QR" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087605357
        }
      },
      "-LedXZi8fzaKO45rL-Kv" : {
        "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
          "name" : "Meiyou",
          "text" : "1111",
          "time" : 1559087611933
        },
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1557649926601,
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
          "name" : "test1",
          "text" : "よろしくお願いいたします。",
          "time" : 1557649836830
        },
        "Vn8NjeM3yCh7vsK6mwhEdk9d1h73" : {
          "approvalAvatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "approvalName" : "tei952",
          "approvalStatus" : true,
          "approval_at" : 1557963962173,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "id" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
          "name" : "test1",
          "text" : "よろしくお願がいします",
          "time" : 1557963695975
        }
      }
    }
  },
  "knowledgecertificates" : {
    "data" : {
      "-LbW07Cj8C37LDyZeKHF" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecertificates%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF?alt=media&token=0a84788e-8a4f-4a7a-a83f-2bab43c82566",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
          "name" : "test1",
          "time" : 1556058992137
        },
        "Vn8NjeM3yCh7vsK6mwhEdk9d1h73" : {
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecertificates%2FVn8NjeM3yCh7vsK6mwhEdk9d1h73%2F-LbW07Cj8C37LDyZeKHF?alt=media&token=b444bde7-74d6-4d89-bdda-51039271784f",
          "id" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
          "name" : "test2",
          "time" : 1556060905896
        }
      },
      "-LbYZZXvYQxtpo2AWpzL" : {
        "-LctyLWU1ERkDV29z2rk" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "certificatePath" : "https://image.baidu.com/search/detail?ct=503316480&z=&tn=baiduimagedetail&ipn=d&word=%E5%AD%A6%E4%B9%A0%E8%AF%81%E6%98%8E%E4%B9%A6&step_word=&ie=utf-8&in=&cl=2&lm=-1&st=-1&hd=undefined&latest=undefined&copyright=undefined&cs=5659746,4131529913&os=2045183806,206696368&simid=3410681258,295304104&pn=2&rn=1&di=81730&ln=1642&fr=&fmq=1555750763902_R&ic=0&s=undefined&se=&sme=&tab=0&width=&height=&face=undefined&is=0,0&istype=2&ist=&jit=&bdtype=0&spn=0&pi=0&gsm=0&objurl=http%3A%2F%2Fimgsa.baidu.com%2Fexp%2Fw%3D500%2Fsign%3D9a7fec740a24ab18e016e13705fae69a%2F4b90f603738da977f10b8f79b351f8198618e3b8.jpg&rpstart=0&rpnum=0&adpicid=0&force=undefined",
          "id" : "-LctyLWU1ERkDV29z2rk",
          "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
          "name" : "test1",
          "time" : 1555750807868
        }
      },
      "-Ld495mtWIyObJzEEK7s" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
          "name" : "test1",
          "time" : 1558690523756
        }
      },
      "-LdLvzsimpPWmPNFJwdO" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
          "name" : "test1",
          "time" : 1558870263016
        }
      }
    }
  },
  "knowledgecomments" : {
    "data" : {
      "-LbW07Cj8C37LDyZeKHF" : {
        "contents" : {
          "-LcPpPauyQT7nMHxsSDI" : {
            "-LcxVmYndkXWm-77gAEA" : {
              "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
              "comment" : "ｃｃｃ",
              "contentid" : "-LcPpPauyQT7nMHxsSDI",
              "id" : "-LcxVmYndkXWm-77gAEA",
              "name" : "test2",
              "time" : 1555810167344
            },
            "-LdMchK9BuyD5k8KGL53" : {
              "comment" : "ddd",
              "contentid" : "-LcPpPauyQT7nMHxsSDI",
              "id" : "-LdMchK9BuyD5k8KGL53",
              "time" : 1556248450583
            },
            "-LdRL6pbWRNI1nmQABMV" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "请老师告诉我答案",
              "contentid" : "-LcPpPauyQT7nMHxsSDI",
              "id" : "-LdRL6pbWRNI1nmQABMV",
              "name" : "tei952",
              "time" : 1556327464435
            }
          },
          "-LcPtGVHXPZU2lKmAWBg" : {
            "-LcxYOh92HaZ7OhFDqD_" : {
              "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
              "comment" : "ｃｃｃ",
              "contentid" : "-LcPtGVHXPZU2lKmAWBg",
              "id" : "-LcxYOh92HaZ7OhFDqD_",
              "name" : "test2",
              "time" : 1555810851964
            },
            "-Ldv9-JFOVF5t8H0W3mc" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "",
              "contentid" : "-LcPtGVHXPZU2lKmAWBg",
              "id" : "-Ldv9-JFOVF5t8H0W3mc",
              "name" : "tei952",
              "time" : 1556844381819
            },
            "-Ldv9JYj9Yjt004w758w" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "你好！",
              "contentid" : "-LcPtGVHXPZU2lKmAWBg",
              "id" : "-Ldv9JYj9Yjt004w758w",
              "name" : "tei952",
              "time" : 1556844464712
            }
          },
          "-LcPuOOzxujK4Z-uAWMA" : {
            "-LcxYTmeA2BEr_x0WLQI" : {
              "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
              "comment" : "ｄｄｄ",
              "contentid" : "-LcPuOOzxujK4Z-uAWMA",
              "id" : "-LcxYTmeA2BEr_x0WLQI",
              "name" : "test2",
              "time" : 1555810872804
            }
          },
          "-LcPuq3uP8_kKl9Si9yX" : {
            "-LcxS6qcmuVQz0OZJPsw" : {
              "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
              "comment" : "ｓｓｓｓ",
              "contentid" : "-LcPuq3uP8_kKl9Si9yX",
              "id" : "-LcxS6qcmuVQz0OZJPsw",
              "name" : "test2",
              "time" : 1555809205965
            },
            "-LcxUU9sie73l12gKQt_" : {
              "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
              "comment" : "ｓｓｓ２",
              "contentid" : "-LcPuq3uP8_kKl9Si9yX",
              "id" : "-LcxUU9sie73l12gKQt_",
              "name" : "test2",
              "time" : 1555809825754
            }
          },
          "x02" : {
            "-LeqYCab4GKxe6txfX-A" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "评论测试20190514",
              "contentid" : "x02",
              "id" : "-LeqYCab4GKxe6txfX-A",
              "name" : "tei952",
              "time" : 1557840845561
            }
          },
          "x04" : {
            "-LfRcO6qWOrxc17How1r" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "测试",
              "contentid" : "x04",
              "id" : "-LfRcO6qWOrxc17How1r",
              "name" : "tei952",
              "time" : 1558479737557
            }
          }
        }
      },
      "-LbYZZXvYQxtpo2AWpzL" : {
        "contents" : {
          "-LcVaE3TSJd2ov2URtTG" : {
            "-Ld6NM34oRR_yPqyWhmU" : {
              "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
              "comment" : "没做完吧",
              "contentid" : "-LcVaE3TSJd2ov2URtTG",
              "id" : "-Ld6NM34oRR_yPqyWhmU",
              "name" : "test2",
              "time" : 1555975730873
            },
            "-Ld6NRqWGg-bFf6Ela0v" : {
              "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
              "comment" : "可以加新的吗？",
              "contentid" : "-LcVaE3TSJd2ov2URtTG",
              "id" : "-Ld6NRqWGg-bFf6Ela0v",
              "name" : "test2",
              "time" : 1555975753516
            },
            "-LdZRdOXR_eosBk5jm3Q" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "测试在评论时发消息通知",
              "contentid" : "-LcVaE3TSJd2ov2URtTG",
              "id" : "-LdZRdOXR_eosBk5jm3Q",
              "name" : "tei952",
              "time" : 1556463393491
            },
            "-LdZV1Iymxfm4YV1UQRy" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "ありがとうございました。",
              "contentid" : "-LcVaE3TSJd2ov2URtTG",
              "id" : "-LdZV1Iymxfm4YV1UQRy",
              "name" : "tei952",
              "time" : 1556464281580
            }
          },
          "-LdZOt-Zkrwc4mXRAKAo" : {
            "-Ldpr732CLcdK6ReeCqX" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "请告诉我答案",
              "contentid" : "-LdZOt-Zkrwc4mXRAKAo",
              "id" : "-Ldpr732CLcdK6ReeCqX",
              "name" : "tei952",
              "time" : 1556755546715
            }
          },
          "x17" : {
            "-LeqG8WaPiXTyiLNf4v_" : {
              "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
              "comment" : "测试20190514",
              "contentid" : "x17",
              "id" : "-LeqG8WaPiXTyiLNf4v_",
              "name" : "tei952",
              "time" : 1557836110128
            }
          }
        }
      }
    }
  },
  "knowledgecontents" : {
    "data" : {
      "-LbW07Cj8C37LDyZeKHF" : {
        "contents" : {
          "x01" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Angularへようこそ！ Angularは、Web、モバイル、またはデスクトップ用\nの最新のアプリケーションを構築するのに役立ちます。\nこのガイドでは、簡単なAngularアプリを構築して実行する方法を説明します。\n Angular CLIツールを使用して開発を加速し、すべてのAngularプロジェクト\n に役立つスタイルガイドの推奨事項を遵守します。\nこのガイドは30分以内に完了します。このガイドの最後には、最終的なコード\nレビューの一環として、最終的なアプリケーションコードのコピーをダウンロード\nするリンクがあります。 （このガイドのコマンドを実行しない場合でも、\n最終的なアプリケーションコードをダウンロードできます）。</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 Angularへようこそ",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 1,
            "content" : {
              "data" : "<pre><code>Angularには、Node.js バージョン8.xまたは10.xが必要です。\nバージョンをチェックするためには、node -v をターミナルあるいは\nコンソールで実行してください。\nNode.jsを手に入れるには、 nodejs.orgへ行きましょう。</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 Node.js",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Angular、Angular CLI、Angularアプリケーションは、npmパッケージとして\n利用可能なライブラリによって提供される機能に依存します。 npmパッケージ\nをダウンロードしてインストールするには、npmパッケージマネージャが必要です。\nこのクイックスタートでは、デフォルトで Node.js とともにインストールされる\nnpmクライアントコマンドラインインターフェースを使用します。\nnpmクライアントがインストールされていることを確認するには、ターミナルや\nコンソールでnpm -vを実行します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 npm パッケージマネージャー",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 1,
            "content" : {
              "data" : "<pre><code>インストール\nnpm install -g @angular/cli\nワークスペースと初期アプリケーションの作成\nng new my-app\nアプリケーションをサーブする\ncd my-app\nng serve --open\nng serve コマンドはサーバーを起動します。\nプロジェクトのファイル変更を監視して、変更があれば再度ビルドを行います。\n--open （または -o ）オプションはhttp://localhost:4200/ を自動的\nにブラウザで開きます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 Angular CLI",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>コンポーネントは、Angularアプリケーションの基本的なビルディング\nブロックです。彼らは、画面上にデータを表示し、ユーザーの入力を聞いて、\nその入力に基づいて行動を起こします。\n最初のアプリの一環として、CLIが最初のAngularコンポーネントを作成\nしました。これはルートコンポーネントであり、app-rootという名前です。\nsrc/app/app.component.ts\n@Component({\n  selector: &#39;app-root&#39;,\n  templateUrl: &#39;./app.component.html&#39;,\n  styleUrls: [&#39;./app.component.css&#39;]\n})\nexport class AppComponent {\n  title = &#39;My First Angular App!&#39;;\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 Angularコンポーネントを編集する",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ツアー・オブ・ヒーローズ チュートリアルはAngularの基礎をカバーしています。\n このチュートリアルでは人材派遣会社がヒーローの集合を管理するための\n アプリケーションを開発します。\nこの基本的なアプリケーションは、データ駆動型アプリケーションで期待される\n多くの機能を持っています。 ヒーローのリストを取得して表示し、選択した\nヒーローの詳細を編集し、ヒーローデータのさまざまなビュー間を遷移します。\nこのチュートリアルが終わるときには、あなたは次のことができるように\nなっています。\n要素を表示・隠蔽する、そしてヒーローデータのリストを表示するための\n組み込みAngularディレクティブを使う。\nヒーローの詳細やヒーローのリストを表示するためのAngularコンポーネント\nを作成する。\n読み取り専用データのための単方向データバインディングを使用する。\n双方向データバインディングを用いて、モデルを更新するための編集可能な\nフィールドを設置する。\nキー入力やクリックといったユーザーのイベントに対しコンポーネントがもつ\nメソッドをバインドする。\nユーザーがマスターリストからヒーローを選択し、詳細画面でそのヒーロー\nを編集できるようにする。\nパイプによりデータを整形する。\nヒーローを組み立てるための共有サービスを作成する。\nさまざまなビューとそれらのコンポーネント間を遷移可能にするために\nルーティングを使用する。\nAngularを始めるためにAngularのことを十分に学び、Angularは必要なことを\n何でもできるということを確信するでしょう。</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 チュートリアル: ツアー・オブ・ヒーローズ",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://angular.jp/generated/images/guide/toh/toh-anim.gif",
              "type" : "Picture"
            },
            "id" : "x07",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "6.4 アプリケーションでユーザーがアクションを取っている様子です。",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>まず、Angular CLIを使用して初期アプリケーションを作成します。このチュートリアル\nでは、スターターアプリケーションを修正して拡張し、Tour of Heroesアプリを作成します。\nチュートリアルのこの部分では、次のことを行います。\n1 環境を設定します。\n2 新しいワークスペースと初期アプリケーションプロジェクトを作成します。\n3 アプリケーションをサーブします。\n4 アプリケーションを変更します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "7.0 アプリケーションシェル",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>開発環境を設定するには、入門の次の手順に従います。\nng new angular-tour-of-heroes\ncd angular-tour-of-heroes\nng serve --open</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "8.0 環境を設定します",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\napp.component.ts (class title property)\n    import { Component } from &#39;@angular/core&#39;;</p>\n<pre><code>@Component({\nselector: &#39;app-root&#39;,\ntemplateUrl: &#39;./app.component.html&#39;,\nstyleUrls: [&#39;./app.component.css&#39;]\n})\nexport class AppComponent {\ntitle = &#39;Tour of Heroes&#39;;\n}\n</code></pre><p>app.component.html (template)<br>    <h1>{{title}}</h1>\nsrc/styles.css\n/<em> Application-wide Styles </em>/\nh1 {\n  color: #369;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 250%;\n}\nh2, h3 {\n  color: #444;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\nbody {\n  margin: 2em;\n}\nbody, input[type=&quot;text&quot;], button {\n  color: #888;\n  font-family: Cambria, Georgia;\n}\n/<em> everywhere else </em>/\n* {\n  font-family: Arial, Helvetica, sans-serif;\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "9.0 アプリケーションを変更する",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nng generate component heroes</p>\n<p>app/heroes/heroes.component.ts (初期バージョン)\n    import { Component, OnInit } from &#39;@angular/core&#39;;</p>\n<pre><code>    @Component({\n    selector: &#39;app-heroes&#39;,\n    templateUrl: &#39;./heroes.component.html&#39;,\n    styleUrls: [&#39;./heroes.component.css&#39;]\n    })\n    export class HeroesComponent implements OnInit {\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n}\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "10.0 heroes コンポーネントを作成する",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>heroes.component.ts (hero プロパティ)\n    hero = &#39;Windstorm&#39;;\nheroes.component.html    \n    {{hero}}</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "11.0 hero プロパティを追加する",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/app.component.html   \n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;app-heroes&gt;&lt;/app-heroes&gt;</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "12.0 HeroesComponent ビューを表示する",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsrc/app/hero.ts\n    export class Hero {\n    id: number;\n    name: string;\n    }\nsrc/app/heroes/heroes.component.ts\n    import { Component, OnInit } from &#39;@angular/core&#39;;\n    import { Hero } from &#39;../hero&#39;;</p>\n<pre><code>@Component({\nselector: &#39;app-heroes&#39;,\ntemplateUrl: &#39;./heroes.component.html&#39;,\nstyleUrls: [&#39;./heroes.component.css&#39;]\n})\nexport class HeroesComponent implements OnInit {\nhero: Hero = {\n    id: 1,\n    name: &#39;Windstorm&#39;\n};\n\nconstructor() { }\n\nngOnInit() {\n}\n\n}\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "13.0 Hero クラスを作成する",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>heroes.component.html (HeroesComponent のテンプレート)\n    &lt;h2&gt;{{hero.name}} Details&lt;/h2&gt;\n    &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n    &lt;div&gt;&lt;span&gt;name: &lt;/span&gt;{{hero.name}}&lt;/div&gt;</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "14.0 ヒーローオブジェクトを表示する",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "15.0 UppercasePipe で書式設定する",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "26.0 サービス",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Tour of Heroes の中で扱っている HeroesComponent は、今のところ仮\nのデータを取得して表示している状態です。\nこのチュートリアルのリファクタリング後には、HeroesComponent は小さく\nなりビューをサポートすることに専念します。 これはモックサービスを使用\nして、ユニットテストをより簡潔にすることにもつながります。</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "27.0 HeroService の作成",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nng generate service hero</p>\n<p>src/app/hero.service.ts (new service)\n    import { Injectable } from &#39;@angular/core&#39;;</p>\n<pre><code>@Injectable({\nprovidedIn: &#39;root&#39;,\n})\nexport class HeroService {\n\nconstructor() { }\n\n}\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "28.0 ヒーローデータの取得",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/hero.service.ts (Observable imports)\n    import { Observable, of } from &#39;rxjs&#39;;\n    getHeroes(): Observable&lt;Hero[]&gt; {\n        return of(HEROES);\n    }\nsrc/app/heroes/heroes.component.ts (import HeroService)\n    heroes: Hero[];\n    constructor(private heroService: HeroService) { }\n    getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n    }</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "29.0 MessagesComponent",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nng generate component messages</p>\n<p>/src/app/app.component.html\n    <h1>{{title}}</h1>\n    <app-heroes></app-heroes>\n    <app-messages></app-messages>\n/src/app/message.service.ts\n    import { Injectable } from &#39;@angular/core&#39;;</p>\n<pre><code>@Injectable({\nprovidedIn: &#39;root&#39;,\n})\nexport class MessageService {\nmessages: string[] = [];\n\nadd(message: string) {\n    this.messages.push(message);\n}\n\nclear() {\n    this.messages = [];\n}\n}\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "30.0 HeroService への注入",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>/src/app/hero.service.ts (import MessageService)\n    import { MessageService } from &#39;./message.service&#39;;\n    constructor(private messageService: MessageService) { }\n    getHeroes(): Observable&lt;Hero[]&gt; {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add(&#39;HeroService: fetched heroes&#39;);\n    return of(HEROES);\n    }</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "31.0 HeroService からのメッセージを表示する",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n/src/app/messages/messages.component.ts (import MessageService)\n    import { MessageService } from &#39;../message.service&#39;;\n    constructor(public messageService: MessageService) {}\nsrc/app/messages/messages.component.html\n    <div *ngIf=\"messageService.messages.length\"></p>\n<pre><code>&lt;h2&gt;Messages&lt;/h2&gt;\n&lt;button class=&quot;clear&quot;\n        (click)=&quot;messageService.clear()&quot;&gt;clear&lt;/button&gt;\n&lt;div *ngFor=&#39;let message of messageService.messages&#39;&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "32.0 ルーティング",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://angular.jp/generated/images/guide/toh/nav-diagram.png",
              "type" : "Picture"
            },
            "id" : "x29",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "32.4 ルーティング",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Tour of Heroes アプリケーションには新しい要求があります：\nダッシュボードビューを追加する。\nヒーローズビューとダッシュボードビューの間で行き来できる機能を追加する。\nユーザーが各ビューでヒーロー名をクリックしたとき、選択されたヒーローの詳細ビューを表示する。\nユーザーがEメール上でディープリンクをクリックしたとき、特定のヒーローの詳細ビューを開く。</code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "33.0 AppRoutingModuleを追加する",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nng generate module app-routing --flat --module=app</p>\n<p>src/app/app-routing.module.ts (generated)\n    import { NgModule } from &#39;@angular/core&#39;;\n    import { CommonModule } from &#39;@angular/common&#39;;</p>\n<pre><code>@NgModule({\nimports: [\n    CommonModule\n],\ndeclarations: []\n})\nexport class AppRoutingModule { }\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x31",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "34.0 ルートを追加する",
            "update_at" : 1556488166377
          },
          "x32" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsrc/app/app-routing.module.ts (v1)\n    import { HeroesComponent }      from &#39;./heroes/heroes.component&#39;;</p>\n<pre><code>const routes: Routes = [\n{ path: &#39;heroes&#39;, component: HeroesComponent }\n];\n</code></pre><p>src/app/app.component.html (router-outlet)\n    <h1>{{title}}</h1>\n    <nav>\n    <a routerLink=\"/heroes\">Heroes</a>\n    </nav>\n    <router-outlet></router-outlet>\n    <app-messages></app-messages>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x32",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "32",
            "time" : 1555228371611,
            "title" : "35.0 ダッシュボードビューを追加する",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code> \nng generate component dashboard</p>\n<p>src/app/dashboard/dashboard.component.html\n    <h3>Top Heroes</h3>\n    <div class=\"grid grid-pad\">\n    <a *ngFor=\"let hero of heroes\" class=\"col-1-4\">\n        <div class=\"module hero\">\n        <h4>{{hero.name}}</h4>\n        </div>\n    </a>\n    </div>\nsrc/app/dashboard/dashboard.component.ts\n    import { Component, OnInit } from &#39;@angular/core&#39;;\n    import { Hero } from &#39;../hero&#39;;\n    import { HeroService } from &#39;../hero.service&#39;;</p>\n<pre><code>@Component({\nselector: &#39;app-dashboard&#39;,\ntemplateUrl: &#39;./dashboard.component.html&#39;,\nstyleUrls: [ &#39;./dashboard.component.css&#39; ]\n})\nexport class DashboardComponent implements OnInit {\nheroes: Hero[] = [];\n\nconstructor(private heroService: HeroService) { }\n\nngOnInit() {\n    this.getHeroes();\n}\n\ngetHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n}\n}\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x33",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "36.0 ダッシュボードのルートを追加する",
            "update_at" : 1556488166377
          },
          "x34" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/app-routing.module.ts (import DashboardComponent)\n    import { DashboardComponent }   from &#39;./dashboard/dashboard.component&#39;;\n    { path: &#39;dashboard&#39;, component: DashboardComponent },\nsrc/app/app.component.html\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;nav&gt;\n    &lt;a routerLink=&quot;/dashboard&quot;&gt;Dashboard&lt;/a&gt;\n    &lt;a routerLink=&quot;/heroes&quot;&gt;Heroes&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n    &lt;app-messages&gt;&lt;/app-messages&gt;</code></pre>",
              "type" : "Html"
            },
            "id" : "x34",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "34",
            "time" : 1555228371611,
            "title" : "37.0 HTTPサービス",
            "update_at" : 1556488166377
          },
          "x35" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>このチュートリアルではAngularのHttpClientを使用して、次のデータ永続の\n機能を追加します。\nHeroServiceはHTTPリクエストを介してヒーローデータを取得します。\nユーザーはヒーロー情報を追加、編集、削除ができ、その変更をHTTPを通\nして保存することができます。\nユーザーは名前でヒーロー情報を検索できます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x35",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "35",
            "time" : 1555228371611,
            "title" : "38.0 サービス有効化",
            "update_at" : 1556488166377
          },
          "x36" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/app.module.ts (Http Client import)\n    import { HttpClientModule }    from &#39;@angular/common/http&#39;;\nデータサーバーをシミュレートする\n    npm install angular-in-memory-web-api --save\nsrc/app/app.module.ts (インメモリ Web API をインポート)\n    import { HttpClientInMemoryWebApiModule } from &#39;angular-in-memory-web-api&#39;;\n    import { InMemoryDataService }  from &#39;./in-memory-data.service&#39;;</code></pre>",
              "type" : "Html"
            },
            "id" : "x36",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "36",
            "time" : 1555228371611,
            "title" : "39.0 HTTPサービス",
            "update_at" : 1556488166377
          },
          "x37" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nng generate service InMemoryData</p>\n<p>src/app/in-memory-data.service.ts\n    import { InMemoryDbService } from &#39;angular-in-memory-web-api&#39;;\n    import { Hero } from &#39;./hero&#39;;\n    import { Injectable } from &#39;@angular/core&#39;;</p>\n<pre><code>@Injectable({\nprovidedIn: &#39;root&#39;,\n})\nexport class InMemoryDataService implements InMemoryDbService {\ncreateDb() {\n    const heroes = [\n    { id: 11, name: &#39;Mr. Nice&#39; },\n    { id: 12, name: &#39;Narco&#39; },\n    { id: 13, name: &#39;Bombasto&#39; },\n    { id: 14, name: &#39;Celeritas&#39; },\n    { id: 15, name: &#39;Magneta&#39; },\n    { id: 16, name: &#39;RubberMan&#39; },\n    { id: 17, name: &#39;Dynama&#39; },\n    { id: 18, name: &#39;Dr IQ&#39; },\n    { id: 19, name: &#39;Magma&#39; },\n    { id: 20, name: &#39;Tornado&#39; }\n    ];\n    return {heroes};\n}\n\n// Overrides the genId method to ensure that a hero always has an id.\n// If the heroes array is empty,\n// the method below returns the initial number (11).\n// if the heroes array is not empty, the method below returns the highest\n// hero id + 1.\ngenId(heroes: Hero[]): number {\n    return heroes.length &gt; 0 ? Math.max(...heroes.map(hero =&gt; hero.id)) + 1 : 11;\n}\n}\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x37",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "37",
            "time" : 1555228371611,
            "title" : "40.0 ヒーローとHTTP",
            "update_at" : 1556488166377
          },
          "x38" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/hero.service.ts (HTTPシンボルをインポート)\n    import { HttpClient, HttpHeaders } from &#39;@angular/common/http&#39;;\n    constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\nsrc/app/hero.service.ts (RxJSの&#39;of()&#39;を使ったgetHeroes)\n    private heroesUrl = &#39;api/heroes&#39;;  // Web APIのURL\n    /** サーバーからヒーローを取得する */\n    getHeroes (): Observable&lt;Hero[]&gt; {\n        return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n    }</code></pre>",
              "type" : "Html"
            },
            "id" : "x38",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "38",
            "time" : 1555228371611,
            "title" : "41.0 Observableに侵入link",
            "update_at" : 1556488166377
          },
          "x39" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/hero.service.ts (RxJSの&#39;of()&#39;を使ったgetHeroes)\n    /** サーバーからヒーローを取得する */\n    getHeroes (): Observable&lt;Hero[]&gt; {\n    return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n        .pipe(\n        tap(heroes =&gt; this.log(&#39;fetched heroes&#39;)),\n        catchError(this.handleError&lt;Hero[]&gt;(&#39;getHeroes&#39;, []))\n        );\n    }</code></pre>",
              "type" : "Html"
            },
            "id" : "x39",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "39",
            "time" : 1555228371611,
            "title" : "42.0 IDでヒーローを取得する",
            "update_at" : 1556488166377
          },
          "x40" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/hero.service.ts\n    /** IDによりヒーローを取得する。見つからなかった場合は404を返却する。 */\n    getHero(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&lt;Hero&gt;(url).pipe(\n        tap(_ =&gt; this.log(`fetched hero id=${id}`)),\n        catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n    );\n    }</code></pre>",
              "type" : "Html"
            },
            "id" : "x40",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "40",
            "time" : 1555228371611,
            "title" : "43.0 Angularアニメーション・イントロダクション",
            "update_at" : 1556488166377
          },
          "x41" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>アニメーションは動きの錯覚を提供します(時間の経過と共にHTML要素の\nスタイルが変化します)。うまく設計されたアニメーションは\nアプリケーションをより楽しく使いやすくすることができます。しかし、\nただの飾りではありません。アニメーションは、さまざまな方法でアプリ\n・ユーザー体験を向上させることができます:\nアニメーションがなければ、Webページの遷移は突然で不快感を与えるか\nもしれません。\nモーションはユーザー体験を大幅に向上させます。アニメーションは\nユーザーの操作に対するアプリケーションの応答を検出する機会を与えます。\nよいアニメーションは直感的にユーザーの注意を必要な場所に呼びよせます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x41",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "41",
            "time" : 1555228371611,
            "title" : "44.0 アニメーションモジュールを有効にする",
            "update_at" : 1556488166377
          },
          "x42" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsrc/app/app.module.ts\n    import { NgModule } from &#39;@angular/core&#39;;\n    import { BrowserModule } from &#39;@angular/platform-browser&#39;;\n    import { BrowserAnimationsModule } from &#39;@angular/platform-browser/animations&#39;;</p>\n<pre><code>@NgModule({\nimports: [\n    BrowserModule,\n    BrowserAnimationsModule\n],\ndeclarations: [ ],\nbootstrap: [ ]\n})\nexport class AppModule { }\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x42",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "42",
            "time" : 1555228371611,
            "title" : "45.0 コンポーネントファイル内にアニメーション関数をインポートする",
            "update_at" : 1556488166377
          },
          "x43" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/app.component.ts\n    import { Component, HostBinding } from &#39;@angular/core&#39;;\n    import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    // ...\n    } from &#39;@angular/animations&#39;;</code></pre>",
              "type" : "Html"
            },
            "id" : "x43",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "43",
            "time" : 1555228371611,
            "title" : "46.0 アニメーションメタデータプロパティを追加する",
            "update_at" : 1556488166377
          },
          "x44" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://angular.jp/generated/images/guide/animations/open-closed.png",
              "type" : "Picture"
            },
            "id" : "x44",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "44",
            "time" : 1555228371611,
            "title" : "46.4 シンプルな遷移アニメーション",
            "update_at" : 1556488166377
          },
          "x45" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>単一のHTML要素をある状態から別の状態に変更するシンプルな遷移\nをアニメーション化しましょう。たとえば、ユーザーの最後の操作\nから、ボタンがOpenまたはClosedのいずれかを表示するように指定\nできます。ボタンがopen状態では表示され黄色になり、closed状態\nになると透明で緑色になります。\nHTMLでは、これらの属性は色や不透明度などの通常のCSSスタイル\nを使用して設定されます。Angularでは、style()関数を使用して\n、アニメーションで使用する一連のCSSスタイルを指定します。\nアニメーションの状態に対して一連のスタイルをまとめて、その状\n態に対してopenやclosedなどの名前を付けることができます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x45",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "45",
            "time" : 1555228371611,
            "title" : "47.0 アニメーションの状態とスタイル",
            "update_at" : 1556488166377
          },
          "x46" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/open-close.component.ts\n    // ...\n    state(&#39;open&#39;, style({\n    height: &#39;200px&#39;,\n    opacity: 1,\n    backgroundColor: &#39;yellow&#39;\n    })),\nsrc/app/open-close.component.ts\n    state(&#39;closed&#39;, style({\n    height: &#39;100px&#39;,\n    opacity: 0.5,\n    backgroundColor: &#39;green&#39;\n    })),</code></pre>",
              "type" : "Html"
            },
            "id" : "x46",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "46",
            "time" : 1555228371611,
            "title" : "48.0 アニメーションの状態とスタイル",
            "update_at" : 1556488166377
          },
          "x47" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>src/app/open-close.component.ts\n    transition(&#39;open =&gt; closed&#39;, [\n        animate(&#39;1s&#39;)\n    ]),\nsrc/app/open-close.component.ts\n    transition(&#39;closed =&gt; open&#39;, [\n        animate(&#39;0.5s&#39;)\n    ]),</code></pre>",
              "type" : "Html"
            },
            "id" : "x47",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "47",
            "time" : 1555228371611,
            "title" : "49.0 Httpクライアントモジュール",
            "update_at" : 1556488166377
          },
          "x48" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>新しいHttpクライアントモジュールは@angular/common/httpとして、\nこれまでの@angular/httpとは別のモジュールとして提供されています。\n既存のHttpモジュールと新しいHttpクライアントモジュールでは基本的\nな使い方は似ていますが、一部互換性のない構文が含まれています。\nそのためいきなり@angular/httpを置き換えるのではなく別モジュール\nとすることで、徐々に移行できるようにしようという意図があるようです。</code></pre>",
              "type" : "Html"
            },
            "id" : "x48",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "48",
            "time" : 1555228371611,
            "title" : "50.0 Httpクライアントモジュールインストール",
            "update_at" : 1556488166377
          },
          "x49" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\napp.module.ts\n    import { NgModule } from &#39;@angular/core&#39;;\n    import { BrowserModule } from &#39;@angular/platform-browser&#39;;</p>\n<pre><code>// HttpClientModuleをインポート\nimport { HttpClientModule } from &#39;@angular/common/http&#39;;\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        // HttpClientModuleを追加\n        HttpClientModule,\n    ],\n})\nexport class AppModule {}\n</code></pre><p>sample.service.ts\n    import { Injectable } from &#39;@angular/core&#39;;\n    import { HttpClient } from &#39;@angular/common/http&#39;;</p>\n<pre><code>@Injectable()\nexport class SampleService {\n\n    // コンストラクタの引数に指定してDI\n    constructor(private http: HttpClient) {}\n}\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x49",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "49",
            "time" : 1555228371611,
            "title" : "51.0 JSON形式のパースがデフォルトに",
            "update_at" : 1556488166377
          },
          "x50" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>this.http.get(url).map(response =&gt; response.json()).subscribe(json =&gt; ...);\nhttp.get(url, { responseType: &#39;text&#39; })\n    // レスポンスはテキストとしてsubscribeに渡される\n    .subscribe(text =&gt; console.log(text));</code></pre>",
              "type" : "Html"
            },
            "id" : "x50",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "50",
            "time" : 1555228371611,
            "title" : "52.0 レスポンスの型指定",
            "update_at" : 1556488166377
          },
          "x51" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nJavaScriptとTypeScriptで全く同じコードなのにresponse.fooの呼び出しがエラー\nになってしまいました。これを回避するためには、interfaceを用いて内部のプロパティ\nを定義する必要があります。\nimport &#39;rxjs/add/operator/map&#39;;</p>\n<p>// プロパティ: fooを持つinterfaceを定義\ninterface FooResponse {\n    foo: string;\n}</p>\n<p>// パターン1：mapでキャスト\nthis.http.get(url)\n    // FooResponseにキャスト\n    .map(response =&gt; response as FooResponse)\n    .subscribe(response =&gt; {\n        console.log(response.foo);     // OK \n        console.log(response[&#39;foo&#39;]);  // OK\n    });</p>\n<p>// パターン2：subscribe内でキャスト\nthis.http.get(url)\n    .subscribe(response =&gt; {\n        const fooResponse = response as FooResponse;\n        console.log(fooResponse.foo);     // OK\n        console.log(fooResponse[&#39;foo&#39;]);  // OK\n    });\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x51",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "51",
            "time" : 1555228371611,
            "title" : "53.0 完全なレスポンスの取得",
            "update_at" : 1556488166377
          },
          "x52" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// プロパティ: fooを持つinterfaceを定義\ninterface FooResponse {\n    foo: string;\n}</p>\n<p>// getメソッドにobserveオプションを指定\nthis.http.get<FooResponse>(url, { observe: &#39;response&#39; })\n    .subscribe(response =&gt; {\n        // ヘッダ情報はresponse.headersに格納。getメソッドで取得。\n        console.log(response.headers.get(&#39;X-My-Header&#39;));</p>\n<pre><code>    // レスポンスボディはresponse.bodyに格納。型指定も有効。\n    console.log(response.body.foo);\n});\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x52",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "52",
            "time" : 1555228371611,
            "title" : "54.0 Interceptor",
            "update_at" : 1556488166377
          },
          "x53" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { Injectable } from &#39;@angular/core&#39;;\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from &#39;@angular/common/http&#39;;\nimport { Observable } from &#39;rxjs/Observable&#39;;</p>\n<p>@Injectable()\nexport class SimpleInterceptor implements HttpInterceptor {</p>\n<pre><code>// リクエストの変換処理。ここに共通処理を記述。\nintercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {\n    return next.handle(request);\n}\n</code></pre><p>}</p>\n<p>import { NgModule } from &#39;@angular/core&#39;;\nimport { HTTP_INTERCEPTORS } from &#39;@angular/common/http&#39;;\nimport { SimpleInterceptor } from &#39;./simple-interceptor.service&#39;;</p>\n<p>@NgModule({\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: SimpleInterceptor,\n            // 必須：HTTP_INTERCEPTORSが配列であることを示す\n            multi: true\n        }\n    ]\n})\nexport class AppModule {}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x53",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "53",
            "time" : 1555228371611,
            "title" : "55.0 リクエストの処理",
            "update_at" : 1556488166377
          },
          "x54" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// そのまま複製するサンプル\nintercept(request: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent<any>&gt; {\n    const req = request.clone();</p>\n<pre><code>return next.handle(req);\n</code></pre><p>}</p>\n<p>// fooの値を書き換える場合\nintercept(request: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent<any>&gt; {\n    const req = request.clone({ foo: &#39;Foo&#39; });</p>\n<pre><code>return next.handle(req);\n</code></pre><p>}</p>\n<p>// 複数の値も可\nintercept(request: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent<any>&gt; {\n    const req = request.clone({ foo: &#39;Foo&#39;, bar: &#39;Bar&#39; });</p>\n<pre><code>return next.handle(req);\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x54",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "54",
            "time" : 1555228371611,
            "title" : "56.0 レスポンスの処理",
            "update_at" : 1556488166377
          },
          "x55" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nintercept(request: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent<any>&gt; {\n    const storage = window.sessionStorage;</p>\n<pre><code>return next.handle(request)\n    .do(event =&gt; {\n        if (event instanceof HttpResponse) {\n            storage.setItem(&#39;cache&#39;, event.body);\n        }\n    });\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x55",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "55",
            "time" : 1555228371611,
            "title" : "57.0 Progress Events",
            "update_at" : 1556488166377
          },
          "x56" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { HttpEventType, HttpResponse, HttpEventType } from &#39;@angular/common/http&#39;;</p>\n<p>this.http.request(request).subscribe(event =&gt; {</p>\n<pre><code>if (event.type === HttpEventType.UploadProgress) {\n    // 進捗状況の出力\n    const percentDone = Math.round(100 * event.loaded / event.total);\n    console.log(`File is ${percentDone}% uploaded.`);\n} else if (event instanceof HttpResponse) {\n    // HttpResponseを取得した場合は処理完了\n    console.log(&#39;File is completely uploaded!&#39;);\n}\n</code></pre><p>});\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x56",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "56",
            "time" : 1555228371611,
            "title" : "58.0 XSRF対策",
            "update_at" : 1556488166377
          },
          "x57" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>上で紹介した Interceptor を利用した機能として、XSRF 対策がサポートされています。\nクッキーに XSRF-TOKEN が設定されている場合、その値をリクエストヘッダ X-XSRF-TOKEN \nに設定して通信します。\nこの Intercepter は、HttpClient を使用した通信のうち、\nリクエストメソッドが GET, HEAD 以外\nリクエスト先 URL が相対パス\nであるリクエストに適用されます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x57",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "57",
            "time" : 1555228371611,
            "title" : "59.0 Observable",
            "update_at" : 1556488166377
          },
          "x58" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Observableは、アプリケーションの中でパブリッシャーとサブスクライバー間でメッセージ\nを渡すためのサポートを提供します。Observableは、イベント処理、非同期プログラミング、\nおよび複数の値の処理のための他のテクニックよりも大きな利点を提供します。\nObservableは宣言的です—つまり、値を公開するための関数を定義しますが、コンシューマー\nがそれを購読するまでは実行されません。購読するコンシューマーは、機能が完了するまで、\nまたは購読を中止するまで通知を受け取ります。\nObservableは、文脈に応じて、任意の型—リテラル、メッセージ、またはイベントの複数の値\nを提供できます。受け取るためのAPIは値が同期的・非同期的に提供される場合も同じです。\n基本的なセットアップとティアダウンはObservableによって処理されるので、あなたの\nアプリケーションコードは値を消費するためにサブスクライブを行うことと、それが済んだら\n購読を中止することだけを心配する必要があります。ストリームがキー入力、HTTPレスポンス、\nインターバルタイマーのどれでも、値をリスニングしたり、リスニングを止めるためのインター\nフェースは同じです。\nこれらの利点のために、ObservableはAngular内で広く使用されており、アプリの開発にも推\n奨されています。</code></pre>",
              "type" : "Html"
            },
            "id" : "x58",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "58",
            "time" : 1555228371611,
            "title" : "60.0 ジオロケーションのアップデートを監視する",
            "update_at" : 1556488166377
          },
          "x59" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// Create an Observable that will start listening to geolocation updates\n// when a consumer subscribes.\nconst locations = new Observable((observer) =&gt; {\n  // Get the next and error callbacks. These will be passed in when\n  // the consumer subscribes.\n  const {next, error} = observer;\n  let watchId;</p>\n<p>  // Simple geolocation API check provides values to publish\n  if (&#39;geolocation&#39; in navigator) {\n    watchId = navigator.geolocation.watchPosition(next, error);\n  } else {\n    error(&#39;Geolocation not available&#39;);\n  }</p>\n<p>  // When the consumer unsubscribes, clean up data ready for next subscription.\n  return {unsubscribe() { navigator.geolocation.clearWatch(watchId); }};\n});</p>\n<p>// Call subscribe() to start listening for updates.\nconst locationsSubscription = locations.subscribe({\n  next(position) { console.log(&#39;Current Position: &#39;, position); },\n  error(msg) { console.log(&#39;Error Getting Location: &#39;, msg); }\n});</p>\n<p>// Stop listening for location after 10 seconds\nsetTimeout(() =&gt; { locationsSubscription.unsubscribe(); }, 10000);</p>\n<p>next\n必須です。個々の値が提供されたときのハンドラーです。実行が開始されてから0回以上呼び出されます。\nerror\nオプションです。エラー通知のハンドラーです。エラーはObservableインスタンスの実行を停止します。\ncomplete\nオプションです。実行完了通知のハンドラーです。遅延した値は、実行完了後もnextハンドラーに引き続き渡されます。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x59",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "59",
            "time" : 1555228371611,
            "title" : "61.0 サブスクライブ",
            "update_at" : 1556488166377
          },
          "x60" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSubscribe using observer\n    // Create simple observable that emits three values\n    const myObservable = of(1, 2, 3);</p>\n<pre><code>// Create observer object\nconst myObserver = {\nnext: x =&gt; console.log(&#39;Observer got a next value: &#39; + x),\nerror: err =&gt; console.error(&#39;Observer got an error: &#39; + err),\ncomplete: () =&gt; console.log(&#39;Observer got a complete notification&#39;),\n};\n\n// Execute with the observer object\nmyObservable.subscribe(myObserver);\n// Logs:\n// Observer got a next value: 1\n// Observer got a next value: 2\n// Observer got a next value: 3\n// Observer got a complete notification\n</code></pre><p>Subscribe with positional arguments\n    myObservable.subscribe(\n    x =&gt; console.log(&#39;Observer got a next value: &#39; + x),\n    err =&gt; console.error(&#39;Observer got an error: &#39; + err),\n    () =&gt; console.log(&#39;Observer got a complete notification&#39;)\n    );\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x60",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "60",
            "time" : 1555228371611,
            "title" : "62.0 Observableを作成する",
            "update_at" : 1556488166377
          },
          "x61" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nCreate observable with constructor\n    // This function runs when subscribe() is called\n    function sequenceSubscriber(observer) {\n    // synchronously deliver 1, 2, and 3, then complete\n    observer.next(1);\n    observer.next(2);\n    observer.next(3);\n    observer.complete();</p>\n<pre><code>// unsubscribe function doesn&#39;t need to do anything in this\n// because values are delivered synchronously\nreturn {unsubscribe() {}};\n}\n\n// Create a new Observable that will deliver the above sequence\nconst sequence = new Observable(sequenceSubscriber);\n\n// execute the Observable and print the result of each notification\nsequence.subscribe({\nnext(num) { console.log(num); },\ncomplete() { console.log(&#39;Finished sequence&#39;); }\n});\n\n// Logs:\n// 1\n// 2\n// 3\n// Finished sequence\n</code></pre><p>Create with custom fromEvent function\n    function fromEvent(target, eventName) {\n    return new Observable((observer) =&gt; {\n        const handler = (e) =&gt; observer.next(e);</p>\n<pre><code>    // Add the event handler to the target\n    target.addEventListener(eventName, handler);\n\n    return () =&gt; {\n    // Detach the event handler from the target\n    target.removeEventListener(eventName, handler);\n    };\n});\n}\n</code></pre><p>Use custom fromEvent function\n    const ESC_KEY = 27;\n    const nameInput = document.getElementById(&#39;name&#39;) as HTMLInputElement;</p>\n<pre><code>const subscription = fromEvent(nameInput, &#39;keydown&#39;)\n.subscribe((e: KeyboardEvent) =&gt; {\n    if (e.keyCode === ESC_KEY) {\n    nameInput.value = &#39;&#39;;\n    }\n});\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x61",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "61",
            "time" : 1555228371611,
            "title" : "63.0 マルチキャスト",
            "update_at" : 1556488166377
          },
          "x62" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>典型的なObservableは、サブスクライブしたオブザーバーごとに独立した新しい実行を作成します。\nオブザーバーが購読すると、Observableはイベントハンドラーをつなぎ、そのオブザーバーに値を\n渡します。2つ目のオブザーバーが加入すると、Observableは新しいイベントハンドラーをつなぎ、\n別の実行でその2つ目のオブザーバーに値を渡します。\n場合によっては、各サブスクライバーに対して独立した実行を開始するのではなく各サブスクリプ\nションが同じ値を取得するようにしたいことがあるでしょう—値の発行がすでに始まっていたとして\nも。これは、ドキュメントオブジェクトのクリックを監視するような場合に当てはまります。\nマルチキャスト は、1回の実行で複数のサブスクライバーにブロードキャストする方法です。マルチ\nキャスト\bをするObservable\bの場合、ドキュメントに複数のリスナーを登録するのではなく、最初\nのリスナーを再利用して値を各サブスクライバーに送信します。\nObservableを作成するときは、そのObservableをどのように使用するか、およびその値をマルチキ\nャストするかどうかを決定する必要があります。\n個々の数値が発信されてから1秒遅れ\bて、1から3までカウントする例を見てみましょう。</code></pre>",
              "type" : "Html"
            },
            "id" : "x62",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "62",
            "time" : 1555228371611,
            "title" : "64.0 Create a delayed sequence",
            "update_at" : 1556488166377
          },
          "x63" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nfunction sequenceSubscriber(observer) {\n  const seq = [1, 2, 3];\n  let timeoutId;</p>\n<p>  // Will run through an array of numbers, emitting one value\n  // per second until it gets to the end of the array.\n  function doSequence(arr, idx) {\n    timeoutId = setTimeout(() =&gt; {\n      observer.next(arr[idx]);\n      if (idx === arr.length - 1) {\n        observer.complete();\n      } else {\n        doSequence(arr, ++idx);\n      }\n    }, 1000);\n  }</p>\n<p>  doSequence(seq, 0);</p>\n<p>  // Unsubscribe should clear the timeout to stop execution\n  return {unsubscribe() {\n    clearTimeout(timeoutId);\n  }};\n}</p>\n<p>// Create a new Observable that will deliver the above sequence\nconst sequence = new Observable(sequenceSubscriber);</p>\n<p>sequence.subscribe({\n  next(num) { console.log(num); },\n  complete() { console.log(&#39;Finished sequence&#39;); }\n});</p>\n<p>// Logs:\n// (at 1 second): 1\n// (at 2 seconds): 2\n// (at 3 seconds): 3\n// (at 3 seconds): Finished sequence\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x63",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "63",
            "time" : 1555228371611,
            "title" : "65.0 Two subscriptions",
            "update_at" : 1556488166377
          },
          "x64" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// Subscribe starts the clock, and will emit after 1 second\nsequence.subscribe({\n  next(num) { console.log(&#39;1st subscribe: &#39; + num); },\n  complete() { console.log(&#39;1st sequence finished.&#39;); }\n});</p>\n<p>// After 1/2 second, subscribe again.\nsetTimeout(() =&gt; {\n  sequence.subscribe({\n    next(num) { console.log(&#39;2nd subscribe: &#39; + num); },\n    complete() { console.log(&#39;2nd sequence finished.&#39;); }\n  });\n}, 500);</p>\n<p>// Logs:\n// (at 1 second): 1st subscribe: 1\n// (at 1.5 seconds): 2nd subscribe: 1\n// (at 2 seconds): 1st subscribe: 2\n// (at 2.5 seconds): 2nd subscribe: 2\n// (at 3 seconds): 1st subscribe: 3\n// (at 3 seconds): 1st sequence finished\n// (at 3.5 seconds): 2nd subscribe: 3\n// (at 3.5 seconds): 2nd sequence finished\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x64",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "64",
            "time" : 1555228371611,
            "title" : "66.0 Create a multicast subscriber",
            "update_at" : 1556488166377
          },
          "x65" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nfunction multicastSequenceSubscriber() {\n  const seq = [1, 2, 3];\n  // Keep track of each observer (one for every active subscription)\n  const observers = [];\n  // Still a single timeoutId because there will only ever be one\n  // set of values being generated, multicasted to each subscriber\n  let timeoutId;</p>\n<p>  // Return the subscriber function (runs when subscribe()\n  // function is invoked)\n  return (observer) =&gt; {\n    observers.push(observer);\n    // When this is the first subscription, start the sequence\n    if (observers.length === 1) {\n      timeoutId = doSequence({\n        next(val) {\n          // Iterate through observers and notify all subscriptions\n          observers.forEach(obs =&gt; obs.next(val));\n        },\n        complete() {\n          // Notify all complete callbacks\n          observers.slice(0).forEach(obs =&gt; obs.complete());\n        }\n      }, seq, 0);\n    }</p>\n<pre><code>return {\n  unsubscribe() {\n    // Remove from the observers array so it&#39;s no longer notified\n    observers.splice(observers.indexOf(observer), 1);\n    // If there&#39;s no more listeners, do cleanup\n    if (observers.length === 0) {\n      clearTimeout(timeoutId);\n    }\n  }\n};\n</code></pre><p>  };\n}</p>\n<p>// Run through an array of numbers, emitting one value\n// per second until it gets to the end of the array.\nfunction doSequence(observer, arr, idx) {\n  return setTimeout(() =&gt; {\n    observer.next(arr[idx]);\n    if (idx === arr.length - 1) {\n      observer.complete();\n    } else {\n      doSequence(observer, arr, ++idx);\n    }\n  }, 1000);\n}</p>\n<p>// Create a new Observable that will deliver the above sequence\nconst multicastSequence = new Observable(multicastSequenceSubscriber());</p>\n<p>// Subscribe starts the clock, and begins to emit after 1 second\nmulticastSequence.subscribe({\n  next(num) { console.log(&#39;1st subscribe: &#39; + num); },\n  complete() { console.log(&#39;1st sequence finished.&#39;); }\n});</p>\n<p>// After 1 1/2 seconds, subscribe again (should &quot;miss&quot; the first value).\nsetTimeout(() =&gt; {\n  multicastSequence.subscribe({\n    next(num) { console.log(&#39;2nd subscribe: &#39; + num); },\n    complete() { console.log(&#39;2nd sequence finished.&#39;); }\n  });\n}, 1500);</p>\n<p>// Logs:\n// (at 1 second): 1st subscribe: 1\n// (at 2 seconds): 1st subscribe: 2\n// (at 2 seconds): 2nd subscribe: 2\n// (at 3 seconds): 1st subscribe: 3\n// (at 3 seconds): 1st sequence finished\n// (at 3 seconds): 2nd subscribe: 3\n// (at 3 seconds): 2nd sequence finished\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x65",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "65",
            "time" : 1555228371611,
            "title" : "67.0 RxJS ライブラリ",
            "update_at" : 1556488166377
          },
          "x66" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>RxJS は Observable 型の実装を提供します。Observable 型は、型が言語の\n一部となるまで、そしてブラウザがそれをサポートするまで必要です。ライブラリ\nはまたobservablesを作成して作業するためのユーティリティ関数を提供します。\nこれらのユーティリティ関数は、次の用途に使用できます。\n 非同期処理の既存のコードを observables に変換する\n ストリーム内の値を反復処理する\n 異なる型への値のマッピング\n ストリームのフィルタリング\n 複数のストリームの作成</code></pre>",
              "type" : "Html"
            },
            "id" : "x66",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "66",
            "time" : 1555228371611,
            "title" : "68.0 Observable 作成関数",
            "update_at" : 1556488166377
          },
          "x67" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npromise から observable を作成する\n    import { from } from &#39;rxjs&#39;;</p>\n<pre><code>// Create an Observable out of a promise\nconst data = from(fetch(&#39;/api/endpoint&#39;));\n// Subscribe to begin listening for async result\ndata.subscribe({\nnext(response) { console.log(response); },\nerror(err) { console.error(&#39;Error: &#39; + err); },\ncomplete() { console.log(&#39;Completed&#39;); }\n});\n</code></pre><p>カウンターから observable を\b作成する\n    import { interval } from &#39;rxjs&#39;;</p>\n<pre><code>// Create an Observable that will publish a value on an interval\nconst secondsCounter = interval(1000);\n// Subscribe to begin publishing values\nsecondsCounter.subscribe(n =&gt;\nconsole.log(`It&#39;s been ${n} seconds since subscribing!`));\n</code></pre><p>イベントから observable を作成する\n    import { fromEvent } from &#39;rxjs&#39;;</p>\n<pre><code>const el = document.getElementById(&#39;my-element&#39;);\n\n// Create an Observable that will publish mouse movements\nconst mouseMoves = fromEvent(el, &#39;mousemove&#39;);\n\n// Subscribe to start listening for mouse-move events\nconst subscription = mouseMoves.subscribe((evt: MouseEvent) =&gt; {\n// Log coords of mouse movements\nconsole.log(`Coords: ${evt.clientX} X ${evt.clientY}`);\n\n// When the mouse is over the upper-left of the screen,\n// unsubscribe to stop listening for mouse movements\nif (evt.clientX &lt; 40 &amp;&amp; evt.clientY &lt; 40) {\n    subscription.unsubscribe();\n}\n});\n</code></pre><p>AJAX リクエストから observable を作成する\n    import { ajax } from &#39;rxjs/ajax&#39;;</p>\n<pre><code>// Create an Observable that will create an AJAX request\nconst apiData = ajax(&#39;/api/data&#39;);\n// Subscribe to create the request\napiData.subscribe(res =&gt; console.log(res.status, res.response));\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x67",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "67",
            "time" : 1555228371611,
            "title" : "69.0 オペレーター",
            "update_at" : 1556488166377
          },
          "x68" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMap operator\n    import { map } from &#39;rxjs/operators&#39;;</p>\n<pre><code>const nums = of(1, 2, 3);\n\nconst squareValues = map((val: number) =&gt; val * val);\nconst squaredNums = squareValues(nums);\n\nsquaredNums.subscribe(x =&gt; console.log(x));\n\n// Logs\n// 1\n// 4\n// 9\n</code></pre><p>Standalone pipe function\n    import { filter, map } from &#39;rxjs/operators&#39;;</p>\n<pre><code>const nums = of(1, 2, 3, 4, 5);\n\n// Create a function that accepts an Observable.\nconst squareOddVals = pipe(\nfilter((n: number) =&gt; n % 2 !== 0),\nmap(n =&gt; n * n)\n);\n\n// Create an Observable that will run the filter and map functions\nconst squareOdd = squareOddVals(nums);\n\n// Suscribe to run the combined functions\nsquareOdd.subscribe(x =&gt; console.log(x));\n</code></pre><p>Observable.pipe function\n    import { filter, map } from &#39;rxjs/operators&#39;;</p>\n<pre><code>const squareOdd = of(1, 2, 3, 4, 5)\n.pipe(\n    filter(n =&gt; n % 2 !== 0),\n    map(n =&gt; n * n)\n);\n\n// Subscribe to get values\nsquareOdd.subscribe(x =&gt; console.log(x));\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x68",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "68",
            "time" : 1555228371611,
            "title" : "70.0 catchError オペレーター",
            "update_at" : 1556488166377
          },
          "x69" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { ajax } from &#39;rxjs/ajax&#39;;\nimport { map, catchError } from &#39;rxjs/operators&#39;;\n// Return &quot;response&quot; from the API. If an error happens,\n// return an empty array.\nconst apiData = ajax(&#39;/api/data&#39;).pipe(\n  map(res =&gt; {\n    if (!res.response) {\n      throw new Error(&#39;Value expected!&#39;);\n    }\n    return res.response;\n  }),\n  catchError(err =&gt; of([]))\n);</p>\n<p>apiData.subscribe({\n  next(x) { console.log(&#39;data: &#39;, x); },\n  error(err) { console.log(&#39;errors already caught... will not run&#39;); }\n});\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x69",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "69",
            "time" : 1555228371611,
            "title" : "71.0 失敗した observable の再実行",
            "update_at" : 1556488166377
          },
          "x70" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { ajax } from &#39;rxjs/ajax&#39;;\nimport { map, retry, catchError } from &#39;rxjs/operators&#39;;</p>\n<p>const apiData = ajax(&#39;/api/data&#39;).pipe(\n  retry(3), // Retry up to 3 times before failing\n  map(res =&gt; {\n    if (!res.response) {\n      throw new Error(&#39;Value expected!&#39;);\n    }\n    return res.response;\n  }),\n  catchError(err =&gt; of([]))\n);</p>\n<p>apiData.subscribe({\n  next(x) { console.log(&#39;data: &#39;, x); },\n  error(err) { console.log(&#39;errors already caught... will not run&#39;); }\n});\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x70",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "70",
            "time" : 1555228371611,
            "title" : "72.0 Naming observables",
            "update_at" : 1556488166377
          },
          "x71" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { Component } from &#39;@angular/core&#39;;\nimport { Observable } from &#39;rxjs&#39;;</p>\n<p>@Component({\n  selector: &#39;app-stopwatch&#39;,\n  templateUrl: &#39;./stopwatch.component.html&#39;\n})\nexport class StopwatchComponent {</p>\n<p>  stopwatchValue: number;\n  stopwatchValue$: Observable<number>;</p>\n<p>  start() {\n    this.stopwatchValue$.subscribe(num =&gt;\n      this.stopwatchValue = num\n    );\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x71",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "71",
            "time" : 1555228371611,
            "title" : "73.0 Angular での Observable",
            "update_at" : 1556488166377
          },
          "x72" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Angular はさまざまな一般的な非同期操作を処理するためのインターフェースとして \nObservable を使用します。たとえば：\nEventEmitter クラスは Observable を拡張しています。\nHTTP モジュールは Observable を使用して AJAX リクエストとレスポンスを処理\nします。\nRouter と Form モジュールは、ユーザー入力イベントを待ち受けてレスポンスする\nために Observable を使用します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x72",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "72",
            "time" : 1555228371611,
            "title" : "74.0 EventEmitter",
            "update_at" : 1556488166377
          },
          "x73" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n@Component({\n  selector: &#39;zippy&#39;,\n  template: <code>&lt;div class=&quot;zippy&quot;&gt;\n    &lt;div (click)=&quot;toggle()&quot;&gt;Toggle&lt;/div&gt;\n    &lt;div [hidden]=&quot;!visible&quot;&gt;\n      &lt;ng-content&gt;&lt;/ng-content&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;</code>})</p>\n<p>export class ZippyComponent {\n  visible = true;\n  @Output() open = new EventEmitter<any>();\n  @Output() close = new EventEmitter<any>();</p>\n<p>  toggle() {\n    this.visible = !this.visible;\n    if (this.visible) {\n      this.open.emit(null);\n    } else {\n      this.close.emit(null);\n    }\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x73",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "73",
            "time" : 1555228371611,
            "title" : "75.0 HTTP",
            "update_at" : 1556488166377
          },
          "x74" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ngularの HttpClient は、HTTPメソッド呼び出しからの Observable を返します。\nたとえば、http.get(‘/api’) は Observable オブジェクトを返します。これは、\nPromise ベースの HTTP API に勝るいくつかの利点を提供します。\nObservables はサーバーのレスポンスを変更しません(Promise で .then() の呼び\n出しによって発生する可能性があります)。代わりに、必要に応じて一連のオペレータ\nーを使用して値を変換することができます。\nHTTP リクエストは unsubscribe() メソッドで取り消すことができます。\nイベントの更新の進行状況を取得するようにリクエストを構成できます。\n失敗したリクエストは簡単に再試行できます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x74",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "74",
            "time" : 1555228371611,
            "title" : "76.0 非同期パイプの使用",
            "update_at" : 1556488166377
          },
          "x75" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>@Component({\n  selector: &#39;async-observable-pipe&#39;,\n  template: `&lt;div&gt;&lt;code&gt;observable|async&lt;/code&gt;:\n       Time: {{ time | async }}&lt;/div&gt;`\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable(observer =&gt;\n    setInterval(() =&gt; observer.next(new Date().toString()), 1000)\n  );\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x75",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "75",
            "time" : 1555228371611,
            "title" : "77.0 ルーターイベント",
            "update_at" : 1556488166377
          },
          "x76" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { Router, NavigationStart } from &#39;@angular/router&#39;;\nimport { filter } from &#39;rxjs/operators&#39;;</p>\n<p>@Component({\n  selector: &#39;app-routable&#39;,\n  templateUrl: &#39;./routable.component.html&#39;,\n  styleUrls: [&#39;./routable.component.css&#39;]\n})\nexport class Routable1Component implements OnInit {</p>\n<p>  navStart: Observable<NavigationStart>;</p>\n<p>  constructor(private router: Router) {\n    // Create a new Observable that publishes only the NavigationStart event\n    this.navStart = router.events.pipe(\n      filter(evt =&gt; evt instanceof NavigationStart)\n    ) as Observable<NavigationStart>;\n  }</p>\n<p>  ngOnInit() {\n    this.navStart.subscribe(evt =&gt; console.log(&#39;Navigation Started!&#39;));\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x76",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "76",
            "time" : 1555228371611,
            "title" : "78.0 ActivatedRoute",
            "update_at" : 1556488166377
          },
          "x77" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { ActivatedRoute } from &#39;@angular/router&#39;;</p>\n<p>@Component({\n  selector: &#39;app-routable&#39;,\n  templateUrl: &#39;./routable.component.html&#39;,\n  styleUrls: [&#39;./routable.component.css&#39;]\n})\nexport class Routable2Component implements OnInit {\n  constructor(private activatedRoute: ActivatedRoute) {}</p>\n<p>  ngOnInit() {\n    this.activatedRoute.url\n      .subscribe(url =&gt; console.log(&#39;The URL changed to: &#39; + url));\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x77",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "77",
            "time" : 1555228371611,
            "title" : "79.0 リアクティブフォーム",
            "update_at" : 1556488166377
          },
          "x78" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { FormGroup } from &#39;@angular/forms&#39;;</p>\n<p>@Component({\n  selector: &#39;my-component&#39;,\n  template: &#39;MyComponent Template&#39;\n})\nexport class MyComponent implements OnInit {\n  nameChangeLog: string[] = [];\n  heroForm: FormGroup;</p>\n<p>  ngOnInit() {\n    this.logNameChange();\n  }\n  logNameChange() {\n    const nameControl = this.heroForm.get(&#39;name&#39;);\n    nameControl.valueChanges.forEach(\n      (value: string) =&gt; this.nameChangeLog.push(value)\n    );\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x78",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "78",
            "time" : 1555228371611,
            "title" : "80.0 事前サジェスト",
            "update_at" : 1556488166377
          },
          "x79" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nimport { fromEvent } from &#39;rxjs&#39;;\nimport { ajax } from &#39;rxjs/ajax&#39;;\nimport { map, filter, debounceTime, distinctUntilChanged, switchMap } from &#39;rxjs/operators&#39;;</p>\n<p>const searchBox = document.getElementById(&#39;search-box&#39;);</p>\n<p>const typeahead = fromEvent(searchBox, &#39;input&#39;).pipe(\n  map((e: KeyboardEvent) =&gt; e.target.value),\n  filter(text =&gt; text.length &gt; 2),\n  debounceTime(10),\n  distinctUntilChanged(),\n  switchMap(() =&gt; ajax(&#39;/api/endpoint&#39;))\n);</p>\n<p>typeahead.subscribe(data =&gt; {\n // Handle the data from the API\n});\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x79",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "79",
            "time" : 1555228371611,
            "title" : "81.0 指数関数的バックオフ",
            "update_at" : 1556488166377
          },
          "x80" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHFx80?alt=media&token=2161c1ec-d5db-476f-814c-0526da29e7ff",
              "type" : "Certificate"
            },
            "id" : "x80",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "ord" : "80",
            "time" : 1555228371611,
            "title" : "82.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LbYZZXvYQxtpo2AWpzL" : {
        "contents" : {
          "x01" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>二進数　0011100\n八進数　034\n十六進数１C\n計算　&amp; | !\n文字コーディング：\nSHIFT－JIS\nUTF－８\nEUC\nBCD</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 数の進数",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>整数 bit byte short int long\n小数 single double\n文字ストリング string\nブーリアン boolean true false\n計算式 + - * /\n優先順位 * / + - ()</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 データタイプと計算式",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>配列 []\nリスト List\nセット DataSet\nキュー Queue\nハッシュテーブル Hashtable Map\nスタック Stack\nソート bubble sort, Hash sort\nツリー (Directory)</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 データ構造",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>順番 ; {}\n分岐 if else switch\nループ for foreach loop\nファイル read write text file csv tsv xml config</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 ブーリアン計算式、プログラム構造",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>class\ninterface\ninstance\nシングルトン\nFactory</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 クラスとデザインパタン",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>XP\nPMP\n開発管理\n工数 schecdule\nバッグ bugfree\nバージョン git svn team founder</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 開発プロセス",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>create table\nCRUD\ninsert\nupdate\ndelete\nselect</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 データベースのテーブル",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>left join\nright join\ninner join\nin\nexists</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 データベースのクエリ",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>funtion \nprocedure\npackage\ntrigger</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 データベースのプロシージャ",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>tranaction\nbegin trans\ncommit\nrollback\nindex</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 データベーストランザクションとチューニング",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>.net framework \nJava struts+spring+hibernet</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 フレームワーク",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>アプリケーション\nウェブプログラム\nアプリ\nサービス\nバッチ\nウェブサービス\nWCF</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 プログラム種類",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>詳細設計\nテスト仕様書\nスケジュール\n課題票\nバッグ票</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 プロジェクト演習のプロジェクト起動、各種類の管理書類",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Excel\nPDF\nPPT</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 プロジェクト演習のプログラムでOFFICE文書操作",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>データ暗号化\n復号化\nデータベース接続\nファイル操作（テクストファイル、バイナリファイル、XMLファイルなど）</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 プロジェクト演習共通部品",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>メール送信\nメディア接続\nFTPアクセス</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 プロジェクト演習のメール送信、メディア接続、FTPアクセス",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>システム配布\n自動更新\n多言語化</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 プロジェクト演習のシステム配布、自動更新、多言語化",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>WinService\nWebService\nWCF</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 プロジェクト演習のサービスアプリケーション開発",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>VS2017\nAndroid\nIOS</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 プロジェクト演習のAndroid、IOSなどクロスアプリ開発環境構築",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x20",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test1",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-Ld495mtWIyObJzEEK7s" : {
        "contents" : {
          "x01" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngit install\n<a href=\"https://qiita.com/toshi-click/items/dcf3dd48fdc74c91b409\">git install guid</a></p>\n<p>create local repository\ncd D:\\work\\wohapp\ngit init\ngit clone https://github.com/highwayns/wohApp.git\ngit remote add origin/master https://github.com/highwayns/wohApp.git</p>\n<p>update repository</p>\n<p>git reset --hard origin/master\ngit fetch\ngit pull</p>\n<p>commit modified\ngit add .\ngit commit -m &quot;XXX modified&quot;\ngit push</p>\n<p>コンフリクト解消\n<a href=\"https://qiita.com/yuya_presto/items/5d99499cf96c0ebb09f8\">コンフリクト解消ガイド</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 Git",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>[json-server](https://github.com/highwayns/json-server)\n[json.org](https://json.org/)\n[json-editor](https://github.com/jdorn/json-editor)</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 json",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>https://qiita.com/takeharu/items/809114f943208aaf55b3\nhttps://momentjs.com/\nhttps://underscorejs.org/\nhttps://qiita.com/tsukishimaao/items/39d22fd9178546d6cdeb\nhttps://wp-p.info/tpl_rep.php?cat=js-application&amp;fl=r9\nhttps://qiita.com/ichikawa_0829/items/85413fedc59822ccef75\nhttps://developer.mozilla.org/ja/docs/Web/API/Window/localStorage\n[js study guildline](https://github.com/highwayns/wohApp/blob/master/doc/js.md)</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 js",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>http://www.ituore.com/entry/html-css-basic\nhttps://www.webopixel.net/html-css/503.html\nhttps://qiita.com/ritukiii/items/67b3c50002b48c6186d6</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 html/css",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttps://qiita.com/taiponrock/items/9001ae194571feb63a5e\nhttps://nodejs.org/en/docs/</p>\n<p>npm install\nnpm start\nnpm run build</p>\n<p>https://dackdive.hateblo.jp/entry/2016/10/10/095800\nhttps://github.com/highwayns/esformatter</p>\n<p>npm install [-g] esformatter\nesformatter -i test.js</p>\n<p>webpack：\n【入门 Webpack，看这篇就够了 - 前端学习笔记 - SegmentFault 思否】\nhttps://segmentfault.com/a/1190000006178770\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 nodejs",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>http://docs.phonegap.com/</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 phonegap",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttps://algorithm.joho.info/programming/vs2017-visual-studio-tools-for-apache-cordova-install/\ndebug\nhttps://jp.vuejs.org/v2/cookbook/debugging-in-vscode.html</p>\n<p>install vue plugin &amp; Eslint plugin &amp; Debugger for Chrome\n    {\n      &quot;type&quot;: &quot;chrome&quot;,\n      &quot;request&quot;: &quot;launch&quot;,\n      &quot;name&quot;: &quot;vuejs: chrome&quot;,\n      &quot;url&quot;: &quot;http://localhost:8080&quot;,\n      &quot;webRoot&quot;: &quot;${workspaceFolder}/src&quot;,\n      &quot;breakOnLoad&quot;: true,\n      &quot;sourceMapPathOverrides&quot;: {\n        &quot;webpack:///./src/<em>&quot;: &quot;${webRoot}/</em>&quot;\n      }\n    }\nhttps://docs.microsoft.com/en-us/visualstudio/cross-platform/tools-for-cordova/debug-test/debug-using-visual-studio?view=toolsforcordova-2017\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 vs install cordova",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttps://firebase.google.com/docs/reference/js/firebase</p>\n<p>firebase tools:</p>\n<p>npm i firebase-tools\nnpm i -g firebase-tools\nfirebase login\nfirebase init\nfirebase use --add\nfirebase serve --only hosting\nfirebase deploy\nfirebase open hosting:site</p>\n<p>firebase auth:\nfirebase database:\nfirebase firestore:\nfirebase storage:\nfirebase hosting:\nfirebase mlkit:</p>\n<p>firebase performance monitor:</p>\n<p>アプリケーションにPerformance Monitoring SDKを追加する\n  （Optional）SDKを使用してアプリケーションのカスタムトレースとカウンタを定義する\n  Firebaseコンソールでのパフォーマンスデータの監視\nfirebase Crashlytics:\nfirebase Test Lab:</p>\n<p>firebase In-App messaging:\nfirebase Predictions:\nfirebase A/B Testing:\nfirebase Cloud messaging:\nfirebase Remote Config:\nfirebase Dynamic Links:\nfirebase App Index:\nfirebase invite:\nfirebase admob:</p>\n<p><a href=\"https://github.com/highwayns/wohApp/blob/master/doc/firebase.md\">Firebase study guildline</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 firebase",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttps://cordova.apache.org/docs/en/latest/</p>\n<p>npm install cordova -g\ncordova create wohapp com.highwayns.wohapp wohApp\ncordova requirements\ncordova platform add ios --save\ncordova plugin add cordova-plugin-whitelist cordova-plugin-statusbar cordova-plugin-camera cordova-plugin-geolocation cordova-plugin-file-transfer cordova-plugin-inappbrowser cordova-plugin-network-information\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 cordova",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttps://vuejs.org/v2/guide/\nhttps://vuex.vuejs.org/guide/\nhttps://jp.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html\nproject create:\nnpm install -g vue-cli\nvue init webpack test-vue</p>\n<p>project manager:\nnpm install --global @vue/cli\nvue ui</p>\n<p>online editor:\nhttps://github.com/highwayns/vuegg</p>\n<p><a href=\"https://github.com/highwayns/wohApp/blob/master/doc/vue.md\">Vue usage guildline</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 vue &amp; vuex &amp;axios",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttp://v2.framework7.io/vue/</p>\n<p>npm install framework7\nnpm install -g framework7-cli\nframework7 create\nframework7 create --ui\nframework7 create --ui --port 8080\nframework7 generate-assets\nframework7 generate-assets --ui\nframework7 cordova plugin add cordova-plugin-statusbar\nframework7 cordova plugin add cordova-plugin-splashscreen\nframework7 cordova build ios</p>\n<p><a href=\"https://github.com/highwayns/wohApp/blob/master/doc/framework7.md\">Framework7 study guildline</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 framework7",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttps://github.com/gulpjs/gulp/tree/master/docs</p>\n<p>npm install glup -g\ngulp Iconfont</p>\n<p>framework7-icons:\nhttps://github.com/framework7io/framework7-icons</p>\n<p>material-design-icons:\nhttps://github.com/google/material-design-icons\nhttps://icofont.com/icons\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 glup &amp; Iconfont",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>https://maketips.net/tip/223/how-to-include-jquery-into-vuejs</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 jQuery",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>https://github.com/FirebaseExtended/bolt/blob/master/docs/language.md\nnpm install --global firebase-bolt\nfirebase-bolt &lt; posts.bolt\n[Bolt study guildline](https://github.com/highwayns/wohApp/blob/master/doc/bolt.md)</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 firebasebot",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttps://firechat.firebaseapp.com/docs/\nAPI - Public Methods\nnew Firechat(ref, options)\nFirechat.setUser(userId, userName, onComplete)\nFirechat.resumeSession()\nFirechat.on(eventType, callback)\nFirechat.createRoom(roomName, roomType, callback(roomId))\nFirechat.enterRoom(roomId)\nFirechat.leaveRoom(roomId)\nFirechat.sendMessage(roomId, messageContent, messageType=&#39;default&#39;, callback)\nFirechat.toggleUserMute(userId, callback)\nFirechat.inviteUser(userId, roomId)\nFirechat.acceptInvite(inviteId, callback)\nFirechat.declineInvite(inviteId, callback)\nFirechat.getRoomList(callback)\nFirechat.getUsersByRoom(roomId, [limit=100], callback)\nFirechat.getUsersByPrefix(prefix, startAt, endAt, limit, callback)\nFirechat.getRoom(roomId, callback)\nFirechat.createPost(content, pic, callback)\nFirechat.addComment(postKey, comments, callback)\nFirechat.likePost(postKey, callback)\nFirechat.getPostList(callback)\nFirechat.removePost(postKey, callback)\nFirechat.getPostComments(postkey, callback)\nFirechat.removePostComment(postKey, commentKey, callback)\nFirechat.getPostLikes(postkey, callback)\nFirechat.unlikePost(postKey, likeKey, callback)\nFirechat.addContact(userid, name, header, location, callback)\nFirechat.removeContact(userkey, callback)\nFirechat.getContactList(callback)</p>\n<p>API - Exposed Bindings\nuser-update - Invoked when the user&#39;s metadata changes.\nroom-enter - Invoked when the user successfully enters a room.\nroom-exit - Invoked when the user exists a room.\nmessage-add - Invoked when a new message is received.\nmessage-remove - Invoked when a message is deleted.\nroom-invite - Invoked when a new room invite is received.\nroom-invite-response - Invoked when a response to a previous invite is received.</p>\n<p>Data Structure\nmoderators/ \n  <user-id> - A list of user ids and their moderator status. \n    true|false - A boolean value indicating the user&#39;s moderator status.\nroom-messages/ \n  <room-id> \n    <message-id> \n      userId - The id of the user that sent the message.\n      name - The name of the user that sent the message.\n      message - The content of the message.\n      timestamp - The time at which the message was sent.\nroom-metadata/ \n  <room-id> \n    createdAt - The time at which the room was created.\n    createdByUserId- The id of the user that created the room.\n    id - The id of the room.\n    name - The public display name of the room.\n    type - The type of room, public or private.\nroom-users/\nuser-names-online/\nusers/ \n  <user-id> \n    id - The id of the user.\n    name - The display name of the user.\n    invites - A list of invites the user has received.\n    muted - A list of user ids currently muted by the user.\n    rooms - A list of currently active rooms, used for sessioning.\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 firechat",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nJDKのインストール\nAndroid SDKのインストール</p>\n<p>export PATH=$HOME/Library/Android/sdk/platform-tools:$PATH\nexport PATH=$HOME/Library/Android/sdk/tools:$PATH</p>\n<p>cordova platform add android</p>\n<p>エミュレータでの検証:\nGenymotion.appを起動\nアプリケーション内で、VMをダウンロード (もしまだなければ)\nVMを起動\nCordovaから起動 \n$ cordova run android </p>\n<p>実機で検証:\nAndroid実機のUSBデバッグ機能をONに\nMacにAndroid実機をUSB接続 (USBケーブルが充電専用だとNGなので注意)\n次のコマンドで接続確認して、表示されればOK $ adb devices \nCordovaから起動 \n$ cordova run android \nビルドを待つ...\n実機でアプリが起動!\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 android",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Apple の開発者のダウンロードアップルの開発者として登録する必要があります。\n    $ npm install -g ios-sim\n    $ npm install -g ios-deploy\n    $ cordova run ios --device\n    $ cordova emulate ios</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 ios",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ncordova build windows -- --appx=8.1-phone\nTo deploy Windows package:\ncordova run windows -- --win  # explicitly specify Windows as deployment target\ncordova run windows # <code>run</code> uses Windows package by default</p>\n<p>To deploy Windows Phone package:\ncordova run windows -- --phone  # deploy app to Windows Phone 8.1 emulator\ncordova run windows --device -- --phone  # deploy app to connected device</p>\n<p>This command will give you the list of all available targets:\ncordova run windows --list\ncordova run windows --target=&quot;Emulator 8.1 720P 4.7 inch&quot; -- --phone\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 windows",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>一部Packageはpython2.7を使っている。\nhttps://www.python.jp/install/windows/install_py2.7.html</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 python2.7",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>https://github.com/highwayns/awesome-vue\nhttps://github.com/highwayns/vuejs-interview-questions\nhttps://github.com/highwayns/awesome-github-vue\nhttps://github.com/highwayns/vue2-elm\nhttps://github.com/useryangtao/vue-wechat</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 awaresome",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhttps://qiita.com/oret/items/8c9a216865b088c15d68\nhttps://jp.vuejs.org/v2/guide/unit-testing.html\nhttps://qiita.com/TsutomuNakamura/items/975329b61e5c8a375691\nhttps://qiita.com/chimame/items/e97883fd46b67529d59f</p>\n<p>npm install -g nodeunit\ntest folderにテストプログラムを作成する\nnodeunit test\n<a href=\"https://github.com/highwayns/wohApp/blob/master/doc/nodeunit.md\">Nodeunit usage guildline</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.0 unittest",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>[vuefire](https://github.com/highwayns/vuefire)\n[vue plugin](https://jp.vuejs.org/v2/guide/plugins.html)\n[VUEプラグインの使用](https://github.com/highwayns/wohApp/blob/master/doc/vueplugin.md)</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.0 vue plugin &amp; vuefire",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>https://github.com/ahmed-musallam/AtACE-AEM-Vue</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "23.0 vue on aem",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>[app-framework git](https://github.com/highwayns/app-framework)\n[app-framework guildline](https://github.com/highwayns/wohApp/blob/master/doc/appframework.md)\n[image-upload-component](https://github.com/highwayns/wohApp/blob/master/doc/image-upload-component.md)\n[sort-object](https://github.com/highwayns/wohApp/blob/master/doc/sort-object.md)\n[language-files](https://github.com/highwayns/wohApp/blob/master/doc/language-files.md)\n[Design your application](https://github.com/highwayns/wohApp/blob/master/doc/design.md)\n[Page components](https://github.com/highwayns/wohApp/blob/master/doc/page-components.md)\n[Routing](https://github.com/highwayns/wohApp/blob/master/doc/routing.md)\n[Global data object](https://github.com/highwayns/wohApp/blob/master/doc/data-object.md)\n[Icon fonts](https://github.com/highwayns/wohApp/blob/master/doc/icon-fonts.md)\n[Images](https://github.com/highwayns/wohApp/blob/master/doc/images.md)\n[Modules and Scripts](https://github.com/highwayns/wohApp/blob/master/doc/modules-and-scripts.md)\n[State restoration](https://github.com/highwayns/wohApp/blob/master/doc/state-restoration.md)</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "24.0 app-framework",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x25",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "25.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtODpcc-J83q1aU5f" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot を使って、サーバサイドから JSON を返却する方法を紹介します。\n次の URL にリクエストすると、\nhttp://localhost:8080/hello\n次のレスポンスを返す例を書いていきます。\n{&quot;message&quot;:&quot;Hello, World!&quot;}</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 JSONを返す",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>JDK 1.8 以上\nMaven 3.0 以上（or Gradle 等）</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 環境・ツール",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMaven の XML を作成します。アプリのルートディレクトリは gssb としています。\ngssb/pom.xml</p>\n<p><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion></p>\n<p>  <groupId>com.github.mamorum</groupId>\n  <artifactId>gssb</artifactId>\n  <version>1.0.0</version></p>\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.1.RELEASE</version>\n  </parent>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n  </dependencies>\n\n  <properties>\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n  </properties>\n\n<p>  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 ビルドファイルの作成",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/java/gssb/controller/HelloController.java\npackage gssb.controller;</p>\n<p>import java.util.Collections;\nimport java.util.Map;</p>\n<p>import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;</p>\n<p>@RestController  // JSON を返すコントローラに付与。\npublic class HelloController {</p>\n<p>  // リクエスト /hello に対して実行されるメソッド。\n  @RequestMapping(&quot;/hello&quot;)\n  public Map&lt;String, String&gt; hello() {\n    return Collections.singletonMap(&quot;message&quot;, &quot;Hello, World!&quot;);\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 コントローラの作成",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/java/gssb/App.java\npackage gssb;</p>\n<p>import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;</p>\n<p>@SpringBootApplication\npublic class App {\n  public static void main(String[] args) {\n    SpringApplication.run(App.class, args);\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 起動クラスの作成",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb &gt; mvn spring-boot:run\n（省略）\n・・・Started App in 3.865 seconds (JVM running for 8.989)</p>\n<p>http://localhost:8080/hello にアクセスして、冒頭の JSON が返ってくれば成功です。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot の Webアプリで、サーバサイドから静的コンテンツ\n（html, js, css, png, etc）を返却する方法を書いていきます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 静的コンテンツを返す",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/resources/public/index.html\n&lt;!DOCTYPE html&gt;</p>\n<html lang=\"ja\">\n<head>\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<title>Index Page</title>\n</head>\n<body>\n<p>Hello, World.</p>\n</body>\n</html>\n\n<p>静的コンテンツは、デフォルトだと src/main/resources/public\n（or src/main/resources/static）に置くと公開されます。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 HTML の作成",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb &gt; mvn spring-boot:run</p>\n<p>ブラウザで http://localhost:8080/index.html \nを開いて、次のように表示されれば成功です。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>静的コンテンツは、ディレクトリ階層を作って公開することもできます。\nsrc/main/resources/public/\n  - index.html\n  - css/\n    - style.css\n  - js/\n    - main.js\n上の例だと、ディレクトリ css, js の資源は、\nhttp://localhost:8080/css/style.css,\n http://localhost:8080/js/main.js で公開されます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 ディレクトリ階層とＵＲＬ",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/resources/public/jquery-ajax.html\n&lt;!DOCTYPE html&gt;</p>\n<p><html lang=\"ja\"></p>\n<p><head></p>\n<p><meta charset=\"utf-8\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"></p>\n<p><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></p>\n<p><title>Hello jQuery</title>\n</head></p>\n<p><body></p>\n<p><div>\n  <span class=\"label\">Message : </span>\n  <span class=\"message\"></span>\n</div>\n</body></p>\n<p><script src=\"https://code.jquery.com/jquery-1.12.1.min.js\"></script></p>\n<p><script type=\"text/javascript\">\n// JSON を取得して .message に表示。\n$(function() {\n  $.ajax({\n    url: &#39;/hello&#39;,\n    method: &#39;get&#39;,\n    cache: false\n  }).then(function(data) {\n    $(&#39;.message&#39;).text(data.message);\n  });\n});\n</script>\n</html>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 jQueryでJSONを受信",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb &gt; mvn spring-boot:run</p>\n<p>ブラウザで http://localhost:8080/jquery-ajax.html にアクセスして、\n次のように表示されれば成功です。\nMessage : Hello, World!\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot の Webアプリで、バリデーション（入力値検証）をする方法\nを書いていきます。バリデーションには、javax.validation や Hibernate \nValidator のアノテーションを使います。</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 バリデーションをする",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/java/gssb/controller/ValidationController.java\npackage gssb.controller;</p>\n<p>import javax.validation.Valid;\nimport javax.validation.constraints.Size;</p>\n<p>import org.hibernate.validator.constraints.NotEmpty;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;</p>\n<p>@RestController\npublic class ValidationController {</p>\n<p>  @RequestMapping(value=&quot;/address&quot;, method=RequestMethod.POST)\n  public Address create(@Valid @RequestBody Address address) {\n    return address;\n  }</p>\n<p>  public static class Address {</p>\n<pre><code>@NotEmpty\n@Size(min=7, max=7)\npublic String zip;\n\n@NotEmpty\npublic String address;\n</code></pre><p>  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 コントローラの作成",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb &gt; gradle bootRun</p>\n<p>正常系\n入力値（リクエストの JSON）に問題がない場合、コントローラは入力値をそのまま返します。\n確認コマンド（※ JSON 内のエスケープ文字「\\」は Windows で必要）\ncurl http://localhost:8080/address -H &quot;Content-Type: application/json&quot; -d &quot;{\\&quot;zip\\&quot;:\\&quot;1234567\\&quot;, \\&quot;address\\&quot;:\\&quot;Japan\\&quot;}&quot; -X POST\n結果\n{&quot;zip&quot;:&quot;1234567&quot;,&quot;address&quot;:&quot;Japan&quot;}</p>\n<p>バリデーションエラー\n「zip を 6桁」「address を空文字」にして、リクエストを送ってみます。\n確認コマンド（※ JSON 内のエスケープ文字「\\」は Windows で必要）\ncurl http://localhost:8080/address -H &quot;Content-Type: application/json&quot; -d &quot;{\\&quot;zip\\&quot;:\\&quot;123456\\&quot;, \\&quot;address\\&quot;:\\&quot;\\&quot;}&quot; -X POST\n結果\n{&quot;timestamp&quot;:1469434038414,&quot;status&quot;:400,&quot;error&quot;:&quot;Bad Request&quot;,&quot;exception&quot;:&quot;org.springframework.web.bind.MethodArgumentNotValidException&quot;,&quot;errors&quot;:[{&quot;codes&quot;:[&quot;NotEmpty.address.address&quot;,&quot;NotEmpty.address&quot;,&quot;NotEmpty&quot;],&quot;arguments&quot;:[{&quot;codes&quot;:[&quot;address.address&quot;,&quot;address&quot;],&quot;arguments&quot;:null,&quot;defaultMessage&quot;:&quot;address&quot;,&quot;code&quot;:&quot;address&quot;}],&quot;defaultMessage&quot;:&quot;may not be empty&quot;,&quot;objectName&quot;:&quot;address&quot;,&quot;field&quot;:&quot;address&quot;,&quot;rejectedValue&quot;:&quot;&quot;,&quot;bindingFailure&quot;:false,&quot;code&quot;:&quot;NotEmpty&quot;},{&quot;codes&quot;:[&quot;Size.address.zip&quot;,&quot;Size.zip&quot;,&quot;Size&quot;],&quot;arguments&quot;:[{&quot;codes&quot;:[&quot;address.zip&quot;,&quot;zip&quot;],&quot;arguments&quot;:null,&quot;defaultMessage&quot;:&quot;zip&quot;,&quot;code&quot;:&quot;zip&quot;},7,7],&quot;defaultMessage&quot;:&quot;size must be between 7 and 7&quot;,&quot;objectName&quot;:&quot;address&quot;,&quot;field&quot;:&quot;zip&quot;,&quot;rejectedValue&quot;:&quot;123456&quot;,&quot;bindingFailure&quot;:false,&quot;code&quot;:&quot;Size&quot;}],&quot;message&quot;:&quot;Validation failed for object=&#39;address&#39;. Errorcount: 2&quot;,&quot;path&quot;:&quot;/address&quot;}\n正常系とは違う JSON が返ってきました。よく見ると、エラーは２つ（Errorcount: 2）で、zip（size must be between 7 and 7）と address（may not be empty）\nのエラー情報が確認できます。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot の Webアプリで、テンプレートエンジンの Mustache を使う方法\nを書いてみようと思います。Mustache で HTML をレンダリングして、レスポンス\nとして返してみます。\npom.xml\n  &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-mustache&lt;/artifactId&gt;\n    &lt;/dependency&gt;</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 Mustacheを使う",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage gssb.controller;</p>\n<p>import java.util.Date;\nimport java.util.Map;</p>\n<p>import org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;</p>\n<p>@Controller\npublic class MstController {</p>\n<p>  @RequestMapping(&quot;/hello-mst&quot;)\n  public String hello(\n    @RequestParam(defaultValue=&quot;World&quot;) String name,\n    Map&lt;String, Object&gt; model\n  ) {\n    model.put(&quot;name&quot;, name);\n    model.put(&quot;date&quot;, new Date());\n    return &quot;hello-mst&quot;;\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 コントローラの作成",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/resources/templates/hello-mst.html\n&lt;!DOCTYPE html&gt;</p>\n<p><html lang=\"ja\"></p>\n<p><head></p>\n<p><meta charset=\"utf-8\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"></p>\n<p><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></p>\n<p><title>Hello Mustache</title>\n</head></p>\n<p><body></p>\n<p><div>\n  <p><b>Message:</b> Hello, {{name}}</p>\n  <p><b>Date:</b> {{date}}</p>\n</div>\n</body>\n</html>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 画面の作成",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb &gt; mvn spring-boot:run</p>\n<p>ブラウザで http://localhost:8080/hello-mst にアクセスすると、次のように表示されます。\nMessage: Hello, World</p>\n<p>Date: Fri Apr 07 14:11:33 JST 2017\nリクエストパラメータをつける http://localhost:8080/hello-mst?name=Tom と、\n次のように表示されます。\nMessage: Hello, Tom</p>\n<p>Date: Fri Apr 07 14:12:12 JST 2017\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/java/gssb/controller/FileUploadController.java</p>\n<p>package gssb.controller;</p>\n<p>import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;</p>\n<p>import javax.servlet.http.HttpServletResponse;</p>\n<p>import org.springframework.util.FileCopyUtils;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;</p>\n<p>@RestController\npublic class FileUploadController {</p>\n<p>  // 引数名 file は、ファイルのリクエストパラメータ名と一致させる。\n  @RequestMapping(value=&quot;/upload&quot;, method=RequestMethod.POST)\n  public void handle(\n    HttpServletResponse response,\n    @RequestParam MultipartFile file\n  ){\n    // ファイルが空の場合は HTTP 400 を返す。\n    if (file.isEmpty()) {\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n      return;\n    }\n    // アップロードされたファイルを保存。\n    try {\n      BufferedInputStream in =\n        new BufferedInputStream(file.getInputStream());\n      BufferedOutputStream out =\n        new BufferedOutputStream(\n          new FileOutputStream(file.getOriginalFilename()));\n      FileCopyUtils.copy(in, out);\n    } catch (IOException e) {\n      throw new RuntimeException(&quot;Error uploading file.&quot;, e);\n    }\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 ファイルアップロード",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/resources/public/file-upload.html</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<p><html lang=\"ja\"></p>\n<p><head></p>\n<p><meta charset=\"utf-8\"></p>\n<p><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"></p>\n<p><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></p>\n<p><title>File Upload</title>\n</head></p>\n<p><body></p>\n<p><div>\n  <form id=\"form\" enctype=\"multipart/form-data\">\n    <p><input type=\"file\" name=\"file\"></p>\n    <p><input type=\"button\" id=\"upload\" value=\"アップロード\"></p>\n  </form>\n  <span id=\"result\" style=\"padding:3px;\"></span>\n</div>\n</body></p>\n<p><script src=\"https://code.jquery.com/jquery-1.12.1.min.js\"></script></p>\n<p><script type=\"text/javascript\">\n$(function() {\n  // アップロードボタンが押されたら実行。\n  $(&#39;#upload&#39;).click(function() {\n    var formData = new FormData(\n      $(&#39;#form&#39;).get()[0]\n    );\n    $.ajax({\n      url:&#39;/upload&#39;,\n      method:&#39;post&#39;,\n      data:formData,\n      processData:false,\n      contentType:false,\n      cache: false\n    }).done(function(data, status, jqxhr) {\n      $(&#39;#result&#39;).text(&#39;結果：成功&#39;);\n    }).fail(function(data, status, jqxhr) {\n      $(&#39;#result&#39;).text(&#39;結果：失敗&#39;);\n    }); \n  });\n});\n</script>\n</html>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.0 画面の作成",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb &gt; mvn spring-boot:run</p>\n<p>ブラウザで http://localhost:8080/file-upload.html を開いてアップロードすると、\n下の画像のように「成功」と表示されます。ファイルは gssb ディレクトリの下に保存されます。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://cdn-ak.f.st-hatena.com/images/fotolife/m/mamorums/20160814/20160814222022.png",
              "type" : "Picture"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "22.4 確認画像",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot の Webアプリで、サービスクラスを使う方法を書きます。サービスクラスは\n「ドメイン駆動設計 - Wikipedia」に登場するオブジェクトで、なんらかの処理（機能）を実装するものです。</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "23.0 サービスクラスを使う",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/java/gssb/service/RandomNumberService.java</p>\n<p>package gssb.service;</p>\n<p>import org.springframework.stereotype.Service;</p>\n<p>@Service  // サービスクラスに付与。\npublic class RandomNumberService {</p>\n<p>  // 整数0-9の乱数を返却。\n  public int zeroToNine() {\n    return (int) (Math.random() * 10);\n  }\n}\n@Service が付いていると、アプリ起動時に SpringBoot（のコンテナ）が管理してくれます。\n管理されたオブジェクトは、他のオブジェクトに設定（DI：Dependency Injection）\nできたりします。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "24.0 サービスクラスの作成",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/java/gssb/service/RandomNumberService.java\npackage gssb.controller;</p>\n<p>import java.util.Collections;\nimport java.util.Map;</p>\n<p>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;</p>\n<p>import gssb.service.RandomNumberService;</p>\n<p>@RestController\npublic class RandomNumberController {</p>\n<p>  // サービスクラスがＤＩされる。\n  @Autowired RandomNumberService random;</p>\n<p>  // 乱数をレスポンスとして返却する。\n  @RequestMapping(&quot;/random&quot;)\n  public Map&lt;String, Integer&gt; random() {\n    int value = random.zeroToNine();\n    return Collections.singletonMap(&quot;value&quot;, value);\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "25.0 コントローラの作成",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb &gt; mvn spring-boot:run</p>\n<p>http://localhost:8080/random にアクセスして、次のような JSON が返ってくれば成功です。\n{&quot;value&quot;:0}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "26.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring の MessageSource を使うと、メッセージをプロパティファイルから簡単に取得できます。\nこれから、Spring Boot で MessageSource を使う手順を書いていこうと思います。</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "27.0 MessageSource を使う",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>次のように設定すると、メッセージを messages_ja.properties から取得できます（日本語環境でロケールが ja の場合）。\nspring.messages.basename=messages\nspring.messages.cache-seconds=-1\nspring.messages.encoding=UTF-8\napplication.properties は Spring Boot の設定ファイルで、クラスパス直下に置くと読み込んでくれます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "28.0 application.properties の設定",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ファイルを作成して、次のようにキーとメッセージを定義します。\nkey=こんにちは。\nmessages_ja.properties も、クラスパス直下に作成します。Gradle や Maven を使っている場合は、\nsrc/main/resources に用意すれば大丈夫です。\nあと、プロパティファイルは native2ascii しなくて大丈夫みたいです（Java SE 6 から。詳細は こちら。）。</code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "29.0 messages_ja.properties の作成",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nメッセージを取得したい Java クラスで、MessageSource をプロパティとして定義します。\nそして @Autowired を付けて、Spring Boot に設定（DI）してもらいます。\n@RestController\npublic class MsgController {</p>\n<pre><code>@Autowired MessageSource msg;\n\n// ・・・省略\n</code></pre><p>}\n※ MessageSource を使うクラスは、Spring Boot で管理されている必要があります。\n（@RestController, @Controller, @Service, @Component などが付いてれば大丈夫です。）\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "30.0 MessageSource を定義",
            "update_at" : 1556488166377
          },
          "x32" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>MessageSource のメソッド #getMessage を呼び出して、メッセージを取得します。\nString message = msg.getMessage(&quot;key&quot;, null, Locale.JAPAN);\nメソッドの第１引数はメッセージキー、第２引数は置換文字列（今回は指定なし）、\n第３引数はロケールを指定します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x32",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "32",
            "time" : 1555228371611,
            "title" : "31.0 メッセージの取得",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>上の例だと、ロケール（#getMessage の第３引数 Locale.JAPAN）が固定で、\n常に日本語のメッセージが取得されます。\n逆に、ローケルを可変にすれば、多言語に対応することができます。\nやり方は色々あると思いますが、コントローラはメソッド引数に Local を\n定義すると、Spring Boot が要求元のロケールを渡してくれるみたいです。\n@RequestMapping(value=&quot;/msg&quot;, method=RequestMethod.GET)\npublic Map&lt;String, String&gt; msg(Locale locale) {\n    String message = msg.getMessage(&quot;key&quot;, null, locale);\n    return Collections.singletonMap(&quot;message&quot;, message);\n}\nこのやり方だと、クライアントに応じてメッセージを可変にすることが\nできます。ロケールに対応するメッセージは、別のプロパティファイル\n（messages_en.properties など）で用意します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x33",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "32.0 国際化・多言語対応について",
            "update_at" : 1556488166377
          },
          "x34" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>lyway は、SQLベースのDBマイグレーションツールです。DBマイグレーションとは、\nDBのデータを残したまま、テーブル作成やカラム変更等をすることです。\nSpringBoot のアプリで Flyway を使うと、起動時にマイグレーション用のSQLが\n実行されるようになります。</code></pre>",
              "type" : "Html"
            },
            "id" : "x34",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "34",
            "time" : 1555228371611,
            "title" : "33.0 FlywayでDBマイグレーション",
            "update_at" : 1556488166377
          },
          "x35" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>JDK 1.8 以上\nMaven 3.0 以上（or Gradle 等）\nPostgreSQL（執筆時 9.6）</code></pre>",
              "type" : "Html"
            },
            "id" : "x35",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "35",
            "time" : 1555228371611,
            "title" : "34.0 環境・ツール",
            "update_at" : 1556488166377
          },
          "x36" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/pom.xml</p>\n<p><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion></p>\n<p>  <groupId>com.github.mamorum</groupId>\n  <artifactId>gssb-rdb</artifactId>\n  <version>1.0.0</version></p>\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.1.RELEASE</version>\n  </parent>\n\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.flywaydb</groupId>\n      <artifactId>flyway-core</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.postgresql</groupId>\n      <artifactId>postgresql</artifactId>\n    </dependency>\n  </dependencies>\n\n  <properties>\n    &lt;java.version&gt;1.8&lt;/java.version&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n  </properties>\n\n<p>  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x36",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "36",
            "time" : 1555228371611,
            "title" : "35.0 ビルドファイルの作成",
            "update_at" : 1556488166377
          },
          "x37" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/resources/db/migration/V1__Create.sql</p>\n<p>create table memo (\n  id serial primary key,\n  text varchar(255) not null,\n  version integer not null default 0,\n  updated_time timestamp not null default current_timestamp,\n  created_time timestamp not null default current_timestamp\n);\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x37",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "37",
            "time" : 1555228371611,
            "title" : "36.0 SQLファイルの作成",
            "update_at" : 1556488166377
          },
          "x38" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/resources/application.properties</p>\n<p>spring.datasource.url=jdbc:postgresql://localhost:5432/spring\nspring.datasource.username=spring\nspring.datasource.password=spring\nspring.datasource.driver-class-name=org.postgresql.Driver\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x38",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "38",
            "time" : 1555228371611,
            "title" : "37.0 設定ファイルの作成",
            "update_at" : 1556488166377
          },
          "x39" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/java/gssb/rdb/App.java</p>\n<p>package gssb.rdb;</p>\n<p>import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;</p>\n<p>@SpringBootApplication\npublic class App {\n  public static void main(String[] args) {\n    SpringApplication.run(App.class);\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x39",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "39",
            "time" : 1555228371611,
            "title" : "38.0 起動クラスの作成",
            "update_at" : 1556488166377
          },
          "x40" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb &gt; mvn spring-boot:run</p>\n<p>・・・Started Application in 4.525 seconds (JVM running for 5.188)</p>\n<p>spring=&gt; select relname as table_name from pg_stat_user_tables;</p>\n<h2 id=\"-table_name\">   table_name</h2>\n<p> memo\n schema_version</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x40",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "40",
            "time" : 1555228371611,
            "title" : "39.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x42" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SpringBoot の Webアプリで、JDBC 機能を使う方法を書いていきます。プログラム内に\n SQL（insert, select など）を書いてデータを操作します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x42",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "42",
            "time" : 1555228371611,
            "title" : "40.0 JDBCでデータアクセス",
            "update_at" : 1556488166377
          },
          "x43" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/java/gssb/rdb/controller/JdbcMemoController.java\npackage gssb.rdb.controller;</p>\n<p>import java.util.Collections;\nimport java.util.Map;</p>\n<p>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;</p>\n<p>@RestController\n@RequestMapping(path=&quot;/jdbc/memos&quot;)\npublic class JdbcMemoController {</p>\n<p>  @Autowired JdbcTemplate jdbc;</p>\n<p>  // リクエストパラメータ text を insert。\n  @RequestMapping(method=RequestMethod.POST)\n  public Map&lt;String, Long&gt; create(@RequestParam String text) {\n    Long id = jdbc.queryForObject(\n      &quot;insert into memo (text) values (?) returning id&quot;,\n      new Object[] {text},\n      (rs, num) -&gt; rs.getLong(&quot;id&quot;)\n    );\n    return Collections.singletonMap(&quot;id&quot;, id);\n  }</p>\n<p>  // リクエストＵＲＬ末尾のＩＤと等しいデータを select。\n  @RequestMapping(path=&quot;/{id}&quot;, method=RequestMethod.GET)\n  public Map&lt;String, Memo&gt; read(@PathVariable Long id) {\n    Memo memo = jdbc.queryForObject(\n      &quot;select id, text from memo where id = ?&quot;,\n      new Object[] {id},\n      (rs, num) -&gt; new Memo(rs.getLong(&quot;id&quot;), rs.getString(&quot;text&quot;))\n    );\n    return Collections.singletonMap(&quot;memo&quot;, memo);\n  }</p>\n<p>  // JDBC で操作するエンティティ。\n  public static class Memo {\n    public Long id;\n    public String name;\n    public Memo(Long id, String name) {\n      this.id = id;\n      this.name = name;\n    }\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x43",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "43",
            "time" : 1555228371611,
            "title" : "41.0 コントローラの作成",
            "update_at" : 1556488166377
          },
          "x44" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb &gt; mvn spring-boot:run</p>\n<p>メモの作成（insert）\ncurl http://localhost:8080/jdbc/memos -X POST -d &quot;text=Test&quot;</p>\n<p>メモの検索（select）\ncurl http://localhost:8080/jdbc/memos/1</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x44",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "44",
            "time" : 1555228371611,
            "title" : "42.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x45" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SpringBoot の Webアプリで、JPA を使う方法を書いていきます。\nJPA を使うと、SQL を書かずにデータを操作することができます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x45",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "45",
            "time" : 1555228371611,
            "title" : "43.0 JPAでデータアクセス",
            "update_at" : 1556488166377
          },
          "x46" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/java/gssb/rdb/model/Memo.java\npackage gssb.rdb.model;</p>\n<p>import javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Version;</p>\n<p>import org.hibernate.validator.constraints.NotEmpty;</p>\n<p>@Entity    // JPAエンティティに必要。\npublic class Memo extends TimestampEntity {</p>\n<p>  // データ型 serial（PostgreSQL）。\n  @Id @GeneratedValue(strategy=GenerationType.IDENTITY)\n  public long id;</p>\n<p>  @NotEmpty\n  public String text;</p>\n<p>  @Version\n  public long version;<br>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x46",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "46",
            "time" : 1555228371611,
            "title" : "44.0 ドメイン（エンティティ）の作成",
            "update_at" : 1556488166377
          },
          "x47" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/java/gssb/rdb/model/TimestampEntity.java\npackage gssb.rdb.model;</p>\n<p>import java.sql.Timestamp;\nimport java.util.Date;</p>\n<p>import javax.persistence.Column;\nimport javax.persistence.MappedSuperclass;\nimport javax.persistence.PrePersist;\nimport javax.persistence.PreUpdate;</p>\n<p>@MappedSuperclass    // JPAエンティティの親に必要。\npublic abstract class TimestampEntity {</p>\n<p>  public Timestamp updatedTime;</p>\n<p>  @Column(updatable=false)\n  public Timestamp createdTime;</p>\n<p>  @PrePersist\n  public void prePersist() {\n    Timestamp ts = new Timestamp((new Date()).getTime());\n    this.createdTime = ts;\n    this.updatedTime = ts;\n    }</p>\n<p>  @PreUpdate\n  public void preUpdate() {\n    this.updatedTime = new Timestamp((new Date()).getTime());\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x47",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "47",
            "time" : 1555228371611,
            "title" : "45.0 親クラス",
            "update_at" : 1556488166377
          },
          "x48" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/java/gssb/rdb/repository/MemoRepository.java\npackage gssb.rdb.repository;</p>\n<p>import org.springframework.data.repository.CrudRepository;</p>\n<p>import gssb.rdb.model.Memo;</p>\n<p>public interface MemoRepository extends CrudRepository&lt;Memo, Long&gt; {\n  // 引数の text に一致するエンティティを取得。\n  Iterable<Memo> findByText(String text);\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x48",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "48",
            "time" : 1555228371611,
            "title" : "46.0 リポジトリの作成",
            "update_at" : 1556488166377
          },
          "x49" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/java/gssb/rdb/controller/JpaMemoController.java\npackage gssb.rdb.controller;</p>\n<p>import java.util.Collections;\nimport java.util.Map;</p>\n<p>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;</p>\n<p>import gssb.rdb.model.Memo;\nimport gssb.rdb.repository.MemoRepository;</p>\n<p>@RestController\n@RequestMapping(path=&quot;/jpa/memos&quot;)\npublic class JpaMemoController {</p>\n<p>  @Autowired MemoRepository repository;</p>\n<p>  // リクエストの JSON を Memo にバインドして insert。\n  @RequestMapping(method=RequestMethod.POST)\n  public Map&lt;String, Memo&gt; create(@RequestBody Memo memo) {\n    Memo result = repository.save(memo);\n    return Collections.singletonMap(&quot;memo&quot;, result);\n  }</p>\n<p>  // リクエストパラメータ text の内容と等しいデータを select。\n  @RequestMapping(method=RequestMethod.GET)\n  public Map&lt;String, Iterable<Memo>&gt; read(@RequestParam String text) {\n    Iterable<Memo> result = repository.findByText(text);\n    return Collections.singletonMap(&quot;memos&quot;, result);\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x49",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "49",
            "time" : 1555228371611,
            "title" : "47.0 コントローラの作成",
            "update_at" : 1556488166377
          },
          "x50" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb &gt; mvn spring-boot:run</p>\n<p>メモの作成\n実行コマンド（※ JSON 内のエスケープ文字「\\」は Windows で必要）\ncurl -H &quot;Content-Type: application/json&quot; -d &quot;{\\&quot;text\\&quot;:\\&quot;Data\\&quot;}&quot; http://localhost:8080/jpa/memos -X POST\n実行結果\n{&quot;memo&quot;:{&quot;updatedTime&quot;:1464938295852,&quot;createdTime&quot;:1464938295852,&quot;id&quot;:3,&quot;text&quot;:&quot;Data&quot;,&quot;version&quot;:0}}</p>\n<p>メモの検索\n実行コマンド\ncurl http://localhost:8080/jpa/memos?text=Data\n実行結果\n{&quot;memos&quot;:[{&quot;updatedTime&quot;:1464938295852,&quot;createdTime&quot;:1464938295852,&quot;id&quot;:3,&quot;text&quot;:&quot;Data&quot;,&quot;version&quot;:0}]}</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x50",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "50",
            "time" : 1555228371611,
            "title" : "48.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x51" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot の Webアプリで、RDB のトランザクションを管理する方法を書きます。\nSpring Framework の アノテーション @Transactional を使って管理します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x51",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "51",
            "time" : 1555228371611,
            "title" : "49.0 トランザクションの管理",
            "update_at" : 1556488166377
          },
          "x52" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/java/gssb/rdb/controller/TxMemoController.java\npackage gssb.rdb.controller;</p>\n<p>import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;</p>\n<p>import gssb.rdb.model.Memo;\nimport gssb.rdb.repository.MemoRepository;</p>\n<p>@RestController\n@RequestMapping(path=&quot;/tx&quot;)\npublic class TxMemoController {</p>\n<p>  @Autowired MemoRepository repository;</p>\n<p>  // メモを１つ作成して、その後でエラーを発生させるメソッド\n  private void create(Memo memo) {\n    repository.save(memo);\n    repository.save(new Memo()); // text の NotEmpty でエラー。\n  }</p>\n<p>  // トランザクションを管理する。\n  @Transactional\n  @RequestMapping(path=&quot;/on/memos&quot;, method=RequestMethod.POST)\n  public void txOn(@RequestBody Memo memo) {\n    create(memo);\n  }</p>\n<p>  // トランザクションを管理しない。\n  @RequestMapping(path=&quot;/off/memos&quot;, method=RequestMethod.POST)\n  public void txOff(@RequestBody Memo memo) {\n    create(memo);\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x52",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "52",
            "time" : 1555228371611,
            "title" : "50.0 コントローラの作成",
            "update_at" : 1556488166377
          },
          "x53" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb &gt; mvn spring-boot:run</p>\n<p>動作確認には curl と psql を使います。事前に psql で Memo テーブルを空にしておきます。\n実行コマンド\nspring=&gt; delete from memo;</p>\n<p>トランザクション管理の確認\ncurl を使って、トランザクションを管理するメソッドを呼び出します。メモを１つ登録して、エラーが発生します。\n実行コマンド（※ JSON 内のエスケープ文字「\\」は Windows で必要）\ncurl -H &quot;Content-Type: application/json&quot; -d &quot;{\\&quot;text\\&quot;:\\&quot;Data\\&quot;}&quot; http://localhost:8080/tx/on/memos -X POST\n実行結果\n{&quot;timestamp&quot;:1465023216817,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;javax.validation....\nトランザクションがロールバックされるので、メモは１つも登録されていないはずです。psql で確認します。</p>\n<p>実行コマンド\nspring=&gt; select * from memo;\n実行結果\n id | text | version | updated_time | created_time\n----+------+---------+--------------+--------------\n(0 行)\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x53",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "53",
            "time" : 1555228371611,
            "title" : "51.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x54" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot の Webアプリで、mockito を使って単体テストをする方法を書きます。\n今回は、リポジトリクラスのモックを用意して、DB にアクセスせずにテストしてみます</code></pre>",
              "type" : "Html"
            },
            "id" : "x54",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "54",
            "time" : 1555228371611,
            "title" : "52.0 mockitoで単体テスト",
            "update_at" : 1556488166377
          },
          "x55" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/main/java/gssb/rdb/controller/JpaMemoController.java\n@RestController\n@RequestMapping(path=&quot;/jpa/memos&quot;)\npublic class JpaMemoController {</p>\n<p>  @Autowired MemoRepository repository;</p>\n<p>  // リクエストの JSON を Memo にバインドして insert。\n  @RequestMapping(method=RequestMethod.POST)\n  public Map&lt;String, Memo&gt; create(@RequestBody Memo memo) {\n    Memo result = repository.save(memo);\n    return Collections.singletonMap(&quot;memo&quot;, result);\n  }\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x55",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "55",
            "time" : 1555228371611,
            "title" : "53.0 テスト対象コントローラ",
            "update_at" : 1556488166377
          },
          "x56" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>pom.xml\n &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n      &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n追加すると、Spring Test, JUnit, AssertJ, Mockito 等が使えるようになります。\n詳細は「Test scope dependencies - Spring Boot Reference」に記載されています。</code></pre>",
              "type" : "Html"
            },
            "id" : "x56",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "56",
            "time" : 1555228371611,
            "title" : "54.0 ビルドファイルの編集",
            "update_at" : 1556488166377
          },
          "x57" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb-rdb/src/test/java/gssb/rdb/controller/JpaMemoControllerTest.java\npackage gssb.rdb.controller;</p>\n<p>import static org.assertj.core.api.Assertions.<em>;\nimport static org.mockito.Mockito.</em>;\nimport java.util.Map;\nimport org.junit.Test;\nimport gssb.rdb.model.Memo;\nimport gssb.rdb.repository.MemoRepository;</p>\n<p>public class JpaMemoControllerTest {</p>\n<p>  @Test public void testCreate() {</p>\n<pre><code>// 準備：テストデータ\nMemo memo = new Memo();\nmemo.text = &quot;テスト&quot;;\n\n// 準備：リポジトリのモック（戻り値を設定）\nMemoRepository repo = mock(MemoRepository.class);\nwhen(repo.save(memo)).thenReturn(memo);\n\n// 準備：テスト対象（リポジトリのモックを設定）\nJpaMemoController controller = new JpaMemoController();\ncontroller.repository = repo;\n\n// 実行\nMap&lt;String, Memo&gt; result = controller.create(memo);\n\n// 検証\nassertThat(result.get(&quot;memo&quot;).text).isEqualTo(&quot;テスト&quot;);\n</code></pre><p>  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x57",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "57",
            "time" : 1555228371611,
            "title" : "55.0 テストクラスの作成",
            "update_at" : 1556488166377
          },
          "x58" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Eclipse の場合、テストクラスをエディタで開いて「実行（JUnit テストとして実行）」\nします。下のように、Maven コマンドでも実行できます。\ngssb-rdb &gt; mvn test</code></pre>",
              "type" : "Html"
            },
            "id" : "x58",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "58",
            "time" : 1555228371611,
            "title" : "56.0 テスト実行",
            "update_at" : 1556488166377
          },
          "x59" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSpring Boot の Webアプリを、jar 形式でパッケージングして起動する方法を書きます。</p>\n<p>Maven の package タスクで作成します。\ngssb &gt; mvn package\njar は、target 配下に出力されます。</p>\n<p>次のコマンドで起動します。\ngssb &gt; java -jar target\\gssb-1.0.0.jar\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x59",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "59",
            "time" : 1555228371611,
            "title" : "57.0 アプリのjar作成",
            "update_at" : 1556488166377
          },
          "x60" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot のスケジューリング機能を使って、一定間隔で処理を実行する方法を書きます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x60",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "60",
            "time" : 1555228371611,
            "title" : "58.0 タスクのスケジューリング",
            "update_at" : 1556488166377
          },
          "x61" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngssb/src/main/java/gssb/App.java\npackage gssb;</p>\n<p>import java.text.SimpleDateFormat;\nimport java.util.Date;</p>\n<p>import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.scheduling.annotation.Scheduled;</p>\n<p>@SpringBootApplication\n@EnableScheduling\npublic class App {</p>\n<p>  private static final SimpleDateFormat\n    fmt = new SimpleDateFormat(&quot;HH:mm:ss&quot;);</p>\n<p>  // 5秒ごとに実行されるメソッド。\n  @Scheduled(fixedRate = 5000)\n  public void reportTime() {\n    System.out.println(fmt.format(new Date()));\n  }</p>\n<p>  public static void main(String[] args) {\n    SpringApplication.run(App.class, args);\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x61",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "61",
            "time" : 1555228371611,
            "title" : "59.0 タスクの作成・有効化",
            "update_at" : 1556488166377
          },
          "x62" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>次のコマンドでアプリを起動します。\ngssb &gt; gradle bootRun\n（省略）\n・・・Started Application in 4.525 seconds (JVM running for 5.188)\n17:22:41\n17:22:46\n17:22:51\n（省略）\n５秒ごとに時刻が表示されます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x62",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "62",
            "time" : 1555228371611,
            "title" : "60.0 起動・確認",
            "update_at" : 1556488166377
          },
          "x63" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Boot の Webアプリを、HTTP経由で管理したり、モニタリングする方法を書きます。\n今回は、Spring Boot の Actuator という機能を使います。</code></pre>",
              "type" : "Html"
            },
            "id" : "x63",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "63",
            "time" : 1555228371611,
            "title" : "61.0 アプリの管理やモニタリング",
            "update_at" : 1556488166377
          },
          "x64" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npom.xml</p>\n<p> <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x64",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "64",
            "time" : 1555228371611,
            "title" : "62.0  ビルドファイルの編集",
            "update_at" : 1556488166377
          },
          "x65" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n次のコマンドでアプリを起動します。\ngssb &gt; mvn spring-boot:run</p>\n<p>http://localhost:8080/health にアクセスすると、システムの状態を受け取ることができます。\n{&quot;status&quot;:&quot;UP&quot;}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x65",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "65",
            "time" : 1555228371611,
            "title" : "63.0 起動と確認",
            "update_at" : 1556488166377
          },
          "x66" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x66",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "tei952",
            "ord" : "66",
            "time" : 1555228371611,
            "title" : "64.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_3" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n&lt;!DOCTYPE html&gt;</p>\n<p><html>\n  <head>\n    <!-- Required meta tags-->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui, viewport-fit=cover\">\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <!-- Color theme for statusbar -->\n    <meta name=\"theme-color\" content=\"#2196f3\">\n    <!-- Your app title -->\n    <title>My App</title>\n    <!-- Path to Framework7 Library CSS -->\n    <link rel=\"stylesheet\" href=\"path/to/framework7.min.css\">\n    <!-- Path to your custom app styles-->\n    <link rel=\"stylesheet\" href=\"path/to/my-app.css\">\n  </head>\n  <body>\n    <!-- App root element -->\n    <div id=\"app\">\n      <!-- Statusbar overlay -->\n      <div class=\"statusbar\"></div></p>\n<pre><code>  &lt;!-- Your main view, should have &quot;view-main&quot; class --&gt;\n  &lt;div class=&quot;view view-main&quot;&gt;\n    &lt;!-- Initial Page, &quot;data-name&quot; contains page name --&gt;\n    &lt;div data-name=&quot;home&quot; class=&quot;page&quot;&gt;\n\n      &lt;!-- Top Navbar --&gt;\n      &lt;div class=&quot;navbar&quot;&gt;\n        &lt;div class=&quot;navbar-inner&quot;&gt;\n          &lt;div class=&quot;title&quot;&gt;Awesome App&lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;!-- Toolbar --&gt;\n      &lt;div class=&quot;toolbar&quot;&gt;\n        &lt;div class=&quot;toolbar-inner&quot;&gt;\n          &lt;!-- Toolbar links --&gt;\n          &lt;a href=&quot;#&quot; class=&quot;link&quot;&gt;Link 1&lt;/a&gt;\n          &lt;a href=&quot;#&quot; class=&quot;link&quot;&gt;Link 2&lt;/a&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;!-- Scrollable page content --&gt;\n      &lt;div class=&quot;page-content&quot;&gt;\n        &lt;p&gt;Page content goes here&lt;/p&gt;\n        &lt;!-- Link to another page --&gt;\n        &lt;a href=&quot;/about/&quot;&gt;About app&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- Path to Framework7 Library JS--&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;path/to/framework7.min.js&quot;&gt;&lt;/script&gt;\n&lt;!-- Path to your app js--&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;path/to/my-app.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>  </body>\n</html>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 App HTML Layout",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>var app = new Framework7({\n  // App root element\n  root: &#39;#app&#39;,\n  // App Name\n  name: &#39;My App&#39;,\n  // App id\n  id: &#39;com.myapp.test&#39;,\n  // Enable swipe panel\n  panel: {\n    swipe: &#39;left&#39;,\n  },\n  // Add default routes\n  routes: [\n    {\n      path: &#39;/about/&#39;,\n      url: &#39;about.html&#39;,\n    },\n  ],\n  // ... other parameters\n});</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 Initialize App:my-app.js",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nvar app = new Framework7({\n  ...\n  on: {\n    // each object key means same name event handler\n    pageInit: function (page) {\n      // do something on page init\n    },\n    popupOpen: function (popup) {\n      // do something on popup open\n    },\n  },\n});</p>\n<p>var popup = app.popup.create({\n  ...\n  on: {\n    open: function (popup) {\n      // do something on popup open\n    }\n  }\n})\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 event:",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>var app = new Framework7({\n  routes: [\n    {\n      name: &#39;about&#39;,\n      path: &#39;/about/&#39;,\n      url: &#39;./pages/about.html&#39;,\n    },\n    {\n      name: &#39;news&#39;,\n      path: &#39;/news/&#39;,\n      url: &#39;./pages/news.html&#39;,\n      options: {\n        animate: false,\n      },\n    },\n    {\n      name: &#39;users&#39;,\n      path: &#39;/users/&#39;,\n      templateUrl: &#39;./pages/users.html&#39;,\n      options: {\n        context: {\n          users: [&#39;John Doe&#39;, &#39;Vladimir Kharlampidi&#39;, &#39;Timo Ernst&#39;],\n        },\n      },\n      on: {\n        pageAfterIn: function (e, page) {\n          // do something after page gets into the view\n        },\n        pageInit: function (e, page) {\n          // do something when page initialized\n        },\n      }\n    },\n    // Default route, match to all pages (e.g. 404 page)\n    {\n      path: &#39;(.*)&#39;,\n      url: &#39;./pages/404.html&#39;,\n    },\n  ],\n});</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 routers",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>routes = [\n  // ...\n  {\n    path: &#39;/some-page/&#39;,\n    // Component Object\n    component: {\n      template: `\n        &lt;div class=&quot;page&quot;&gt;\n          &lt;div class=&quot;navbar&quot;&gt;\n            &lt;div class=&quot;navbar-inner&quot;&gt;\n              &lt;div class=&quot;title&quot;&gt;{{title}}&lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div class=&quot;page-content&quot;&gt;\n            &lt;a @click=&quot;openAlert&quot; class=&quot;red-link&quot;&gt;Open Alert&lt;/a&gt;\n            &lt;div class=&quot;list simple-list&quot;&gt;\n              &lt;ul&gt;\n                {{#each names}}\n                  &lt;li&gt;{{this}}&lt;/li&gt;\n                {{/each}}\n              &lt;/ul&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      `,\n      style: `\n        .red-link {\n          color: red;\n        }\n      `,\n      data: function () {\n        return {\n          title: &#39;Component Page&#39;,\n          names: [&#39;John&#39;, &#39;Vladimir&#39;, &#39;Timo&#39;],\n        }\n      },\n      methods: {\n        openAlert: function () {\n          var self = this;\n          self.$app.dialog.alert(&#39;Hello world!&#39;);\n        },\n      },\n      on: {\n        pageInit: function (e, page) {\n          // do something on page init\n        },\n        pageAfterOut: function (e, page) {\n          // page has left the view\n        },\n      }\n    },\n  },\n  // ...\n]</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 router component:",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 view layout",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 Multiple Views Layout",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nvar app = new Framework7({\n  id: &#39;com.myapp.test&#39;,\n  // Extended by Panel component:\n  panel: {\n    swipe: &#39;left&#39;,\n    leftBreakpoint: 768,\n    rightBreakpoint: 1024,\n  },\n  // Extended by Dialog component:\n  dialog: {\n    title: &#39;My App&#39;,\n  },\n  // Extended by Statusbar component:\n  statusbar: {\n    iosOverlaysWebview: true,\n  },\n});</p>\n<p>// Open panel\napp.panel.open(&#39;left&#39;);</p>\n<p>// Hide statusbar\napp.statusbar.hide();</p>\n<p>app.on(&#39;panelOpen&#39;, function (panel) {\n  console.log(&#39;Panel &#39; + panel.side + &#39; opened&#39;);\n});\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 App Methods &amp; Properties",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 Accordion Vue Component",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<!-- Actions --></p>\n<p><f7-actions>\n  <!-- Actions Group -->\n  <f7-actions-group>\n    <!-- Actions Label -->\n    <f7-actions-label>Hello</f7-actions-label>\n    <!-- Actions Buttons -->\n    <f7-actions-button>Button 1</f7-actions-button>\n    <f7-actions-button @click=\"doSomething\">Button 2</f7-actions-button>\n  </f7-actions-group>\n  <!-- Another Group -->\n  <f7-actions-group>\n    <!-- Cancel/Close Button -->\n    <f7-actions-button color=\"red\" bold>Cancel</f7-actions-button>\n  </f7-actions-group>\n</f7-actions>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 Action Sheet Vue Component",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 Badge Vue Component",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<!-- Block --></p>\n<p><f7-block>...</f7-block></p>\n<!-- With extran highlighting and padding, additional \"strong\" prop -->\n<p><f7-block strong>...</f7-block></p>\n<!-- With block title -->\n<p><f7-block-title>Block Title</f7-block-title></p>\n<p><f7-block>...</f7-block></p>\n<!-- Inset -->\n<p><f7-block inset>...</f7-block></p>\n<!-- With header and footer -->\n<p><f7-block>\n  <f7-block-header>Block Header</f7-block-header>\n  ...\n  <f7-block-footer>Block Footer</f7-block-footer>\n</f7-block></p>\n<!-- With header and footer outside -->\n<p><f7-block-header>Block Header</f7-block-header></p>\n<p><f7-block>\n  ...\n</f7-block></p>\n<p><f7-block-footer>Block Footer</f7-block-footer></p>\n<!-- With header after block title and footer outside-->\n<p><f7-block-title>Block Title</f7-block-title></p>\n<p><f7-block-header>Block Header</f7-block-header></p>\n<p><f7-block>\n  ...\n</f7-block>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 Block Vue Component",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 Button Vue Component",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMinimal layout with extra content padding</p>\n<p><f7-card title=\"Card Title\" content=\"Card Content\" footer=\"Card Footer\"></f7-card>\nRenders to:</p>\n<div class=\"card\">\n  <div class=\"card-header\">Card Title</div>\n  <div class=\"card-content card-content-padding\">Card Content</div>\n  <div class=\"card-footer\">Card Footer</div>\n</div>\nMinimal layout without extra content padding\n<f7-card title=\"Card Title\" content=\"Card Content\" footer=\"Card Footer\" :padding=\"false\"></f7-card>\nRenders to:\n<div class=\"card\">\n  <div class=\"card-header\">Card Title</div>\n  <div class=\"card-content\">Card Content</div>\n  <div class=\"card-footer\">Card Footer</div>\n</div>\nCustom Layout\n<f7-card>\n  <f7-card-header>Card header content</f7-card-header>\n  <f7-card-content>\n    <p>Card content</p>\n  </f7-card-content>\n  <f7-card-footer>Card footer content</f7-card-footer>\n</f7-card>\nRenders to:\n<div class=\"card\">\n  <div class=\"card-header\">Card header content</div>\n  <div class=\"card-content\">\n    <p>Card content</p>\n  </div>\n  <div class=\"card-footer\">Card footer content</div>\n</div>\n<code>## 15.0 Checkbox Vue Component</code>\nCheckboxes List is not a separate component, but just a particular case of using <f7-list>, <f7-list-item>.\n<f7-list>\n  <!-- Additional \"checkbox\" prop to enable checkbox list item -->\n  <f7-list-item checkbox value=\"check_1\" checked title=\"Checkbox 1\"></f7-list-item>\n  <f7-list-item checkbox value=\"check_2\" title=\"Checkbox 2\"></f7-list-item>\n</f7-list>\nCheckbox v-model\nv-model is not supported on Checkbox vue component. Instead, just use the combination of checked property and @change event:\n<template>\n  <!-- With boolean value -->\n  <f7-checkbox :checked=\"jobIsDone\" @change=\"jobIsDone = $event.target.checked\"></f7-checkbox>\n\n  <!-- With array value -->\n  <f7-checkbox\n    value=\"banana\"\n    :checked=\"fruits.indexOf('banana') >= 0\"\n    @change=\"checkFruits\"\n  ></f7-checkbox>\n\n  <f7-checkbox\n    value=\"orange\"\n    :checked=\"fruits.indexOf('orange') >= 0\"\n    @change=\"checkFruits\"\n  ></f7-checkbox>\n\n  <f7-checkbox\n    value=\"apple\"\n    :checked=\"fruits.indexOf('apple') >= 0\"\n    @change=\"checkFruits\"\n  ></f7-checkbox>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        jobIsDone: false,\n        fruits: [],\n      };\n    },\n    methods: {\n      checkFruits(event) {\n        const self = this;\n        const value = event.target.value;\n        if (event.target.checked) {\n          self.fruits.push(value);\n        } else {\n          self.fruits.splice(self.fruits.indexOf(value), 1);\n        }\n      },\n    },\n  };\n</script>\nExamples\n<!-- Inline checkbox -->\n<p>Lorem <f7-checkbox name=\"checkbox-1\"></f7-checkbox> ipsum dolor sit amet, consectetur adipisicing elit. Alias beatae illo nihil aut eius commodi sint eveniet aliquid eligendi <f7-checkbox name=\"checkbox-2\" checked></f7-checkbox> ad delectus impedit tempore nemo, enim vel praesentium consequatur nulla mollitia!</p>\n\n<!-- Checkboxes List -->\n<f7-list>\n  <f7-list-item checkbox title=\"Books\" name=\"demo-checkbox\" checked></f7-list-item>\n  <f7-list-item checkbox title=\"Movies\" name=\"demo-checkbox\"></f7-list-item>\n  <f7-list-item checkbox title=\"Food\" name=\"demo-checkbox\"></f7-list-item>\n  <f7-list-item checkbox title=\"Drinks\" name=\"demo-checkbox\"></f7-list-item>\n</f7-list>\n<code>## 16.0 Chip Vue Component</code>\n  <!-- Simple Chip -->\n  <f7-chip text=\"Example Chip\"></f7-chip>\n\n  <!-- Colored Chip -->\n  <f7-chip text=\"Another Chip\" color=\"red\"></f7-chip>\n\n  <!-- Media Chip -->\n  <f7-chip text=\"Jane Doe\" media=\"J\" media-bg-color=\"red\"></f7-chip>\n\n  <!-- Deleteable Chip -->\n  <f7-chip text=\"Another Chip\" deleteable @delete=\"onChipDelete\"></f7-chip>\n\n  <!-- Deleteable Media Chip -->\n  <f7-chip text=\"Jane Doe\" media-bg=\"red\" deleteable @delete=\"onChipDelete\">\n    <img slot=\"media\" src=\"http://lorempixel.com/100/100/people/9/\">\n  </f7-chip>\n\n  <!-- With Icon -->\n  <f7-chip text=\"Add Contact\" color=\"blue\">\n    <f7-icon slot=\"media\" f7=\"add_round\"></f7-icon>\n  </f7-chip>\n<code>## 17.0 Contacts List Vue Component</code>\n  <template>\n    <f7-page>\n      <f7-navbar back-link=\"Back\" title=\"Contacts\" sliding></f7-navbar>\n\n      <f7-list contacts-list>\n        <f7-list-group v-for=\"(group, key) in contacts\">\n          <f7-list-item :title=\"key\" group-title></f7-list-item>\n          <f7-list-item v-for=\"name in group\" :title=\"name\"></f7-list-item>\n        </f7-list-group>\n      </f7-list>\n\n    </f7-page>\n  </template>\n  <script>\n    export default {\n      data: function () {\n        return {\n          contacts: {\n            &#39;A&#39;: [\n              &#39;Aaron&#39;,\n              &#39;Abbie&#39;,\n              &#39;Adam&#39;,\n              &#39;Adele&#39;,\n              &#39;Agatha&#39;,\n              &#39;Agnes&#39;,\n              &#39;Albert&#39;,\n              &#39;Alexander&#39;\n            ],\n            &#39;B&#39;: [\n              &#39;Bailey&#39;,\n              &#39;Barclay&#39;,\n              &#39;Bartolo&#39;,\n              &#39;Bellamy&#39;,\n              &#39;Belle&#39;,\n              &#39;Benjamin&#39;\n            ],\n            &#39;C&#39;: [\n              &#39;Caiden&#39;,\n              &#39;Calvin&#39;,\n              &#39;Candy&#39;,\n              &#39;Carl&#39;,\n              &#39;Cherilyn&#39;,\n              &#39;Chester&#39;,\n              &#39;Chloe&#39;\n            ],\n            &#39;V&#39;: [\n              &#39;Vladimir&#39;\n            ]\n          }\n        }\n      }\n    }\n  </script>\n<code>## 18.0 Floating Action Button Vue Component</code>\n  Default FAB\n  <f7-page>\n    <!-- FAB must be direct child of a page -->\n    <f7-fab color=\"pink\" @click=\"doSomething\">\n      <f7-icon f7=\"add\"></f7-icon>\n    </f7-fab>\n    ...\n  </f7-page>\n  Renders to:\n  ...\n  <div class=\"fab fab-right-bottom color-pink\">\n    <a href=\"#\">\n      <i class=\"icon f7-icons\">add</i>\n    </a>\n  </div>\n  ...\n  Speed Dial\n  <f7-page>\n    <!-- FAB must be direct child of a page -->\n    <f7-fab color=\"pink\" @click=\"doSomething\">\n      <!-- First icon is visible when Speed Dial actions are closed -->\n      <f7-icon f7=\"add\"></f7-icon>\n      <!-- Second icon is visible when Speed Dial actions are opened -->\n      <f7-icon f7=\"close\"></f7-icon>\n\n      <!-- Speed Dial Buttons -->\n      <f7-fab-buttons>\n        <f7-fab-button color=\"orange\" @click=\"onButtonClick\">A</f7-fab-button>\n        <f7-fab-button color=\"green\" @click=\"onButtonClick\">B</f7-fab-button>\n        <f7-fab-button color=\"blue\" @click=\"onButtonClick\">C</f7-fab-button>\n      </f7-fab-buttons>\n    </f7-fab>\n    ...\n  </f7-page>\n  Renders to:\n  ...\n  <div class=\"fab fab-right-bottom color-pink\">\n    <a href=\"#\">\n      <i class=\"icon f7-icons\">add</i>\n      <i class=\"icon f7-icons\">close</i>\n    </a>\n    <div class=\"fab-buttons fab-buttons-top\">\n      <a href=\"#\" class=\"color-orange\">A</a>\n      <a href=\"#\" class=\"color-green\">B</a>\n      <a href=\"#\" class=\"color-blue\">C</a>\n    </div>\n  </div>\n  ...\n<code>## 19.0 Grid Vue Component</code>\nEqual width columns\n<f7-row>\n  <f7-col>Col 1</f7-col>\n  <f7-col>Col 2</f7-col>\n  <f7-col>Col 3</f7-col>\n</f7-row>\nRenders to:\n<div class=\"row\">\n  <div class=\"col\"></div>\n  <div class=\"col\"></div>\n  <div class=\"col\"></div>\n</div>\nNo gap and fixed size\n<f7-row no-gap>\n  <f7-col width=\"50\">Col 50%</f7-col>\n  <f7-col width=\"25\">Col 25%</f7-col>\n  <f7-col width=\"25\">Col 25%</f7-col>\n</f7-row>\nRenders to:\n<div class=\"row no-gap\">\n  <div class=\"col-50\"></div>\n  <div class=\"col-25\"></div>\n  <div class=\"col-25\"></div>\n</div>\nDifferent columns width on tablet\n<f7-row>\n  <f7-col width=\"50\" tablet-width=\"25\">Col 1</f7-col>\n  <f7-col width=\"50\" tablet-width=\"25\">Col 2</f7-col>\n  <f7-col width=\"50\" tablet-width=\"25\">Col 3</f7-col>\n  <f7-col width=\"50\" tablet-width=\"25\">Col 4</f7-col>\n</f7-row>\nRenders to:\n<div class=\"row\">\n  <div class=\"col-50 tablet-25\">Col 1</div>\n  <div class=\"col-50 tablet-25\">Col 2</div>\n  <div class=\"col-50 tablet-25\">Col 3</div>\n  <div class=\"col-50 tablet-25\">Col 4</div>\n</div>\n<code>## 20.0 Icon Vue Component</code>\n<!-- Default back icon -->\n<f7-icon icon=\"icon-back\"></f7-icon>\n\n<!-- Some custom icon -->\n<f7-icon icon=\"icon-home\"></f7-icon>\n\n<!-- F7 Icons font icon -->\n<f7-icon f7=\"home\"></f7-icon>\n\n<!-- Material Icons font icon -->\n<f7-icon material=\"home\"></f7-icon>\n\n<!-- Font Awesome icons font icon -->\n<f7-icon fa=\"home\"></f7-icon>\n\n<!-- Ionicons icons font icon -->\n<f7-icon ion=\"home\"></f7-icon>\n\n<!-- F7 icons font icon with custom size and color -->\n<f7-icon f7=\"home\" size=\"44px\" color=\"blue\"></f7-icon>\n\n<!-- Conditional icon -->\n<f7-icon if-ios=\"f7:home\" if-md=\"material:home\"></f7-icon>\n<code>## 21.0 Input / Form Elements Vue Components</code>\nv-model is not supported on f7-input vue component. Instead, just use the combination of value property and @input event:\n<template>\n  ...\n  <f7-list-item>\n    <f7-label>Name</f7-label>\n    <f7-input type=\"text\" :value=\"name\" @input=\"name = $event.target.value\" placeholder=\"Your name\" clear-button></f7-input>\n  </f7-list-item>\n  ...\n</template>\n<script>\n  export default {\n    data() {\n      name: &#39;&#39;,\n    },\n    ...\n  };\n</script>\nExamples\nFull Layout / Inline Labels\n<f7-list inline-labels no-hairlines-md>\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Name</f7-label>\n    <f7-input type=\"text\" placeholder=\"Your name\" :value=\"value\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Password</f7-label>\n    <f7-input type=\"password\" placeholder=\"Your password\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>E-mail</f7-label>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>URL</f7-label>\n    <f7-input type=\"url\" placeholder=\"URL\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Phone</f7-label>\n    <f7-input type=\"tel\" placeholder=\"Your phone number\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Gender</f7-label>\n    <f7-input type=\"select\" placeholder=\"Please choose...\">\n      <option value=\"Male\">Male</option>\n      <option value=\"Female\">Female</option>\n    </f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Birthday</f7-label>\n    <f7-input type=\"date\" value=\"2014-04-30\" placeholder=\"Please choose...\"></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Date time</f7-label>\n    <f7-input type=\"datetime-local\" placeholder=\"Please choose...\"></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Range</f7-label>\n    <f7-input type=\"range\" value=\"50\" min=\"0\" max=\"100\" step=\"1\"></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Textarea</f7-label>\n    <f7-input type=\"textarea\" placeholder=\"Bio\"></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Resizable</f7-label>\n    <f7-input type=\"textarea\" resizable placeholder=\"Bio\"></f7-input>\n  </f7-list-item>\n\n</f7-list>\nFull Layout / Stacked Labels\n<f7-list no-hairlines-md>\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Name</f7-label>\n    <f7-input type=\"text\" placeholder=\"Your name\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Password</f7-label>\n    <f7-input type=\"password\" placeholder=\"Your password\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>E-mail</f7-label>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>URL</f7-label>\n    <f7-input type=\"url\" placeholder=\"URL\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Phone</f7-label>\n    <f7-input type=\"tel\" placeholder=\"Your phone number\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Gender</f7-label>\n    <f7-input type=\"select\" placeholder=\"Please choose...\">\n      <option value=\"Male\">Male</option>\n      <option value=\"Female\">Female</option>\n    </f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Birthday</f7-label>\n    <f7-input type=\"date\" value=\"2014-04-30\" placeholder=\"Please choose...\"></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Date time</f7-label>\n    <f7-input type=\"datetime-local\" placeholder=\"Please choose...\"></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Range</f7-label>\n    <f7-input type=\"range\" value=\"50\" min=\"0\" max=\"100\" step=\"1\"></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Textarea</f7-label>\n    <f7-input type=\"textarea\" placeholder=\"Bio\"></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Resizable</f7-label>\n    <f7-input type=\"textarea\" resizable placeholder=\"Bio\"></f7-input>\n  </f7-list-item>\n</f7-list>\nFloating Labels (MD-theme only)\n<f7-list no-hairlines-md>\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label floating>Name</f7-label>\n    <f7-input type=\"text\" placeholder=\"Your name\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label floating>Password</f7-label>\n    <f7-input type=\"password\" placeholder=\"Your password\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label floating>E-mail</f7-label>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label floating>URL</f7-label>\n    <f7-input type=\"url\" placeholder=\"URL\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label floating>Phone</f7-label>\n    <f7-input type=\"tel\" placeholder=\"Your phone number\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label floating>Bio</f7-label>\n    <f7-input type=\"textarea\" placeholder=\"Bio\" resizable></f7-input>\n  </f7-list-item>\n</f7-list>\nValidation + Additional Info\n<f7-list no-hairlines-md>\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Name</f7-label>\n    <f7-input type=\"text\" placeholder=\"Your name\" info='Default \"required\" validation' required validate clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Fruit</f7-label>\n    <f7-input type=\"text\" placeholder=\"Type 'apple' or 'banana'\" required validate clear-button>\n      <span slot=\"info\">Pattern validation (<b>apple|banana</b>)</span>\n    </f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>E-mail</f7-label>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" info='Default e-mail validation' required validate clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>URL</f7-label>\n    <f7-input type=\"url\" placeholder=\"Your URL\" info='Default URL validation' required validate clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-label>Number</f7-label>\n    <f7-input type=\"text\" placeholder=\"Enter number\" info='With custom error message' error-message=\"Only numbers please!\" required validate pattern=\"[0-9]*\" clear-button></f7-input>\n  </f7-list-item>\n\n</f7-list>\nIcon + Input\n<f7-list no-hairlines-md>\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-input type=\"text\" placeholder=\"Your name\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-input type=\"password\" placeholder=\"Your password\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-icon icon=\"demo-list-icon\" slot=\"media\"></f7-icon>\n    <f7-input type=\"url\" placeholder=\"URL\" clear-button></f7-input>\n  </f7-list-item>\n\n</f7-list>\nLabel + Input\n<f7-list no-hairlines-md>\n  <f7-list-item>\n    <f7-label>Name</f7-label>\n    <f7-input type=\"text\" placeholder=\"Your name\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-label>Password</f7-label>\n    <f7-input type=\"password\" placeholder=\"Your password\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-label>E-mail</f7-label>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-label>URL</f7-label>\n    <f7-input type=\"url\" placeholder=\"URL\" clear-button></f7-input>\n  </f7-list-item>\n</f7-list>\nOnly Inputs\n<f7-list no-hairlines-md>\n  <f7-list-item>\n    <f7-input type=\"text\" placeholder=\"Your name\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"password\" placeholder=\"Your password\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"url\" placeholder=\"URL\" clear-button></f7-input>\n  </f7-list-item>\n</f7-list>\nInputs + Additional Info\n<f7-list no-hairlines-md>\n  <f7-list-item>\n    <f7-input type=\"text\" placeholder=\"Your name\" info=\"Full name please\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"password\" placeholder=\"Your password\" info=\"8 characters minimum\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" info=\"Your work e-mail address\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"url\" placeholder=\"URL\" info=\"Your website URL\" clear-button></f7-input>\n  </f7-list-item>\n</f7-list>\nOnly Inputs Inset\n<f7-list inset>\n  <f7-list-item>\n    <f7-input type=\"text\" placeholder=\"Your name\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"password\" placeholder=\"Your password\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"email\" placeholder=\"Your e-mail\" clear-button></f7-input>\n  </f7-list-item>\n\n  <f7-list-item>\n    <f7-input type=\"url\" placeholder=\"URL\" clear-button></f7-input>\n  </f7-list-item>\n</f7-list>\n<code>## 22.0 Link Vue Component</code>\nNavigation Link\n<f7-link href=\"/about/\">About</f7-link>\n\n<!-- Renders to: -->\n\n<a href=\"/about/\" class=\"link\">About</a>\nBack Navigation Link\n<f7-link back>Back</f7-link>\n\n<!-- Renders to: -->\n\n<a href=\"#\" class=\"link back\">Back</a>\nWith Router Parameters\n<f7-link href=\"/about/\" :animate=\"false\" :ignore-cache=\"true\">About</f7-link>\n\n<!-- Renders to: -->\n\n<a href=\"/about/\" class=\"link\" data-animate=\"false\" data-ignore-cache=\"true\">About</a>\nExternal Link\n<f7-link href=\"http://google.com\" external>Google</f7-link>\n\n<!-- Renders to: -->\n\n<a href=\"http://google.com\" class=\"link external\">Google</a>\nTab Link\n<!-- Tabs -->\n<f7-tabs>\n  <f7-tab id=\"tab-1\" tab-active>Tab 1</f7-tab>\n  <f7-tab id=\"tab-1\">Tab 2</f7-tab>\n</f7-tabs>\n<!-- Switch Between Tabs -->\n<f7-link tab-link=\"#tab-1\" tab-link-active>Show Tab 1</f7-link>\n<f7-link tab-link=\"#tab-2\">Show Tab 2</f7-link>\n\n<!-- Renders to: -->\n\n<!-- Tabs -->\n<div class=\"tabs\">\n  <div class=\"tab tab-active\" id=\"tab-1\">Tab 1</div>\n  <div class=\"tab\" id=\"tab-2\">Tab 2</div>\n</div>\n<!-- Switch Between Tabs -->\n<a href=\"#\" data-tab=\"#tab-1\" class=\"tab-link tab-link-active\">Show Tab 1</a>\n<a href=\"#\" data-tab=\"#tab-2\" class=\"tab-link\">Show Tab 2</a>\nRoutable Tabs\n<!-- Tabs -->\n<f7-tabs>\n  <f7-tab id=\"tab-1\"></f7-tab>\n  <f7-tab id=\"tab-2\"></f7-tab>\n</f7-tabs>\n<!-- Switch Between Tabs -->\n<f7-link tab-link route-tab-id=\"tab-1\" href=\"/tabs/\">Show Tab 1</f7-link>\n<f7-link tab-link route-tab-id=\"tab-2\" href=\"/tabs/tab-2/\">Show Tab 2</f7-link>\n\n<!-- Renders to: -->\n\n<!-- Tabs -->\n<div class=\"tabs\">\n  <div class=\"tab\" id=\"tab-1\"></div>\n  <div class=\"tab\" id=\"tab-2\"></div>\n</div>\n<!-- Switch Between Tabs -->\n<a href=\"/tabs/\" class=\"tab-link\" data-route-tab-id=\"tab-1\">Show Tab 1</a>\n<a href=\"/tabs/tab-2/\" class=\"tab-link\" data-route-tab-id=\"tab-2\">Show Tab 2</a>\n\nOpen And Close Panel\n<f7-link panel-open=\"left\">Open Left Panel</f7-link>\n<f7-link panel-close>Close Panel</f7-link>\n\n<!-- Renders to: -->\n\n<a href=\"#\" data-panel=\"left\" class=\"link panel-open\">Open Left Panel</a>\n<a href=\"#\" class=\"link panel-close\">Close Panel</a>\nOpen and Close Popup\n<f7-link popup-open=\"#my-popup\">Open Popup</f7-link>\n<f7-link popup-close=\"#my-popup\">Close Popup</f7-link>\n\n<!-- Renders to: -->\n\n<a href=\"#\" data-popup=\"#my-popup\" class=\"link popup-open\">Open Popup</a>\n<a href=\"#\" data-popup=\"#my-popup\" class=\"link popup-close\">Close Popup</a>\nWith Icon &amp; Color\n<f7-link icon-f7=\"home\" text=\"Home\" color=\"red\"></f7-link>\n\n<!-- Renders to: -->\n\n<a href=\"#\" class=\"link color-red\">\n  <i class=\"icon f7-icons\">home</i>\n  <span>Home</span>\n</a>\n<code>## 23.0 List Vue Component</code>\nMinimal Layout\n<f7-list>\n  <f7-list-item title=\"Item 1\"></f7-list-item>\n  <f7-list-item title=\"Item 2\"></f7-list-item>\n</f7-list>\nRenders to:\n<div class=\"list\">\n  <ul>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 1</div>\n      </div>\n    </li>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 2</div>\n      </div>\n    </li>\n  </ul>\n</div>\nWith Groups\n<f7-list>\n  <f7-list-group>\n    <f7-list-item title=\"Group 1\" group-title></f7-list-item>\n    <f7-list-item title=\"Item 1\"></f7-list-item>\n    <f7-list-item title=\"Item 2\"></f7-list-item>\n  </f7-list-group>\n  <f7-list-group>\n    <f7-list-item title=\"Group 2\" group-title></f7-list-item>\n    <f7-list-item title=\"Item 1\"></f7-list-item>\n    <f7-list-item title=\"Item 2\"></f7-list-item>\n  </f7-list-group>\n</f7-list>\nRenders to:\n<div class=\"list\">\n  <div class=\"list-group\">\n    <ul>\n      <li class=\"list-group-title\"><span>Group 1</span></li>\n      <li class=\"item-content\">\n        <div class=\"item-inner\">\n          <div class=\"item-title\">Item 1</div>\n        </div>\n      </li>\n      <li class=\"item-content\">\n        <div class=\"item-inner\">\n          <div class=\"item-title\">Item 2</div>\n        </div>\n      </li>\n    </ul>\n  </div>\n  <div class=\"list-group\">\n    <ul>\n      <li class=\"list-group-title\"><span>Group 2</span></li>\n      ...\n    </ul>\n  </div>\n</div>\nMedia List\n<f7-list media-list>\n  <f7-list-item title=\"Item 1\" subtitle=\"Subtitle 1\" text=\"Item 1 Text\"></f7-list-item>\n  <f7-list-item title=\"Item 1\" subtitle=\"Subtitle 2\" text=\"Item 2 Text\"></f7-list-item>\n</f7-list>\nRenders to:\n<div class=\"list media-list\">\n  <ul>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title-row\">\n          <div class=\"item-title\">Item 1</div>\n        </div>\n        <div class=\"item-subtitle\">Subtitle 1</div>\n        <div class=\"item-text\">Item 1 Text</div>\n      </div>\n    </li>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title-row\">\n          <div class=\"item-title\">Item 1</div>\n        </div>\n        <div class=\"item-subtitle\">Subtitle 1</div>\n        <div class=\"item-text\">Item 1 Text</div>\n      </div>\n    </li>\n  </ul>\n</div>\nWith Block Footer\n<f7-list>\n  <f7-list-item title=\"Item 1\"></f7-list-item>\n  <f7-list-item title=\"Item 2\"></f7-list-item>\n  <f7-block-footer>List Footer</f7-block-footer>\n</f7-list>\nRenders to:\n<div class=\"list\">\n  <ul>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 1</div>\n      </div>\n    </li>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 2</div>\n      </div>\n    </li>\n  </ul>\n  <div class=\"block-footer\">List Footer</div>\n</div>\n<code>## 24.0 List Item Vue Component</code>\n<f7-list media-list>\n  <f7-list-item\n    link=\"/home/\"\n    title=\"Item Title\"\n    subtitle=\"Item Subtitle\"\n    text=\"Text\"\n    after=\"Read more\"\n    >\n      <img src=\"path-to-my-image.jpg\" slot=\"media\">\n      <div slot=\"root-start\">Root Start</div>\n      <div slot=\"root\">Root End</div>\n      <div slot=\"content-start\">Content Start</div>\n      <div slot=\"content\">Content End</div>\n      <div slot=\"media-start\">Media Start</div>\n      <div slot=\"media\">Media</div>\n      <span slot=\"after-start\">After Start</span>\n      <span slot=\"after\">After End</span>\n      <div slot=\"inner-start\">Inner Start</div>\n      <div slot=\"inner\">Inner End</div>\n      <div slot=\"before-title\">Before Title</div>\n      <div slot=\"after-title\">After Title</div>\n  </f7-list-item>\n</f7-list>\n\n<!-- Renders to: -->\n\n<div class=\"list media-list\">\n  <ul>\n    <li>\n      <div>Root Start</div>\n      <a href=\"/home/\" class=\"item-link\">\n        <div class=\"item-content\">\n          <div>Content Start</div>\n          <div class=\"item-media\">\n            <img src=\"path-to-my-image.jpg\">\n          </div>\n          <div class=\"item-inner\">\n            <div>Inner Start</div>\n            <div class=\"item-title-row\">\n              <div>Before Title</div>\n              <div class=\"item-title\">Item Title</div>\n              <div>After Title</div>\n              <div class=\"item-after\">\n                <span>After Start</span>\n                <span>Read more</span>\n                <span>After End</span>\n              </div>\n            </div>\n            <div class=\"item-subtitle\">Item Subtitle</div>\n            <div class=\"item-text\">Text</div>\n            <div>Inner End</div>\n          </div>\n          <div>Content End</div>\n        </div>\n      </a>\n      <div>Root End</div>\n    </li>\n  </ul>\n</div>\nExamples\nMinimal Layout\n<f7-list>\n  <f7-list-item title=\"Item 1\"></f7-list-item>\n  <f7-list-item title=\"Item 2\"></f7-list-item>\n</f7-list>\n<!-- Renders to: -->\n\n\n<div class=\"list\">\n  <ul>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 1</div>\n      </div>\n    </li>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 2</div>\n      </div>\n    </li>\n  </ul>\n</div>\nWith Badges And Divider\n<f7-list>\n  <f7-list-item title=\"Item 1\" badge=\"5\" badge-color=\"red\"></f7-list-item>\n  <f7-list-item title=\"Item 2\" badge=\"3\" badge-color=\"red\"></f7-list-item>\n  <f7-list-item title=\"Items Divider\" divider></f7-list-item>\n  <f7-list-item title=\"Item 3\"></f7-list-item>\n  ...\n</f7-list>\n\n<!-- Renders to: -->\n\n<div class=\"list\">\n  <ul>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 1</div>\n        <div class=\"item-after\">\n          <span class=\"badge color-red\">5</span>\n        </div>\n      </div>\n    </li>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 2</div>\n        <div class=\"item-after\">\n          <span class=\"badge color-red\">3</span>\n        </div>\n      </div>\n    </li>\n    <li class=\"item-divider\"><span>Items Divider</span></li>\n    <li class=\"item-content\">\n      <div class=\"item-inner\">\n        <div class=\"item-title\">Item 3</div>\n      </div>\n    </li>\n  </ul>\n</div>\nLinks Items\n<f7-list>\n  <f7-list-item link=\"/about/\" title=\"About\"></f7-list-item>\n  <f7-list-item link=\"/contacts/\" title=\"Contacts\"></f7-list-item>\n</f7-list>\n\n<!-- Renders to: -->\n\n<div class=\"list\">\n  <ul>\n    <li>\n      <a href=\"/about/\" class=\"item-link\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">About</div>\n          </div>\n        </div>\n      </a>\n    </li>\n    <li>\n      <a href=\"/contacts/\" class=\"item-link\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Contacts</div>\n          </div>\n        </div>\n      </a>\n    </li>\n  </ul>\n</div>\nMedia List Items\n<f7-list media-list>\n  <f7-list-item\n    link=\"/item/\"\n    media=\"path/to/image.jpg\"\n    title=\"Item Title\"\n    subtitle=\"Item Subtitle\"\n    text=\"Some text\"\n    after=\"Read more\"\n  ></f7-list-item>\n</f7-list>\n\n<!-- Renders to: -->\n\n<div class=\"list media-list\">\n  <ul>\n    <li>\n      <a href=\"/item/\" class=\"item-link\">\n        <div class=\"item-content\">\n          <div class=\"item-media\">\n            <img src=\"path/to/image.jpg\">\n          </div>\n          <div class=\"item-inner\">\n            <div class=\"item-title-row\">\n              <div class=\"item-title\">Item Title</div>\n              <div class=\"item-after\">Read more</div>\n            </div>\n            <div class=\"item-subtitle\">Item Subtitle</div>\n            <div class=\"item-text\">Some text</div>\n          </div>\n        </div>\n      </a>\n    </li>\n  </ul>\n</div>\nCustom Table-like Elements\n<f7-list-item>\n  <f7-list-item-cell>\n    <f7-list-item-row>\n      <f7-list-item-cell>Cell 1-1</f7-list-item-cell>\n      <f7-list-item-cell>Cell 1-2</f7-list-item-cell>\n      <f7-list-item-cell>Cell 1-3</f7-list-item-cell>\n    </f7-list-item-row>\n    <f7-list-item-row>\n      <f7-list-item-cell>Cell 2-1</f7-list-item-cell>\n      <f7-list-item-cell>Cell 2-2</f7-list-item-cell>\n    </f7-list-item-row>\n    <f7-list-item-row>\n      <f7-list-item-cell>Cell 3-1</f7-list-item-cell>\n      <f7-list-item-cell>\n        <f7-list-item-row>\n          Cell 3-2\n        </f7-list-item-row>\n        <f7-list-item-row>\n          Cell 3-3\n        </f7-list-item-row>\n      </f7-list-item-cell>\n    </f7-list-item-row>\n  </f7-list-item-cell>\n</f7-list-item>\n<code>## 25.0 List Button Vue Component</code>\nMinimal Layout\n<f7-list>\n  <f7-list-button>Button 1</f7-list-button>\n  <f7-list-button>Button 2</f7-list-button>\n</f7-list>\n\n<!-- Renders to: -->\n\n<div class=\"list\">\n  <ul>\n    <li>\n      <a href=\"#\" class=\"item-link list-button\">Button 1</a>\n    </li>\n    <li>\n      <a href=\"#\" class=\"item-link list-button\">Button 2</a>\n    </li>\n  </ul>\n</div>\nColor Buttons\n<f7-list>\n  <f7-list-button color=\"red\">Red Button</f7-list-button>\n  <f7-list-button color=\"green\">Green Button</f7-list-button>\n</f7-list>\nControl Buttons in Inset List\n<f7-list inset>\n  <f7-list-button panel-open=\"left\">Open Panel</f7-list-button>\n  <f7-list-button popup-open=\"#my-popup\">Open Popup</f7-list-button>\n</f7-list>\n<code>## 26.0 List Index Vue Component</code>\n<f7-page>\n  <f7-navbar title=\"List Index\" back-link=\"Back\"></f7-navbar>\n\n  <!-- List Index -->\n  <f7-list-index\n    indexes=\"auto\"\n    list-el=\"#contacts-list\"\n    :scroll-list=\"true\"\n    :label=\"true\"\n    @listindex:select=\"onIndexSelect\"\n  ></f7-list-index>\n\n  <!-- Contacts list -->\n  <f7-list contacts-list id=\"contacts-list\">\n    <f7-list-group>\n      <f7-list-item title=\"A\" group-title></f7-list-item>\n      <f7-list-item title=\"Aaron\"></f7-list-item>\n      <f7-list-item title=\"Adam\"></f7-list-item>\n      <f7-list-item title=\"Aiden\"></f7-list-item>\n      ...\n    </f7-list-group>\n    <f7-list-group>\n      <f7-list-item title=\"B\" group-title></f7-list-item>\n      <f7-list-item title=\"Benjamin\"></f7-list-item>\n      <f7-list-item title=\"Blake\"></f7-list-item>\n      <f7-list-item title=\"Bobby\"></f7-list-item>\n    </f7-list-group>\n    <f7-list-group>\n      <f7-list-item title=\"C\" group-title></f7-list-item>\n      <f7-list-item title=\"Caleb\"></f7-list-item>\n      <f7-list-item title=\"Callum\"></f7-list-item>\n      <f7-list-item title=\"Cameron\"></f7-list-item>\n      ...\n    </f7-list-group>\n    ...\n    <f7-list-group>\n      <f7-list-item title=\"Z\" group-title></f7-list-item>\n      <f7-list-item title=\"Zachary\"></f7-list-item>\n    </f7-list-group>\n  </f7-list>\n</f7-page>\n<code>## 27.0 Login Screen Vue Component</code>\nExamples\n<!-- Login Screen -->\n<f7-login-screen>\n  <!-- Login Screen title -->\n  <f7-login-screen-title>Title</f7-login-screen-title>\n  <!-- Login Screen content goes here -->\n</f7-login-screen>\nRenders to:\n<!-- Login Screen -->\n<div class=\"login-screen\">\n  <!-- Login Screen title -->\n  <div class=\"login-screen-title\">Title</div>\n  <!-- Login Screen content goes here -->\n</div>\nFull Screen Layout\nAccording to Login Screen Layout here is the recommended Login Screen layout structure:\n<f7-login-screen>\n  <f7-view>\n    <f7-page login-screen>\n      <f7-login-screen-title>My App</f7-login-screen-title>\n      <f7-list form>\n        <f7-list-item>\n          <f7-label>Username</f7-label>\n          <f7-input type=\"text\" placeholder=\"Your username\"></f7-input>\n        </f7-list-item>\n        <f7-list-item>\n          <f7-label>Password</f7-label>\n          <f7-input type=\"password\" placeholder=\"Your password\"></f7-input>\n        </f7-list-item>\n      </f7-list>\n      <f7-list>\n        <f7-list-button login-screen-close>Sign In</f7-list-button>\n        <f7-block-footer>Click Sign In to close Login Screen</f7-block-footer>\n      </f7-list>\n    </f7-page>\n  </f7-view>\n</f7-login-screen>\nWhere:\n<f7-login-screen-title>My App</f7-login-screen-title> - additional component with Login Screen title\n<f7-page login-screen> - additional boolean login-screen property on page component to add extra styling to page form elements\n<code>## 28.0 Messagebar Vue Component</code>\nMessagebar Vue component has additional slots for custom elements:\ndefault - element will be inserted in the end of <div class=\"toolbar-inner\"> \nbefore-area - element will be inserted right before textarea. Messagebar attachments go here\nafter-area - element will be inserted right after textarea\nsend-link - element will be inserted inside of send link\nbefore-inner - element will be inserted right before <div class=\"toolbar-inner\"> \nafter-inner - element will be inserted right after <div class=\"toolbar-inner\"> \ninner-start - element will be inserted in the beginning of <div class=\"toolbar-inner\"> \ninner-end - element will be inserted in the end of <div class=\"toolbar-inner\">default slot\n<f7-messagebar placeholder=\"Message\" @submit=\"onSubmit\">\n  <div slot=\"before-inner\">Before inner</div>\n  <div slot=\"after-inner\">After inner</div>\n  <div slot=\"before-area\">Before textarea</div>\n  <div slot=\"after-area\">After textarea</div>\n  <f7-icon if-ios=\"f7:arrow_up_fill\" if-md=\"material:send\" slot=\"send-link\"></f7-icon>\n  <div>Default slot</div>\n</f7-messagebar>\nRenders to:\n<div class=\"toolbar messagebar\">\n  <div>Before inner</div>\n  <div class=\"toolbar-inner\">\n    <div class=\"messagebar-area\">\n      <div>Before textarea</div>\n      <textarea placeholder=\"Message\"></textarea>\n      <div>After textarea</div>\n    </div>\n    <a href=\"#\" class=\"link\"><i class=\"icon f7-icons\">arrow_up_fill</i></a>\n    <div>Default slot</div>\n  </div>\n  <div>After inner</div>\n</div>\nAccess To Messagebar Instance\nIf you use automatic initalization to init Messagebar (with init:true prop) and need to use its Methods and Properties you can access its initialized instance by accessing .f7Messagebar component&#39;s property.\nExamples\n<f7-messagebar placeholder=\"Message\" send-link=\"Send\" @submit=\"onSubmit\"></f7-messagebar>\n\n<!-- Renders to: -->\n\n<div class=\"toolbar messagebar\">\n  <div class=\"toolbar-inner\">\n    <div class=\"messagebar-area\">\n      <textarea placeholder=\"Message\"></textarea>\n    </div>\n    <a href=\"#\" class=\"link\">Send</a>\n  </div>\n</div>\nWith Sheet And Attachments\n<template>\n  <f7-page>\n    <f7-navbar title=\"Messsages\" back-link=\"Back\"></f7-navbar>\n\n    <f7-messagebar\n      :placeholder=\"placeholder\"\n      ref=\"messagebar\"\n      :attachmentsVisible=\"attachmentsVisible\"\n      :sheetVisible=\"sheetVisible\"\n    >\n      <!-- Link to toggle Sheet -->\n      <f7-link\n        icon-if-ios=\"f7:camera_fill\"\n        icon-if-md=\"material:camera_alt\"\n        slot=\"inner-start\"\n        @click=\"sheetVisible = !sheetVisible\"\n      ></f7-link>\n      <!-- Send Message Link -->\n      <f7-link\n        icon-if-ios=\"f7:arrow_up_fill\"\n        icon-if-md=\"material:send\"\n        slot=\"inner-end\"\n        @click=\"sendMessage\"\n      ></f7-link>\n      <!-- Attachments -->\n      <f7-messagebar-attachments>\n        <f7-messagebar-attachment\n          v-for=\"(image, index) in attachments\"\n          :key=\"index\"\n          :image=\"image\"\n          @attachment:delete=\"deleteAttachment(image)\"\n        ></f7-messagebar-attachment>\n      </f7-messagebar-attachments>\n      <!-- Sheet -->\n      <f7-messagebar-sheet>\n        <f7-messagebar-sheet-image\n          v-for=\"(image, index) in images\"\n          :key=\"index\"\n          :image=\"image\"\n          :checked=\"attachments.indexOf(image) >= 0\"\n          @change=\"handleAttachment\"\n        ></f7-messagebar-sheet-image>\n      </f7-messagebar-sheet>\n    </f7-messagebar>\n\n    <f7-messages>\n      ...\n    </f7-messages>\n  </f7-page>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        attachments: [],\n        sheetVisible: false,\n        // Sheet images available\n        images: [\n          &#39;http://lorempixel.com/300/300/cats/1/&#39;,\n          &#39;http://lorempixel.com/200/300/cats/2/&#39;,\n          &#39;http://lorempixel.com/400/300/cats/3/&#39;,\n          &#39;http://lorempixel.com/300/150/cats/4/&#39;,\n          &#39;http://lorempixel.com/150/300/cats/5/&#39;,\n          &#39;http://lorempixel.com/300/300/cats/6/&#39;,\n          &#39;http://lorempixel.com/300/300/cats/7/&#39;,\n          &#39;http://lorempixel.com/200/300/cats/8/&#39;,\n          &#39;http://lorempixel.com/400/300/cats/9/&#39;,\n          &#39;http://lorempixel.com/300/150/cats/10/&#39;,\n        ],\n      };\n    },\n    computed: {\n      attachmentsVisible() {\n        const self = this;\n        return self.attachments.length &gt; 0;\n      },\n      placeholder() {\n        const self = this;\n        return self.attachments.length &gt; 0 ? &#39;Add comment or Send&#39; : &#39;Message&#39;;\n      },\n    },\n    methods: {\n      deleteAttachment(image) {\n        const self = this;\n        const index = self.attachments.indexOf(image);\n        self.attachments.splice(index, 1)[0]; // eslint-disable-line\n      },\n      handleAttachment(e) {\n        const self = this;\n        const index = self.$$(e.target).parents(&#39;label.checkbox&#39;).index();\n        const image = self.images[index];\n        if (e.target.checked) {\n          // Add to attachments\n          self.attachments.unshift(image);\n        } else {\n          // Remove from attachments\n          self.attachments.splice(self.attachments.indexOf(image), 1);\n        }\n      },\n      sendMessage() {\n        const self = this;\n        const text = self.messagebar.getValue().replace(/\\n/g, &#39;<br>&#39;).trim();\n        // the rest of logic to send a message\n      },\n      onF7Ready() {\n        const self = this;\n        self.messagebar = self.$refs.messagebar.f7Messagebar;\n      },\n    },\n  };\n</script>\n<code>## 29.0 Messages Component</code>\n<f7-message\n  type=\"sent\"\n  text=\"Hello World\"\n  name=\"John Doe\"\n  avatar=\"path/to/image.jpg\"\n>\n  <div slot=\"start\">Start</div>\n  <div slot=\"end\">End</div>\n  <div slot=\"content-start\">Content Start</div>\n  <div slot=\"content-end\">Content End</div>\n  <div slot=\"bubble-start\">Bubble Start</div>\n  <div slot=\"bubble-end\">Bubble End</div>\n</f7-message>\n\n<!-- Renders to: -->\n\n<div class=\"message message-sent\">\n  <div>Start</div>\n  <div class=\"message-avatar\" style=\"background-image: url(path/to/image.jpg);\"></div>\n  <div class=\"message-content\">\n    <div>Content Start</div>\n    <div class=\"message-name\">John Doe</div>\n    <div class=\"message-bubble\">\n      <div>Bubble Start</div>\n      <div class=\"message-text\">Hello World</div>\n      <div>Bubble End</div>\n    </div>\n    <div>Content End</div>\n  </div>\n  <div>End</div>\n</div>\n<code>## 30.0 Navbar Vue Component</code>\n<f7-navbar title=\"My App\">\n  <div slot=\"before-inner\">Before Inner</div>\n  <div slot=\"after-inner\">After Inner</div>\n  <div>Default slot</div>\n</f7-navbar>\n\n<!-- Renders to: -->\n\n<div class=\"navbar\">\n  <div>Before Inner</div>\n  <div class=\"navbar-inner\">\n    <div class=\"title\">My App</div>\n    <div>Default slot</div>\n  </div>\n  <div>After Inner</div>\n</div>\nExamples\nMinimal layout\n<f7-navbar title=\"My App\"></f7-navbar>\n\n<!-- Renders to: -->\n\n<div class=\"navbar\">\n  <div class=\"navbar-inner sliding\">\n    <div class=\"title\">My App</div>\n  </div>\n</div>\nMinimal layout with back link\n<f7-navbar title=\"My App\" back-link=\"Back\"></f7-navbar>\n\n<!-- Renders to: -->\n\n<div class=\"navbar\">\n  <div class=\"navbar-inner sliding\">\n    <div class=\"left\">\n      <a href=\"#\" class=\"back link\">\n        <i class=\"icon icon-back\"></i>\n        <!-- Back link text rendered only for iOS theme -->\n        <span>Back</span>\n      </a>\n    </div>\n    <div class=\"title\">My App</div>\n  </div>\n</div>\nWithout &quot;sliding&quot; transition effect (affects iOS theme only)\n<f7-navbar title=\"My App\" back-link=\"Back\" :sliding=\"false\"></f7-navbar>\n\n<!-- Renders to: -->\n\n<div class=\"navbar\">\n  <div class=\"navbar-inner\">\n    <div class=\"left\">\n      <a href=\"#\" class=\"back link\">\n        <i class=\"icon icon-back\"></i>\n        <!-- Back link text rendered only for iOS theme -->\n        <span>Back</span>\n      </a>\n    </div>\n    <div class=\"title\">My App</div>\n  </div>\n</div>\nWith additional right link to open right panel\n<f7-navbar title=\"My App\" back-link=\"Back\">\n  <f7-nav-right>\n    <f7-link icon=\"icon-bars\" panel-open=\"right\"></f7-link>\n  </f7-nav-right>\n</f7-navbar>\n\n<!-- Renders to: -->\n\n<div class=\"navbar\">\n  <div class=\"navbar-inner sliding\">\n    <div class=\"left\">\n      <a href=\"#\" class=\"back link\">\n        <i class=\"icon icon-back\"></i>\n        <!-- Back link text rendered only for iOS theme -->\n        <span>Back</span>\n      </a>\n    </div>\n    <div class=\"title\">My App</div>\n    <div class=\"right\">\n      <a href=\"#\" class=\"link panel-open\" data-panel=\"right\">\n        <i class=\"icon icon-bars\"></i>\n      </a>\n    </div>\n  </div>\n</div>\nAll three parts\n<f7-navbar>\n  <f7-nav-left back-link=\"Back\"></f7-nav-left>\n  <f7-nav-title>My App</f7-nav-title>\n  <f7-nav-right>\n    <f7-link icon=\"icon-bars\" panel-open=\"right\"></f7-link>\n  </f7-nav-right>\n</f7-navbar>\n\n<!-- Renders to: -->\n\n<div class=\"navbar\">\n  <div class=\"navbar-inner sliding\">\n    <div class=\"left\">\n      <a href=\"#\" class=\"back link\">\n        <i class=\"icon icon-back\"></i>\n        <!-- Back link text rendered only for iOS theme -->\n        <span>Back</span>\n      </a>\n    </div>\n    <div class=\"title\">My App</div>\n    <div class=\"right\">\n      <a href=\"#\" class=\"link panel-open\" data-panel=\"right\">\n        <i class=\"icon icon-bars\"></i>\n      </a>\n    </div>\n  </div>\n</div>\nFull custom layout\n<f7-navbar>\n  <f7-nav-left>\n    <f7-link>Left Link</f7-link>\n  </f7-nav-left>\n  <f7-nav-title>My App</f7-nav-title>\n  <f7-nav-right>\n    <f7-link>Right Link</f7-link>\n  </f7-nav-right>\n</f7-navbar>\n\n<!-- Renders to: -->\n\n<div class=\"navbar\">\n  <div class=\"navbar-inner sliding\">\n    <div class=\"left\">\n      <a href=\"#\" class=\"link\">Left Link</a>\n    </div>\n    <div class=\"title\">My App</div>\n    <div class=\"right\">\n      <a href=\"#\" class=\"link\">Right Link</a>\n    </div>\n  </div>\n</div>\n<code>## 31.0 Page Vue Component</code>\n<f7-page>\n  <div slot=\"fixed\">Fixed element</div>\n  <p>Page content goes here</p>\n</f7-page>\n\n<!-- Renders to: -->\n\n<div class=\"page\">\n  <div>Fixed element</div>\n  <div class=\"page-content\">\n    <p>Page content goes here</p>\n  </div>\n</div>\nExamples\nMinimal layout\n<f7-page name=\"home\">\n  <p>Page content</p>\n</f7-page>\n\n<!-- Renders to: -->\n\n<div class=\"page\" data-name=\"home\">\n  <div class=\"page-content\">\n    <p>Page content</p>\n  </div>\n</div>\nWith Navbar\n<f7-page name=\"home\">\n  <f7-navbar title=\"My App\"></f7-navbar>\n  <p>Page content</p>\n</f7-page>\n\n<!-- Renders to: -->\n\n<div class=\"page\" data-name=\"home\">\n  <div class=\"navbar\">\n    <div class=\"navbar-inner sliding\">\n      <div class=\"title\">My App</div>\n    </div>\n  </div>\n  <div class=\"page-content\">\n    <p>Page content</p>\n  </div>\n</div>\nPull To Refresh\n<f7-page ptr @ptr:refresh=\"onRefresh\">\n  <f7-navbar title=\"My App\"></f7-navbar>\n  <p>Page content</p>\n</f7-page>\n\n<!-- Renders to: -->\n\n<div class=\"page\">\n  <div class=\"navbar\">\n    <div class=\"navbar-inner sliding\">\n      <div class=\"title\">My App</div>\n    </div>\n  </div>\n  <div class=\"page-content ptr-content\">\n    <div class=\"ptr-preloader\">\n      <div class=\"preloader\"></div>\n      <div class=\"ptr-arrow\"></div>\n    </div>\n    <p>Page content</p>\n  </div>\n</div>\nInfinite Scroll\n<f7-page infinite @infinite=\"onInfiniteScroll\">\n  <f7-navbar title=\"My App\"></f7-navbar>\n  <p>Page content</p>\n</f7-page>\n\n<!-- Renders to: -->\n\n<div class=\"page\">\n  <div class=\"navbar\">\n    <div class=\"navbar-inner sliding\">\n      <div class=\"title\">My App</div>\n    </div>\n  </div>\n  <div class=\"page-content infinite-scroll-content\">\n    <p>Page content</p>\n    <div class=\"preloader infinite-scroll-preloader\"></div>\n  </div>\n</div>\nPage Content as Tabs\n<f7-page tabs :page-content=\"false\">\n  <f7-navbar title=\"My App\"></f7-navbar>\n  <f7-page-content tab tab-active id=\"tab-1\">Tab 1 Content ...</f7-page-content>\n  <f7-page-content tab id=\"tab-2\">Tab 2 Content ...</f7-page-content>\n  <f7-page-content tab id=\"tab-3\">Tab 3 Content ...</f7-page-content>\n</f7-page>\n\n<!-- Renders to: -->\n\n<div class=\"page\">\n  <div class=\"navbar\">\n    <div class=\"navbar-inner sliding\">\n      <div class=\"title\">My App</div>\n    </div>\n  </div>\n  <div id=\"tab-1\" class=\"page-content tab tab-active\">\n    Tab 1 Content ...\n  </div>\n  <div id=\"tab-2\" class=\"page-content tab\">\n    Tab 2 Content ...\n  </div>\n  <div id=\"tab-3\" class=\"page-content tab\">\n    Tab 3 Content ...\n  </div>\n</div>\n<code>## 32.0 Panel Vue Component</code>\n!-- Left Panel with Reveal effect --&gt;\n<f7-panel left reveal>\n  <!-- Left panel content goes here -->\n</f7-panel>\n\n<!-- Right Panel with Cover effect and dark layout theme -->\n<f7-panel right cover class=\"theme-dark\">\n  <!-- Right panel content goes here -->\n</f7-panel>\nRenders to:\n<div class=\"panel panel-left panel-reveal\">\n  ...\n</div>\n<div class=\"panel panel-right panel-cover theme-dark\">\n  ...\n</div>\n<code>## 33.0 Photo Browser Vue Component</code>\nHere is how it can be used in Vue component and how to control it:\n<template>\n\n  <!-- Photo Browser -->\n  <f7-photo-browser\n    ref=\"pb\"\n    :photos=\"photos\"\n    theme=\"dark\"\n    @open=\"onOpen\"\n  ></f7-photo-browser>\n\n  <!-- Link To Open PB -->\n  <f7-link @click=\"openPhotoBrowser\">Photos</f7-link>\n\n</template>\n\n<script>\n  export default {\n    data: function () {\n      return {\n        photos: [\n          {\n            url: &#39;path/to/picture-1.jpg&#39;,\n            caption: &#39;Picture 1&#39;\n          },\n          {\n            url: &#39;path/to/picture-2.jpg&#39;,\n            caption: &#39;Picture 2&#39;\n          }\n        ]\n      }\n    },\n    methods: {\n      openPhotoBrowser: function () {\n        this.$refs.pb.open();\n      },\n      onOpen: function () {\n        console.log(&#39;Photo Browser is opened&#39;)\n      }\n    }\n  }\n</script>\n<code>## 34.0 Popover Vue Component</code>\nExamples\n<!-- Popover -->\n<f7-popover>\n  <!-- Popover content goes here -->\n</f7-popover>\nRenders to:\n<!-- Popover -->\n<div class=\"popover\">\n  <div class=\"popover-angle\"></div>\n  <div class=\"popover-inner\">\n    <!-- Popover content goes here -->\n  </div>\n</div>\n<code>## 35.0 Popup Vue Component</code>\n<!-- Popup -->\n<f7-popup>\n  <!-- Popup content goes here -->\n</f7-popup>\n\n<!-- Popup which is also fullscreen on tablets -->\n<f7-popup tablet-fullscreen>\n  <!-- Popup content goes here -->\n</f7-popup>\nRenders to:\n<!-- Popup -->\n<div class=\"popup\">\n  <!-- Popup content goes here -->\n</div>\n\n<!-- Popup which is also fullscreen on tablets -->\n<p><div class=\"popup tablet-fullscreen\">\n  <!-- Popup content goes here -->\n</div>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 Card Vue Component",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nExamples\n<!-- Preloader --></p>\n<p><f7-preloader></f7-preloader></p>\n<!-- Red preloader -->\n<p><f7-preloader color=\"red\"></f7-preloader></p>\n<!-- Blue with custom size -->\n<p><f7-preloader color=\"green\" size=\"44px\"></f7-preloader>\nRenders to:\n<!-- Preloader -->\n<span class=\"preloader\"></span></p>\n<!-- Red preloader -->\n<p><span class=\"preloader color-red\"></span></p>\n<!-- Blue with custom size -->\n<p><span class=\"preloader color-green\" style=\"width:44px; height:44px\"></span>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "36.0 Preloader / Spinner Vue Component",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nExamples\n<!-- Determinate Progressbar --></p>\n<p><f7-progressbar :progress=\"20\"></f7-progressbar></p>\n<!-- Determinate Red Progressbar -->\n<p><f7-progressbar :progress=\"30\" color=\"red\"></f7-progressbar></p>\n<!-- Infinite Blue Progressbar -->\n<p><f7-progressbar infinite color=\"green\"></f7-progressbar></p>\n<!-- Infinite Multi-color Progressbar -->\n<p><f7-progressbar infinite color=\"multi\"></f7-progressbar>\nRenders to:\n<!-- Determinate Progressbar -->\n<span class=\"progressbar\" data-progress=\"20\"><span></span></span></p>\n<!-- Determinate Red Progressbar -->\n<p><span class=\"progressbar color-red\" data-progress=\"30\"><span></span></span></p>\n<!-- Infinite Blue Progressbar -->\n<p><span class=\"progressbar progressbar-infinite color-green\"><span></span></span></p>\n<!-- Infinite Multi-color Progressbar -->\n<p><span class=\"progressbar progressbar-infinite color-multi\"><span></span></span>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "37.0 Progressbar Vue Component",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nRadios List\nRadios List is not a separate component, but just a particular case of using <f7-list>, <f7-list-item>.</p>\n<p><f7-list>\n  <!-- Additional \"radio\" prop to enable radio list item -->\n  <f7-list-item radio value=\"check_1\" name=\"demo-radio\" checked title=\"Radio 1\"></f7-list-item>\n  <f7-list-item radio value=\"check_2\" name=\"demo-radio\" title=\"Radio 2\"></f7-list-item>\n</f7-list>\nRadio v-model\nv-model is not supported on Radio vue component. Instead, just use the combination of checked property and @change event:</p>\n<template>\n  <f7-radio\n    name=\"fruit\"\n    value=\"bannana\"\n    :checked=\"fruit === 'bannana'\"\n    @change=\"fruit = $event.target.value\"\n  ></f7-radio>\n\n  <f7-radio\n    name=\"fruit\"\n    value=\"orange\"\n    :checked=\"fruit === 'orange'\"\n    @change=\"fruit = $event.target.value\"\n  ></f7-radio>\n\n  <f7-radio\n    name=\"fruit\"\n    value=\"apple\"\n    :checked=\"fruit === 'apple'\"\n    @change=\"fruit = $event.target.value\"\n  ></f7-radio>\n</template>\n<script>\n  export default {\n    data() {\n      return {\n        fruit: &#39;apple&#39;\n      };\n    },\n  };\n</script>\nExamples\n<!-- Inline radio -->\n<p>Lorem <f7-radio name=\"demo-radio-1\"></f7-radio> ipsum dolor sit amet, consectetur adipisicing elit. Alias beatae illo nihil aut eius commodi sint eveniet aliquid eligendi <f7-radio name=\"demo-radio-1\" checked></f7-radio> ad delectus impedit tempore nemo, enim vel praesentium consequatur nulla mollitia!</p>\n\n<!-- Radios List -->\n<f7-list>\n  <f7-list-item radio value=\"Books\" title=\"Books\" name=\"demo-radio-2\" checked></f7-list-item>\n  <f7-list-item radio value=\"Movies\" title=\"Movies\" name=\"demo-radio-2\"></f7-list-item>\n  <f7-list-item radio value=\"Food\" title=\"Food\" name=\"demo-radio-2\"></f7-list-item>\n  <f7-list-item radio value=\"Drinks\" title=\"Drinks\" name=\"demo-radio-2\"></f7-list-item>\n</f7-list>\n<code>## 39.0 Range Slider Vue Component</code>\n<!-- Default -->\n<f7-range\n  :min=\"0\"\n  :max=\"100\"\n  :step=\"1\"\n  :value=\"10\"\n></f7-range>\n\n<!-- Enable labels + color -->\n<f7-range\n  :min=\"0\"\n  :max=\"100\"\n  :step=\"1\"\n  :value=\"50\"\n  :label=\"true\"\n  color=\"orange\"\n></f7-range>\n\n<!-- Dual -->\n<f7-range\n  :min=\"0\"\n  :max=\"500\"\n  :step=\"1\"\n  :value=\"[100, 500]\"\n  :label=\"true\"\n  :dual=\"true\"\n  color=\"green\"\n></f7-range>\n<code>## 40.0 Searchbar Vue Component</code>\nWithout Slots:\n<f7-searchbar\n  disable-link-text=\"Cancel\"\n  placeholder=\"Search in items\"\n  :clear-button=\"true\"\n></f7-searchbar>\n\n<!-- Renders to: -->\n\n<form class=\"searchbar\">\n  <div class=\"searchbar-inner\">\n    <div class=\"searchbar-input-wrap\">\n      <input type=\"search\" placeholder=\"Search\">\n      <i class=\"searchbar-icon\"></i>\n      <span class=\"input-clear-button\"></span>\n    </div>\n    <span class=\"searchbar-disable-button\">Cancel</span>\n  </div>\n</form>\nWith Slots:\n<f7-searchbar\n  disable-link-text=\"Cancel\"\n  placeholder=\"Search in items\"\n  :clear-button=\"true\"\n>\n  <div slot=\"inner-start\">Inner Start</div>\n  <div slot=\"inner-end\">Inner End</div>\n  <div slot=\"input-wrap-start\">Input Wrap Start</div>\n  <div slot=\"input-wrap-end\">Input Wrap End</div>\n  <div slot=\"before-inner\">Before Inner</div>\n  <div slot=\"after-inner\">After Inner</div>\n</f7-searchbar>\n\n<!-- Renders to: -->\n\n<form class=\"searchbar\">\n  <div slot=\"before-inner\">Before Inner</div>\n  <div class=\"searchbar-inner\">\n    <div slot=\"inner-start\">Inner Start</div>\n    <div class=\"searchbar-input-wrap\">\n      <div slot=\"input-wrap-start\">Input Wrap Start</div>\n      <input type=\"search\" placeholder=\"Search\">\n      <i class=\"searchbar-icon\"></i>\n      <span class=\"input-clear-button\"></span>\n      <div slot=\"input-wrap-end\">Input Wrap End</div>\n    </div>\n    <span class=\"searchbar-disable-button\">Cancel</span>\n    <div slot=\"inner-end\">Inner End</div>\n  </div>\n  <div slot=\"after-inner\">After Inner</div>\n</form>\nAccess To Searchbar Instance\nIf you use automatic initalization to init Searchbar (with init:true prop) and need to use Searchbar API you can access its initialized instance by accessing .f7Searchbar component&#39;s property.\nExamples\nHere is how it can be used in Vue component with initialization\n<template>\n  <f7-page>\n\n    <!-- Searchbar -->\n    <f7-searchbar\n      disable-link-text=\"Cancel\"\n      search-container=\"#search-list\"\n      placeholder=\"Search in items\"\n      :clear-button=\"true\"\n      @searchbar:search=\"onSearch\"\n      @searchbar:enable=\"onEnable\"\n      @searchbar:disable=\"onDisable\"\n      @searchbar:clear=\"onClear\"\n    ></f7-searchbar>\n\n    <!-- Will be visible if there is no any results found, defined by \"searchbar-not-found\" class -->\n    <f7-list class=\"searchbar-not-found\">\n      <f7-list-item title=\"Nothing found\"></f7-list-item>\n    </f7-list>\n\n    <!-- Search through this list -->\n    <f7-list class=\"searchbar-found\" id=\"search-list\">\n      <f7-list-item v-for=\"item in items\" :title=\"'Item ' + item\"></f7-list-item>\n    </f7-list>\n\n  </f7-page>\n</template>\n\n<p><script>\n  export default {\n    data: function () {\n      return {\n        items: (function () {\n          var it = [];\n          for (var i = 0; i &lt; 100; i++) it.push(i+1);\n          return it;\n        })()\n      }\n    },\n    methods: {\n      onSearch: function (searchbar, query, previousQuery) {\n        console.log(&#39;search&#39;, query);\n      },\n      onClear: function (event) {\n        console.log(&#39;clear&#39;);\n      },\n      onEnable: function (event) {\n        console.log(&#39;enable&#39;);\n      },\n      onDisable: function (event) {\n        console.log(&#39;disable&#39;);\n      },\n    }\n  }\n</script>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "38.0 Radio Vue Component",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nExamples\n<!-- Sheet Modal --></p>\n<p><f7-sheet>\n  <!-- Sheet Modal content goes here -->\n</f7-sheet>\nRenders to:\n<!-- Sheet Modal --></p>\n<p><div class=\"sheet-modal\">\n  <div class=\"sheet-modal-inner\">\n    <!-- Sheet Modal content goes here -->\n  </div>\n</div>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "41.0 Sheet Modal Vue Component",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "42.0 Smart Select Vue Component",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "43.0 Sortable Vue Component",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "44.0 Statusbar Vue Component",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<!-- Default --></p>\n<p><f7-stepper></f7-stepper></p>\n<!-- Small and round -->\n<p><f7-stepper small round></f7-stepper></p>\n<!-- Min, max, step -->\n<p>&lt;f7-stepper\n  :min=&quot;0&quot;\n  :max=&quot;1000&quot;\n  :step=&quot;100&quot;\n  :value=&quot;500&quot;</p>\n<blockquote>\n<p></f7-stepper></p>\n</blockquote>\n<!-- With buttons only -->\n<p>&lt;f7-stepper\n  :min=&quot;0&quot;\n  :max=&quot;1000&quot;\n  :step=&quot;100&quot;\n  :value=&quot;500&quot;\n  :buttons-only=&quot;true&quot;</p>\n<blockquote>\n<p></f7-stepper></p>\n</blockquote>\n<!-- Event -->\n<p>&lt;f7-stepper\n  :min=&quot;10&quot;\n  :max=&quot;20&quot;\n  :step=&quot;0.5&quot;\n  :value=&quot;15&quot;\n  @stepper:change=&quot;(value) =&gt; { someVar = value }&quot;</p>\n<blockquote>\n<p></f7-stepper>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "45.0 Stepper Vue Component",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "46.0 Subnavbar Vue Component",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "47.0 Swiper Vue Component",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSwipe To Delete</p>\n<p><f7-list>\n  <f7-list-item swipeout title=\"Item 1\" @swipeout:deleted=\"onSwipeoutDeleted\">\n    <f7-swipeout-actions>\n      <f7-swipeout-button delete>Delete</f7-swipeout-button>\n    </f7-swipeout-actions>\n  </f7-list-item>\n  <f7-list-item swipeout title=\"Item 2\" @swipeout:deleted=\"onSwipeoutDeleted\">\n    <f7-swipeout-actions>\n      <f7-swipeout-button delete>Delete</f7-swipeout-button>\n    </f7-swipeout-actions>\n  </f7-list-item>\n</f7-list>\nRenders to:</p>\n<p><div class=\"list\">\n  <ul>\n    <li class=\"swipeout\">\n      <div class=\"swipeout-content\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Item 1</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swipeout-actions-right\">\n        <a href=\"#\" class=\"swipeout-delete\">Delete</a>\n      </div>\n    </li>\n    <li class=\"swipeout\">\n      <div class=\"swipeout-content\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Item 2</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swipeout-actions-right\">\n        <a href=\"#\" class=\"swipeout-delete\">Delete</a>\n      </div>\n    </li>\n  </ul>\n</div>\nWith Additional Actions</p>\n<p><f7-list>\n  <f7-list-item swipeout title=\"Item 1\" @swipeout:deleted=\"onSwipeoutDeleted\">\n    <f7-swipeout-actions>\n      <f7-swipeout-button close color=\"blue\">Reply</f7-swipeout-button>\n      <f7-swipeout-button delete>Delete</f7-swipeout-button>\n    </f7-swipeout-actions>\n  </f7-list-item>\n  <f7-list-item swipeout title=\"Item 2\" @swipeout:deleted=\"onSwipeoutDeleted\">\n    <f7-swipeout-actions>\n      <f7-swipeout-button close color=\"blue\">Reply</f7-swipeout-button>\n      <f7-swipeout-button delete>Delete</f7-swipeout-button>\n    </f7-swipeout-actions>\n  </f7-list-item>\n</f7-list>\nRenders to:</p>\n<p><div class=\"list\">\n  <ul>\n    <li class=\"swipeout\">\n      <div class=\"swipeout-content\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Item 1</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swipeout-actions-right\">\n        <a href=\"#\" class=\"swipeout-close color-blue\">Reply</a>\n        <a href=\"#\" class=\"swipeout-delete\">Delete</a>\n      </div>\n    </li>\n    <li class=\"swipeout\">\n      <div class=\"swipeout-content\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Item 2</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swipeout-actions-right\">\n        <a href=\"#\" class=\"swipeout-close color-blue\">Reply</a>\n        <a href=\"#\" class=\"swipeout-delete\">Delete</a>\n      </div>\n    </li>\n  </ul>\n</div>\nWith Actions On Left</p>\n<p><f7-list>\n  <f7-list-item swipeout title=\"Item 1\">\n    <f7-swipeout-actions left>\n      <f7-swipeout-button close color=\"orange\">Mark</f7-swipeout-button>\n    </f7-swipeout-actions>\n  </f7-list-item>\n  <f7-list-item swipeout title=\"Item 2\">\n    <f7-swipeout-actions left>\n      <f7-swipeout-button close color=\"orange\">Mark</f7-swipeout-button>\n    </f7-swipeout-actions>\n  </f7-list-item>\n</f7-list>\nRenders to:</p>\n<p><div class=\"list\">\n  <ul>\n    <li class=\"swipeout\">\n      <div class=\"swipeout-content\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Item 1</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swipeout-actions-left\">\n        <a href=\"#\" class=\"swipeout-close color-orange\">Mark</a>\n      </div>\n    </li>\n    <li class=\"swipeout\">\n      <div class=\"swipeout-content\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Item 2</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swipeout-actions-right\">\n        <a href=\"#\" class=\"swipeout-close color-orange\">Mark</a>\n      </div>\n    </li>\n  </ul>\n</div>\nWith Actions On Both Sides</p>\n<p><f7-list>\n  <f7-list-item swipeout title=\"Item 1\">\n    <f7-swipeout-actions left>\n      <f7-swipeout-button close color=\"orange\">Mark</f7-swipeout-button>\n    </f7-swipeout-actions>\n    <f7-swipeout-actions right>\n      <f7-swipeout-button delete>Delete</f7-swipeout-button>\n    </f7-swipeout-actions>\n  </f7-list-item>\n  <f7-list-item swipeout title=\"Item 2\">\n    <f7-swipeout-actions left>\n      <f7-swipeout-button close color=\"orange\">Mark</f7-swipeout-button>\n    </f7-swipeout-actions>\n    <f7-swipeout-actions right>\n      <f7-swipeout-button delete>Delete</f7-swipeout-button>\n    </f7-swipeout-actions>\n  </f7-list-item>\n</f7-list>\nRenders to:</p>\n<p><div class=\"list\">\n  <ul>\n    <li class=\"swipeout\">\n      <div class=\"swipeout-content\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Item 1</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swipeout-actions-left\">\n        <a href=\"#\" class=\"swipeout-close color-orange\">Mark</a>\n      </div>\n      <div class=\"swipeout-actions-right\">\n        <a href=\"#\" class=\"swipeout-delete\">Delete</a>\n      </div>\n    </li>\n    <li class=\"swipeout\">\n      <div class=\"swipeout-content\">\n        <div class=\"item-content\">\n          <div class=\"item-inner\">\n            <div class=\"item-title\">Item 2</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"swipeout-actions-right\">\n        <a href=\"#\" class=\"swipeout-close color-orange\">Mark</a>\n      </div>\n      <div class=\"swipeout-actions-right\">\n        <a href=\"#\" class=\"swipeout-delete\">Delete</a>\n      </div>\n    </li>\n  </ul>\n</div>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "48.0 Swipeout Vue Component",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nExamples</p>\n<p><f7-tabs>\n  <f7-tab id=\"tab1\" tab-active>Tab 1 content...</f7-tab>\n  <f7-tab id=\"tab2\">Tab 2 content...</f7-tab>\n</f7-tabs></p>\n<!-- Renders to: -->\n<p><div class=\"tabs\">\n  <div id=\"tab1\" class=\"tab tab-active\">Tab 1 content...</div>\n  <div id=\"tab2\" class=\"tab\">Tab 2 content...</div>\n</div>\nAnimated tabs</p>\n<p><f7-tabs animated>\n  <f7-tab id=\"tab1\" tab-active>Tab 1 content...</f7-tab>\n  <f7-tab id=\"tab2\">Tab 2 content...</f7-tab>\n</f7-tabs></p>\n<!-- Renders to: -->\n<p><div class=\"tabs-animated-wrap\">\n  <div class=\"tabs\">\n    <div id=\"tab1\" class=\"tab tab-active\">Tab 1 content...</div>\n    <div id=\"tab2\" class=\"tab\">Tab 2 content...</div>\n  </div>\n</div>\n</div>\nSwipeable tabs</p>\n<p><f7-tabs swipeable>\n  <f7-tab id=\"tab1\" tab-active>Tab 1 content...</f7-tab>\n  <f7-tab id=\"tab2\">Tab 2 content...</f7-tab>\n</f7-tabs></p>\n<!-- Renders to: -->\n<p><div class=\"tabs-swipeable-wrap\">\n  <div class=\"tabs\">\n    <div id=\"tab1\" class=\"tab tab-active\">Tab 1 content...</div>\n    <div id=\"tab2\" class=\"tab\">Tab 2 content...</div>\n  </div>\n</div>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "49.0 Tabs Vue Component",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<!-- Checked --></p>\n<p><f7-toggle checked></f7-toggle></p>\n<!-- Color toggle -->\n<p><f7-toggle color=\"red\"></f7-toggle></p>\n<!-- Disabled -->\n<p><f7-toggle color=\"orange\" disabled></f7-toggle>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "50.0 Toggle Vue Component",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "51.0 Toolbar Vue Component",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "52.0 View Vue Component",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "53.0 Virtual List Vue Component",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>var app = new Framework7({\n  actions: {\n    convertToPopover: false,\n    grid: true,\n  }\n});</code></pre>",
              "type" : "Html"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "54.0 actions:",
            "update_at" : 1556488166377
          },
          "x32" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>var autocomplete = app.autocomplete.create({\n  inputEl: &#39;#autocomplete-dropdown&#39;,\n  openIn: &#39;dropdown&#39;,\n  source: function (query, render) {\n    ...\n  }\n});</code></pre>",
              "type" : "Html"
            },
            "id" : "x32",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "32",
            "time" : 1555228371611,
            "title" : "55.0 autocomplete",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>//Export DOM7 to local variable to make it easy accessable\nvar $$ = Dom7;\n$$(&#39;.something&#39;).on(&#39;click&#39;, function (e) {\n    $$(this).addClass(&#39;hello&#39;).attr(&#39;title&#39;, &#39;world&#39;).insertAfter(&#39;.something-else&#39;);\n});</code></pre>",
              "type" : "Html"
            },
            "id" : "x33",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "56.0 Dom7",
            "update_at" : 1556488166377
          },
          "x34" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// Initialize app\nvar app = new Framework7();</p>\n<p>var $$ = Dom7;</p>\n<p>// Compile templates once on app load/init\nvar searchTemplate = $$(&#39;script#search-template&#39;).html();\nvar compiledSearchTemplate = Template7.compile(searchTemplate);</p>\n<p>var listTemplate = $$(&#39;script#list-template&#39;).html();\nvar compiledListTemplate = Template7.compile(listTemplate);</p>\n<p>// That is all, now and further just execute compiled templates with required context\napp.on(&#39;pageInit&#39;, function (page) {\n    // Just execute compiled search template with required content:\n    var html = compiledSearchTemplate({/<em>...some data...</em>/});</p>\n<pre><code>// Do something with html...\n</code></pre><p>});\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x34",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "34",
            "time" : 1555228371611,
            "title" : "57.0 template7",
            "update_at" : 1556488166377
          },
          "x35" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nvar myPlugin = {\n  // Module Name\n  name: &#39;demo-module&#39;,\n  /<em> Install callback\n  It will be executed right after component is installed\n  Context of this callback points to Class where it was installed\n  </em>/\n  install() {\n    const Class = this;\n    console.log(Class);\n  },\n  /<em> Create callback\n  It will be executed in the very beginning of class initilization (when we create new instance of the class)\n  </em>/\n  create(instance) {\n    console.log(&#39;init&#39;, instance);\n  },\n  /<em>\n  Object with default class/plugin parameters\n  </em>/\n  params: {\n    myPlugin: {\n      a: 1,\n      b: 2,\n      c: 3,\n    }\n  },\n  /<em> proto object extends Class prototype </em>/\n  proto: {\n    demo() {\n      return &#39;demo-module-proto-method&#39;;\n    },\n    demoStatic: &#39;demo-module-proto-static&#39;,\n  },\n  // Extend Class with static props and methods, e.g. Class.myMethod\n  static: {\n    demo() {\n      return &#39;demo-module-class-method&#39;;\n    },\n    demoStatic: &#39;demo-module-class-static&#39;,\n  },\n  /<em> Initialized instance Props &amp; Methods </em>/\n  instance: {\n    demoProp: true,\n    demoMethod() {\n      return &#39;demo-method&#39;;\n    },\n  },\n  /<em> Event handlers </em>/\n  on: {\n    demoEvent(a, b) {\n      console.log(&#39;demo-event&#39;, a, b);\n    },\n  },\n  /<em> Handle clicks </em>/\n  clicks: {\n    // prop name means CSS selector of element to add click handler\n    &#39;p&#39;: function ($clickedEl, data) {\n      // $clickedEl: Dom7 instance of clicked element\n      // data: element data set (data- attributes)\n    },\n  }\n};</p>\n<p>Framework7.use(myPlugin);\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x35",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "35",
            "time" : 1555228371611,
            "title" : "58.0 plugin",
            "update_at" : 1556488166377
          },
          "x36" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x36",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3",
            "name" : "tei952",
            "ord" : "36",
            "time" : 1555228371611,
            "title" : "59.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_31" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n集群中的应用服务器（节点）通常被设计成无状态，用户可以请求任何一个节点。</p>\n<p>负载均衡器会根据集群中每个节点的负载情况，将用户请求转发到合适的节点上。</p>\n<p>负载均衡器可以用来实现高可用以及伸缩性：</p>\n<p> 高可用：当某个节点故障时，负载均衡器会将用户请求转发到另外的节点上，从而保证所有服务持续可用；\n 伸缩性：根据系统整体负载情况，可以很容易地添加或移除节点。</p>\n<p>负载均衡器运行过程包含两个部分：</p>\n<p> 根据负载均衡算法得到转发的节点；\n 进行转发。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 负载均衡",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n轮询（Round Robin）</p>\n<p>轮询算法把每个请求轮流发送到每个服务器上。</p>\n<p>下图中，一共有 6 个客户端产生了 6 个请求，这 6 个请求按 (1, 2, 3, 4, 5, 6) 的顺序发送。(1, 3, 5) 的请求会被发送到服务器 1，(2, 4, 6) 的请求会被发送到服务器 2。</p>\n<p><div align=\"center\"> <img src=\"pics/9daa3616-00a4-48c4-9146-792dc8499be3.jpg\" width=\"500px\"/> </div><br></p>\n<p>该算法比较适合每个服务器的性能差不多的场景，如果有性能存在差异的情况下，那么性能较差的服务器可能无法承担过大的负载（下图的 Server 2）。</p>\n<p><div align=\"center\"> <img src=\"pics/bfea8772-d01b-4a51-8adc-edfd7d3dce84.jpg\" width=\"500px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 负载均衡算法",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n加权轮询是在轮询的基础上，根据服务器的性能差异，为服务器赋予一定的权值，性能高的服务器分配更高的权值。</p>\n<p>例如下图中，服务器 1 被赋予的权值为 5，服务器 2 被赋予的权值为 1，那么 (1, 2, 3, 4, 5) 请求会被发送到服务器 1，(6) 请求会被发送到服务器 2。</p>\n<p><div align=\"center\"> <img src=\"pics/4ab87717-e264-4232-825d-8aaf08f14e8b.jpg\" width=\"500px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 加权轮询（Weighted Round Robbin）",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n由于每个请求的连接时间不一样，使用轮询或者加权轮询算法的话，可能会让一台服务器当前连接数过大，而另一台服务器的连接过小，造成负载不均衡。</p>\n<p>例如下图中，(1, 3, 5) 请求会被发送到服务器 1，但是 (1, 3) 很快就断开连接，此时只有 (5) 请求连接服务器 1；(2, 4, 6) 请求被发送到服务器 2，只有 (2) 的连接断开，此时 (6, 4) 请求连接服务器 2。该系统继续运行时，服务器 2 会承担过大的负载。</p>\n<p><div align=\"center\"> <img src=\"pics/e98deb5a-d5d4-4294-aa9b-9220d4483403.jpg\" width=\"500px\"/> </div><br></p>\n<p>最少连接算法就是将请求发送给当前最少连接数的服务器上。</p>\n<p>例如下图中，服务器 1 当前连接数最小，那么新到来的请求 6 就会被发送到服务器 1 上。</p>\n<p><div align=\"center\"> <img src=\"pics/43d323ac-9f07-4e4a-a315-4eaf8c38766c.jpg\" width=\"500px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 最少连接（least Connections）",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>在最少连接的基础上，根据服务器的性能为每台服务器分配权重，再根据权重计算出每台服务器能处理的连接数。</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 加权最少连接（Weighted Least Connection）",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n把请求随机发送到服务器上。</p>\n<p>和轮询算法类似，该算法比较适合服务器性能差不多的场景。</p>\n<p><div align=\"center\"> <img src=\"pics/a42ad3a7-3574-4c48-a783-ed3d08a0688a.jpg\" width=\"500px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 随机算法（Random）",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n源地址哈希通过对客户端 IP 计算哈希值之后，再对服务器数量取模得到目标服务器的序号。</p>\n<p>可以保证同一 IP 的客户端的请求会转发到同一台服务器上，用来实现会话粘滞（Sticky Session）</p>\n<p><div align=\"center\"> <img src=\"pics/0f399a9f-1351-4b2d-b8a4-2ebe82b1a703.jpg\" width=\"500px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 源地址哈希法 (IP Hash)",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nHTTP 重定向负载均衡服务器使用某种负载均衡算法计算得到服务器的 IP 地址之后，将该地址写入 HTTP 重定向报文中，状态码为 302。客户端收到重定向报文之后，需要重新向服务器发起请求。</p>\n<p>缺点：</p>\n<p> 需要两次请求，因此访问延迟比较高；\n HTTP 负载均衡器处理能力有限，会限制集群的规模。</p>\n<p>该负载均衡转发的缺点比较明显，实际场景中很少使用它。</p>\n<p><div align=\"center\"> <img src=\"pics/02a1fbfd-7a9d-4114-95df-ca2445587a1f.jpg\" width=\"500px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 转发实现HTTP 重定向",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在 DNS 解析域名的同时使用负载均衡算法计算服务器 IP 地址。</p>\n<p>优点：</p>\n<p> DNS 能够根据地理位置进行域名解析，返回离用户最近的服务器 IP 地址。</p>\n<p>缺点：</p>\n<p> 由于 DNS 具有多级结构，每一级的域名记录都可能被缓存，当下线一台服务器需要修改 DNS 记录时，需要过很长一段时间才能生效。</p>\n<p>大型网站基本使用了 DNS 做为第一级负载均衡手段，然后在内部使用其它方式做第二级负载均衡。也就是说，域名解析的结果为内部的负载均衡服务器 IP 地址。</p>\n<p><div align=\"center\"> <img src=\"pics/d2c072cc-8b17-480c-813e-18cdb3b4b51f.jpg\" width=\"500px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 DNS 域名解析",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n反向代理服务器位于源服务器前面，用户的请求需要先经过反向代理服务器才能到达源服务器。反向代理可以用来进行缓存、日志记录等，同时也可以用来做为负载均衡服务器。</p>\n<p>在这种负载均衡转发方式下，客户端不直接请求源服务器，因此源服务器不需要外部 IP 地址，而反向代理需要配置内部和外部两套 IP 地址。</p>\n<p>优点：</p>\n<p> 与其它功能集成在一起，部署简单。</p>\n<p>缺点：</p>\n<p> 所有请求和响应都需要经过反向代理服务器，它可能会成为性能瓶颈。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 反向代理服务器",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在操作系统内核进程获取网络数据包，根据负载均衡算法计算源服务器的 IP 地址，并修改请求数据包的目的 IP 地址，最后进行转发。</p>\n<p>源服务器返回的响应也需要经过负载均衡服务器，通常是让负载均衡服务器同时作为集群的网关服务器来实现。</p>\n<p>优点：</p>\n<p> 在内核进程中进行处理，性能比较高。</p>\n<p>缺点：</p>\n<p> 和反向代理一样，所有的请求和响应都经过负载均衡服务器，会成为性能瓶颈。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 网络层",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在链路层根据负载均衡算法计算源服务器的 MAC 地址，并修改请求数据包的目的 MAC 地址，并进行转发。</p>\n<p>通过配置源服务器的虚拟 IP 地址和负载均衡服务器的 IP 地址一致，从而不需要修改 IP 地址就可以进行转发。也正因为 IP 地址一样，所以源服务器的响应不需要转发回负载均衡服务器，可以直接转发给客户端，避免了负载均衡服务器的成为瓶颈。</p>\n<p>这是一种三角传输模式，被称为直接路由。对于提供下载和视频服务的网站来说，直接路由避免了大量的网络传输数据经过负载均衡服务器。</p>\n<p>这是目前大型网站使用最广负载均衡转发方式，在 Linux 平台可以使用的负载均衡服务器为 LVS（Linux Virtual Server）。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 链路层",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n一个用户的 Session 信息如果存储在一个服务器上，那么当负载均衡器把用户的下一个请求转发到另一个服务器，由于服务器没有用户的 Session 信息，那么该用户就需要重新进行登录等操作。</p>\n<p>Sticky Session</p>\n<p>需要配置负载均衡器，使得一个用户的所有请求都路由到同一个服务器，这样就可以把用户的 Session 存放在该服务器中。</p>\n<p>缺点：</p>\n<p> 当服务器宕机时，将丢失该服务器上的所有 Session。</p>\n<p><div align=\"center\"> <img src=\"pics/1623f524-b011-40c8-b83f-eab38d538f76.png\" width=\"400px\"/> </div><br></p>\n<p>Session Replication</p>\n<p>在服务器之间进行 Session 同步操作，每个服务器都有所有用户的 Session 信息，因此用户可以向任何一个服务器进行请求。</p>\n<p>缺点：</p>\n<p> 占用过多内存；\n 同步过程占用网络带宽以及服务器处理器时间。</p>\n<p><div align=\"center\"> <img src=\"pics/40c6570d-c1d7-4c38-843e-ba991b2328c2.png\" width=\"400px\"/> </div><br></p>\n<p>Session Server</p>\n<p>使用一个单独的服务器存储 Session 数据，可以使用传统的 MySQL，也使用 Redis 或者 Memcached 这种内存型数据库。</p>\n<p>优点：</p>\n<p> 为了使得大型网站具有伸缩性，集群中的应用服务器通常需要保持无状态，那么应用服务器不能存储用户的会话信息。Session Server 将用户的会话信息单独进行存储，从而保证了应用服务器的无状态。</p>\n<p>缺点：</p>\n<p> 需要去实现存取 Session 的代码。</p>\n<p><div align=\"center\"> <img src=\"pics/fdc45a09-f838-4348-8959-d2c793727788.png\" width=\"600px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 集群下的 Session 管理",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_31",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_32" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n概念</p>\n<p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p>\n<p><div align=\"center\"> <img src=\"pics/f74144be-857a-40cd-8ec7-87626ef4e20b.png\" width=\"400px\"> </div><br></p>\n<p>ACID</p>\n<p>原子性（Atomicity）</p>\n<p>事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。</p>\n<p>回滚可以用回滚日志来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</p>\n<p>一致性（Consistency）</p>\n<p>数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。</p>\n<p>隔离性（Isolation）</p>\n<p>一个事务所做的修改在最终提交以前，对其它事务是不可见的。</p>\n<p>持久性（Durability）</p>\n<p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</p>\n<p>使用重做日志来保证持久性。</p>\n<p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：</p>\n<p> 只有满足一致性，事务的执行结果才是正确的。\n 在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。\n 在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。\n 事务满足持久化是为了能应对数据库崩溃的情况。</p>\n<p><div align=\"center\"> <img src=\"pics/417bc315-4409-48c6-83e0-59e8d405429e.jpg\" width=\"400px\"> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 事务",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>MySQL 默认采用自动提交模式。也就是说，如果不显式使用`START TRANSACTION`语句来开始一个事务，那么每个查询都会被当做一个事务自动提交。</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 AUTOCOMMIT",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p>\n<p>丢失修改</p>\n<p>T<sub>1</sub> 和 T<sub>2</sub> 两个事务都对一个数据进行修改，T<sub>1</sub> 先修改，T<sub>2</sub> 随后修改，T<sub>2</sub> 的修改覆盖了 T<sub>1</sub> 的修改。</p>\n<p><div align=\"center\"> <img src=\"pics/75184b58-c627-4edc-8dcf-605762ebb733.png\" width=\"320px\"> </div><br></p>\n<p>读脏数据</p>\n<p>T<sub>1</sub> 修改一个数据，T<sub>2</sub> 随后读取这个数据。如果 T<sub>1</sub> 撤销了这次修改，那么 T<sub>2</sub> 读取的数据是脏数据。</p>\n<p><div align=\"center\"> <img src=\"pics/af0e94d9-502d-4531-938f-d46dd29de52d.png\" width=\"360px\"> </div><br></p>\n<p>不可重复读</p>\n<p>T<sub>2</sub> 读取一个数据，T<sub>1</sub> 对该数据做了修改。如果 T<sub>2</sub> 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p>\n<p><div align=\"center\"> <img src=\"pics/66ae164c-ad47-4905-895e-51fe38ce797a.png\" width=\"360px\"> </div><br></p>\n<p>幻影读</p>\n<p>T<sub>1</sub> 读取某个范围的数据，T<sub>2</sub> 在这个范围内插入新的数据，T<sub>1</sub> 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p>\n<p><div align=\"center\"> <img src=\"pics/8fdc577d-552d-4b43-b5e4-a8f98bc2cb51.png\" width=\"340px\"> </div><br></p>\n<p>产生并发不一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 并发一致性问题",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n封锁粒度</p>\n<p>MySQL 中提供了两种封锁粒度：行级锁以及表级锁。</p>\n<p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。</p>\n<p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。</p>\n<p>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 封锁",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n读写锁</p>\n<p> 排它锁（Exclusive），简写为 X 锁，又称写锁。\n 共享锁（Shared），简写为 S 锁，又称读锁。</p>\n<p>有以下两个规定：</p>\n<p> 一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。\n 一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</p>\n<p>锁的兼容关系如下：</p>\n<p>| - | X | S |\n| :--: | :--: | :--: |\n| <strong>X</strong> |×|×|\n| <strong>S</strong> |×|√|</p>\n<p>意向锁</p>\n<p>使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。</p>\n<p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p>\n<p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：</p>\n<p> 一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；\n 一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</p>\n<p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p>\n<p>各种锁的兼容关系如下：</p>\n<p>| - | X | IX | S | IS |\n| :--: | :--: | :--: | :--: | :--: |\n|  <strong>X</strong>      |×    |×    |×   | ×|\n|  <strong>IX</strong>     |×    |√   |×   | √|\n|  <strong>S</strong>      |×    |×    |√  | √|\n|  <strong>IS</strong>     |×    |√  |√  | √|</p>\n<p>解释如下：</p>\n<p> 任意 IS/IX 锁之间都是兼容的，因为它们只是表示想要对表加锁，而不是真正加锁；\n S 锁只与 S 锁和 IS 锁兼容，也就是说事务 T 想要对数据行加 S 锁，其它事务可以已经获得对表或者表中的行的 S 锁。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 封锁类型",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n三级封锁协议</p>\n<p><strong>一级封锁协议</strong> </p>\n<p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。</p>\n<p>可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。</p>\n<p>| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-x(A) | |\n| read A=20 | |\n| | lock-x(A) |\n|  | wait |\n| write A=19 |. |\n| commit |. |\n| unlock-x(A) |. |\n| | obtain |\n| | read A=19 |\n| | write A=21 |\n| | commit |\n| | unlock-x(A)|</p>\n<p><strong>二级封锁协议</strong> </p>\n<p>在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。</p>\n<p>可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。</p>\n<p>| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-x(A) | |\n| read A=20 | |\n| write A=19 | |\n| | lock-s(A) |\n|  | wait |\n| rollback | .|\n| A=20 |. |\n| unlock-x(A) |. |\n| | obtain |\n| | read A=20 |\n| | unlock-s(A)|\n| | commit |</p>\n<p><strong>三级封锁协议</strong> </p>\n<p>在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。</p>\n<p>可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。</p>\n<p>| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-s(A) | |\n| read A=20 | |\n|  |lock-x(A) |\n| | wait |\n|  read A=20| . |\n| commit | .|\n| unlock-s(A) |. |\n| | obtain |\n| | read A=20 |\n| | write A=19|\n| | commit |\n| | unlock-X(A)|</p>\n<p>两段锁协议</p>\n<p>加锁和解锁分为两个阶段进行。</p>\n<p>可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<p>事务遵循两段锁协议是保证可串行化调度的充分条件。例如以下操作满足两段锁协议，它是可串行化调度。</p>\n<p>html\nlock-x(A)...lock-s(B)...lock-s(C)...unlock(A)...unlock(C)...unlock(B)</p>\n<p>但不是必要条件，例如以下操作不满足两段锁协议，但是它还是可串行化调度。</p>\n<p>html\nlock-x(A)...unlock(A)...lock-s(B)...unlock(B)...lock-s(C)...unlock(C)\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 封锁协议",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</p>\n<p>InnoDB 也可以使用特定的语句进行显示锁定：</p>\n<p>sql\nSELECT ... LOCK In SHARE MODE;\nSELECT ... FOR UPDATE;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 MySQL 隐式与显示锁定",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n未提交读（READ UNCOMMITTED）</p>\n<p>事务中的修改，即使没有提交，对其它事务也是可见的。</p>\n<p>提交读（READ COMMITTED）</p>\n<p>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。</p>\n<p>可重复读（REPEATABLE READ）</p>\n<p>保证在同一个事务中多次读取同样数据的结果是一样的。</p>\n<p>可串行化（SERIALIZABLE）</p>\n<p>强制事务串行执行。</p>\n<p>需要加锁实现，而其它隔离级别通常不需要。</p>\n<p>| 隔离级别 | 脏读 | 不可重复读 | 幻影读 |\n| :---: | :---: | :---:| :---: |\n| 未提交读 | √ | √ | √ |\n| 提交读 | × | √ | √ |\n| 可重复读 | × | × | √ |\n| 可串行化 | × | × | × |\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 隔离级别",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p>\n<p>版本号</p>\n<p> 系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。\n 事务版本号：事务开始时的系统版本号。</p>\n<p>隐藏的列</p>\n<p>MVCC 在每行记录后面都保存着两个隐藏的列，用来存储两个版本号：</p>\n<p> 创建版本号：指示创建一个数据行的快照时的系统版本号；\n 删除版本号：如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示该快照已经被删除了。</p>\n<p>Undo 日志</p>\n<p>MVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行（Record）的所有快照连接起来。</p>\n<p><div align=\"center\"> <img src=\"pics/e41405a8-7c05-4f70-8092-e961e28d3112.jpg\" width=\"\"/> </div><br></p>\n<p>实现过程</p>\n<p>以下实现过程针对可重复读隔离级别。</p>\n<p>当开始一个事务时，该事务的版本号肯定大于当前所有数据行快照的创建版本号，理解这一点很关键。数据行快照的创建版本号是创建数据行快照时的系统版本号，系统版本号随着创建事务而递增，因此新创建一个事务时，这个事务的系统版本号比之前的系统版本号都大，也就是比所有数据行快照的创建版本号都大。</p>\n<p>SELECT</p>\n<p>多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。</p>\n<p>把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于 T 的版本号，因为如果大于或者等于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。</p>\n<p>INSERT</p>\n<p>将当前系统版本号作为数据行快照的创建版本号。</p>\n<p>DELETE</p>\n<p>将当前系统版本号作为数据行快照的删除版本号。</p>\n<p>UPDATE</p>\n<p>将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。</p>\n<p>快照读与当前读</p>\n<p>快照读</p>\n<p>使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。</p>\n<p>sql\nselect * from table ...;</p>\n<p>当前读</p>\n<p>读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。</p>\n<p>sql\nselect <em> from table where ? lock in share mode;\nselect </em> from table where ? for update;\ninsert;\nupdate;\ndelete;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 多版本并发控制",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nNext-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。</p>\n<p>MVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。</p>\n<p>Record Locks</p>\n<p>锁定一个记录上的索引，而不是记录本身。</p>\n<p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p>\n<p>Gap Locks</p>\n<p>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p>\n<p>sql\nSELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 Next-Key Locks",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：</p>\n<p>sql\n(-∞, 10]\n(10, 11]\n(11, 13]\n(13, 20]\n(20, +∞)\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 Next-Key Locks",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n函数依赖</p>\n<p>记 A-&gt;B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。</p>\n<p>如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。</p>\n<p>对于 A-&gt;B，如果能找到 A 的真子集 A&#39;，使得 A&#39;-&gt; B，那么 A-&gt;B 就是部分函数依赖，否则就是完全函数依赖。</p>\n<p>对于 A-&gt;B，B-&gt;C，则 A-&gt;C 是一个传递函数依赖。</p>\n<p>异常</p>\n<p>以下的学生课程关系的函数依赖为 {Sno, Cname} -&gt; {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。</p>\n<p>| Sno | Sname | Sdept | Mname | Cname | Grade |\n| :---: | :---: | :---: | :---: | :---: |:---:|\n| 1 | 学生-1 | 学院-1 | 院长-1 | 课程-1 | 90 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-2 | 80 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-1 | 100 |\n| 3 | 学生-3 | 学院-2 | 院长-2 | 课程-2 | 95 |</p>\n<p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p>\n<p> 冗余数据：例如 <code>学生-2</code> 出现了两次。\n 修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。\n 删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 <code>课程-1</code> 需要删除第一行和第三行，那么 <code>学生-1</code> 的信息就会丢失。\n 插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</p>\n<p>范式</p>\n<p>范式理论是为了解决以上提到四种异常。</p>\n<p>高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。</p>\n<p>第一范式 (1NF)</p>\n<p>属性不可分。</p>\n<p>第二范式 (2NF)</p>\n<p>每个非主属性完全函数依赖于键码。</p>\n<p>可以通过分解来满足。</p>\n<p><font size=4> <strong>分解前</strong> </font><br></p>\n<p>| Sno | Sname | Sdept | Mname | Cname | Grade |\n| :---: | :---: | :---: | :---: | :---: |:---:|\n| 1 | 学生-1 | 学院-1 | 院长-1 | 课程-1 | 90 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-2 | 80 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-1 | 100 |\n| 3 | 学生-3 | 学院-2 | 院长-2 | 课程-2 | 95 |</p>\n<p>以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：</p>\n<p> Sno -&gt; Sname, Sdept\n Sdept -&gt; Mname\n Sno, Cname-&gt; Grade</p>\n<p>Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。</p>\n<p>Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。</p>\n<p><font size=4> <strong>分解后</strong> </font><br></p>\n<p>关系-1</p>\n<p>| Sno | Sname | Sdept | Mname |\n| :---: | :---: | :---: | :---: |\n| 1 | 学生-1 | 学院-1 | 院长-1 |\n| 2 | 学生-2 | 学院-2 | 院长-2 |\n| 3 | 学生-3 | 学院-2 | 院长-2 |</p>\n<p>有以下函数依赖：</p>\n<p> Sno -&gt; Sname, Sdept\n Sdept -&gt; Mname</p>\n<p>关系-2</p>\n<p>| Sno | Cname | Grade |\n| :---: | :---: |:---:|\n| 1 | 课程-1 | 90 |\n| 2 | 课程-2 | 80 |\n| 2 | 课程-1 | 100 |\n| 3 | 课程-2 | 95 |</p>\n<p>有以下函数依赖：</p>\n<p> Sno, Cname -&gt;  Grade</p>\n<p>第三范式 (3NF)</p>\n<p>非主属性不传递函数依赖于键码。</p>\n<p>上面的 关系-1 中存在以下传递函数依赖：</p>\n<p> Sno -&gt; Sdept -&gt; Mname</p>\n<p>可以进行以下分解：</p>\n<p>关系-11</p>\n<p>| Sno | Sname | Sdept |\n| :---: | :---: | :---: |\n| 1 | 学生-1 | 学院-1 |\n| 2 | 学生-2 | 学院-2 |\n| 3 | 学生-3 | 学院-2 |</p>\n<p>关系-12</p>\n<p>| Sdept | Mname |\n| :---: | :---: |\n| 学院-1 | 院长-1 |\n| 学院-2 | 院长-2 |\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 关系数据库设计理论",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nEntity-Relationship，有三个组成部分：实体、属性、联系。</p>\n<p>用来进行关系型数据库系统的概念设计。</p>\n<p>实体的三种联系</p>\n<p>包含一对一，一对多，多对多三种。</p>\n<p> 如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；\n 如果是一对一，画两个带箭头的线段；\n 如果是多对多，画两个不带箭头的线段。</p>\n<p>下图的 Course 和 Student 是一对多的关系。</p>\n<p><div align=\"center\"> <img src=\"pics/1d28ad05-39e5-49a2-a6a1-a6f496adba6a.png\" width=\"380px\"/> </div><br></p>\n<p>表示出现多次的关系</p>\n<p>一个实体在联系出现几次，就要用几条线连接。</p>\n<p>下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。</p>\n<p><div align=\"center\"> <img src=\"pics/ac929ea3-daca-40ec-9e95-4b2fa6678243.png\" width=\"250px\"/> </div><br></p>\n<p>联系的多向性</p>\n<p>虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。</p>\n<p><div align=\"center\"> <img src=\"pics/5bb1b38a-527e-4802-a385-267dadbd30ba.png\" width=\"350px\"/> </div><br></p>\n<p>表示子类</p>\n<p>用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。</p>\n<p><div align=\"center\"> <img src=\"pics/14389ea4-8d96-4e96-9f76-564ca3324c1e.png\" width=\"450px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 ER 图",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_32",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_33" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。</p>\n<p>拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 概述",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>确保一个类只有一个实例，并提供该实例的全局访问点。</p>\n<p>Class Diagram</p>\n<p>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</p>\n<p>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</p>\n<p><div align=\"center\"> <img src=\"pics/eca1f422-8381-409b-ad04-98ef39ae38ba.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>Ⅰ 懒汉式-线程不安全</p>\n<p>以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p>\n<p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致实例化多次 uniqueInstance。</p>\n<p>java\npublic class Singleton {</p>\n<pre><code>private static Singleton uniqueInstance;\n\nprivate Singleton() {\n}\n\npublic static Singleton getUniqueInstance() {\n    if (uniqueInstance == null) {\n        uniqueInstance = new Singleton();\n    }\n    return uniqueInstance;\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 创建型 单例（Singleton）",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。</p>\n<p>但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。</p>\n<p>java\nprivate static Singleton uniqueInstance = new Singleton();\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 饿汉式-线程安全",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了实例化多次 uniqueInstance。</p>\n<p>但是当一个线程进入该方法之后，其它试图进入该方法的线程都必须等待，即使 uniqueInstance 已经被实例化了。这会让线程阻塞时间过长，因此该方法有性能问题，不推荐使用。</p>\n<p>java\npublic static synchronized Singleton getUniqueInstance() {\n    if (uniqueInstance == null) {\n        uniqueInstance = new Singleton();\n    }\n    return uniqueInstance;\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 懒汉式-线程安全",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nuniqueInstance 只需要被实例化一次，之后就可以直接使用了。加锁操作只需要对实例化那部分的代码进行，只有当 uniqueInstance 没有被实例化时，才需要进行加锁。</p>\n<p>双重校验锁先判断 uniqueInstance 是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁。</p>\n<p>java\npublic class Singleton {</p>\n<pre><code>private volatile static Singleton uniqueInstance;\n\nprivate Singleton() {\n}\n\npublic static Singleton getUniqueInstance() {\n    if (uniqueInstance == null) {\n        synchronized (Singleton.class) {\n            if (uniqueInstance == null) {\n                uniqueInstance = new Singleton();\n            }\n        }\n    }\n    return uniqueInstance;\n}\n</code></pre><p>}</p>\n<p>考虑下面的实现，也就是只使用了一个 if 语句。在 uniqueInstance == null 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code> 这条语句，只是先后的问题，那么就会进行两次实例化。因此必须使用双重校验锁，也就是需要使用两个 if 语句。</p>\n<p>java\nif (uniqueInstance == null) {\n    synchronized (Singleton.class) {\n        uniqueInstance = new Singleton();\n    }\n}</p>\n<p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的， &#39;uniqueInstance = new Singleton();&#39; 这段代码其实是分为三步执行：</p>\n<p> 为 uniqueInstance 分配内存空间\n 初始化 uniqueInstance\n 将 uniqueInstance 指向分配的内存地址</p>\n<p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T<sub>1</sub> 执行了 1 和 3，此时 T<sub>2</sub> 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p>\n<p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 双重校验锁-线程安全",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n当 Singleton 类加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p>\n<p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p>\n<p>java\npublic class Singleton {</p>\n<pre><code>private Singleton() {\n}\n\nprivate static class SingletonHolder {\n    private static final Singleton INSTANCE = new Singleton();\n}\n\npublic static Singleton getUniqueInstance() {\n    return SingletonHolder.INSTANCE;\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 静态内部类实现",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\njava\npublic enum Singleton {</p>\n<pre><code>INSTANCE;\n\nprivate String objName;\n\n\npublic String getObjName() {\n    return objName;\n}\n\n\npublic void setObjName(String objName) {\n    this.objName = objName;\n}\n\n\npublic static void main(String[] args) {\n\n    // 单例测试\n    Singleton firstSingleton = Singleton.INSTANCE;\n    firstSingleton.setObjName(&quot;firstName&quot;);\n    System.out.println(firstSingleton.getObjName());\n    Singleton secondSingleton = Singleton.INSTANCE;\n    secondSingleton.setObjName(&quot;secondName&quot;);\n    System.out.println(firstSingleton.getObjName());\n    System.out.println(secondSingleton.getObjName());\n\n    // 反射获取实例测试\n    try {\n        Singleton[] enumConstants = Singleton.class.getEnumConstants();\n        for (Singleton enumConstant : enumConstants) {\n            System.out.println(enumConstant.getObjName());\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n</code></pre><p>}</p>\n<p>html\nfirstName\nsecondName\nsecondName\nsecondName</p>\n<p>该实现在多次序列化再进行反序列化之后，不会得到多个实例。而其它实现需要使用 transient 修饰所有字段，并且实现序列化和反序列化的方法。</p>\n<p>该实现可以防止反射攻击。在其它实现中，通过 setAccessible() 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象，如果要防止这种攻击，需要在构造函数中添加防止多次实例化的代码。该实现是由 JVM 保证只会实例化一次，因此不会出现上述的反射攻击。</p>\n<p>Examples</p>\n<p> Logger Classes\n Configuration Classes\n Accesing resources in shared mode\n Factories implemented as Singletons\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 枚举实现",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p>\n<p>Class Diagram</p>\n<p>简单工厂把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。</p>\n<p>这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。</p>\n<p><div align=\"center\"> <img src=\"pics/40c0c17e-bba6-4493-9857-147c0044a018.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic interface Product {\n}</p>\n<p>java\npublic class ConcreteProduct implements Product {\n}</p>\n<p>java\npublic class ConcreteProduct1 implements Product {\n}</p>\n<p>java\npublic class ConcreteProduct2 implements Product {\n}</p>\n<p>以下的 Client 类包含了实例化的代码，这是一种错误的实现。如果在客户类中存在这种实例化代码，就需要考虑将代码放到简单工厂中。</p>\n<p>java\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n    int type = 1;\n    Product product;\n    if (type == 1) {\n        product = new ConcreteProduct1();\n    } else if (type == 2) {\n        product = new ConcreteProduct2();\n    } else {\n        product = new ConcreteProduct();\n    }\n    // do something with the product\n}\n</code></pre><p>}</p>\n<p>以下的 SimpleFactory 是简单工厂实现，它被所有需要进行实例化的客户类调用。</p>\n<p>java\npublic class SimpleFactory {</p>\n<pre><code>public Product createProduct(int type) {\n    if (type == 1) {\n        return new ConcreteProduct1();\n    } else if (type == 2) {\n        return new ConcreteProduct2();\n    }\n    return new ConcreteProduct();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n    SimpleFactory simpleFactory = new SimpleFactory();\n    Product product = simpleFactory.createProduct(1);\n    // do something with the product\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 简单工厂（Simple Factory）",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p>\n<p>Class Diagram</p>\n<p>在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。</p>\n<p>下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。该方法是抽象的，需要由子类去实现。</p>\n<p><div align=\"center\"> <img src=\"pics/f4d0afd0-8e78-4914-9e60-4366eaf065b5.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic abstract class Factory {\n    abstract public Product factoryMethod();\n    public void doSomething() {\n        Product product = factoryMethod();\n        // do something with the product\n    }\n}</p>\n<p>java\npublic class ConcreteFactory extends Factory {\n    public Product factoryMethod() {\n        return new ConcreteProduct();\n    }\n}</p>\n<p>java\npublic class ConcreteFactory1 extends Factory {\n    public Product factoryMethod() {\n        return new ConcreteProduct1();\n    }\n}</p>\n<p>java\npublic class ConcreteFactory2 extends Factory {\n    public Product factoryMethod() {\n        return new ConcreteProduct2();\n    }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 工厂方法（Factory Method）",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>提供一个接口，用于创建  <strong>相关的对象家族</strong> 。</p>\n<p>Class Diagram</p>\n<p>抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。</p>\n<p>抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB() 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。</p>\n<p>至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。</p>\n<p>从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory，而工厂方法模式使用了继承。</p>\n<p><div align=\"center\"> <img src=\"pics/e2190c36-8b27-4690-bde5-9911020a1294.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic class AbstractProductA {\n}</p>\n<p>java\npublic class AbstractProductB {\n}</p>\n<p>java\npublic class ProductA1 extends AbstractProductA {\n}</p>\n<p>java\npublic class ProductA2 extends AbstractProductA {\n}</p>\n<p>java\npublic class ProductB1 extends AbstractProductB {\n}</p>\n<p>java\npublic class ProductB2 extends AbstractProductB {\n}</p>\n<p>java\npublic abstract class AbstractFactory {\n    abstract AbstractProductA createProductA();\n    abstract AbstractProductB createProductB();\n}</p>\n<p>java\npublic class ConcreteFactory1 extends AbstractFactory {\n    AbstractProductA createProductA() {\n        return new ProductA1();\n    }</p>\n<pre><code>AbstractProductB createProductB() {\n    return new ProductB1();\n}\n</code></pre><p>}</p>\n<p>java\npublic class ConcreteFactory2 extends AbstractFactory {\n    AbstractProductA createProductA() {\n        return new ProductA2();\n    }</p>\n<pre><code>AbstractProductB createProductB() {\n    return new ProductB2();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        AbstractFactory abstractFactory = new ConcreteFactory1();\n        AbstractProductA productA = abstractFactory.createProductA();\n        AbstractProductB productB = abstractFactory.createProductB();\n        // do something with productA and productB\n    }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 抽象工厂（Abstract Factory）",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>封装一个对象的构造过程，并允许按步骤构造。</p>\n<p>Class Diagram</p>\n<p><div align=\"center\"> <img src=\"pics/db5e376d-0b3e-490e-a43a-3231914b6668.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>以下是一个简易的 StringBuilder 实现，参考了 JDK 1.8 源码。</p>\n<p>java\npublic class AbstractStringBuilder {\n    protected char[] value;</p>\n<pre><code>protected int count;\n\npublic AbstractStringBuilder(int capacity) {\n    count = 0;\n    value = new char[capacity];\n}\n\npublic AbstractStringBuilder append(char c) {\n    ensureCapacityInternal(count + 1);\n    value[count++] = c;\n    return this;\n}\n\nprivate void ensureCapacityInternal(int minimumCapacity) {\n    // overflow-conscious code\n    if (minimumCapacity - value.length &gt; 0)\n        expandCapacity(minimumCapacity);\n}\n\nvoid expandCapacity(int minimumCapacity) {\n    int newCapacity = value.length * 2 + 2;\n    if (newCapacity - minimumCapacity &lt; 0)\n        newCapacity = minimumCapacity;\n    if (newCapacity &lt; 0) {\n        if (minimumCapacity &lt; 0) // overflow\n            throw new OutOfMemoryError();\n        newCapacity = Integer.MAX_VALUE;\n    }\n    value = Arrays.copyOf(value, newCapacity);\n}\n</code></pre><p>}</p>\n<p>java\npublic class StringBuilder extends AbstractStringBuilder {\n    public StringBuilder() {\n        super(16);\n    }</p>\n<pre><code>@Override\npublic String toString() {\n    // Create a copy, don&#39;t share the array\n    return new String(value, 0, count);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder();\n        final int count = 26;\n        for (int i = 0; i &lt; count; i++) {\n            sb.append((char) (&#39;a&#39; + i));\n        }\n        System.out.println(sb.toString());\n    }\n}</p>\n<p>html\nabcdefghijklmnopqrstuvwxyz\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 生成器（Builder）",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。</p>\n<p>Class Diagram</p>\n<p><div align=\"center\"> <img src=\"pics/b8922f8c-95e6-4187-be85-572a509afb71.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic abstract class Prototype {\n    abstract Prototype myClone();\n}</p>\n<p>java\npublic class ConcretePrototype extends Prototype {</p>\n<pre><code>private String filed;\n\npublic ConcretePrototype(String filed) {\n    this.filed = filed;\n}\n\n@Override\nPrototype myClone() {\n    return new ConcretePrototype(filed);\n}\n\n@Override\npublic String toString() {\n    return filed;\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        Prototype prototype = new ConcretePrototype(&quot;abc&quot;);\n        Prototype clone = prototype.myClone();\n        System.out.println(clone.toString());\n    }\n}</p>\n<p>html\nabc\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 原型模式（Prototype）",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。</p>\n<p>Class Diagram</p>\n<p> Handler：定义处理请求的接口，并且实现后继链（successor）</p>\n<p><div align=\"center\"> <img src=\"pics/ca9f23bf-55a4-47b2-9534-a28e35397988.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic abstract class Handler {</p>\n<pre><code>protected Handler successor;\n\n\npublic Handler(Handler successor) {\n    this.successor = successor;\n}\n\n\nprotected abstract void handleRequest(Request request);\n</code></pre><p>}</p>\n<p>java\npublic class ConcreteHandler1 extends Handler {</p>\n<pre><code>public ConcreteHandler1(Handler successor) {\n    super(successor);\n}\n\n\n@Override\nprotected void handleRequest(Request request) {\n    if (request.getType() == RequestType.TYPE1) {\n        System.out.println(request.getName() + &quot; is handle by ConcreteHandler1&quot;);\n        return;\n    }\n    if (successor != null) {\n        successor.handleRequest(request);\n    }\n}\n</code></pre><p>}</p>\n<p>java\npublic class ConcreteHandler2 extends Handler {</p>\n<pre><code>public ConcreteHandler2(Handler successor) {\n    super(successor);\n}\n\n\n@Override\nprotected void handleRequest(Request request) {\n    if (request.getType() == RequestType.TYPE2) {\n        System.out.println(request.getName() + &quot; is handle by ConcreteHandler2&quot;);\n        return;\n    }\n    if (successor != null) {\n        successor.handleRequest(request);\n    }\n}\n</code></pre><p>}</p>\n<p>java\npublic class Request {</p>\n<pre><code>private RequestType type;\nprivate String name;\n\n\npublic Request(RequestType type, String name) {\n    this.type = type;\n    this.name = name;\n}\n\n\npublic RequestType getType() {\n    return type;\n}\n\n\npublic String getName() {\n    return name;\n}\n</code></pre><p>}</p>\n<p>java\npublic enum RequestType {\n    TYPE1, TYPE2\n}</p>\n<p>java\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n\n    Handler handler1 = new ConcreteHandler1(null);\n    Handler handler2 = new ConcreteHandler2(handler1);\n\n    Request request1 = new Request(RequestType.TYPE1, &quot;request1&quot;);\n    handler2.handleRequest(request1);\n\n    Request request2 = new Request(RequestType.TYPE2, &quot;request2&quot;);\n    handler2.handleRequest(request2);\n}\n</code></pre><p>}</p>\n<p>html\nrequest1 is handle by ConcreteHandler1\nrequest2 is handle by ConcreteHandler2\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 行为型 责任链（Chain Of Responsibility）",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>将命令封装成对象中，具有以下作用：</p>\n<p> 使用命令来参数化其它对象\n 将命令放入队列中进行排队\n 将命令的操作记录到日志中\n 支持可撤销的操作</p>\n<p>Class Diagram</p>\n<p> Command：命令\n Receiver：命令接收者，也就是命令真正的执行者\n Invoker：通过它来调用命令\n Client：可以设置命令与命令的接收者</p>\n<p><div align=\"center\"> <img src=\"pics/c44a0342-f405-4f17-b750-e27cf4aadde2.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>设计一个遥控器，可以控制电灯开关。</p>\n<p><div align=\"center\"> <img src=\"pics/e6bded8e-41a0-489a-88a6-638e88ab7666.jpg\"/> </div><br></p>\n<p>java\npublic interface Command {\n    void execute();\n}</p>\n<p>java\npublic class LightOnCommand implements Command {\n    Light light;</p>\n<pre><code>public LightOnCommand(Light light) {\n    this.light = light;\n}\n\n@Override\npublic void execute() {\n    light.on();\n}\n</code></pre><p>}</p>\n<p>java\npublic class LightOffCommand implements Command {\n    Light light;</p>\n<pre><code>public LightOffCommand(Light light) {\n    this.light = light;\n}\n\n@Override\npublic void execute() {\n    light.off();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Light {</p>\n<pre><code>public void on() {\n    System.out.println(&quot;Light is on!&quot;);\n}\n\npublic void off() {\n    System.out.println(&quot;Light is off!&quot;);\n}\n</code></pre><p>}</p>\n<p>java\n/*<em>\n </em> 遥控器\n */\npublic class Invoker {\n    private Command[] onCommands;\n    private Command[] offCommands;\n    private final int slotNum = 7;</p>\n<pre><code>public Invoker() {\n    this.onCommands = new Command[slotNum];\n    this.offCommands = new Command[slotNum];\n}\n\npublic void setOnCommand(Command command, int slot) {\n    onCommands[slot] = command;\n}\n\npublic void setOffCommand(Command command, int slot) {\n    offCommands[slot] = command;\n}\n\npublic void onButtonWasPushed(int slot) {\n    onCommands[slot].execute();\n}\n\npublic void offButtonWasPushed(int slot) {\n    offCommands[slot].execute();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        Invoker invoker = new Invoker();\n        Light light = new Light();\n        Command lightOnCommand = new LightOnCommand(light);\n        Command lightOffCommand = new LightOffCommand(light);\n        invoker.setOnCommand(lightOnCommand, 0);\n        invoker.setOffCommand(lightOffCommand, 0);\n        invoker.onButtonWasPushed(0);\n        invoker.offButtonWasPushed(0);\n    }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 命令（Command）",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>为语言创建解释器，通常由语言的语法和语法分析来定义。</p>\n<p>Class Diagram</p>\n<p> TerminalExpression：终结符表达式，每个终结符都需要一个 TerminalExpression。\n Context：上下文，包含解释器之外的一些全局信息。</p>\n<p><div align=\"center\"> <img src=\"pics/2b125bcd-1b36-43be-9b78-d90b076be549.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>以下是一个规则检验器实现，具有 and 和 or 规则，通过规则可以构建一颗解析树，用来检验一个文本是否满足解析树定义的规则。</p>\n<p>例如一颗解析树为 D And (A Or (B C))，文本 &quot;D A&quot; 满足该解析树定义的规则。</p>\n<p>这里的 Context 指的是 String。</p>\n<p>java\npublic abstract class Expression {\n    public abstract boolean interpret(String str);\n}</p>\n<p>java\npublic class TerminalExpression extends Expression {</p>\n<pre><code>private String literal = null;\n\npublic TerminalExpression(String str) {\n    literal = str;\n}\n\npublic boolean interpret(String str) {\n    StringTokenizer st = new StringTokenizer(str);\n    while (st.hasMoreTokens()) {\n        String test = st.nextToken();\n        if (test.equals(literal)) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre><p>}</p>\n<p>java\npublic class AndExpression extends Expression {</p>\n<pre><code>private Expression expression1 = null;\nprivate Expression expression2 = null;\n\npublic AndExpression(Expression expression1, Expression expression2) {\n    this.expression1 = expression1;\n    this.expression2 = expression2;\n}\n\npublic boolean interpret(String str) {\n    return expression1.interpret(str) &amp;&amp; expression2.interpret(str);\n}\n</code></pre><p>}</p>\n<p>java\npublic class OrExpression extends Expression {\n    private Expression expression1 = null;\n    private Expression expression2 = null;</p>\n<pre><code>public OrExpression(Expression expression1, Expression expression2) {\n    this.expression1 = expression1;\n    this.expression2 = expression2;\n}\n\npublic boolean interpret(String str) {\n    return expression1.interpret(str) || expression2.interpret(str);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {</p>\n<pre><code>/**\n * 构建解析树\n */\npublic static Expression buildInterpreterTree() {\n    // Literal\n    Expression terminal1 = new TerminalExpression(&quot;A&quot;);\n    Expression terminal2 = new TerminalExpression(&quot;B&quot;);\n    Expression terminal3 = new TerminalExpression(&quot;C&quot;);\n    Expression terminal4 = new TerminalExpression(&quot;D&quot;);\n    // B C\n    Expression alternation1 = new OrExpression(terminal2, terminal3);\n    // A Or (B C)\n    Expression alternation2 = new OrExpression(terminal1, alternation1);\n    // D And (A Or (B C))\n    return new AndExpression(terminal4, alternation2);\n}\n\npublic static void main(String[] args) {\n    Expression define = buildInterpreterTree();\n    String context1 = &quot;D A&quot;;\n    String context2 = &quot;A B&quot;;\n    System.out.println(define.interpret(context1));\n    System.out.println(define.interpret(context2));\n}\n</code></pre><p>}</p>\n<p>html\ntrue\nfalse\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 解释器（Interpreter）",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。</p>\n<p>Class Diagram</p>\n<p> Aggregate 是聚合类，其中 createIterator() 方法可以产生一个 Iterator；\n Iterator 主要定义了 hasNext() 和 next() 方法。\n Client 组合了 Aggregate，为了迭代遍历 Aggregate，也需要组合 Iterator。</p>\n<p><div align=\"center\"> <img src=\"pics/89292ae1-5f13-44dc-b508-3f035e80bf89.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic interface Aggregate {\n    Iterator createIterator();\n}</p>\n<p>java\npublic class ConcreteAggregate implements Aggregate {</p>\n<pre><code>private Integer[] items;\n\npublic ConcreteAggregate() {\n    items = new Integer[10];\n    for (int i = 0; i &lt; items.length; i++) {\n        items[i] = i;\n    }\n}\n\n@Override\npublic Iterator createIterator() {\n    return new ConcreteIterator&lt;Integer&gt;(items);\n}\n</code></pre><p>}</p>\n<p>java\npublic interface Iterator<Item> {</p>\n<pre><code>Item next();\n\nboolean hasNext();\n</code></pre><p>}</p>\n<p>java\npublic class ConcreteIterator<Item> implements Iterator {</p>\n<pre><code>private Item[] items;\nprivate int position = 0;\n\npublic ConcreteIterator(Item[] items) {\n    this.items = items;\n}\n\n@Override\npublic Object next() {\n    return items[position++];\n}\n\n@Override\npublic boolean hasNext() {\n    return position &lt; items.length;\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n    Aggregate aggregate = new ConcreteAggregate();\n    Iterator&lt;Integer&gt; iterator = aggregate.createIterator();\n    while (iterator.hasNext()) {\n        System.out.println(iterator.next());\n    }\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 迭代器（Iterator）",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>集中相关对象之间复杂的沟通和控制方式。</p>\n<p>Class Diagram</p>\n<p> Mediator：中介者，定义一个接口用于与各同事（Colleague）对象通信。\n Colleague：同事，相关对象</p>\n<p><div align=\"center\"> <img src=\"pics/30d6e95c-2e3c-4d32-bf4f-68128a70bc05.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>Alarm（闹钟）、CoffeePot（咖啡壶）、Calendar（日历）、Sprinkler（喷头）是一组相关的对象，在某个对象的事件产生时需要去操作其它对象，形成了下面这种依赖结构：</p>\n<p><div align=\"center\"> <img src=\"pics/82cfda3b-b53b-4c89-9fdb-26dd2db0cd02.jpg\"/> </div><br></p>\n<p>使用中介者模式可以将复杂的依赖结构变成星形结构：</p>\n<p><div align=\"center\"> <img src=\"pics/5359cbf5-5a79-4874-9b17-f23c53c2cb80.jpg\"/> </div><br></p>\n<p>java\npublic abstract class Colleague {\n    public abstract void onEvent(Mediator mediator);\n}</p>\n<p>java\npublic class Alarm extends Colleague {</p>\n<pre><code>@Override\npublic void onEvent(Mediator mediator) {\n    mediator.doEvent(&quot;alarm&quot;);\n}\n\npublic void doAlarm() {\n    System.out.println(&quot;doAlarm()&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class CoffeePot extends Colleague {\n    @Override\n    public void onEvent(Mediator mediator) {\n        mediator.doEvent(&quot;coffeePot&quot;);\n    }</p>\n<pre><code>public void doCoffeePot() {\n    System.out.println(&quot;doCoffeePot()&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Calender extends Colleague {\n    @Override\n    public void onEvent(Mediator mediator) {\n        mediator.doEvent(&quot;calender&quot;);\n    }</p>\n<pre><code>public void doCalender() {\n    System.out.println(&quot;doCalender()&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Sprinkler extends Colleague {\n    @Override\n    public void onEvent(Mediator mediator) {\n        mediator.doEvent(&quot;sprinkler&quot;);\n    }</p>\n<pre><code>public void doSprinkler() {\n    System.out.println(&quot;doSprinkler()&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic abstract class Mediator {\n    public abstract void doEvent(String eventType);\n}</p>\n<p>java\npublic class ConcreteMediator extends Mediator {\n    private Alarm alarm;\n    private CoffeePot coffeePot;\n    private Calender calender;\n    private Sprinkler sprinkler;</p>\n<pre><code>public ConcreteMediator(Alarm alarm, CoffeePot coffeePot, Calender calender, Sprinkler sprinkler) {\n    this.alarm = alarm;\n    this.coffeePot = coffeePot;\n    this.calender = calender;\n    this.sprinkler = sprinkler;\n}\n\n@Override\npublic void doEvent(String eventType) {\n    switch (eventType) {\n        case &quot;alarm&quot;:\n            doAlarmEvent();\n            break;\n        case &quot;coffeePot&quot;:\n            doCoffeePotEvent();\n            break;\n        case &quot;calender&quot;:\n            doCalenderEvent();\n            break;\n        default:\n            doSprinklerEvent();\n    }\n}\n\npublic void doAlarmEvent() {\n    alarm.doAlarm();\n    coffeePot.doCoffeePot();\n    calender.doCalender();\n    sprinkler.doSprinkler();\n}\n\npublic void doCoffeePotEvent() {\n    // ...\n}\n\npublic void doCalenderEvent() {\n    // ...\n}\n\npublic void doSprinklerEvent() {\n    // ...\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        Alarm alarm = new Alarm();\n        CoffeePot coffeePot = new CoffeePot();\n        Calender calender = new Calender();\n        Sprinkler sprinkler = new Sprinkler();\n        Mediator mediator = new ConcreteMediator(alarm, coffeePot, calender, sprinkler);\n        // 闹钟事件到达，调用中介者就可以操作相关对象\n        alarm.onEvent(mediator);\n    }\n}</p>\n<p>java\ndoAlarm()\ndoCoffeePot()\ndoCalender()\ndoSprinkler()\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 中介者（Mediator）",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>在不违反封装的情况下获得对象的内部状态，从而在需要时可以将对象恢复到最初状态。</p>\n<p>Class Diagram</p>\n<p> Originator：原始对象\n Caretaker：负责保存好备忘录\n Menento：备忘录，存储原始对象的的状态。备忘录实际上有两个接口，一个是提供给 Caretaker 的窄接口：它只能将备忘录传递给其它对象；一个是提供给 Originator 的宽接口，允许它访问到先前状态所需的所有数据。理想情况是只允许 Originator 访问本备忘录的内部状态。</p>\n<p><div align=\"center\"> <img src=\"pics/50678f34-694f-45a4-91c6-34d985c83fee.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>以下实现了一个简单计算器程序，可以输入两个值，然后计算这两个值的和。备忘录模式允许将这两个值存储起来，然后在某个时刻用存储的状态进行恢复。</p>\n<p>实现参考：<a href=\"https://www.oodesign.com/memento-pattern-calculator-example-java-sourcecode.html\">Memento Pattern - Calculator Example - Java Sourcecode</a></p>\n<p>java\n/*<em>\n </em> Originator Interface\n */\npublic interface Calculator {</p>\n<pre><code>// Create Memento\nPreviousCalculationToCareTaker backupLastCalculation();\n\n// setMemento\nvoid restorePreviousCalculation(PreviousCalculationToCareTaker memento);\n\nint getCalculationResult();\n\nvoid setFirstNumber(int firstNumber);\n\nvoid setSecondNumber(int secondNumber);\n</code></pre><p>}</p>\n<p>java\n/*<em>\n </em> Originator Implementation\n */\npublic class CalculatorImp implements Calculator {</p>\n<pre><code>private int firstNumber;\nprivate int secondNumber;\n\n@Override\npublic PreviousCalculationToCareTaker backupLastCalculation() {\n    // create a memento object used for restoring two numbers\n    return new PreviousCalculationImp(firstNumber, secondNumber);\n}\n\n@Override\npublic void restorePreviousCalculation(PreviousCalculationToCareTaker memento) {\n    this.firstNumber = ((PreviousCalculationToOriginator) memento).getFirstNumber();\n    this.secondNumber = ((PreviousCalculationToOriginator) memento).getSecondNumber();\n}\n\n@Override\npublic int getCalculationResult() {\n    // result is adding two numbers\n    return firstNumber + secondNumber;\n}\n\n@Override\npublic void setFirstNumber(int firstNumber) {\n    this.firstNumber = firstNumber;\n}\n\n@Override\npublic void setSecondNumber(int secondNumber) {\n    this.secondNumber = secondNumber;\n}\n</code></pre><p>}</p>\n<p>java\n/*<em>\n </em> Memento Interface to Originator\n <em>\n </em> This interface allows the originator to restore its state\n */\npublic interface PreviousCalculationToOriginator {\n    int getFirstNumber();\n    int getSecondNumber();\n}</p>\n<p>java\n/*<em>\n </em>  Memento interface to CalculatorOperator (Caretaker)\n */\npublic interface PreviousCalculationToCareTaker {\n    // no operations permitted for the caretaker\n}</p>\n<p>java\n/*<em>\n </em> Memento Object Implementation\n <em> <p>\n </em> Note that this object implements both interfaces to Originator and CareTaker\n */\npublic class PreviousCalculationImp implements PreviousCalculationToCareTaker,\n        PreviousCalculationToOriginator {</p>\n<pre><code>private int firstNumber;\nprivate int secondNumber;\n\npublic PreviousCalculationImp(int firstNumber, int secondNumber) {\n    this.firstNumber = firstNumber;\n    this.secondNumber = secondNumber;\n}\n\n@Override\npublic int getFirstNumber() {\n    return firstNumber;\n}\n\n@Override\npublic int getSecondNumber() {\n    return secondNumber;\n}\n</code></pre><p>}</p>\n<p>java\n/*<em>\n </em> CareTaker object\n */\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n    // program starts\n    Calculator calculator = new CalculatorImp();\n\n    // assume user enters two numbers\n    calculator.setFirstNumber(10);\n    calculator.setSecondNumber(100);\n\n    // find result\n    System.out.println(calculator.getCalculationResult());\n\n    // Store result of this calculation in case of error\n    PreviousCalculationToCareTaker memento = calculator.backupLastCalculation();\n\n    // user enters a number\n    calculator.setFirstNumber(17);\n\n    // user enters a wrong second number and calculates result\n    calculator.setSecondNumber(-290);\n\n    // calculate result\n    System.out.println(calculator.getCalculationResult());\n\n    // user hits CTRL + Z to undo last operation and see last result\n    calculator.restorePreviousCalculation(memento);\n\n    // result restored\n    System.out.println(calculator.getCalculationResult());\n}\n</code></pre><p>}</p>\n<p>html\n110\n-273\n110\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 备忘录（Memento）",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</p>\n<p>主题（Subject）是被观察的对象，而其所有依赖者（Observer）称为观察者。</p>\n<p><div align=\"center\"> <img src=\"pics/7a3c6a30-c735-4edb-8115-337288a4f0f2.jpg\" width=\"600\"/> </div><br></p>\n<p>Class Diagram</p>\n<p>主题（Subject）具有注册和移除观察者、并通知所有观察者的功能，主题是通过维护一张观察者列表来实现这些操作的。</p>\n<p>观察者（Observer）的注册功能需要调用主题的 registerObserver() 方法。</p>\n<p><div align=\"center\"> <img src=\"pics/a8c8f894-a712-447c-9906-5caef6a016e3.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。</p>\n<p><div align=\"center\"> <img src=\"pics/b1df9732-86ce-4d69-9f06-fba1db7b3b5a.jpg\"/> </div><br></p>\n<p>java\npublic interface Subject {\n    void registerObserver(Observer o);</p>\n<pre><code>void removeObserver(Observer o);\n\nvoid notifyObserver();\n</code></pre><p>}</p>\n<p>java\npublic class WeatherData implements Subject {\n    private List<Observer> observers;\n    private float temperature;\n    private float humidity;\n    private float pressure;</p>\n<pre><code>public WeatherData() {\n    observers = new ArrayList&lt;&gt;();\n}\n\npublic void setMeasurements(float temperature, float humidity, float pressure) {\n    this.temperature = temperature;\n    this.humidity = humidity;\n    this.pressure = pressure;\n    notifyObserver();\n}\n\n@Override\npublic void registerObserver(Observer o) {\n    observers.add(o);\n}\n\n@Override\npublic void removeObserver(Observer o) {\n    int i = observers.indexOf(o);\n    if (i &gt;= 0) {\n        observers.remove(i);\n    }\n}\n\n@Override\npublic void notifyObserver() {\n    for (Observer o : observers) {\n        o.update(temperature, humidity, pressure);\n    }\n}\n</code></pre><p>}</p>\n<p>java\npublic interface Observer {\n    void update(float temp, float humidity, float pressure);\n}</p>\n<p>java\npublic class StatisticsDisplay implements Observer {</p>\n<pre><code>public StatisticsDisplay(Subject weatherData) {\n    weatherData.reisterObserver(this);\n}\n\n@Override\npublic void update(float temp, float humidity, float pressure) {\n    System.out.println(&quot;StatisticsDisplay.update: &quot; + temp + &quot; &quot; + humidity + &quot; &quot; + pressure);\n}\n</code></pre><p>}</p>\n<p>java\npublic class CurrentConditionsDisplay implements Observer {</p>\n<pre><code>public CurrentConditionsDisplay(Subject weatherData) {\n    weatherData.registerObserver(this);\n}\n\n@Override\npublic void update(float temp, float humidity, float pressure) {\n    System.out.println(&quot;CurrentConditionsDisplay.update: &quot; + temp + &quot; &quot; + humidity + &quot; &quot; + pressure);\n}\n</code></pre><p>}</p>\n<p>java\npublic class WeatherStation {\n    public static void main(String[] args) {\n        WeatherData weatherData = new WeatherData();\n        CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay(weatherData);\n        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);</p>\n<pre><code>    weatherData.setMeasurements(0, 0, 0);\n    weatherData.setMeasurements(1, 1, 1);\n}\n</code></pre><p>}</p>\n<p>html\nCurrentConditionsDisplay.update: 0.0 0.0 0.0\nStatisticsDisplay.update: 0.0 0.0 0.0\nCurrentConditionsDisplay.update: 1.0 1.0 1.0\nStatisticsDisplay.update: 1.0 1.0 1.0\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 观察者（Observer）",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。</p>\n<p>Class Diagram</p>\n<p><div align=\"center\"> <img src=\"pics/79df886f-fdc3-4020-a07f-c991bb58e0d8.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>糖果销售机有多种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。</p>\n<p><div align=\"center\"> <img src=\"pics/396be981-3f2c-4fd9-8101-dbf9c841504b.jpg\" width=\"600\"/> </div><br></p>\n<p>java\npublic interface State {\n    /*<em>\n     </em> 投入 25 分钱\n     */\n    void insertQuarter();</p>\n<pre><code>/**\n * 退回 25 分钱\n */\nvoid ejectQuarter();\n\n/**\n * 转动曲柄\n */\nvoid turnCrank();\n\n/**\n * 发放糖果\n */\nvoid dispense();\n</code></pre><p>}</p>\n<p>java\npublic class HasQuarterState implements State {</p>\n<pre><code>private GumballMachine gumballMachine;\n\npublic HasQuarterState(GumballMachine gumballMachine) {\n    this.gumballMachine = gumballMachine;\n}\n\n@Override\npublic void insertQuarter() {\n    System.out.println(&quot;You can&#39;t insert another quarter&quot;);\n}\n\n@Override\npublic void ejectQuarter() {\n    System.out.println(&quot;Quarter returned&quot;);\n    gumballMachine.setState(gumballMachine.getNoQuarterState());\n}\n\n@Override\npublic void turnCrank() {\n    System.out.println(&quot;You turned...&quot;);\n    gumballMachine.setState(gumballMachine.getSoldState());\n}\n\n@Override\npublic void dispense() {\n    System.out.println(&quot;No gumball dispensed&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class NoQuarterState implements State {</p>\n<pre><code>GumballMachine gumballMachine;\n\npublic NoQuarterState(GumballMachine gumballMachine) {\n    this.gumballMachine = gumballMachine;\n}\n\n@Override\npublic void insertQuarter() {\n    System.out.println(&quot;You insert a quarter&quot;);\n    gumballMachine.setState(gumballMachine.getHasQuarterState());\n}\n\n@Override\npublic void ejectQuarter() {\n    System.out.println(&quot;You haven&#39;t insert a quarter&quot;);\n}\n\n@Override\npublic void turnCrank() {\n    System.out.println(&quot;You turned, but there&#39;s no quarter&quot;);\n}\n\n@Override\npublic void dispense() {\n    System.out.println(&quot;You need to pay first&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class SoldOutState implements State {</p>\n<pre><code>GumballMachine gumballMachine;\n\npublic SoldOutState(GumballMachine gumballMachine) {\n    this.gumballMachine = gumballMachine;\n}\n\n@Override\npublic void insertQuarter() {\n    System.out.println(&quot;You can&#39;t insert a quarter, the machine is sold out&quot;);\n}\n\n@Override\npublic void ejectQuarter() {\n    System.out.println(&quot;You can&#39;t eject, you haven&#39;t inserted a quarter yet&quot;);\n}\n\n@Override\npublic void turnCrank() {\n    System.out.println(&quot;You turned, but there are no gumballs&quot;);\n}\n\n@Override\npublic void dispense() {\n    System.out.println(&quot;No gumball dispensed&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class SoldState implements State {</p>\n<pre><code>GumballMachine gumballMachine;\n\npublic SoldState(GumballMachine gumballMachine) {\n    this.gumballMachine = gumballMachine;\n}\n\n@Override\npublic void insertQuarter() {\n    System.out.println(&quot;Please wait, we&#39;re already giving you a gumball&quot;);\n}\n\n@Override\npublic void ejectQuarter() {\n    System.out.println(&quot;Sorry, you already turned the crank&quot;);\n}\n\n@Override\npublic void turnCrank() {\n    System.out.println(&quot;Turning twice doesn&#39;t get you another gumball!&quot;);\n}\n\n@Override\npublic void dispense() {\n    gumballMachine.releaseBall();\n    if (gumballMachine.getCount() &gt; 0) {\n        gumballMachine.setState(gumballMachine.getNoQuarterState());\n    } else {\n        System.out.println(&quot;Oops, out of gumballs&quot;);\n        gumballMachine.setState(gumballMachine.getSoldOutState());\n    }\n}\n</code></pre><p>}</p>\n<p>java\npublic class GumballMachine {</p>\n<pre><code>private State soldOutState;\nprivate State noQuarterState;\nprivate State hasQuarterState;\nprivate State soldState;\n\nprivate State state;\nprivate int count = 0;\n\npublic GumballMachine(int numberGumballs) {\n    count = numberGumballs;\n    soldOutState = new SoldOutState(this);\n    noQuarterState = new NoQuarterState(this);\n    hasQuarterState = new HasQuarterState(this);\n    soldState = new SoldState(this);\n\n    if (numberGumballs &gt; 0) {\n        state = noQuarterState;\n    } else {\n        state = soldOutState;\n    }\n}\n\npublic void insertQuarter() {\n    state.insertQuarter();\n}\n\npublic void ejectQuarter() {\n    state.ejectQuarter();\n}\n\npublic void turnCrank() {\n    state.turnCrank();\n    state.dispense();\n}\n\npublic void setState(State state) {\n    this.state = state;\n}\n\npublic void releaseBall() {\n    System.out.println(&quot;A gumball comes rolling out the slot...&quot;);\n    if (count != 0) {\n        count -= 1;\n    }\n}\n\npublic State getSoldOutState() {\n    return soldOutState;\n}\n\npublic State getNoQuarterState() {\n    return noQuarterState;\n}\n\npublic State getHasQuarterState() {\n    return hasQuarterState;\n}\n\npublic State getSoldState() {\n    return soldState;\n}\n\npublic int getCount() {\n    return count;\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n    GumballMachine gumballMachine = new GumballMachine(5);\n\n    gumballMachine.insertQuarter();\n    gumballMachine.turnCrank();\n\n    gumballMachine.insertQuarter();\n    gumballMachine.ejectQuarter();\n    gumballMachine.turnCrank();\n\n    gumballMachine.insertQuarter();\n    gumballMachine.turnCrank();\n    gumballMachine.insertQuarter();\n    gumballMachine.turnCrank();\n    gumballMachine.ejectQuarter();\n\n    gumballMachine.insertQuarter();\n    gumballMachine.insertQuarter();\n    gumballMachine.turnCrank();\n    gumballMachine.insertQuarter();\n    gumballMachine.turnCrank();\n    gumballMachine.insertQuarter();\n    gumballMachine.turnCrank();\n}\n</code></pre><p>}</p>\n<p>html\nYou insert a quarter\nYou turned...\nA gumball comes rolling out the slot...\nYou insert a quarter\nQuarter returned\nYou turned, but there&#39;s no quarter\nYou need to pay first\nYou insert a quarter\nYou turned...\nA gumball comes rolling out the slot...\nYou insert a quarter\nYou turned...\nA gumball comes rolling out the slot...\nYou haven&#39;t insert a quarter\nYou insert a quarter\nYou can&#39;t insert another quarter\nYou turned...\nA gumball comes rolling out the slot...\nYou insert a quarter\nYou turned...\nA gumball comes rolling out the slot...\nOops, out of gumballs\nYou can&#39;t insert a quarter, the machine is sold out\nYou turned, but there are no gumballs\nNo gumball dispensed\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 状态（State）",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>定义一系列算法，封装每个算法，并使它们可以互换。</p>\n<p>策略模式可以让算法独立于使用它的客户端。</p>\n<p>Class Diagram</p>\n<p> Strategy 接口定义了一个算法族，它们都实现了  behavior() 方法。\n Context 是使用到该算法族的类，其中的 doSomething() 方法会调用 behavior()，setStrategy(Strategy) 方法可以动态地改变 strategy 对象，也就是说能动态地改变 Context 所使用的算法。</p>\n<p><div align=\"center\"> <img src=\"pics/cd1be8c2-755a-4a66-ad92-2e30f8f47922.png\"/> </div><br></p>\n<p>与状态模式的比较</p>\n<p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 Context 所组合的 State 对象，而策略模式是通过 Context 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p>\n<p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 Context 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 使用的算法。</p>\n<p>Implementation</p>\n<p>设计一个鸭子，它可以动态地改变叫声。这里的算法族是鸭子的叫声行为。</p>\n<p>java\npublic interface QuackBehavior {\n    void quack();\n}</p>\n<p>java\npublic class Quack implements QuackBehavior {\n    @Override\n    public void quack() {\n        System.out.println(&quot;quack!&quot;);\n    }\n}</p>\n<p>java\npublic class Squeak implements QuackBehavior{\n    @Override\n    public void quack() {\n        System.out.println(&quot;squeak!&quot;);\n    }\n}</p>\n<p>java\npublic class Duck {</p>\n<pre><code>private QuackBehavior quackBehavior;\n\npublic void performQuack() {\n    if (quackBehavior != null) {\n        quackBehavior.quack();\n    }\n}\n\npublic void setQuackBehavior(QuackBehavior quackBehavior) {\n    this.quackBehavior = quackBehavior;\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n    Duck duck = new Duck();\n    duck.setQuackBehavior(new Squeak());\n    duck.performQuack();\n    duck.setQuackBehavior(new Quack());\n    duck.performQuack();\n}\n</code></pre><p>}</p>\n<p>html\nsqueak!\nquack!\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.0 策略（Strategy）",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>定义算法框架，并将一些步骤的实现延迟到子类。</p>\n<p>通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</p>\n<p>Class Diagram</p>\n<p><div align=\"center\"> <img src=\"pics/ac6a794b-68c0-486c-902f-8d988eee5766.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。</p>\n<p><div align=\"center\"> <img src=\"pics/11236498-1417-46ce-a1b0-e10054256955.png\"/> </div><br></p>\n<p>java\npublic abstract class CaffeineBeverage {</p>\n<pre><code>final void prepareRecipe() {\n    boilWater();\n    brew();\n    pourInCup();\n    addCondiments();\n}\n\nabstract void brew();\n\nabstract void addCondiments();\n\nvoid boilWater() {\n    System.out.println(&quot;boilWater&quot;);\n}\n\nvoid pourInCup() {\n    System.out.println(&quot;pourInCup&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Coffee extends CaffeineBeverage {\n    @Override\n    void brew() {\n        System.out.println(&quot;Coffee.brew&quot;);\n    }</p>\n<pre><code>@Override\nvoid addCondiments() {\n    System.out.println(&quot;Coffee.addCondiments&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Tea extends CaffeineBeverage {\n    @Override\n    void brew() {\n        System.out.println(&quot;Tea.brew&quot;);\n    }</p>\n<pre><code>@Override\nvoid addCondiments() {\n    System.out.println(&quot;Tea.addCondiments&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        CaffeineBeverage caffeineBeverage = new Coffee();\n        caffeineBeverage.prepareRecipe();\n        System.out.println(&quot;-----------&quot;);\n        caffeineBeverage = new Tea();\n        caffeineBeverage.prepareRecipe();\n    }\n}</p>\n<p>html\nboilWater\nCoffee.brew\npourInCup</p>\n<h2 id=\"coffee-addcondiments\">Coffee.addCondiments</h2>\n<p>boilWater\nTea.brew\npourInCup\nTea.addCondiments\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.0 模板方法（Template Method）",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>为一个对象结构（比如组合结构）增加新能力。</p>\n<p>Class Diagram</p>\n<p> Visitor：访问者，为每一个 ConcreteElement 声明一个 visit 操作\n ConcreteVisitor：具体访问者，存储遍历过程中的累计结果\n ObjectStructure：对象结构，可以是组合结构，或者是一个集合。</p>\n<p><div align=\"center\"> <img src=\"pics/79c6f036-bde6-4393-85a3-ef36a0327bd2.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic interface Element {\n    void accept(Visitor visitor);\n}</p>\n<p>java\nclass CustomerGroup {</p>\n<pre><code>private List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();\n\nvoid accept(Visitor visitor) {\n    for (Customer customer : customers) {\n        customer.accept(visitor);\n    }\n}\n\nvoid addCustomer(Customer customer) {\n    customers.add(customer);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Customer implements Element {</p>\n<pre><code>private String name;\nprivate List&lt;Order&gt; orders = new ArrayList&lt;&gt;();\n\nCustomer(String name) {\n    this.name = name;\n}\n\nString getName() {\n    return name;\n}\n\nvoid addOrder(Order order) {\n    orders.add(order);\n}\n\npublic void accept(Visitor visitor) {\n    visitor.visit(this);\n    for (Order order : orders) {\n        order.accept(visitor);\n    }\n}\n</code></pre><p>}</p>\n<p>java\npublic class Order implements Element {</p>\n<pre><code>private String name;\nprivate List&lt;Item&gt; items = new ArrayList();\n\nOrder(String name) {\n    this.name = name;\n}\n\nOrder(String name, String itemName) {\n    this.name = name;\n    this.addItem(new Item(itemName));\n}\n\nString getName() {\n    return name;\n}\n\nvoid addItem(Item item) {\n    items.add(item);\n}\n\npublic void accept(Visitor visitor) {\n    visitor.visit(this);\n\n    for (Item item : items) {\n        item.accept(visitor);\n    }\n}\n</code></pre><p>}</p>\n<p>java\npublic class Item implements Element {</p>\n<pre><code>private String name;\n\nItem(String name) {\n    this.name = name;\n}\n\nString getName() {\n    return name;\n}\n\npublic void accept(Visitor visitor) {\n    visitor.visit(this);\n}\n</code></pre><p>}</p>\n<p>java\npublic interface Visitor {\n    void visit(Customer customer);</p>\n<pre><code>void visit(Order order);\n\nvoid visit(Item item);\n</code></pre><p>}</p>\n<p>java\npublic class GeneralReport implements Visitor {</p>\n<pre><code>private int customersNo;\nprivate int ordersNo;\nprivate int itemsNo;\n\npublic void visit(Customer customer) {\n    System.out.println(customer.getName());\n    customersNo++;\n}\n\npublic void visit(Order order) {\n    System.out.println(order.getName());\n    ordersNo++;\n}\n\npublic void visit(Item item) {\n    System.out.println(item.getName());\n    itemsNo++;\n}\n\npublic void displayResults() {\n    System.out.println(&quot;Number of customers: &quot; + customersNo);\n    System.out.println(&quot;Number of orders:    &quot; + ordersNo);\n    System.out.println(&quot;Number of items:     &quot; + itemsNo);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        Customer customer1 = new Customer(&quot;customer1&quot;);\n        customer1.addOrder(new Order(&quot;order1&quot;, &quot;item1&quot;));\n        customer1.addOrder(new Order(&quot;order2&quot;, &quot;item1&quot;));\n        customer1.addOrder(new Order(&quot;order3&quot;, &quot;item1&quot;));</p>\n<pre><code>    Order order = new Order(&quot;order_a&quot;);\n    order.addItem(new Item(&quot;item_a1&quot;));\n    order.addItem(new Item(&quot;item_a2&quot;));\n    order.addItem(new Item(&quot;item_a3&quot;));\n    Customer customer2 = new Customer(&quot;customer2&quot;);\n    customer2.addOrder(order);\n\n    CustomerGroup customers = new CustomerGroup();\n    customers.addCustomer(customer1);\n    customers.addCustomer(customer2);\n\n    GeneralReport visitor = new GeneralReport();\n    customers.accept(visitor);\n    visitor.displayResults();\n}\n</code></pre><p>}</p>\n<p>html\ncustomer1\norder1\nitem1\norder2\nitem1\norder3\nitem1\ncustomer2\norder_a\nitem_a1\nitem_a2\nitem_a3\nNumber of customers: 2\nNumber of orders:    4\nNumber of items:     6\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "23.0 访问者（Visitor）",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>使用什么都不做的空对象来代替 NULL。</p>\n<p>一个方法返回 NULL，意味着方法的调用端需要去检查返回值是否是 NULL，这么做会导致非常多的冗余的检查代码。并且如果某一个调用端忘记了做这个检查返回值，而直接使用返回的对象，那么就有可能抛出空指针异常。</p>\n<p>Class Diagram</p>\n<p><div align=\"center\"> <img src=\"pics/22870bbe-898f-4c17-a31a-d7c5ee5d1c10.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic abstract class AbstractOperation {\n    abstract void request();\n}</p>\n<p>java\npublic class RealOperation extends AbstractOperation {\n    @Override\n    void request() {\n        System.out.println(&quot;do something&quot;);\n    }\n}</p>\n<p>java\npublic class NullOperation extends AbstractOperation{\n    @Override\n    void request() {\n        // do nothing\n    }\n}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        AbstractOperation abstractOperation = func(-1);\n        abstractOperation.request();\n    }</p>\n<pre><code>public static AbstractOperation func(int para) {\n    if (para &lt; 0) {\n        return new NullOperation();\n    }\n    return new RealOperation();\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "24.0 空对象（Null）",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>把一个类接口转换成另一个用户需要的接口。</p>\n<p><div align=\"center\"> <img src=\"pics/3d5b828e-5c4d-48d8-a440-281e4a8e1c92.png\"/> </div><br></p>\n<p>Class Diagram</p>\n<p><div align=\"center\"> <img src=\"pics/ff5152fc-4ff3-44c4-95d6-1061002c364a.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>鸭子（Duck）和火鸡（Turkey）拥有不同的叫声，Duck 的叫声调用 quack() 方法，而 Turkey 调用 gobble() 方法。</p>\n<p>要求将 Turkey 的 gobble() 方法适配成 Duck 的 quack() 方法，从而让火鸡冒充鸭子！</p>\n<p>java\npublic interface Duck {\n    void quack();\n}</p>\n<p>java\npublic interface Turkey {\n    void gobble();\n}</p>\n<p>java\npublic class WildTurkey implements Turkey {\n    @Override\n    public void gobble() {\n        System.out.println(&quot;gobble!&quot;);\n    }\n}</p>\n<p>java\npublic class TurkeyAdapter implements Duck {\n    Turkey turkey;</p>\n<pre><code>public TurkeyAdapter(Turkey turkey) {\n    this.turkey = turkey;\n}\n\n@Override\npublic void quack() {\n    turkey.gobble();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        Turkey turkey = new WildTurkey();\n        Duck duck = new TurkeyAdapter(turkey);\n        duck.quack();\n    }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "25.0 结构型 适配器（Adapter）",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>将抽象与实现分离开来，使它们可以独立变化。</p>\n<p>Class Diagram</p>\n<p> Abstraction：定义抽象类的接口\n Implementor：定义实现类接口</p>\n<p><div align=\"center\"> <img src=\"pics/2a1f8b0f-1dd7-4409-b177-a381c58066ad.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>RemoteControl 表示遥控器，指代 Abstraction。</p>\n<p>TV 表示电视，指代 Implementor。</p>\n<p>桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。</p>\n<p>java\npublic abstract class TV {\n    public abstract void on();</p>\n<pre><code>public abstract void off();\n\npublic abstract void tuneChannel();\n</code></pre><p>}</p>\n<p>java\npublic class Sony extends TV {\n    @Override\n    public void on() {\n        System.out.println(&quot;Sony.on()&quot;);\n    }</p>\n<pre><code>@Override\npublic void off() {\n    System.out.println(&quot;Sony.off()&quot;);\n}\n\n@Override\npublic void tuneChannel() {\n    System.out.println(&quot;Sony.tuneChannel()&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class RCA extends TV {\n    @Override\n    public void on() {\n        System.out.println(&quot;RCA.on()&quot;);\n    }</p>\n<pre><code>@Override\npublic void off() {\n    System.out.println(&quot;RCA.off()&quot;);\n}\n\n@Override\npublic void tuneChannel() {\n    System.out.println(&quot;RCA.tuneChannel()&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic abstract class RemoteControl {\n    protected TV tv;</p>\n<pre><code>public RemoteControl(TV tv) {\n    this.tv = tv;\n}\n\npublic abstract void on();\n\npublic abstract void off();\n\npublic abstract void tuneChannel();\n</code></pre><p>}</p>\n<p>java\npublic class ConcreteRemoteControl1 extends RemoteControl {\n    public ConcreteRemoteControl1(TV tv) {\n        super(tv);\n    }</p>\n<pre><code>@Override\npublic void on() {\n    System.out.println(&quot;ConcreteRemoteControl1.on()&quot;);\n    tv.on();\n}\n\n@Override\npublic void off() {\n    System.out.println(&quot;ConcreteRemoteControl1.off()&quot;);\n    tv.off();\n}\n\n@Override\npublic void tuneChannel() {\n    System.out.println(&quot;ConcreteRemoteControl1.tuneChannel()&quot;);\n    tv.tuneChannel();\n}\n</code></pre><p>}</p>\n<p>java\npublic class ConcreteRemoteControl2 extends RemoteControl {\n    public ConcreteRemoteControl2(TV tv) {\n        super(tv);\n    }</p>\n<pre><code>@Override\npublic void on() {\n    System.out.println(&quot;ConcreteRemoteControl2.on()&quot;);\n    tv.on();\n}\n\n@Override\npublic void off() {\n    System.out.println(&quot;ConcreteRemoteControl2.off()&quot;);\n    tv.off();\n}\n\n@Override\npublic void tuneChannel() {\n    System.out.println(&quot;ConcreteRemoteControl2.tuneChannel()&quot;);\n    tv.tuneChannel();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        RemoteControl remoteControl1 = new ConcreteRemoteControl1(new RCA());\n        remoteControl1.on();\n        remoteControl1.off();\n        remoteControl1.tuneChannel();\n        RemoteControl remoteControl2 = new ConcreteRemoteControl2(new Sony());\n         remoteControl2.on();\n         remoteControl2.off();\n         remoteControl2.tuneChannel();\n    }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "26.0 桥接（Bridge）",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>将对象组合成树形结构来表示“整体/部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。</p>\n<p>Class Diagram</p>\n<p>组件（Component）类是组合类（Composite）和叶子类（Leaf）的父类，可以把组合类看成是树的中间节点。</p>\n<p>组合对象拥有一个或者多个组件对象，因此组合对象的操作可以委托给组件对象去处理，而组件对象可以是另一个组合对象或者叶子对象。</p>\n<p><div align=\"center\"> <img src=\"pics/2b8bfd57-b4d1-4a75-bfb0-bcf1fba4014a.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic abstract class Component {\n    protected String name;</p>\n<pre><code>public Component(String name) {\n    this.name = name;\n}\n\npublic void print() {\n    print(0);\n}\n\nabstract void print(int level);\n\nabstract public void add(Component component);\n\nabstract public void remove(Component component);\n</code></pre><p>}</p>\n<p>java\npublic class Composite extends Component {</p>\n<pre><code>private List&lt;Component&gt; child;\n\npublic Composite(String name) {\n    super(name);\n    child = new ArrayList&lt;&gt;();\n}\n\n@Override\nvoid print(int level) {\n    for (int i = 0; i &lt; level; i++) {\n        System.out.print(&quot;--&quot;);\n    }\n    System.out.println(&quot;Composite:&quot; + name);\n    for (Component component : child) {\n        component.print(level + 1);\n    }\n}\n\n@Override\npublic void add(Component component) {\n    child.add(component);\n}\n\n@Override\npublic void remove(Component component) {\n    child.remove(component);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Leaf extends Component {\n    public Leaf(String name) {\n        super(name);\n    }</p>\n<pre><code>@Override\nvoid print(int level) {\n    for (int i = 0; i &lt; level; i++) {\n        System.out.print(&quot;--&quot;);\n    }\n    System.out.println(&quot;left:&quot; + name);\n}\n\n@Override\npublic void add(Component component) {\n    throw new UnsupportedOperationException(); // 牺牲透明性换取单一职责原则，这样就不用考虑是叶子节点还是组合节点\n}\n\n@Override\npublic void remove(Component component) {\n    throw new UnsupportedOperationException();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        Composite root = new Composite(&quot;root&quot;);\n        Component node1 = new Leaf(&quot;1&quot;);\n        Component node2 = new Composite(&quot;2&quot;);\n        Component node3 = new Leaf(&quot;3&quot;);\n        root.add(node1);\n        root.add(node2);\n        root.add(node3);\n        Component node21 = new Leaf(&quot;21&quot;);\n        Component node22 = new Composite(&quot;22&quot;);\n        node2.add(node21);\n        node2.add(node22);\n        Component node221 = new Leaf(&quot;221&quot;);\n        node22.add(node221);\n        root.print();\n    }\n}</p>\n<p>html\nComposite:root\n--left:1\n--Composite:2\n----left:21\n----Composite:22\n------left:221\n--left:3\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "27.0 组合（Composite）",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>为对象动态添加功能。</p>\n<p>Class Diagram</p>\n<p>装饰者（Decorator）和具体组件（ConcreteComponent）都继承自组件（Component），具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p>\n<p><div align=\"center\"> <img src=\"pics/6b833bc2-517a-4270-8a5e-0a5f6df8cd96.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>设计不同种类的饮料，饮料可以添加配料，比如可以添加牛奶，并且支持动态添加新配料。每增加一种配料，该饮料的价格就会增加，要求计算一种饮料的价格。</p>\n<p>下图表示在 DarkRoast 饮料上新增新添加 Mocha 配料，之后又添加了 Whip 配料。DarkRoast 被 Mocha 包裹，Mocha 又被 Whip 包裹。它们都继承自相同父类，都有 cost() 方法，外层类的 cost() 方法调用了内层类的 cost() 方法。</p>\n<p><div align=\"center\"> <img src=\"pics/c9cfd600-bc91-4f3a-9f99-b42f88a5bb24.jpg\" width=\"600\"/> </div><br></p>\n<p>java\npublic interface Beverage {\n    double cost();\n}</p>\n<p>java\npublic class DarkRoast implements Beverage {\n    @Override\n    public double cost() {\n        return 1;\n    }\n}</p>\n<p>java\npublic class HouseBlend implements Beverage {\n    @Override\n    public double cost() {\n        return 1;\n    }\n}</p>\n<p>java\npublic abstract class CondimentDecorator implements Beverage {\n    protected Beverage beverage;\n}</p>\n<p>java\npublic class Milk extends CondimentDecorator {</p>\n<pre><code>public Milk(Beverage beverage) {\n    this.beverage = beverage;\n}\n\n@Override\npublic double cost() {\n    return 1 + beverage.cost();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Mocha extends CondimentDecorator {</p>\n<pre><code>public Mocha(Beverage beverage) {\n    this.beverage = beverage;\n}\n\n@Override\npublic double cost() {\n    return 1 + beverage.cost();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n    Beverage beverage = new HouseBlend();\n    beverage = new Mocha(beverage);\n    beverage = new Milk(beverage);\n    System.out.println(beverage.cost());\n}\n</code></pre><p>}</p>\n<p>html\n3.0</p>\n<p>设计原则</p>\n<p>类应该对扩展开放，对修改关闭：也就是添加新功能时不需要修改代码。饮料可以动态添加新的配料，而不需要去修改饮料的代码。</p>\n<p>不可能把所有的类设计成都满足这一原则，应当把该原则应用于最有可能发生改变的地方。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "28.0 装饰（Decorator）",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。</p>\n<p>Class Diagram</p>\n<p><div align=\"center\"> <img src=\"pics/f9978fa6-9f49-4a0f-8540-02d269ac448f.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>观看电影需要操作很多电器，使用外观模式实现一键看电影功能。</p>\n<p>java\npublic class SubSystem {\n    public void turnOnTV() {\n        System.out.println(&quot;turnOnTV()&quot;);\n    }</p>\n<pre><code>public void setCD(String cd) {\n    System.out.println(&quot;setCD( &quot; + cd + &quot; )&quot;);\n}\n\npublic void startWatching(){\n    System.out.println(&quot;startWatching()&quot;);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Facade {\n    private SubSystem subSystem = new SubSystem();</p>\n<pre><code>public void watchMovie() {\n    subSystem.turnOnTV();\n    subSystem.setCD(&quot;a movie&quot;);\n    subSystem.startWatching();\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {\n    public static void main(String[] args) {\n        Facade facade = new Facade();\n        facade.watchMovie();\n    }\n}</p>\n<p>设计原则</p>\n<p>最少知识原则：只和你的密友谈话。也就是说客户对象所需要交互的对象应当尽可能少。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "29.0 外观（Facade）",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。</p>\n<p>Class Diagram</p>\n<p> Flyweight：享元对象\n IntrinsicState：内部状态，享元对象共享内部状态\n ExtrinsicState：外部状态，每个享元对象的外部状态不同</p>\n<p><div align=\"center\"> <img src=\"pics/5f5c22d5-9c0e-49e1-b5b0-6cc7032724d4.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>java\npublic interface Flyweight {\n    void doOperation(String extrinsicState);\n}</p>\n<p>java\npublic class ConcreteFlyweight implements Flyweight {</p>\n<pre><code>private String intrinsicState;\n\npublic ConcreteFlyweight(String intrinsicState) {\n    this.intrinsicState = intrinsicState;\n}\n\n@Override\npublic void doOperation(String extrinsicState) {\n    System.out.println(&quot;Object address: &quot; + System.identityHashCode(this));\n    System.out.println(&quot;IntrinsicState: &quot; + intrinsicState);\n    System.out.println(&quot;ExtrinsicState: &quot; + extrinsicState);\n}\n</code></pre><p>}</p>\n<p>java\npublic class FlyweightFactory {</p>\n<pre><code>private HashMap&lt;String, Flyweight&gt; flyweights = new HashMap&lt;&gt;();\n\nFlyweight getFlyweight(String intrinsicState) {\n    if (!flyweights.containsKey(intrinsicState)) {\n        Flyweight flyweight = new ConcreteFlyweight(intrinsicState);\n        flyweights.put(intrinsicState, flyweight);\n    }\n    return flyweights.get(intrinsicState);\n}\n</code></pre><p>}</p>\n<p>java\npublic class Client {</p>\n<pre><code>public static void main(String[] args) {\n    FlyweightFactory factory = new FlyweightFactory();\n    Flyweight flyweight1 = factory.getFlyweight(&quot;aa&quot;);\n    Flyweight flyweight2 = factory.getFlyweight(&quot;aa&quot;);\n    flyweight1.doOperation(&quot;x&quot;);\n    flyweight2.doOperation(&quot;y&quot;);\n}\n</code></pre><p>}</p>\n<p>html\nObject address: 1163157884\nIntrinsicState: aa\nExtrinsicState: x\nObject address: 1163157884\nIntrinsicState: aa\nExtrinsicState: y\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "30.0 享元（Flyweight）",
            "update_at" : 1556488166377
          },
          "x32" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIntent</p>\n<p>控制对其它对象的访问。</p>\n<p>Class Diagram</p>\n<p>代理有以下四类：</p>\n<p> 远程代理（Remote Proxy）：控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。\n 虚拟代理（Virtual Proxy）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。\n 保护代理（Protection Proxy）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。\n 智能代理（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数；当第一次引用一个对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。</p>\n<p><div align=\"center\"> <img src=\"pics/9b679ff5-94c6-48a7-b9b7-2ea868e828ed.png\"/> </div><br></p>\n<p>Implementation</p>\n<p>以下是一个虚拟代理的实现，模拟了图片延迟加载的情况下使用与图片大小相等的临时内容去替换原始图片，直到图片加载完成才将图片显示出来。</p>\n<p>java\npublic interface Image {\n    void showImage();\n}</p>\n<p>java\npublic class HighResolutionImage implements Image {</p>\n<pre><code>private URL imageURL;\nprivate long startTime;\nprivate int height;\nprivate int width;\n\npublic int getHeight() {\n    return height;\n}\n\npublic int getWidth() {\n    return width;\n}\n\npublic HighResolutionImage(URL imageURL) {\n    this.imageURL = imageURL;\n    this.startTime = System.currentTimeMillis();\n    this.width = 600;\n    this.height = 600;\n}\n\npublic boolean isLoad() {\n    // 模拟图片加载，延迟 3s 加载完成\n    long endTime = System.currentTimeMillis();\n    return endTime - startTime &gt; 3000;\n}\n\n@Override\npublic void showImage() {\n    System.out.println(&quot;Real Image: &quot; + imageURL);\n}\n</code></pre><p>}</p>\n<p>java\npublic class ImageProxy implements Image {</p>\n<pre><code>private HighResolutionImage highResolutionImage;\n\npublic ImageProxy(HighResolutionImage highResolutionImage) {\n    this.highResolutionImage = highResolutionImage;\n}\n\n@Override\npublic void showImage() {\n    while (!highResolutionImage.isLoad()) {\n        try {\n            System.out.println(&quot;Temp Image: &quot; + highResolutionImage.getWidth() + &quot; &quot; + highResolutionImage.getHeight());\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    highResolutionImage.showImage();\n}\n</code></pre><p>}</p>\n<p>java\npublic class ImageViewer {</p>\n<pre><code>public static void main(String[] args) throws Exception {\n    String image = &quot;http://image.jpg&quot;;\n    URL url = new URL(image);\n    HighResolutionImage highResolutionImage = new HighResolutionImage(url);\n    ImageProxy imageProxy = new ImageProxy(highResolutionImage);\n    imageProxy.showImage();\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x32",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "32",
            "time" : 1555228371611,
            "title" : "31.0 代理（Proxy）",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x33",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_33",
            "name" : "tei952",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "32.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_34" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在单机场景下，可以使用语言的内置锁来实现进程同步。但是在分布式场景下，需要同步的进程可能位于不同的节点上，那么就需要使用分布式锁。</p>\n<p>阻塞锁通常使用互斥量来实现：</p>\n<p> 互斥量为 0 表示有其它进程在使用锁，此时处于锁定状态；\n 互斥量为 1 表示未锁定状态。</p>\n<p>1 和 0 可以用一个整型值表示，也可以用某个数据是否存在表示。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 分布式锁",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n获得锁时向表中插入一条记录，释放锁时删除这条记录。唯一索引可以保证该记录只被插入一次，那么就可以用这个记录是否存在来判断是否存于锁定状态。</p>\n<p>存在以下几个问题：</p>\n<p> 锁没有失效时间，解锁失败的话其它进程无法再获得该锁。\n 只能是非阻塞锁，插入失败直接就报错了，无法重试。\n 不可重入，已经获得锁的进程也必须重新获取锁。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 数据库的唯一索引",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用 SETNX（set if not exist）指令插入一个键值对，如果 Key 已经存在，那么会返回 False，否则插入成功并返回 True。</p>\n<p>SETNX 指令和数据库的唯一索引类似，保证了只存在一个 Key 的键值对，那么可以用一个 Key 的键值对是否存在来判断是否存于锁定状态。</p>\n<p>EXPIRE 指令可以为一个键值对设置一个过期时间，从而避免了数据库唯一索引实现方式中释放锁失败的问题。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 Redis 的 SETNX 指令",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用了多个 Redis 实例来实现分布式锁，这是为了保证在发生单点故障时仍然可用。</p>\n<p> 尝试从 N 个互相独立 Redis 实例获取锁；\n 计算获取锁消耗的时间，只有当这个时间小于锁的过期时间，并且从大多数（N / 2 + 1）实例上获取了锁，那么就认为锁获取成功了；\n 如果锁获取失败，就到每个实例上释放锁。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 Redis 的 RedLock 算法",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nZookeeper 抽象模型</p>\n<p>Zookeeper 提供了一种树形结构的命名空间，/app1/p_1 节点的父节点为 /app1。</p>\n<p><div align=\"center\"> <img src=\"pics/aefa8042-15fa-4e8b-9f50-20b282a2c624.png\" width=\"320px\"> </div><br></p>\n<p>节点类型</p>\n<p> 永久节点：不会因为会话结束或者超时而消失；\n 临时节点：如果会话结束或者超时就会消失；\n 有序节点：会在节点名的后面加一个数字后缀，并且是有序的，例如生成的有序节点为 /lock/node-0000000000，它的下一个有序节点则为 /lock/node-0000000001，以此类推。</p>\n<p>监听器</p>\n<p>为一个节点注册监听器，在节点状态发生改变时，会给客户端发送消息。</p>\n<p>分布式锁实现</p>\n<p> 创建一个锁目录 /lock；\n 当一个客户端需要获取锁时，在 /lock 下创建临时的且有序的子节点；\n  客户端获取 /lock 下的子节点列表，判断自己创建的子节点是否为当前子节点列表中序号最小的子节点，如果是则认为获得锁；否则监听自己的前一个子节点，获得子节点的变更通知后重复此步骤直至获得锁；\n 执行业务代码，完成后，删除对应的子节点。</p>\n<p>会话超时</p>\n<p>如果一个已经获得锁的会话超时了，因为创建的是临时节点，所以该会话对应的临时节点会被删除，其它会话就可以获得锁了。可以看到，Zookeeper 分布式锁不会出现数据库的唯一索引实现的分布式锁释放锁失败问题。</p>\n<p>羊群效应</p>\n<p>一个节点未获得锁，只需要监听自己的前一个子节点，这是因为如果监听所有的子节点，那么任意一个子节点状态改变，其它所有子节点都会收到通知（羊群效应），而我们只希望它的后一个子节点收到通知。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 Zookeeper 的有序节点",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n指事务的操作位于不同的节点上，需要保证事务的 ACID 特性。</p>\n<p>例如在下单场景下，库存和订单如果不在同一个节点上，就涉及分布式事务。</p>\n<p>2PC</p>\n<p>两阶段提交（Two-phase Commit，2PC），通过引入协调者（Coordinator）来协调参与者的行为，并最终决定这些参与者是否要真正执行事务。</p>\n<p>运行过程</p>\n<p>准备阶段</p>\n<p>协调者询问参与者事务是否执行成功，参与者发回事务执行结果。</p>\n<p><div align=\"center\"> <img src=\"pics/44d33643-1004-43a3-b99a-4d688a08d0a1.png\" width=\"550px\"> </div><br></p>\n<p>提交阶段</p>\n<p>如果事务在每个参与者上都执行成功，事务协调者发送通知让参与者提交事务；否则，协调者发送通知让参与者回滚事务。</p>\n<p>需要注意的是，在准备阶段，参与者执行了事务，但是还未提交。只有在提交阶段接收到协调者发来的通知后，才进行提交或者回滚。</p>\n<p><div align=\"center\"> <img src=\"pics/d2ae9932-e2b1-4191-8ee9-e573f36d3895.png\" width=\"550px\"> </div><br></p>\n<p>存在的问题</p>\n<p>同步阻塞</p>\n<p>所有事务参与者在等待其它参与者响应的时候都处于同步阻塞状态，无法进行其它操作。</p>\n<p>单点问题</p>\n<p>协调者在 2PC 中起到非常大的作用，发生故障将会造成很大影响。特别是在阶段二发生故障，所有参与者会一直等待，无法完成其它操作。</p>\n<p>数据不一致</p>\n<p>在阶段二，如果协调者只发送了部分 Commit 消息，此时网络发生异常，那么只有部分参与者接收到 Commit 消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。</p>\n<p>太过保守</p>\n<p>任意一个节点失败就会导致整个事务失败，没有完善的容错机制。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 分布式事务",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n本地消息表与业务数据表处于同一个数据库中，这样就能利用本地事务来保证在对这两个表的操作满足事务特性，并且使用了消息队列来保证最终一致性。</p>\n<p> 在分布式事务操作的一方完成写业务数据的操作之后向本地消息表发送一个消息，本地事务能保证这个消息一定会被写入本地消息表中。\n 之后将本地消息表中的消息转发到消息队列中，如果转发成功则将消息从本地消息表中删除，否则继续重新转发。\n 在分布式事务操作的另一方从消息队列中读取一个消息，并执行消息中的操作。</p>\n<p><div align=\"center\"> <img src=\"pics/476329d4-e2ef-4f7b-8ac9-a52a6f784600.png\" width=\"740px\"> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 本地消息表",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n分布式系统不可能同时满足一致性（C：Consistency）、可用性（A：Availability）和分区容忍性（P：Partition Tolerance），最多只能同时满足其中两项。</p>\n<p><div align=\"center\"> <img src=\"pics/a14268b3-b937-4ffa-a34a-4cc53071686b.jpg\" width=\"450px\"> </div><br></p>\n<p>一致性</p>\n<p>一致性指的是多个数据副本是否能保持一致的特性，在一致性的条件下，系统在执行数据更新操作之后能够从一致性状态转移到另一个一致性状态。</p>\n<p>对系统的一个数据更新成功之后，如果所有用户都能够读取到最新的值，该系统就被认为具有强一致性。</p>\n<p>可用性</p>\n<p>可用性指分布式系统在面对各种异常时可以提供正常服务的能力，可以用系统可用时间占总时间的比值来衡量，4 个 9 的可用性表示系统 99.99% 的时间是可用的。</p>\n<p>在可用性条件下，要求系统提供的服务一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。</p>\n<p>分区容忍性</p>\n<p>网络分区指分布式系统中的节点被划分为多个区域，每个区域内部可以通信，但是区域之间无法通信。</p>\n<p>在分区容忍性条件下，分布式系统在遇到任何网络分区故障的时候，仍然需要能对外提供一致性和可用性的服务，除非是整个网络环境都发生了故障。</p>\n<p>权衡</p>\n<p>在分布式系统中，分区容忍性必不可少，因为需要总是假设网络是不可靠的。因此，CAP 理论实际上是要在可用性和一致性之间做权衡。</p>\n<p>可用性和一致性往往是冲突的，很难使它们同时满足。在多个节点之间进行数据同步时，</p>\n<p> 为了保证一致性（CP），不能访问未同步完成的节点，也就失去了部分可用性；\n 为了保证可用性（AP），允许读取所有节点的数据，但是数据可能不一致。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 CAP",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nBASE 是基本可用（Basically Available）、软状态（Soft State）和最终一致性（Eventually Consistent）三个短语的缩写。</p>\n<p>BASE 理论是对 CAP 中一致性和可用性权衡的结果，它的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p>\n<p>基本可用</p>\n<p>指分布式系统在出现故障的时候，保证核心可用，允许损失部分可用性。</p>\n<p>例如，电商在做促销时，为了保证购物系统的稳定性，部分消费者可能会被引导到一个降级的页面。</p>\n<p>软状态</p>\n<p>指允许系统中的数据存在中间状态，并认为该中间状态不会影响系统整体可用性，即允许系统不同节点的数据副本之间进行同步的过程存在时延。</p>\n<p>最终一致性</p>\n<p>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能达到一致的状态。</p>\n<p>ACID 要求强一致性，通常运用在传统的数据库系统上。而 BASE 要求最终一致性，通过牺牲强一致性来达到可用性，通常运用在大型分布式系统中。</p>\n<p>在实际的分布式场景中，不同业务单元和组件对一致性的要求是不同的，因此 ACID 和 BASE 往往会结合在一起使用。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 BASE",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n用于达成共识性问题，即对多个节点产生的值，该算法能保证只选出唯一一个值。</p>\n<p>主要有三类节点：</p>\n<p> 提议者（Proposer）：提议一个值；\n 接受者（Acceptor）：对每个提议进行投票；\n 告知者（Learner）：被告知投票的结果，不参与投票过程。</p>\n<p><div align=\"center\"> <img src=\"pics/b988877c-0f0a-4593-916d-de2081320628.jpg\"/> </div><br></p>\n<p> 执行过程</p>\n<p>规定一个提议包含两个字段：[n, v]，其中 n 为序号（具有唯一性），v 为提议值。</p>\n<p>Prepare 阶段</p>\n<p>下图演示了两个 Proposer 和三个 Acceptor 的系统中运行该算法的初始过程，每个 Proposer 都会向所有 Acceptor 发送 Prepare 请求。</p>\n<p><div align=\"center\"> <img src=\"pics/1a9977e4-2f5c-49a6-aec9-f3027c9f46a7.png\"/> </div><br></p>\n<p>当 Acceptor 接收到一个 Prepare 请求，包含的提议为 [n1, v1]，并且之前还未接收过 Prepare 请求，那么发送一个 Prepare 响应，设置当前接收到的提议为 [n1, v1]，并且保证以后不会再接受序号小于 n1 的提议。</p>\n<p>如下图，Acceptor X 在收到 [n=2, v=8] 的 Prepare 请求时，由于之前没有接收过提议，因此就发送一个 [no previous] 的 Prepare 响应，设置当前接收到的提议为 [n=2, v=8]，并且保证以后不会再接受序号小于 2 的提议。其它的 Acceptor 类似。</p>\n<p><div align=\"center\"> <img src=\"pics/fb44307f-8e98-4ff7-a918-31dacfa564b4.jpg\"/> </div><br></p>\n<p>如果 Acceptor 接收到一个 Prepare 请求，包含的提议为 [n2, v2]，并且之前已经接收过提议 [n1, v1]。如果 n1 &gt; n2，那么就丢弃该提议请求；否则，发送 Prepare 响应，该 Prepare 响应包含之前已经接收过的提议 [n1, v1]，设置当前接收到的提议为 [n2, v2]，并且保证以后不会再接受序号小于 n2 的提议。</p>\n<p>如下图，Acceptor Z 收到 Proposer A 发来的 [n=2, v=8] 的 Prepare 请求，由于之前已经接收过 [n=4, v=5] 的提议，并且 n &gt; 2，因此就抛弃该提议请求；Acceptor X 收到 Proposer B 发来的 [n=4, v=5] 的 Prepare 请求，因为之前接收到的提议为 [n=2, v=8]，并且 2 &lt;= 4，因此就发送 [n=2, v=8] 的 Prepare 响应，设置当前接收到的提议为 [n=4, v=5]，并且保证以后不会再接受序号小于 4 的提议。Acceptor Y 类似。</p>\n<p><div align=\"center\"> <img src=\"pics/2bcc58ad-bf7f-485c-89b5-e7cafc211ce2.jpg\"/> </div><br></p>\n<p>Accept 阶段</p>\n<p>当一个 Proposer 接收到超过一半 Acceptor 的 Prepare 响应时，就可以发送 Accept 请求。</p>\n<p>Proposer A 接收到两个 Prepare 响应之后，就发送 [n=2, v=8] Accept 请求。该 Accept 请求会被所有 Acceptor 丢弃，因为此时所有 Acceptor 都保证不接受序号小于 4 的提议。</p>\n<p>Proposer B 过后也收到了两个 Prepare 响应，因此也开始发送 Accept 请求。需要注意的是，Accept 请求的 v 需要取它收到的最大提议编号对应的 v 值，也就是 8。因此它发送 [n=4, v=8] 的 Accept 请求。</p>\n<p><div align=\"center\"> <img src=\"pics/9b838aee-0996-44a5-9b0f-3d1e3e2f5100.png\"/> </div><br></p>\n<p>Learn 阶段</p>\n<p>Acceptor 接收到 Accept 请求时，如果序号大于等于该 Acceptor 承诺的最小序号，那么就发送 Learn 提议给所有的 Learner。当 Learner 发现有大多数的 Acceptor 接收了某个提议，那么该提议的提议值就被 Paxos 选择出来。</p>\n<p><div align=\"center\"> <img src=\"pics/bf667594-bb4b-4634-bf9b-0596a45415ba.jpg\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 Paxos",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n正确性</p>\n<p>指只有一个提议值会生效。</p>\n<p>因为 Paxos 协议要求每个生效的提议被多数 Acceptor 接收，并且 Acceptor 不会接受两个不同的提议，因此可以保证正确性。</p>\n<p>可终止性</p>\n<p>指最后总会有一个提议生效。</p>\n<p>Paxos 协议能够让 Proposer 发送的提议朝着能被大多数 Acceptor 接受的那个提议靠拢，因此能够保证可终止性。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 约束条件",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nRaft 也是分布式一致性协议，主要是用来竞选主节点。</p>\n<p>单个 Candidate 的竞选</p>\n<p>有三种节点：Follower、Candidate 和 Leader。Leader 会周期性的发送心跳包给 Follower。每个 Follower 都设置了一个随机的竞选超时时间，一般为 150ms\\~300ms，如果在这个时间内没有收到 Leader 的心跳包，就会变成 Candidate，进入竞选阶段。</p>\n<p> 下图展示一个分布式系统的最初阶段，此时只有 Follower 没有 Leader。Node A 等待一个随机的竞选超时时间之后，没收到 Leader 发来的心跳包，因此进入竞选阶段。</p>\n<p><div align=\"center\"> <img src=\"pics/111521118015898.gif\"/> </div><br></p>\n<p> 此时 Node A 发送投票请求给其它所有节点。</p>\n<p><div align=\"center\"> <img src=\"pics/111521118445538.gif\"/> </div><br></p>\n<p> 其它节点会对请求进行回复，如果超过一半的节点回复了，那么该 Candidate 就会变成 Leader。</p>\n<p><div align=\"center\"> <img src=\"pics/111521118483039.gif\"/> </div><br></p>\n<p> 之后 Leader 会周期性地发送心跳包给 Follower，Follower 接收到心跳包，会重新开始计时。</p>\n<p><div align=\"center\"> <img src=\"pics/111521118640738.gif\"/> </div><br></p>\n<p>多个 Candidate 竞选</p>\n<p> 如果有多个 Follower 成为 Candidate，并且所获得票数相同，那么就需要重新开始投票。例如下图中 Node B 和 Node D 都获得两票，需要重新开始投票。</p>\n<p><div align=\"center\"> <img src=\"pics/111521119203347.gif\"/> </div><br></p>\n<p> 由于每个节点设置的随机竞选超时时间不同，因此下一次再次出现多个 Candidate 并获得同样票数的概率很低。</p>\n<p><div align=\"center\"> <img src=\"pics/111521119368714.gif\"/> </div><br></p>\n<p>数据同步</p>\n<p> 来自客户端的修改都会被传入 Leader。注意该修改还未被提交，只是写入日志中。</p>\n<p><div align=\"center\"> <img src=\"pics/71550414107576.gif\"/> </div><br></p>\n<p> Leader 会把修改复制到所有 Follower。</p>\n<p><div align=\"center\"> <img src=\"pics/91550414131331.gif\"/> </div><br></p>\n<p> Leader 会等待大多数的 Follower 也进行了修改，然后才将修改提交。</p>\n<p><div align=\"center\"> <img src=\"pics/101550414151983.gif\"/> </div><br></p>\n<p> 此时 Leader 会通知的所有 Follower 让它们也提交修改，此时所有节点的值达成一致。</p>\n<p><div align=\"center\"> <img src=\"pics/111550414182638.gif\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 Raft",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_34",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_35" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_35",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 构建工具的作用",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n主要包括 Ant、Maven 和 Gradle。</p>\n<p><div align=\"center\"> <img src=\"pics/34751bd9-e8e4-4c20-94bc-f7217049fada.png\" width=\"400px\"> </div><br></p>\n<p>Gradle 和 Maven 的区别是，它使用 Groovy 这种特定领域语言（DSL）来管理构建脚本，而不再使用 XML 这种标记性语言。因为项目如果庞大的话，XML 很容易就变得臃肿。</p>\n<p>例如要在项目中引入 Junit，Maven 的代码如下：</p>\n<p>xml\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n\n   <groupId>jizg.study.maven.hello</groupId>\n   <artifactId>hello-first</artifactId>\n   <version>0.0.1-SNAPSHOT</version>\n\n   <dependencies>\n          <dependency>\n               <groupId>junit</groupId>\n               <artifactId>junit</artifactId>\n               <version>4.10</version>\n               <scope>test</scope>\n          </dependency>\n   </dependencies>\n</project>\n\n<p>而 Gradle 只需要几行代码：</p>\n<p>java\ndependencies {\n    testCompile &quot;junit:junit:4.10&quot;\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_35",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 Java 主流构建工具",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n概述</p>\n<p>提供了项目对象模型（POM）文件来管理项目的构建。</p>\n<p>仓库</p>\n<p>仓库的搜索顺序为：本地仓库、中央仓库、远程仓库。</p>\n<p> 本地仓库用来存储项目的依赖库；\n 中央仓库是下载依赖库的默认位置；\n 远程仓库，因为并非所有的库存储在中央仓库，或者中央仓库访问速度很慢，远程仓库是中央仓库的补充。</p>\n<p>POM</p>\n<p>POM 代表项目对象模型，它是一个 XML 文件，保存在项目根目录的 pom.xml 文件中。</p>\n<p>xml</p>\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.12</version>\n    <scope>test</scope>\n</dependency>\n\n\n<p>[groupId, artifactId, version, packaging, classifier] 称为一个项目的坐标，其中 groupId、artifactId、version 必须定义，packaging 可选（默认为 Jar），classifier 不能直接定义的，需要结合插件使用。</p>\n<p> groupId：项目组 Id，必须全球唯一；\n artifactId：项目 Id，即项目名；\n version：项目版本；\n packaging：项目打包方式。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_35",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 Maven",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n依赖路径最短优先原则</p>\n<p>html\nA -&gt; B -&gt; C -&gt; X(1.0)\nA -&gt; D -&gt; X(2.0)\n由于 X(2.0) 路径最短，所以使用 X(2.0)。</p>\n<p>声明顺序优先原则</p>\n<p>html\nA -&gt; B -&gt; X(1.0)\nA -&gt; C -&gt; X(2.0)</p>\n<p>在 POM 中最先声明的优先，上面的两个依赖如果先声明 B，那么最后使用 X(1.0)。</p>\n<p>覆写优先原则</p>\n<p>子 POM 内声明的依赖优先于父 POM 中声明的依赖。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_35",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 依赖原则",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>找到 Maven 加载的 Jar 包版本，使用 `mvn dependency:tree` 查看依赖树，根据依赖原则来调整依赖在 POM 文件的声明顺序。</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_35",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 解决依赖冲突",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_35",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_37" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n封装</p>\n<p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p>\n<p>优点：</p>\n<p> 减少耦合：可以独立地开发、测试、优化、使用、理解和修改\n 减轻维护的负担：可以更容易被程序员理解，并且在调试的时候可以不影响其他模块\n 有效地调节性能：可以通过剖析确定哪些模块影响了系统的性能\n 提高软件的可重用性\n 降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</p>\n<p>以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。</p>\n<p>注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。</p>\n<p>java\npublic class Person {</p>\n<pre><code>private String name;\nprivate int gender;\nprivate int age;\n\npublic String getName() {\n    return name;\n}\n\npublic String getGender() {\n    return gender == 0 ? &quot;man&quot; : &quot;woman&quot;;\n}\n\npublic void work() {\n    if (18 &lt;= age &amp;&amp; age &lt;= 50) {\n        System.out.println(name + &quot; is working very hard!&quot;);\n    } else {\n        System.out.println(name + &quot; can&#39;t work any more!&quot;);\n    }\n}\n</code></pre><p>}</p>\n<p>继承</p>\n<p>继承实现了  <strong>IS-A</strong>  关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p>\n<p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p>\n<p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为  <strong>向上转型</strong> 。</p>\n<p>java\nAnimal animal = new Cat();</p>\n<p>多态</p>\n<p>多态分为编译时多态和运行时多态：</p>\n<p> 编译时多态主要指方法的重载\n 运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</p>\n<p>运行时多态有三个条件：</p>\n<p> 继承\n 覆盖（重写）\n 向上转型</p>\n<p>下面的代码中，乐器类（Instrument）有两个子类：Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p>\n<p>java\npublic class Instrument {</p>\n<pre><code>public void play() {\n    System.out.println(&quot;Instument is playing...&quot;);\n}\n</code></pre><p>}</p>\n<p>public class Wind extends Instrument {</p>\n<pre><code>public void play() {\n    System.out.println(&quot;Wind is playing...&quot;);\n}\n</code></pre><p>}</p>\n<p>public class Percussion extends Instrument {</p>\n<pre><code>public void play() {\n    System.out.println(&quot;Percussion is playing...&quot;);\n}\n</code></pre><p>}</p>\n<p>public class Music {</p>\n<pre><code>public static void main(String[] args) {\n    List&lt;Instrument&gt; instruments = new ArrayList&lt;&gt;();\n    instruments.add(new Wind());\n    instruments.add(new Percussion());\n    for(Instrument instrument : instruments) {\n        instrument.play();\n    }\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 三大特性",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n以下类图使用 <a href=\"https://www.planttext.com/\">PlantUML</a> 绘制，更多语法及使用请参考：http://plantuml.com/ 。</p>\n<p>泛化关系 (Generalization)</p>\n<p>用来描述继承关系，在 Java 中使用 extends 关键字。</p>\n<p><div align=\"center\"> <img src=\"pics/c0874e0a-dba3-467e-9c86-dd9313e0843e.jpg\" width=\"180px\"> </div><br></p>\n<p>text\n@startuml</p>\n<p>title Generalization</p>\n<p>class Vihical\nclass Car\nclass Trunck</p>\n<p>Vihical &lt;|-- Car\nVihical &lt;|-- Trunck</p>\n<p>@enduml\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 类图",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n用来实现一个接口，在 Java 中使用 implements 关键字。</p>\n<p><div align=\"center\"> <img src=\"pics/83d466bd-946b-4430-854a-cf7b0696d4c8.jpg\" width=\"170px\"> </div><br></p>\n<p>text\n@startuml</p>\n<p>title Realization</p>\n<p>interface MoveBehavior\nclass Fly\nclass Run</p>\n<p>MoveBehavior &lt;|.. Fly\nMoveBehavior &lt;|.. Run</p>\n<p>@enduml\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 实现关系 (Realization)",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p>\n<p><div align=\"center\"> <img src=\"pics/a0ce43b7-afa8-4397-a96e-5c12a070f2ae.jpg\" width=\"300px\"> </div><br></p>\n<p>text\n@startuml</p>\n<p>title Aggregation</p>\n<p>class Computer\nclass Keyboard\nclass Mouse\nclass Screen</p>\n<p>Computer o-- Keyboard\nComputer o-- Mouse\nComputer o-- Screen</p>\n<p>@enduml\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 聚合关系 (Aggregation)",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p>\n<p><div align=\"center\"> <img src=\"pics/6a88a398-c494-41f5-bb62-9f7fb811df7c.jpg\" width=\"280px\"> </div><br></p>\n<p>text\n@startuml</p>\n<p>title Composition</p>\n<p>class Company\nclass DepartmentA\nclass DepartmentB</p>\n<p>Company <em>-- DepartmentA\nCompany </em>-- DepartmentB</p>\n<p>@enduml\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 组合关系 (Composition)",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p>\n<p><div align=\"center\"> <img src=\"pics/a3e4dc62-0da5-4d22-94f2-140078281812.jpg\" width=\"200px\"> </div><br></p>\n<p>text\n@startuml</p>\n<p>title Association</p>\n<p>class School\nclass Student</p>\n<p>School &quot;1&quot; - &quot;n&quot; Student</p>\n<p>@enduml\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 关联关系 (Association)",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式：</p>\n<p> A 类是 B 类方法的局部变量；\n A 类是 B 类方法当中的一个参数；\n A 类向 B 类发送消息，从而影响 B 类发生变化。</p>\n<p><div align=\"center\"> <img src=\"pics/379444c9-f1d1-45cd-b7aa-b0c18427d388.jpg\" width=\"330px\"> </div><br></p>\n<p>text\n@startuml</p>\n<p>title Dependency</p>\n<p>class Vihicle {\n    move(MoveBehavior)\n}</p>\n<p>interface MoveBehavior {\n    move()\n}</p>\n<p>note &quot;MoveBehavior.move()&quot; as N</p>\n<p>Vihicle ..&gt; MoveBehavior</p>\n<p>Vihicle .. N</p>\n<p>@enduml\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 依赖关系 (Dependency)",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nS.O.L.I.D</p>\n<p>| 简写 | 全拼 | 中文翻译 |\n| :--: | :--: | :--: |\n| SRP | The Single Responsibility Principle    | 单一责任原则 |\n| OCP | The Open Closed Principle              | 开放封闭原则 |\n| LSP | The Liskov Substitution Principle      | 里氏替换原则 |\n| ISP | The Interface Segregation Principle    | 接口分离原则 |\n| DIP | The Dependency Inversion Principle     | 依赖倒置原则 |</p>\n<p>单一责任原则</p>\n<blockquote>\n<p>修改一个类的原因应该只有一个。</p>\n</blockquote>\n<p>换句话说就是让一个类只负责一件事，当这个类需要做过多事情的时候，就需要分解这个类。</p>\n<p>如果一个类承担的职责过多，就等于把这些职责耦合在了一起，一个职责的变化可能会削弱这个类完成其它职责的能力。</p>\n<p>开放封闭原则</p>\n<blockquote>\n<p>类应该对扩展开放，对修改关闭。</p>\n</blockquote>\n<p>扩展就是添加新功能的意思，因此该原则要求在添加新功能时不需要修改代码。</p>\n<p>符合开闭原则最典型的设计模式是装饰者模式，它可以动态地将责任附加到对象上，而不用去修改类的代码。</p>\n<p>里氏替换原则</p>\n<blockquote>\n<p>子类对象必须能够替换掉所有父类对象。</p>\n</blockquote>\n<p>继承是一种 IS-A 关系，子类需要能够当成父类来使用，并且需要比父类更特殊。</p>\n<p>如果不满足这个原则，那么各个子类的行为上就会有很大差异，增加继承体系的复杂度。</p>\n<p>接口分离原则</p>\n<blockquote>\n<p>不应该强迫客户依赖于它们不用的方法。</p>\n</blockquote>\n<p>因此使用多个专门的接口比使用单一的总接口要好。</p>\n<p>依赖倒置原则</p>\n<blockquote>\n<p>高层模块不应该依赖于低层模块，二者都应该依赖于抽象；</br>抽象不应该依赖于细节，细节应该依赖于抽象。</p>\n</blockquote>\n<p>高层模块包含一个应用程序中重要的策略选择和业务模块，如果高层模块依赖于低层模块，那么低层模块的改动就会直接影响到高层模块，从而迫使高层模块也需要改动。</p>\n<p>依赖于抽象意味着：</p>\n<p> 任何变量都不应该持有一个指向具体类的指针或者引用；\n 任何类都不应该从具体类派生；\n 任何方法都不应该覆写它的任何基类中的已经实现的方法。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 设计原则",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 其他常见原则",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_37",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_38" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n消息生产者向消息队列中发送了一个消息之后，只能被一个消费者消费一次。</p>\n<p><div align=\"center\"> <img src=\"pics/206f965e-53b2-4732-90cf-75910b80d7ac.png\" width=\"450px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_38",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 点对点",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n消息生产者向频道发送一个消息之后，多个消费者可以从该频道订阅到这条消息并消费。</p>\n<p><div align=\"center\"> <img src=\"pics/4e93f7d4-2623-4129-a939-59051256561e.png\" width=\"450px\"/> </div><br></p>\n<p>发布与订阅模式和观察者模式有以下不同：</p>\n<p> 观察者模式中，观察者和主题都知道对方的存在；而在发布与订阅模式中，生产者与消费者不知道对方的存在，它们之间通过频道进行通信。\n 观察者模式是同步的，当事件触发时，主题会调用观察者的方法，然后等待方法返回；而发布与订阅模式是异步的，生产者向频道发送一个消息之后，就不需要关心消费者何时去订阅这个消息，可以立即返回。</p>\n<p><div align=\"center\"> <img src=\"pics/530764d5-f67f-47a2-8df4-57e8646e1400.png\" width=\"450px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_38",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 发布/订阅",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n异步处理</p>\n<p>发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。</p>\n<p>例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。</p>\n<p>只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。</p>\n<p>流量削锋</p>\n<p>在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。</p>\n<p>可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。</p>\n<p>应用解耦</p>\n<p>如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。</p>\n<p>通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_38",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 使用场景",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n发送端的可靠性</p>\n<p>发送端完成操作后一定能将消息成功发送到消息队列中。</p>\n<p>实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。</p>\n<p>接收端的可靠性</p>\n<p>接收端能够从消息队列成功消费一次消息。</p>\n<p>两种实现方法：</p>\n<p> 保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。\n 保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_38",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 可靠性",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_38",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_39" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nRedis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>\n<p>键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p>\n<p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 概述",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n| 数据类型 | 可以存储的值 | 操作 |\n| :--: | :--: | :--: |\n| STRING | 字符串、整数或者浮点数 | 对整个字符串或者字符串的其中一部分执行操作</br> 对整数和浮点数执行自增或者自减操作 |\n| LIST | 列表 | 从两端压入或者弹出元素 </br> 对单个或者多个元素</br> 进行修剪，只保留一个范围内的元素 |\n| SET | 无序集合 | 添加、获取、移除单个元素</br> 检查一个元素是否存在于集合中</br> 计算交集、并集、差集</br> 从集合里面随机获取元素 |\n| HASH | 包含键值对的无序散列表 | 添加、获取、移除单个键值对</br> 获取所有键值对</br> 检查某个键是否存在|\n| ZSET | 有序集合 | 添加、获取、删除元素</br> 根据分值范围或者成员来获取元素</br> 计算一个键的排名 |</p>\n<blockquote>\n<p><a href=\"https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/\">What Redis data structures look like</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 数据类型",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 STRING",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 LIST",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 SET",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 ZSET",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 数据结构字典",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ndictht 是一个散列表结构，使用拉链法保存哈希冲突。</p>\n<p>c\n/<em> This is our hash table structure. Every dictionary has two of this as we\n </em> implement incremental rehashing, for the old to the new table. */\ntypedef struct dictht {\n    dictEntry **table;\n    unsigned long size;\n    unsigned long sizemask;\n    unsigned long used;\n} dictht;</p>\n<p>c\ntypedef struct dictEntry {\n    void <em>key;\n    union {\n        void </em>val;\n        uint64_t u64;\n        int64_t s64;\n        double d;\n    } v;\n    struct dictEntry *next;\n} dictEntry;</p>\n<p>Redis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。</p>\n<p>c\ntypedef struct dict {\n    dictType <em>type;\n    void </em>privdata;\n    dictht ht[2];\n    long rehashidx; /<em> rehashing not in progress if rehashidx == -1 </em>/\n    unsigned long iterators; /<em> number of iterators currently running </em>/\n} dict;</p>\n<p>rehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。</p>\n<p>渐进式 rehash 通过记录 dict 的 rehashidx 完成，它从 0 开始，然后每执行一次 rehash 都会递增。例如在一次 rehash 中，要把 dict[0] rehash 到 dict[1]，这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上，dict[0] 的 table[rehashidx] 指向 null，并令 rehashidx++。</p>\n<p>在 rehash 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。</p>\n<p>采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的查找操作也需要到对应的 dictht 去执行。</p>\n<p>c\n/<em> Performs N steps of incremental rehashing. Returns 1 if there are still\n </em> keys to move from the old to the new hash table, otherwise 0 is returned.\n <em>\n </em> Note that a rehashing step consists in moving a bucket (that may have more\n <em> than one key as we use chaining) from the old to the new hash table, however\n </em> since part of the hash table may be composed of empty spaces, it is not\n <em> guaranteed that this function will rehash even a single bucket, since it\n </em> will visit at max N<em>10 empty buckets in total, otherwise the amount of\n </em> work it does would be unbound and the function may block for a long time. <em>/\nint dictRehash(dict </em>d, int n) {\n    int empty_visits = n <em> 10; /</em> Max number of empty buckets to visit. */\n    if (!dictIsRehashing(d)) return 0;</p>\n<pre><code>while (n-- &amp;&amp; d-&gt;ht[0].used != 0) {\n    dictEntry *de, *nextde;\n\n    /* Note that rehashidx can&#39;t overflow as we are sure there are more\n     * elements because ht[0].used != 0 */\n    assert(d-&gt;ht[0].size &gt; (unsigned long) d-&gt;rehashidx);\n    while (d-&gt;ht[0].table[d-&gt;rehashidx] == NULL) {\n        d-&gt;rehashidx++;\n        if (--empty_visits == 0) return 1;\n    }\n    de = d-&gt;ht[0].table[d-&gt;rehashidx];\n    /* Move all the keys in this bucket from the old to the new hash HT */\n    while (de) {\n        uint64_t h;\n\n        nextde = de-&gt;next;\n        /* Get the index in the new hash table */\n        h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[1].sizemask;\n        de-&gt;next = d-&gt;ht[1].table[h];\n        d-&gt;ht[1].table[h] = de;\n        d-&gt;ht[0].used--;\n        d-&gt;ht[1].used++;\n        de = nextde;\n    }\n    d-&gt;ht[0].table[d-&gt;rehashidx] = NULL;\n    d-&gt;rehashidx++;\n}\n\n/* Check if we already rehashed the whole table... */\nif (d-&gt;ht[0].used == 0) {\n    zfree(d-&gt;ht[0].table);\n    d-&gt;ht[0] = d-&gt;ht[1];\n    _dictReset(&amp;d-&gt;ht[1]);\n    d-&gt;rehashidx = -1;\n    return 0;\n}\n\n/* More to rehash... */\nreturn 1;\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 跳跃表",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n是有序集合的底层实现之一。</p>\n<p>跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。</p>\n<p><div align=\"center\"> <img src=\"pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png\" width=\"600px\"/> </div><br></p>\n<p>在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。</p>\n<p><div align=\"center\"> <img src=\"pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png\" width=\"600px\"/> </div><br></p>\n<p>与红黑树等平衡树相比，跳跃表具有以下优点：</p>\n<p> 插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；\n 更容易实现；\n 支持无锁操作。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 使用场景",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n计数器</p>\n<p>可以对 String 进行自增自减运算，从而实现计数器功能。</p>\n<p>Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>\n<p>缓存</p>\n<p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>\n<p>查找表</p>\n<p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>\n<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>\n<p>消息队列</p>\n<p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息</p>\n<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>\n<p>会话缓存</p>\n<p>可以使用 Redis 来统一存储多台应用服务器的会话信息。</p>\n<p>当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p>\n<p>分布式锁实现</p>\n<p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。</p>\n<p>可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p>\n<p>其它</p>\n<p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>\n<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 Redis 与 Memcached",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n两者都是非关系型内存键值数据库，主要有以下不同：</p>\n<p>数据类型</p>\n<p>Memcached 仅支持字符串类型，而 Redis 支持五种不同的数据类型，可以更灵活地解决问题。</p>\n<p>数据持久化</p>\n<p>Redis 支持两种持久化策略：RDB 快照和 AOF 日志，而 Memcached 不支持持久化。</p>\n<p>分布式</p>\n<p>Memcached 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</p>\n<p>Redis Cluster 实现了分布式的支持。</p>\n<p>内存管理机制</p>\n<p> 在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。</p>\n<p> Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 键的过期时间",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nRedis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p>\n<p>对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 数据淘汰策略",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。</p>\n<p>Redis 具体有 6 种淘汰策略：</p>\n<p>| 策略 | 描述 |\n| :--: | :--: |\n| volatile-lru | 从已设置过期时间的数据集中挑选最近最少使用的数据淘汰 |\n| volatile-ttl | 从已设置过期时间的数据集中挑选将要过期的数据淘汰 |\n|volatile-random | 从已设置过期时间的数据集中任意选择数据淘汰 |\n| allkeys-lru | 从所有数据集中挑选最近最少使用的数据淘汰 |\n| allkeys-random | 从所有数据集中任意选择数据进行淘汰 |\n| noeviction | 禁止驱逐数据 |</p>\n<p>作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。</p>\n<p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。</p>\n<p>Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 持久化",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nRedis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p>\n<p>RDB 持久化</p>\n<p>将某个时间点的所有数据都存放到硬盘上。</p>\n<p>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。</p>\n<p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。</p>\n<p>如果数据量很大，保存快照的时间会很长。</p>\n<p>AOF 持久化</p>\n<p>将写命令添加到 AOF 文件（Append Only File）的末尾。</p>\n<p>使用 AOF 持久化需要设置同步选项，从而确保写命令什么时候会同步到磁盘文件上。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p>\n<p>| 选项 | 同步频率 |\n| :--: | :--: |\n| always | 每个写命令都同步 |\n| everysec | 每秒同步一次 |\n| no | 让操作系统来决定何时同步 |</p>\n<p> always 选项会严重减低服务器的性能；\n everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；\n no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。</p>\n<p>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 事务",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。</p>\n<p>事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p>\n<p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 事件",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nRedis 服务器是一个事件驱动程序。</p>\n<p>文件事件</p>\n<p>服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。</p>\n<p>Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。</p>\n<p><div align=\"center\"> <img src=\"pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png\" width=\"\"/> </div><br></p>\n<p>时间事件</p>\n<p>服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。</p>\n<p>时间事件又分为：</p>\n<p> 定时事件：是让一段程序在指定的时间之内执行一次；\n 周期性事件：是让一段程序每隔指定时间就执行一次。</p>\n<p>Redis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。</p>\n<p>事件的调度与执行</p>\n<p>服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。</p>\n<p>事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：</p>\n<p>python\ndef aeProcessEvents():</p>\n<pre><code># 获取到达时间离当前时间最接近的时间事件\ntime_event = aeSearchNearestTimer()\n# 计算最接近的时间事件距离到达还有多少毫秒\nremaind_ms = time_event.when - unix_ts_now()\n# 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0\nif remaind_ms &lt; 0:\n    remaind_ms = 0\n# 根据 remaind_ms 的值，创建 timeval\ntimeval = create_timeval_with_ms(remaind_ms)\n# 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定\naeApiPoll(timeval)\n# 处理所有已产生的文件事件\nprocesFileEvents()\n# 处理所有已到达的时间事件\nprocessTimeEvents()\n</code></pre><p>将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：</p>\n<p>python\ndef main():</p>\n<pre><code># 初始化服务器\ninit_server()\n# 一直处理事件，直到服务器关闭为止\nwhile server_is_not_shutdown():\n    aeProcessEvents()\n# 服务器关闭，执行清理操作\nclean_server()\n</code></pre><p>从事件处理的角度来看，服务器运行流程如下：</p>\n<p><div align=\"center\"> <img src=\"pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png\" width=\"350\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 复制",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。</p>\n<p>一个从服务器只能有一个主服务器，并且不支持主主复制。</p>\n<p>连接过程</p>\n<p> 主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；</p>\n<p> 从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；</p>\n<p> 主服务器每执行一次写命令，就向从服务器发送相同的写命令。</p>\n<p>主从链</p>\n<p>随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。</p>\n<p><div align=\"center\"> <img src=\"pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png\" width=\"600\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 Sentinel",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Sentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 分片",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。</p>\n<p>假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，... ，有不同的方式来选择一个指定的键存储在哪个实例中。</p>\n<p> 最简单的方式是范围分片，例如用户 id 从 0\\~1000 的存储到实例 R0 中，用户 id 从 1001\\~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。\n 还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。</p>\n<p>根据执行分片的位置，可以分为三种分片方式：</p>\n<p> 客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。\n 代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。\n 服务器分片：Redis Cluster。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 一个简单的论坛系统分析",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_39",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_3a" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n正则表达式用于文本内容的查找和替换。</p>\n<p>正则表达式内置于其它语言或者软件产品中，它本身不是一种语言或者软件。</p>\n<p><a href=\"https://regexr.com/\">正则表达式在线工具</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 概述",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<strong>.</strong>  可以用来匹配任何的单个字符，但是在绝大多数实现里面，不能匹配换行符；</p>\n<p><strong>.</strong>  是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \\ 进行转义，即在 . 前面加上 \\ 。</p>\n<p>正则表达式一般是区分大小写的，但是也有些实现是不区分。</p>\n<p><strong>正则表达式</strong> </p>\n<p>nam.</p>\n<p><strong>匹配结果</strong> </p>\n<p>My  <strong>name</strong>  is Zheng.\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 匹配单个字符",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<strong>[ ]</strong>  定义一个字符集合；</p>\n<p>0-9、a-z 定义了一个字符区间，区间使用 ASCII 码来确定，字符区间在 [ ] 中使用。</p>\n<p><strong>-</strong>  只有在 [ ] 之间才是元字符，在 [ ] 之外就是一个普通字符；</p>\n<p><strong>^</strong>  在 [ ] 中是取非操作。</p>\n<p><strong>应用</strong> </p>\n<p>匹配以 abc 为开头，并且最后一个字母不为数字的字符串：</p>\n<p><strong>正则表达式</strong> </p>\n<p>abc[^0-9]</p>\n<p><strong>匹配结果</strong> </p>\n<p>  <strong>abcd</strong> \n abc1\n abc2\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 匹配一组字符",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n匹配空白字符</p>\n<p>|  元字符 | 说明  |\n| :---: | :---: |\n|  [\\b] | 回退（删除）一个字符   |\n|  \\f |  换页符 |\n|  \\n |  换行符 |\n|  \\r |  回车符 |\n|  \\t |  制表符 |\n|  \\v |  垂直制表符 |</p>\n<p>\\r\\n 是 Windows 中的文本行结束标签，在 Unix/Linux 则是 \\n。</p>\n<p>\\r\\n\\r\\n 可以匹配 Windows 下的空白行，因为它匹配两个连续的行尾标签，而这正是两条记录之间的空白行；</p>\n<p>匹配特定的字符类别</p>\n<p>数字元字符</p>\n<p>|  元字符 | 说明  |\n| :---: | :---: |\n| \\d  | 数字字符，等价于 [0-9]  |\n| \\D  | 非数字字符，等价于 [^0-9]   |</p>\n<p>字母数字元字符</p>\n<p>|  元字符 | 说明  |\n| :---: | :---: |\n| \\w  |  大小写字母，下划线和数字，等价于 [a-zA-Z0-9_] |\n|  \\W |  对 \\w 取非 |</p>\n<p>空白字符元字符</p>\n<p>| 元字符  | 说明  |\n| :---: | :---: |\n|  \\s | 任何一个空白字符，等价于 [\\f\\n\\r\\t\\v]  |\n| \\S  |  对 \\s 取非  |</p>\n<p>\\x 匹配十六进制字符，\\0 匹配八进制，例如 \\x0A 对应 ASCII 字符 10，等价于 \\n。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 使用元字符",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n  <strong>+</strong>  匹配 1 个或者多个字符\n  <strong>\\</strong> * 匹配 0 个或者多个\n  <strong>?</strong>  匹配 0 个或者 1 个</p>\n<p><strong>应用</strong> </p>\n<p>匹配邮箱地址。</p>\n<p><strong>正则表达式</strong> </p>\n<p>[\\w.]+@\\w+.\\w+</p>\n<p>[\\w.] 匹配的是字母数字或者 . ，在其后面加上 + ，表示匹配多次。在字符集合 [ ] 里，. 不是元字符；</p>\n<p><strong>匹配结果</strong> </p>\n<p><strong>abc.def<span>@</span>qq.com</strong> </p>\n<p>  <strong>{n}</strong>  匹配 n 个字符\n  <strong>{m, n}</strong>  匹配 m\\~n 个字符\n  <strong>{m,}</strong>  至少匹配 m 个字符</p>\n<p>* 和 + 都是贪婪型元字符，会匹配尽可能多的内容。在后面加 ? 可以转换为懒惰型元字符，例如 *?、+? 和 {m, n}? 。</p>\n<p><strong>正则表达式</strong> </p>\n<p>a.+c</p>\n<p>由于 + 是贪婪型的，因此 .+ 会匹配更可能多的内容，所以会把整个 abcabcabc 文本都匹配，而不是只匹配前面的 abc 文本。用懒惰型可以实现匹配前面的。</p>\n<p><strong>匹配结果</strong> </p>\n<p><strong>abcabcabc</strong> \n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 重复匹配",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n单词边界</p>\n<p><strong>\\b</strong>  可以匹配一个单词的边界，边界是指位于 \\w 和 \\W 之间的位置；<strong>\\B</strong> 匹配一个不是单词边界的位置。</p>\n<p>\\b 只匹配位置，不匹配字符，因此 \\babc\\b 匹配出来的结果为 3 个字符。</p>\n<p>字符串边界</p>\n<p><strong>^</strong>  匹配整个字符串的开头，<strong>$</strong> 匹配结尾。</p>\n<p>^ 元字符在字符集合中用作求非，在字符集合外用作匹配字符串的开头。</p>\n<p>分行匹配模式（multiline）下，换行被当做字符串的边界。</p>\n<p><strong>应用</strong> </p>\n<p>匹配代码中以 // 开始的注释行</p>\n<p><strong>正则表达式</strong> </p>\n<p>^\\s<em>\\/\\/.</em>$</p>\n<p><div align=\"center\"> <img src=\"pics/600e9c75-5033-4dad-ae2b-930957db638e.png\"/> </div><br></p>\n<p><strong>匹配结果</strong> </p>\n<p> public void fun() {\n &nbsp;&nbsp;&nbsp;&nbsp;     <strong>// 注释 1</strong> \n &nbsp;&nbsp;&nbsp;&nbsp;    int a = 1;\n &nbsp;&nbsp;&nbsp;&nbsp;    int b = 2;\n &nbsp;&nbsp;&nbsp;&nbsp;     <strong>// 注释 2</strong> \n &nbsp;&nbsp;&nbsp;&nbsp;    int c = a + b;\n }\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 位置匹配",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用  <strong>( )</strong>  定义一个子表达式。子表达式的内容可以当成一个独立元素，即可以将它看成一个字符，并且使用 * 等元字符。</p>\n<p>子表达式可以嵌套，但是嵌套层次过深会变得很难理解。</p>\n<p><strong>正则表达式</strong> </p>\n<p>(ab){2,}</p>\n<p><strong>匹配结果</strong> </p>\n<p><strong>ababab</strong> </p>\n<p><strong>|</strong>  是或元字符，它把左边和右边所有的部分都看成单独的两个部分，两个部分只要有一个匹配就行。</p>\n<p><strong>正则表达式</strong> </p>\n<p>(19|20)\\d{2}</p>\n<p><strong>匹配结果</strong> </p>\n<p>  <strong>1900</strong> \n  <strong>2010</strong> \n 1020</p>\n<p><strong>应用</strong> </p>\n<p>匹配 IP 地址。</p>\n<p>IP 地址中每部分都是 0-255 的数字，用正则表达式匹配时以下情况是合法的：</p>\n<p> 一位数字\n 不以 0 开头的两位数字\n 1 开头的三位数\n 2 开头，第 2 位是 0-4 的三位数\n 25 开头，第 3 位是 0-5 的三位数</p>\n<p><strong>正则表达式</strong> </p>\n<p>((25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d)).){3}(25[0-5]|(2[0-4]\\d)|(1\\d{2})|([1-9]\\d)|(\\d))</p>\n<p><strong>匹配结果</strong> </p>\n<p>  <strong>192.168.0.1</strong> \n 00.00.00.00\n 555.555.555.555\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 使用子表达式",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n回溯引用使用  <strong>\\n</strong>  来引用某个子表达式，其中 n 代表的是子表达式的序号，从 1 开始。它和子表达式匹配的内容一致，比如子表达式匹配到 abc，那么回溯引用部分也需要匹配 abc 。</p>\n<p><strong>应用</strong> </p>\n<p>匹配 HTML 中合法的标题元素。</p>\n<p><strong>正则表达式</strong> </p>\n<p>\\1 将回溯引用子表达式 (h[1-6]) 匹配的内容，也就是说必须和子表达式匹配的内容一致。</p>\n<p>&lt;(h[1-6])&gt;\\w*?&lt;\\/\\1&gt;</p>\n<p><strong>匹配结果</strong> </p>\n<p>  <strong>&lt;h1&gt;x&lt;/h1&gt;</strong> \n  <strong>&lt;h2&gt;x&lt;/h2&gt;</strong> \n &lt;h3&gt;x&lt;/h1&gt;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 回溯引用",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n需要用到两个正则表达式。</p>\n<p><strong>应用</strong> </p>\n<p>修改电话号码格式。</p>\n<p><strong>文本</strong> </p>\n<p>313-555-1234</p>\n<p><strong>查找正则表达式</strong> </p>\n<p>(\\d{3})(-)(\\d{3})(-)(\\d{4})</p>\n<p><strong>替换正则表达式</strong> </p>\n<p>在第一个子表达式查找的结果加上 () ，然后加一个空格，在第三个和第五个字表达式查找的结果中间加上 - 进行分隔。</p>\n<p>($1) $3-$5</p>\n<p><strong>结果</strong> </p>\n<p>(313) 555-1234\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 替换",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n|  元字符 | 说明  |\n| :---: | :---: |\n|  \\l | 把下个字符转换为小写  |\n|   \\u| 把下个字符转换为大写  |\n|  \\L | 把\\L 和\\E 之间的字符全部转换为小写  |\n|  \\U | 把\\U 和\\E 之间的字符全部转换为大写  |\n|  \\E | 结束\\L 或者\\U  |</p>\n<p><strong>应用</strong> </p>\n<p>把文本的第二个和第三个字符转换为大写。</p>\n<p><strong>文本</strong> </p>\n<p>abcd</p>\n<p><strong>查找</strong> </p>\n<p>(\\w)(\\w{2})(\\w)</p>\n<p><strong>替换</strong> </p>\n<p>$1\\U$2\\E$3</p>\n<p><strong>结果</strong> </p>\n<p>aBCd\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 大小写转换",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n前后查找规定了匹配的内容首尾应该匹配的内容，但是又不包含首尾匹配的内容。向前查找用  <strong>?=</strong>  来定义，它规定了尾部匹配的内容，这个匹配的内容在 ?= 之后定义。所谓向前查找，就是规定了一个匹配的内容，然后以这个内容为尾部向前面查找需要匹配的内容。向后匹配用 ?&lt;= 定义（注: javaScript 不支持向后匹配, java 对其支持也不完善）。</p>\n<p><strong>应用</strong> </p>\n<p>查找出邮件地址 @ 字符前面的部分。</p>\n<p><strong>正则表达式</strong> </p>\n<p>\\w+(?=@)</p>\n<p><strong>结果</strong> </p>\n<p><strong>abc</strong> @qq.com</p>\n<p>对向前和向后查找取非，只要把 = 替换成 ! 即可，比如 (?=) 替换成 (?!) 。取非操作使得匹配那些首尾不符合要求的内容。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 前后查找",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n回溯引用条件</p>\n<p>条件判断为某个子表达式是否匹配，如果匹配则需要继续匹配条件表达式后面的内容。</p>\n<p><strong>正则表达式</strong> </p>\n<p>子表达式 (\\() 匹配一个左括号，其后的 ? 表示匹配 0 个或者 1 个。 ?(1) 为条件，当子表达式 1 匹配时条件成立，需要执行 ) 匹配，也就是匹配右括号。</p>\n<p>(()?abc(?(1)))</p>\n<p><strong>结果</strong> </p>\n<p>  <strong>(abc)</strong> \n  <strong>abc</strong> \n (abc\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 嵌入条件",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n条件为定义的首尾是否匹配，如果匹配，则继续执行后面的匹配。注意，首尾不包含在匹配的内容中。</p>\n<p><strong>正则表达式</strong> </p>\n<p> ?(?=-) 为前向查找条件，只有在以 - 为前向查找的结尾能匹配 \\d{5} ，才继续匹配 -\\d{4} 。</p>\n<p>\\d{5}(?(?=-)-\\d{4})</p>\n<p><strong>结果</strong> </p>\n<p>  <strong>11111</strong> \n 22222-\n  <strong>33333-4444</strong> \n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 前后查找条件",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3a",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_3b" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n一个输入操作通常包括两个阶段：</p>\n<p> 等待数据准备好\n 从内核向进程复制数据</p>\n<p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p>\n<p>Unix 有五种 I/O 模型：</p>\n<p> 阻塞式 I/O\n 非阻塞式 I/O\n I/O 复用（select 和 poll）\n 信号驱动式 I/O（SIGIO）\n 异步 I/O（AIO）\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 I/O 模型",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区中才返回。</p>\n<p>应该注意到，在阻塞的过程中，其它应用进程还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其它应用进程还可以执行，所以不消耗 CPU 时间，这种模型的 CPU 利用率会比较高。</p>\n<p>下图中，recvfrom() 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。</p>\n<p>c\nssize_t recvfrom(int sockfd, void <em>buf, size_t len, int flags, struct sockaddr </em>src_addr, socklen_t *addrlen);</p>\n<p><div align=\"center\"> <img src=\"pics/1492928416812_4.png\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 阻塞式 I/O",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询（polling）。</p>\n<p>由于 CPU 要处理更多的系统调用，因此这种模型的 CPU 利用率比较低。</p>\n<p><div align=\"center\"> <img src=\"pics/1492929000361_5.png\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 非阻塞式 I/O",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再使用 recvfrom 把数据从内核复制到进程中。</p>\n<p>它可以让单个进程具有处理多个 I/O 事件的能力。又被称为 Event Driven I/O，即事件驱动 I/O。</p>\n<p>如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。</p>\n<p><div align=\"center\"> <img src=\"pics/1492929444818_6.png\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 I/O 复用",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。</p>\n<p>相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。</p>\n<p><div align=\"center\"> <img src=\"pics/1492929553651_7.png\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 信号驱动 I/O",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n应用进程执行 aio_read 系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。</p>\n<p>异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。</p>\n<p><div align=\"center\"> <img src=\"pics/1492930243286_8.png\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 异步 I/O",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n 同步 I/O：将数据从内核缓冲区复制到应用进程缓冲区的阶段，应用进程会阻塞。\n 异步 I/O：不会阻塞。</p>\n<p>阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O 都是同步 I/O，它们的主要区别在第一个阶段。</p>\n<p>非阻塞式 I/O 、信号驱动 I/O 和异步 I/O 在第一阶段不会阻塞。</p>\n<p><div align=\"center\"> <img src=\"pics/1492928105791_3.png\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 五大 I/O 模型比较",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nselect/poll/epoll 都是 I/O 多路复用的具体实现，select 出现的最早，之后是 poll，再是 epoll。</p>\n<p>select</p>\n<p>c\nint select(int n, fd_set <em>readfds, fd_set </em>writefds, fd_set <em>exceptfds, struct timeval </em>timeout);</p>\n<p>有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的描述符集合。fd_set 使用数组实现，数组大小使用 FD_SETSIZE 定义。</p>\n<p>timeout 为超时参数，调用 select 会一直阻塞直到有描述符的事件到达或者等待的时间超过 timeout。</p>\n<p>成功调用返回结果大于 0，出错返回结果为 -1，超时返回结果为 0。</p>\n<p>c\nfd_set fd_in, fd_out;\nstruct timeval tv;</p>\n<p>// Reset the sets\nFD_ZERO( &amp;fd_in );\nFD_ZERO( &amp;fd_out );</p>\n<p>// Monitor sock1 for input events\nFD_SET( sock1, &amp;fd_in );</p>\n<p>// Monitor sock2 for output events\nFD_SET( sock2, &amp;fd_out );</p>\n<p>// Find out which socket has the largest numeric value as select requires it\nint largest_sock = sock1 &gt; sock2 ? sock1 : sock2;</p>\n<p>// Wait up to 10 seconds\ntv.tv_sec = 10;\ntv.tv_usec = 0;</p>\n<p>// Call the select\nint ret = select( largest_sock + 1, &amp;fd_in, &amp;fd_out, NULL, &amp;tv );</p>\n<p>// Check if select actually succeed\nif ( ret == -1 )\n    // report error and abort\nelse if ( ret == 0 )\n    // timeout; no event detected\nelse\n{\n    if ( FD_ISSET( sock1, &amp;fd_in ) )\n        // input event on sock1</p>\n<pre><code>if ( FD_ISSET( sock2, &amp;fd_out ) )\n    // output event on sock2\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 I/O 复用",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nc\nint poll(struct pollfd *fds, unsigned int nfds, int timeout);</p>\n<p>pollfd 使用链表实现。</p>\n<p>c\n// The structure for two events\nstruct pollfd fds[2];</p>\n<p>// Monitor sock1 for input\nfds[0].fd = sock1;\nfds[0].events = POLLIN;</p>\n<p>// Monitor sock2 for output\nfds[1].fd = sock2;\nfds[1].events = POLLOUT;</p>\n<p>// Wait 10 seconds\nint ret = poll( &amp;fds, 2, 10000 );\n// Check if poll actually succeed\nif ( ret == -1 )\n    // report error and abort\nelse if ( ret == 0 )\n    // timeout; no event detected\nelse\n{\n    // If we detect the event, zero it out so we can reuse the structure\n    if ( fds[0].revents &amp; POLLIN )\n        fds[0].revents = 0;\n        // input event on sock1</p>\n<pre><code>if ( fds[1].revents &amp; POLLOUT )\n    fds[1].revents = 0;\n    // output event on sock2\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 poll",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nselect 和 poll 的功能基本相同，不过在一些实现细节上有所不同。</p>\n<p> select 会修改描述符，而 poll 不会；\n select 的描述符类型使用数组实现，FD_SETSIZE 大小默认为 1024，因此默认只能监听 1024 个描述符。如果要监听更多描述符的话，需要修改 FD_SETSIZE 之后重新编译；而 poll 的描述符类型使用链表实现，没有描述符数量的限制；\n poll 提供了更多的事件类型，并且对描述符的重复利用上比 select 高。\n 如果一个线程对某个描述符调用了 select 或者 poll，另一个线程关闭了该描述符，会导致调用结果不确定。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 功能",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nselect 和 poll 速度都比较慢。</p>\n<p> select 和 poll 每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。\n select 和 poll 的返回结果中没有声明哪些描述符已经准备好，所以如果返回值大于 0 时，应用进程都需要使用轮询的方式来找到 I/O 完成的描述符。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 速度",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>几乎所有的系统都支持 select，但是只有比较新的系统支持 poll。</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 可移植性",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nc\nint epoll_create(int size);\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event <em>event)；\nint epoll_wait(int epfd, struct epoll_event </em> events, int maxevents, int timeout);</p>\n<p>epoll_ctl() 用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，通过回调函数内核会将 I/O 准备好的描述符加入到一个链表中管理，进程调用 epoll_wait() 便可以得到事件完成的描述符。</p>\n<p>从上面的描述可以看出，epoll 只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。</p>\n<p>epoll 仅适用于 Linux OS。</p>\n<p>epoll 比 select 和 poll 更加灵活而且没有描述符数量限制。</p>\n<p>epoll 对多线程编程更有友好，一个线程调用了 epoll_wait() 另一个线程关闭了同一个描述符也不会产生像 select 和 poll 的不确定情况。</p>\n<p>c\n// Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets.\n// The function argument is ignored (it was not before, but now it is), so put your favorite number here\nint pollingfd = epoll_create( 0xCAFE );</p>\n<p>if ( pollingfd &lt; 0 )\n // report error</p>\n<p>// Initialize the epoll structure in case more members are added in future\nstruct epoll_event ev = { 0 };</p>\n<p>// Associate the connection class instance with the event. You can associate anything\n// you want, epoll does not use this information. We store a connection class pointer, pConnection1\nev.data.ptr = pConnection1;</p>\n<p>// Monitor for input, and do not automatically rearm the descriptor after the event\nev.events = EPOLLIN | EPOLLONESHOT;\n// Add the descriptor into the monitoring list. We can do it even if another thread is\n// waiting in epoll_wait - the descriptor will be properly added\nif ( epoll_ctl( epollfd, EPOLL_CTL_ADD, pConnection1-&gt;getSocket(), &amp;ev ) != 0 )\n    // report error</p>\n<p>// Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen)\nstruct epoll_event pevents[ 20 ];</p>\n<p>// Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array\nint ready = epoll_wait( pollingfd, pevents, 20, 10000 );\n// Check if epoll actually succeed\nif ( ret == -1 )\n    // report error and abort\nelse if ( ret == 0 )\n    // timeout; no event detected\nelse\n{\n    // Check if any events detected\n    for ( int i = 0; i &lt; ret; i++ )\n    {\n        if ( pevents[i].events &amp; EPOLLIN )\n        {\n            // Get back our connection pointer\n            Connection <em> c = (Connection</em>) pevents[i].data.ptr;\n            c-&gt;handleReadEvent();\n         }\n    }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "14.0 epoll",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nepoll 的描述符事件有两种触发模式：LT（level trigger）和 ET（edge trigger）。</p>\n<p>LT 模式</p>\n<p>当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。</p>\n<p>ET 模式</p>\n<p>和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。</p>\n<p>很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "15.0 工作模式",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。</p>\n<p>select 应用场景</p>\n<p>select 的 timeout 参数精度为 1ns，而 poll 和 epoll 为 1ms，因此 select 更加适用于实时性要求比较高的场景，比如核反应堆的控制。</p>\n<p>select 可移植性更好，几乎被所有主流平台所支持。</p>\n<p>poll 应用场景</p>\n<p>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</p>\n<p>epoll 应用场景</p>\n<p>只需要运行在 Linux 平台上，有大量的描述符需要同时轮询，并且这些连接最好是长连接。</p>\n<p>需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。</p>\n<p>需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且 epoll 的描述符存储在内核，不容易调试。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "16.0 应用场景",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3b",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "17.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_3c" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p>\n<p>主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。</p>\n<p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p>\n<p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p>\n<p>SQL 支持以下三种注释：</p>\n<p>sql\n注释\nSELECT <em>\nFROM mytable; -- 注释\n/</em> 注释1\n   注释2 */</p>\n<p>数据库创建与使用：</p>\n<p>sql\nCREATE DATABASE test;\nUSE test;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 基础",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsql\nCREATE TABLE mytable (</p>\n<h1 id=\"int-\">int 类型，不为空，自增</h1>\n<p>  id INT NOT NULL AUTO_INCREMENT,</p>\n<h1 id=\"int-1-\">int 类型，不可为空，默认值为 1，不为空</h1>\n<p>  col1 INT NOT NULL DEFAULT 1,</p>\n<h1 id=\"-45-\">变长字符串类型，最长为 45 个字符，可以为空</h1>\n<p>  col2 VARCHAR(45) NULL,</p>\n<h1 id=\"-\">日期类型，可为空</h1>\n<p>  col3 DATE NULL,</p>\n<h1 id=\"-id\">设置主键为 id</h1>\n<p>  PRIMARY KEY (<code>id</code>));\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 创建表",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n添加列</p>\n<p>sql\nALTER TABLE mytable\nADD col CHAR(20);</p>\n<p>删除列</p>\n<p>sql\nALTER TABLE mytable\nDROP COLUMN col;</p>\n<p>删除表</p>\n<p>sql\nDROP TABLE mytable;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 修改表",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n普通插入</p>\n<p>sql\nINSERT INTO mytable(col1, col2)\nVALUES(val1, val2);</p>\n<p>插入检索出来的数据</p>\n<p>sql\nINSERT INTO mytable1(col1, col2)\nSELECT col1, col2\nFROM mytable2;</p>\n<p>将一个表的内容插入到一个新表</p>\n<p>sql\nCREATE TABLE newtable AS\nSELECT * FROM mytable;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 插入",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>sql\nUPDATE mytable\nSET col = val\nWHERE id = 1;</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 更新",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsql\nDELETE FROM mytable\nWHERE id = 1;</p>\n<p><strong>TRUNCATE TABLE</strong>  可以清空表，也就是删除所有行。</p>\n<p>sql\nTRUNCATE TABLE mytable;</p>\n<p>使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 删除",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nDISTINCT</p>\n<p>相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。</p>\n<p>sql\nSELECT DISTINCT col1, col2\nFROM mytable;</p>\n<p>LIMIT</p>\n<p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p>\n<p>返回前 5 行：</p>\n<p>sql\nSELECT *\nFROM mytable\nLIMIT 5;</p>\n<p>sql\nSELECT *\nFROM mytable\nLIMIT 0, 5;</p>\n<p>返回第 3 \\~ 5 行：</p>\n<p>sql\nSELECT *\nFROM mytable\nLIMIT 2, 3;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 查询",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n  <strong>ASC</strong> ：升序（默认）\n  <strong>DESC</strong> ：降序</p>\n<p>可以按多个列进行排序，并且为每个列指定不同的排序方式：</p>\n<p>sql\nSELECT *\nFROM mytable\nORDER BY col1 DESC, col2 ASC;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 排序",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。</p>\n<p>sql\nSELECT *\nFROM mytable\nWHERE col IS NULL;</p>\n<p>下表显示了 WHERE 子句可用的操作符</p>\n<p>|  操作符 | 说明  |\n| :---: | :---: |\n| = | 等于 |\n| &lt; | 小于 |\n| &gt; | 大于 |\n| &lt;&gt; != | 不等于 |\n| &lt;= !&gt; | 小于等于 |\n| &gt;= !&lt; | 大于等于 |\n| BETWEEN | 在两个值之间 |\n| IS NULL | 为 NULL 值 |</p>\n<p>应该注意到，NULL 与 0、空字符串都不同。</p>\n<p><strong>AND 和 OR</strong>  用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。</p>\n<p><strong>IN</strong>  操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p>\n<p><strong>NOT</strong>  操作符用于否定一个条件。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 过滤",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n通配符也是用在过滤语句中，但它只能用于文本字段。</p>\n<p>  <strong>%</strong>  匹配 &gt;=0 个任意字符；</p>\n<p>  <strong>_</strong>  匹配 ==1 个任意字符；</p>\n<p>  <strong>[ ]</strong>  可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。</p>\n<p>使用 Like 来进行通配符匹配。</p>\n<p>sql\nSELECT *\nFROM mytable\nWHERE col LIKE &#39;[^AB]%&#39;; -- 不以 A 和 B 开头的任意文本</p>\n<p>不要滥用通配符，通配符位于开头处匹配会非常慢。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 通配符",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p>\n<p>计算字段通常需要使用  <strong>AS</strong>  来取别名，否则输出的时候字段名为计算表达式。</p>\n<p>sql\nSELECT col1 * col2 AS alias\nFROM mytable;</p>\n<p><strong>CONCAT()</strong>  用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 <strong>TRIM()</strong> 可以去除首尾空格。</p>\n<p>sql\nSELECT CONCAT(TRIM(col1), &#39;(&#39;, TRIM(col2), &#39;)&#39;) AS concat_col\nFROM mytable;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 计算字段",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p>\n<p>汇总</p>\n<p>|函 数 |说 明|\n| :---: | :---: |\n| AVG() | 返回某列的平均值 |\n| COUNT() | 返回某列的行数 |\n| MAX() | 返回某列的最大值 |\n| MIN() | 返回某列的最小值 |\n| SUM() |返回某列值之和 |</p>\n<p>AVG() 会忽略 NULL 行。</p>\n<p>使用 DISTINCT 可以汇总不同的值。</p>\n<p>sql\nSELECT AVG(DISTINCT col1) AS avg_col\nFROM mytable;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 函数",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n| 函数  | 说明  |\n| :---: | :---: |\n|  LEFT() |  左边的字符 |\n| RIGHT() | 右边的字符 |\n| LOWER() | 转换为小写字符 |\n| UPPER() | 转换为大写字符 |\n| LTRIM() | 去除左边的空格 |\n| RTRIM() | 去除右边的空格 |\n| LENGTH() | 长度 |\n| SOUNDEX() | 转换为语音值 |</p>\n<p>其中， <strong>SOUNDEX()</strong>  可以将一个字符串转换为描述其语音表示的字母数字模式。</p>\n<p>sql\nSELECT *\nFROM mytable\nWHERE SOUNDEX(col1) = SOUNDEX(&#39;apple&#39;)\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 文本处理",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n 日期格式：YYYY-MM-DD\n 时间格式：HH:<zero-width space>MM:SS</p>\n<p>|函 数 | 说 明|\n| :---: | :---: |\n| ADDDATE() | 增加一个日期（天、周等）|\n| ADDTIME() | 增加一个时间（时、分等）|\n| CURDATE() | 返回当前日期 |\n| CURTIME() | 返回当前时间 |\n| DATE() |返回日期时间的日期部分|\n| DATEDIFF() |计算两个日期之差|\n| DATE_ADD() |高度灵活的日期运算函数|\n| DATE_FORMAT() |返回一个格式化的日期或时间串|\n| DAY()| 返回一个日期的天数部分|\n| DAYOFWEEK() |对于一个日期，返回对应的星期几|\n| HOUR() |返回一个时间的小时部分|\n| MINUTE() |返回一个时间的分钟部分|\n| MONTH() |返回一个日期的月份部分|\n| NOW() |返回当前日期和时间|\n| SECOND() |返回一个时间的秒部分|\n| TIME() |返回一个日期时间的时间部分|\n| YEAR() |返回一个日期的年份部分|</p>\n<p>sql\nmysql&gt; SELECT NOW();</p>\n<p>2018-4-14 20:25:11\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 日期和时间处理",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>| 函数 | 说明 |\n| :---: | :---: |\n| SIN() | 正弦 |\n| COS() | 余弦 |\n| TAN() | 正切 |\n| ABS() | 绝对值 |\n| SQRT() | 平方根 |\n| MOD() | 余数 |\n| EXP() | 指数 |\n| PI() | 圆周率 |\n| RAND() | 随机数 |</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 数值处理",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n把具有相同的数据值的行放在同一组中。</p>\n<p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p>\n<p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p>\n<p>sql\nSELECT col, COUNT(*) AS num\nFROM mytable\nGROUP BY col;</p>\n<p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p>\n<p>sql\nSELECT col, COUNT(*) AS num\nFROM mytable\nGROUP BY col\nORDER BY num;</p>\n<p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p>\n<p>sql\nSELECT col, COUNT(*) AS num\nFROM mytable\nWHERE col &gt; 2\nGROUP BY col\nHAVING num &gt;= 2;</p>\n<p>分组规定：</p>\n<p> GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；\n 除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；\n NULL 的行会单独分为一组；\n 大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 分组",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n子查询中只能返回一个字段的数据。</p>\n<p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p>\n<p>sql\nSELECT *\nFROM mytable1\nWHERE col1 IN (SELECT col2\n               FROM mytable2);</p>\n<p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p>\n<p>sql\nSELECT cust_name, (SELECT COUNT(*)\n                   FROM Orders\n                   WHERE Orders.cust_id = Customers.cust_id)\n                   AS orders_num\nFROM Customers\nORDER BY cust_name;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 子查询",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p>\n<p>连接可以替换子查询，并且比子查询的效率一般会更快。</p>\n<p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p>\n<p>内连接</p>\n<p>内连接又称等值连接，使用 INNER JOIN 关键字。</p>\n<p>sql\nSELECT A.value, B.value\nFROM tablea AS A INNER JOIN tableb AS B\nON A.key = B.key;</p>\n<p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p>\n<p>sql\nSELECT A.value, B.value\nFROM tablea AS A, tableb AS B\nWHERE A.key = B.key;</p>\n<p>自连接</p>\n<p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p>\n<p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p>\n<p>子查询版本</p>\n<p>sql\nSELECT name\nFROM employee\nWHERE department = (\n      SELECT department\n      FROM employee\n      WHERE name = &quot;Jim&quot;);</p>\n<p>自连接版本</p>\n<p>sql\nSELECT e1.name\nFROM employee AS e1 INNER JOIN employee AS e2\nON e1.department = e2.department\n      AND e2.name = &quot;Jim&quot;;</p>\n<p>自然连接</p>\n<p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p>\n<p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。</p>\n<p>sql\nSELECT A.value, B.value\nFROM tablea AS A NATURAL JOIN tableb AS B;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 连接",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p>\n<p>检索所有顾客的订单信息，包括还没有订单信息的顾客。</p>\n<p>sql\nSELECT Customers.cust_id, Orders.order_num\nFROM Customers LEFT OUTER JOIN Orders\nON Customers.cust_id = Orders.cust_id;</p>\n<p>customers 表：</p>\n<p>| cust_id | cust_name |\n| :---: | :---: |\n| 1 | a |\n| 2 | b |\n| 3 | c |</p>\n<p>orders 表：</p>\n<p>| order_id | cust_id |\n| :---: | :---: |\n|1    | 1 |\n|2    | 1 |\n|3    | 3 |\n|4    | 3 |</p>\n<p>结果：</p>\n<p>| cust_id | cust_name | order_id |\n| :---: | :---: | :---: |\n| 1 | a | 1 |\n| 1 | a | 2 |\n| 3 | c | 3 |\n| 3 | c | 4 |\n| 2 | b | Null |\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 外连接",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用  <strong>UNION</strong>  来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p>\n<p>每个查询必须包含相同的列、表达式和聚集函数。</p>\n<p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p>\n<p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p>\n<p>sql\nSELECT col\nFROM mytable\nWHERE col = 1\nUNION\nSELECT col\nFROM mytable\nWHERE col =2;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 组合查询",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p>\n<p>对视图的操作和对普通表的操作一样。</p>\n<p>视图具有如下好处：</p>\n<p> 简化复杂的 SQL 操作，比如复杂的连接；\n 只使用实际表的一部分数据；\n 通过只给用户访问视图的权限，保证数据的安全性；\n 更改数据格式和表示。</p>\n<p>sql\nCREATE VIEW myview AS\nSELECT Concat(col1, col2) AS concat_col, col3*col4 AS compute_col\nFROM mytable\nWHERE col5 = val;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.0 视图",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n存储过程可以看成是对一系列 SQL 操作的批处理。</p>\n<p>使用存储过程的好处：</p>\n<p> 代码封装，保证了一定的安全性；\n 代码复用；\n 由于是预先编译，因此具有很高的性能。</p>\n<p>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p>\n<p>包含 in、out 和 inout 三种参数。</p>\n<p>给变量赋值都需要用 select into 语句。</p>\n<p>每次只能给一个变量赋值，不支持集合的操作。</p>\n<p>sql\ndelimiter //</p>\n<p>create procedure myprocedure( out ret int )\n    begin\n        declare y int;\n        select sum(col1)\n        from mytable\n        into y;\n        select y*y into ret;\n    end //</p>\n<p>delimiter ;</p>\n<p>sql\ncall myprocedure(@ret);\nselect @ret;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.0 存储过程",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在存储过程中使用游标可以对一个结果集进行移动遍历。</p>\n<p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p>\n<p>使用游标的四个步骤：</p>\n<p> 声明游标，这个过程没有实际检索出数据；\n 打开游标；\n 取出数据；\n 关闭游标；</p>\n<p>sql\ndelimiter //\ncreate procedure myprocedure(out ret int)\n    begin\n        declare done boolean default 0;</p>\n<pre><code>    declare mycursor cursor for\n    select col1 from mytable;\n    # 定义了一个 continue handler，当 sqlstate &#39;02000&#39; 这个条件出现时，会执行 set done = 1\n    declare continue handler for sqlstate &#39;02000&#39; set done = 1;\n\n    open mycursor;\n\n    repeat\n        fetch mycursor into ret;\n        select ret;\n    until done end repeat;\n\n    close mycursor;\nend //\n</code></pre><p> delimiter ;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "23.0 游标",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。</p>\n<p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p>\n<p>INSERT 触发器包含一个名为 NEW 的虚拟表。</p>\n<p>sql\nCREATE TRIGGER mytrigger AFTER INSERT ON mytable\nFOR EACH ROW SELECT NEW.col into @result;</p>\n<p>SELECT @result; -- 获取结果</p>\n<p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p>\n<p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p>\n<p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "24.0 触发器",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n基本术语：</p>\n<p> 事务（transaction）指一组 SQL 语句；\n 回退（rollback）指撤销指定 SQL 语句的过程；\n 提交（commit）指将未存储的 SQL 语句结果写入数据库表；\n 保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</p>\n<p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p>\n<p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p>\n<p>设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p>\n<p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。</p>\n<p>sql\nSTART TRANSACTION\n// ...\nSAVEPOINT delete1\n// ...\nROLLBACK TO delete1\n// ...\nCOMMIT\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "25.0 事务管理",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n基本术语：</p>\n<p> 字符集为字母和符号的集合；\n 编码为某个字符集成员的内部表示；\n 校对字符指定如何比较，主要用于排序和分组。</p>\n<p>除了给表指定字符集和校对外，也可以给列指定：</p>\n<p>sql\nCREATE TABLE mytable\n(col VARCHAR(10) CHARACTER SET latin COLLATE latin1_general_ci )\nDEFAULT CHARACTER SET hebrew COLLATE hebrew_general_ci;</p>\n<p>可以在排序、分组时指定校对：</p>\n<p>sql\nSELECT *\nFROM mytable\nORDER BY col COLLATE latin1_general_ci;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "26.0 字符集",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMySQL 的账户信息保存在 mysql 这个数据库中。</p>\n<p>sql\nUSE mysql;\nSELECT user FROM user;</p>\n<p><strong>创建账户</strong> </p>\n<p>新创建的账户没有任何权限。</p>\n<p>sql\nCREATE USER myuser IDENTIFIED BY &#39;mypassword&#39;;</p>\n<p><strong>修改账户名</strong> </p>\n<p>sql\nRENAME myuser TO newuser;</p>\n<p><strong>删除账户</strong> </p>\n<p>sql\nDROP USER myuser;</p>\n<p><strong>查看权限</strong> </p>\n<p>sql\nSHOW GRANTS FOR myuser;</p>\n<p><strong>授予权限</strong> </p>\n<p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p>\n<p>sql\nGRANT SELECT, INSERT ON mydatabase.* TO myuser;</p>\n<p><strong>删除权限</strong> </p>\n<p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p>\n<p> 整个服务器，使用 GRANT ALL 和 REVOKE ALL；\n 整个数据库，使用 ON database.*；\n 特定的表，使用 ON database.table；\n 特定的列；\n 特定的存储过程。</p>\n<p>sql\nREVOKE SELECT, INSERT ON mydatabase.* FROM myuser;</p>\n<p><strong>更改密码</strong> </p>\n<p>必须使用 Password() 函数进行加密。</p>\n<p>sql\nSET PASSWROD FOR myuser = Password(&#39;new_password&#39;);\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "27.0 权限管理",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3c",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "28.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_3d" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n响应时间</p>\n<p>指某个请求从发出到接收到响应消耗的时间。</p>\n<p>在对响应时间进行测试时，通常采用重复请求的方式，然后计算平均响应时间。</p>\n<p>吞吐量</p>\n<p>指系统在单位时间内可以处理的请求数量，通常使用每秒的请求数来衡量。</p>\n<p>并发用户数</p>\n<p>指系统能同时处理的并发用户请求数量。</p>\n<p>在没有并发存在的系统中，请求被顺序执行，此时响应时间为吞吐量的倒数。例如系统支持的吞吐量为 100 req/s，那么平均响应时间应该为 0.01s。</p>\n<p>目前的大型系统都支持多线程来处理并发请求，多线程能够提高吞吐量以及缩短响应时间，主要有两个原因：</p>\n<p> 多 CPU\n IO 等待时间</p>\n<p>使用 IO 多路复用等方式，系统在等待一个 IO 操作完成的这段时间内不需要被阻塞，可以去处理其它请求。通过将这个等待时间利用起来，使得 CPU 利用率大大提高。</p>\n<p>并发用户数不是越高越好，因为如果并发用户数太高，系统来不及处理这么多的请求，会使得过多的请求需要等待，那么响应时间就会大大提高。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3d",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 性能指标",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n集群</p>\n<p>将多台服务器组成集群，使用负载均衡将请求转发到集群中，避免单一服务器的负载压力过大导致性能降低。</p>\n<p>缓存</p>\n<p>缓存能够提高性能的原因如下：</p>\n<ul>\n<li>缓存数据通常位于内存等介质中，这种介质对于读操作特别快；</li>\n<li>缓存数据可以位于靠近用户的地理位置上；</li>\n<li>可以将计算结果进行缓存，从而避免重复计算。</li>\n</ul>\n<p>异步</p>\n<p>某些流程可以将操作转换为消息，将消息发送到消息队列之后立即返回，之后这个操作会被异步处理。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3d",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 性能优化",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n指不断向集群中添加服务器来缓解不断上升的用户并发访问压力和不断增长的数据存储需求。</p>\n<p>伸缩性与性能</p>\n<p>如果系统存在性能问题，那么单个用户的请求总是很慢的；</p>\n<p>如果系统存在伸缩性问题，那么单个用户的请求可能会很快，但是在并发数很高的情况下系统会很慢。</p>\n<p>实现伸缩性</p>\n<p>应用服务器只要不具有状态，那么就可以很容易地通过负载均衡器向集群中添加新的服务器。</p>\n<p>关系型数据库的伸缩性通过 Sharding 来实现，将数据按一定的规则分布到不同的节点上，从而解决单台存储服务器的存储空间限制。</p>\n<p>对于非关系型数据库，它们天生就是为海量数据而诞生，对伸缩性的支持特别好。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3d",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 伸缩性",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n指的是添加新功能时对现有系统的其它应用无影响，这就要求不同应用具备低耦合的特点。</p>\n<p>实现可扩展主要有两种方式：</p>\n<p> 使用消息队列进行解耦，应用之间通过消息传递进行通信；\n 使用分布式服务将业务和可复用的服务分离开来，业务使用分布式服务框架调用可复用的服务。新增的产品可以通过调用可复用的服务来实现业务逻辑，对其它产品没有影响。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3d",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 扩展性",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n冗余</p>\n<p>保证高可用的主要手段是使用冗余，当某个服务器故障时就请求其它服务器。</p>\n<p>应用服务器的冗余比较容易实现，只要保证应用服务器不具有状态，那么某个应用服务器故障时，负载均衡器将该应用服务器原先的用户请求转发到另一个应用服务器上，不会对用户有任何影响。</p>\n<p>存储服务器的冗余需要使用主从复制来实现，当主服务器故障时，需要提升从服务器为主服务器，这个过程称为切换。</p>\n<p>监控</p>\n<p>对 CPU、内存、磁盘、网络等系统负载信息进行监控，当某个信息达到一定阈值时通知运维人员，从而在系统发生故障之前及时发现问题。</p>\n<p>服务降级</p>\n<p>服务降级是系统为了应对大量的请求，主动关闭部分功能，从而保证核心功能可用。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3d",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 可用性",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>要求系统在应对各种攻击手段时能够有可靠的应对措施。</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3d",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 安全性",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_3d",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_4" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>npm install vue-infinite-loading -S</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 Installation",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "3.0 Component",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "4.0 Plugin API",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// main.js or index.js\nimport InfiniteLoading from &#39;vue-infinite-loading&#39;;</p>\n<p>Vue.use(InfiniteLoading, { /<em> options </em>/ });\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "5.0 Start With Hacker News",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "6.0 Use With Filter/Tabs",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "7.0 Top Direction Scroll",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "8.0 Use With Element UI",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "9.0 Configure Load Messages",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nVia Component Prop\nOnly the spinner slot can be configured via the prop, and the set value can only be the built-in spinner type:</p>\n<p><infinite-loading spinner=\"spiral\"></infinite-loading>\nYou can preview all built-in spinner types on the right. Please use other ways if you want to create your own spinner.</p>\n<p>Via slot Sepcial Attribute\nWe can use the slot special attribute  to configure them:</p>\n<p><infinite-loading>\n  <div slot=\"spinner\">Loading...</div>\n  <div slot=\"no-more\">No more message</div>\n  <div slot=\"no-results\">No results message</div>\n</infinite-loading>\nUnlike other slots, the default value for the error slot will provide a retry button for users to load the data again. If you want to implement a retry button for users when you customize the error slot, you can use the slot-scope  feature, like this:</p>\n<p><infinite-loading>\n  <div slot=\"error\" slot-scope=\"{ trigger }\">\n    Error message, click <a href=\"javascript:;\" @click=\"trigger\">here</a> to retry\n  </div>\n</infinite-loading></p>\n<p>Via Plugin API\nIn order to maintain consistent behavior for all load messages when we are building a large application, this plugin supports configuration on all slots using the plugin API. We just need to pass a string or Vue component to it, click here to read more about that.\nThe error slot is still special in this way. Just as with the slot special attribute, if you want to implement a retry button for users in your own error component, you can use the vm.$attrs  property, like this:\n<!-- your own error component --></p>\n<p><div>\n  Error message, click\n  <a href=\"javascript:;\" @click=\"$attrs.trigger\">here</a>\n  to retry\n</div>\nIf you want to keep variables clear, you can also define a function property named trigger, and bind it to your retry button:\n// your own error component\nexport default {\n  /<em> ... </em>/\n  props: {\n    trigger: Function,\n  },\n  /<em> ... </em>/\n};</p>\n<p>About Hide &amp; Default Styles\nFor easy use, this component provides some default styles (font-size, color and padding) for slot content. If you want to keep all default styles when you configure via the slot special attribute, you have to wrap the content with a template tag:</p>\n<p><infinite-loading>\n  <!-- The no-more message will has default styles -->\n  <template slot=\"no-more\">No more message</template>\n</infinite-loading></p>\n<p>If you want to hide a slot, you can create an empty element that is not a template element, because the empty template element will be ignored by Vue.js:</p>\n<p><infinite-loading>\n  <!-- The no-more slot will not be displayed -->\n  <span slot=\"no-more\"></span>\n</infinite-loading>\nIf you want to remove all default styles to avoid affecting your own styles, you can wrap the content with an element that is not a template element:</p>\n<p><infinite-loading>\n  <!-- The no-more message will has no default styles -->\n  <div slot=\"no-more\">No more message</div>\n</infinite-loading>\nI almost forgot, if you want to configure the slot content globally via the plugin API, you can control it like this:\nimport Vue from &#39;vue&#39;;\nimport InfiniteLoading from &#39;vue-infinite-loading&#39;;\nimport InfiniteError from &#39;path/to/your/components/InfiniteError&#39;,</p>\n<p>Vue.use(InfiniteLoading, {\n  slots: {\n    // keep default styles\n    noResults: &#39;No results message&#39;,</p>\n<pre><code>// remove default styles\nnoMore: InfiniteError,\n\n// hide slot\nerror: {\n  render: h =&gt; h(&#39;div&#39;),\n},\n</code></pre><p>  },\n});\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "10.0 Configure Plugin Options",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_4",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "11.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_5" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nB Tree 指的是 Balance Tree，也就是平衡树。平衡树是一颗查找树，并且所有叶子节点位于同一层。</p>\n<p>B+ Tree 是基于 B Tree 和叶子节点顺序访问指针进行实现，它具有 B Tree 的平衡性，并且通过顺序访问指针来提高区间查询的性能。</p>\n<p>在 B+ Tree 中，一个节点中的 key 从左到右非递减排列，如果某个指针的左右相邻 key 分别是 key<sub>i</sub> 和 key<sub>i+1</sub>，且不为 null，则该指针指向节点的所有 key 大于等于 key<sub>i</sub> 且小于等于 key<sub>i+1</sub>。</p>\n<p><div align=\"center\"> <img src=\"pics/33576849-9275-47bb-ada7-8ded5f5e7c73.png\" width=\"350px\"> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 数据结构",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n进行查找操作时，首先在根节点进行二分查找，找到一个 key 所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出 key 所对应的 data。</p>\n<p>插入删除操作会破坏平衡树的平衡性，因此在插入删除操作之后，需要对树进行一个分裂、合并、旋转等操作来维护平衡性。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 操作",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n红黑树等平衡树也可以用来实现索引，但是文件系统及数据库系统普遍采用 B+ Tree 作为索引结构，主要有以下两个原因：</p>\n<p>（一）更少的查找次数</p>\n<p>平衡树查找操作的时间复杂度和树高 h 相关，O(h)=O(log<sub>d</sub>N)，其中 d 为每个节点的出度。</p>\n<p>红黑树的出度为 2，而 B+ Tree 的出度一般都非常大，所以红黑树的树高 h 很明显比 B+ Tree 大非常多，查找的次数也就更多。</p>\n<p>（二）利用磁盘预读特性</p>\n<p>为了减少磁盘 I/O 操作，磁盘往往不是严格按需读取，而是每次都会预读。预读过程中，磁盘进行顺序读取，顺序读取不需要进行磁盘寻道，并且只需要很短的磁盘旋转时间，速度会非常快。</p>\n<p>操作系统一般将内存和磁盘分割成固定大小的块，每一块称为一页，内存与磁盘以页为单位交换数据。数据库系统将索引的一个节点的大小设置为页的大小，使得一次 I/O 就能完全载入一个节点。并且可以利用预读特性，相邻的节点也能够被预先载入。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 与红黑树的比较",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 MySQL 索引",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n是大多数 MySQL 存储引擎的默认索引类型。</p>\n<p>因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。</p>\n<p>因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。</p>\n<p>可以指定多个列作为索引列，多个索引列共同组成键。</p>\n<p>适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</p>\n<p>InnoDB 的 B+Tree 索引分为主索引和辅助索引。主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p>\n<p><div align=\"center\"> <img src=\"pics/45016e98-6879-4709-8569-262b2d6d60b9.png\" width=\"350px\"> </div><br></p>\n<p>辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。</p>\n<p><div align=\"center\"> <img src=\"pics/7c349b91-050b-4d72-a7f8-ec86320307ea.png\" width=\"350px\"> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 B+Tree 索引",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n哈希索引能以 O(1) 时间进行查找，但是失去了有序性：</p>\n<p> 无法用于排序与分组；\n 只支持精确查找，无法用于部分查找和范围查找。</p>\n<p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 哈希索引",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMyISAM 存储引擎支持全文索引，用于查找文本中的关键词，而不是直接比较是否相等。</p>\n<p>查找条件使用 MATCH AGAINST，而不是普通的 WHERE。</p>\n<p>全文索引使用倒排索引实现，它记录着关键词到其所在文档的映射。</p>\n<p>InnoDB 存储引擎在 MySQL 5.6.4 版本中也开始支持全文索引。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 全文索引",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。空间数据索引会从所有维度来索引数据，可以有效地使用任意维度来进行组合查询。</p>\n<p>必须使用 GIS 相关的函数来维护数据。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 空间数据索引",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n独立的列</p>\n<p>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</p>\n<p>例如下面的查询不能使用 actor_id 列的索引：</p>\n<p>sql\nSELECT actor_id FROM sakila.actor WHERE actor_id + 1 = 5;</p>\n<p>多列索引</p>\n<p>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引。</p>\n<p>sql\nSELECT film_id, actor_ id FROM sakila.film_actor\nWHERE actor_id = 1 AND film_id = 1;</p>\n<p>索引列的顺序</p>\n<p>让选择性最强的索引列放在前面。</p>\n<p>索引的选择性是指：不重复的索引值和记录总数的比值。最大值为 1，此时每个记录都有唯一的索引与其对应。选择性越高，每个记录的区分度越高，查询效率也越高。</p>\n<p>例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。</p>\n<p>sql\nSELECT COUNT(DISTINCT staff_id)/COUNT(<em>) AS staff_id_selectivity,\nCOUNT(DISTINCT customer_id)/COUNT(</em>) AS customer_id_selectivity,\nCOUNT(*)\nFROM payment;</p>\n<p>html\n   staff_id_selectivity: 0.0001\ncustomer_id_selectivity: 0.0373\n               COUNT(*): 16049</p>\n<p>前缀索引</p>\n<p>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。</p>\n<p>前缀长度的选取需要根据索引选择性来确定。</p>\n<p>覆盖索引</p>\n<p>索引包含所有需要查询的字段的值。</p>\n<p>具有以下优点：</p>\n<ul>\n<li>索引通常远小于数据行的大小，只读取索引能大大减少数据访问量。</li>\n<li>一些存储引擎（例如 MyISAM）在内存中只缓存索引，而数据依赖于操作系统来缓存。因此，只访问索引可以不使用系统调用（通常比较费时）。</li>\n<li><p>对于 InnoDB 引擎，若辅助索引能够覆盖查询，则无需访问主索引。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 索引优化",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n大大减少了服务器需要扫描的数据行数。</p>\n<p>帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，不需要排序和分组，也就不需要创建临时表）。</p>\n<p>将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "9.0 索引的优点",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n对于非常小的表、大部分情况下简单的全表扫描比建立索引更高效；</p>\n<p>对于中到大型的表，索引就非常有效；</p>\n<p>但是对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "10.0 索引的使用条件",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用 Explain 进行分析</p>\n</li>\n</ul>\n<p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p>\n<p>比较重要的字段有：</p>\n<p> select_type : 查询类型，有简单查询、联合查询、子查询等\n key : 使用的索引\n rows : 扫描的行数\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "11.0 查询性能优化",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n减少请求的数据量</p>\n<p> 只返回必要的列：最好不要使用 SELECT * 语句。\n 只返回必要的行：使用 LIMIT 语句来限制返回的数据。\n 缓存重复查询的数据：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</p>\n<p>减少服务器端扫描的行数</p>\n<p>最有效的方式是使用索引来覆盖查询。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "12.0 优化数据访问",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n切分大查询</p>\n<p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p>\n<p>sql\nDELETE FROM messages WHERE create &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH);</p>\n<p>sql\nrows_affected = 0\ndo {\n    rows_affected = do_query(\n    &quot;DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000&quot;)\n} while rows_affected &gt; 0</p>\n<p>分解大连接查询</p>\n<p>将一个大连接查询分解成对每一个表进行一次单表查询，然后在应用程序中进行关联，这样做的好处有：</p>\n<p> 让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。\n 分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。\n 减少锁竞争；\n 在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。\n 查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</p>\n<p>sql\nSELECT * FROM tab\nJOIN tag_post ON tag_post.tag_id=tag.id\nJOIN post ON tag_post.post_id=post.id\nWHERE tag.tag=&#39;mysql&#39;;</p>\n<p>sql\nSELECT <em> FROM tag WHERE tag=&#39;mysql&#39;;\nSELECT </em> FROM tag_post WHERE tag_id=1234;\nSELECT * FROM post WHERE post.id IN (123,456,567,9098,8904);\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "13.0 重构查询方式",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nInnoDB</p>\n<p>是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。</p>\n<p>实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ 间隙锁（Next-Key Locking）防止幻影读。</p>\n<p>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p>\n<p>内部做了很多优化，包括从磁盘读取数据时采用的可预测性读、能够加快读操作并且自动创建的自适应哈希索引、能够加速插入操作的插入缓冲区等。</p>\n<p>支持真正的在线热备份。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</p>\n<p>MyISAM</p>\n<p>设计简单，数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p>\n<p>提供了大量的特性，包括压缩表、空间数据索引等。</p>\n<p>不支持事务。</p>\n<p>不支持行级锁，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入（CONCURRENT INSERT）。</p>\n<p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p>\n<p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 比较",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n 事务：InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。</p>\n<p> 并发：MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</p>\n<p> 外键：InnoDB 支持外键。</p>\n<p> 备份：InnoDB 支持在线热备份。</p>\n<p> 崩溃恢复：MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</p>\n<p> 其它特性：MyISAM 支持压缩表和空间数据索引。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "18.0 Sharding 策略",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n整型</p>\n<p>TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT 分别使用 8, 16, 24, 32, 64 位存储空间，一般情况下越小的列越好。</p>\n<p>INT(11) 中的数字只是规定了交互工具显示字符的个数，对于存储和计算来说是没有意义的。</p>\n<p>浮点数</p>\n<p>FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。CPU 原生支持浮点运算，但是不支持 DECIMAl 类型的计算，因此 DECIMAL 的计算比浮点类型需要更高的代价。</p>\n<p>FLOAT、DOUBLE 和 DECIMAL 都可以指定列宽，例如 DECIMAL(18, 9) 表示总共 18 位，取 9 位存储小数部分，剩下 9 位存储整数部分。</p>\n<p>字符串</p>\n<p>主要有 CHAR 和 VARCHAR 两种类型，一种是定长的，一种是变长的。</p>\n<p>VARCHAR 这种变长类型能够节省空间，因为只需要存储必要的内容。但是在执行 UPDATE 时可能会使行变得比原来长，当超出一个页所能容纳的大小时，就要执行额外的操作。MyISAM 会将行拆成不同的片段存储，而 InnoDB 则需要分裂页来使行放进页内。</p>\n<p>在进行存储和检索时，会保留 VARCHAR 末尾的空格，而会删除 CHAR 末尾的空格。</p>\n<p>时间和日期</p>\n<p>MySQL 提供了两种相似的日期时间类型：DATETIME 和 TIMESTAMP。</p>\n<p>DATETIME</p>\n<p>能够保存从 1000 年到 9999 年的日期和时间，精度为秒，使用 8 字节的存储空间。</p>\n<p>它与时区无关。</p>\n<p>默认情况下，MySQL 以一种可排序的、无歧义的格式显示 DATETIME 值，例如“2008-01-16 22<span>:</span>37<span>:</span>08”，这是 ANSI 标准定义的日期和时间表示方法。</p>\n<p>TIMESTAMP</p>\n<p>和 UNIX 时间戳相同，保存从 1970 年 1 月 1 日午夜（格林威治时间）以来的秒数，使用 4 个字节，只能表示从 1970 年到 2038 年。</p>\n<p>它和时区有关，也就是说一个时间戳在不同的时区所代表的具体时间是不同的。</p>\n<p>MySQL 提供了 FROM_UNIXTIME() 函数把 UNIX 时间戳转换为日期，并提供了 UNIX_TIMESTAMP() 函数把日期转换为 UNIX 时间戳。</p>\n<p>默认情况下，如果插入时没有指定 TIMESTAMP 列的值，会将这个值设置为当前时间。</p>\n<p>应该尽量使用 TIMESTAMP，因为它比 DATETIME 空间效率更高。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "19.0 复制",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_5",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "20.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_6" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ML Kitはモバイル端末上で機械学習を扱いやすくするためのパッケージです。\n今はパブリックベータ公開ではありますが、Firebaseで使うことができます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 ML Kit For Firebaseとは",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>次のような機能がBase APIとして用意されています。学習済みのモデルを\n使った機能なので、自分でモデルを用意する必要がなく、お手軽に使うことが\n出来ます。クラウドAPIと端末内APIがあり、端末内APIはオフライン状態でも\n使うことが出来ます。クラウドAPIは内部的にCLOUD Vision APIを使ってい\nるのでCLOUD Vision APIと同じ料金が掛かります。端末内APIは無料で利用\nできます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 BaseAPI",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n画像に表示されている物や場所、動き、動物などを分類するものです。端末内\nAPIとクラウドAPIの両方に対応。\nFirebaseVisionCloudDetectorOptions options =\n    new FirebaseVisionCloudDetectorOptions.Builder()\n        .setModelType(FirebaseVisionCloudDetectorOptions.LATEST_MODEL)\n        .setMaxResults(15)\n        .build();</p>\n<p>FirebaseVisionCloudLabelDetector detector = FirebaseVision.getInstance()\n    .getVisionCloudLabelDetector(options);</p>\n<p>FirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()\n    .setWidth(1280)\n    .setHeight(720)\n    .setFormat(FirebaseVisionImageMetadata.IMAGE_FORMAT_NV21)\n    .setRotation(FirebaseVisionImageMetadata.ROTATION_0)\n    .build();</p>\n<p>FirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()\n    .setRotation(FirebaseVisionImageMetadata.ROTATION_0)\n    .build();</p>\n<p>Task&lt;SparseArray<FirebaseVisionCloudLabel>&gt; result =\n    detector.detectInImage(image, metadata)  // or detectInBuffer(buffer, metadata)\n    .addOnSuccessListener(\n        this,\n        new OnSuccessListener&lt;SparseArray<FirebaseVisionCloudLabel>&gt;() {\n          @Override\n          public void onSuccess(SparseArray<FirebaseVisionCloudLabel> label) {\n            // Task completed successfully\n            // ...\n          }\n        })\n    .addOnFailureListener(\n        this,\n        new OnFailureListener() {\n          @Override\n          public void onFailure(@NonNull Exception e) {\n            // Task failed with an exception\n            // ...\n          }\n        });</p>\n<p>for(int i = 0; i &lt; labels.size(); i++) {\n  FirebaseVisionCloudLabel label = labels.valueAt(i);</p>\n<p>  Rect bounds = label.getBoundingBox();\n  String label = label.getLabel();\n  String entityId = label.getEntityId();\n  float confidence = label.getScore();\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 画像分類",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n画像に表示されている文字を検出し、認識します。端末内APIとクラウドAPIの\n両方に対応。\nFirebaseVisionImage image = FirebaseVisionImage.fromBitmap(bitmap);\nprivate static final SparseIntArray ORIENTATIONS = new SparseIntArray();\nstatic {\n    ORIENTATIONS.append(Surface.ROTATION_0, 90);\n    ORIENTATIONS.append(Surface.ROTATION_90, 0);\n    ORIENTATIONS.append(Surface.ROTATION_180, 270);\n    ORIENTATIONS.append(Surface.ROTATION_270, 180);\n}</p>\n<p>/*<em>\n </em> Get the angle by which an image must be rotated given the device&#39;s current\n <em> orientation.\n </em>/\n@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\nprivate int getRotationCompensation(String cameraId, Activity activity, Context context)\n        throws CameraAccessException {\n    // Get the device&#39;s current rotation relative to its &quot;native&quot; orientation.\n    // Then, from the ORIENTATIONS table, look up the angle the image must be\n    // rotated to compensate for the device&#39;s rotation.\n    int deviceRotation = activity.getWindowManager().getDefaultDisplay().getRotation();\n    int rotationCompensation = ORIENTATIONS.get(deviceRotation);</p>\n<pre><code>// On most devices, the sensor orientation is 90 degrees, but for some\n// devices it is 270 degrees. For devices with a sensor orientation of\n// 270, rotate the image an additional 180 ((270 + 270) % 360) degrees.\nCameraManager cameraManager = (CameraManager) context.getSystemService(CAMERA_SERVICE);\nint sensorOrientation = cameraManager\n        .getCameraCharacteristics(cameraId)\n        .get(CameraCharacteristics.SENSOR_ORIENTATION);\nrotationCompensation = (rotationCompensation + sensorOrientation + 270) % 360;\n\n// Return the corresponding FirebaseVisionImageMetadata rotation value.\nint result;\nswitch (rotationCompensation) {\n    case 0:\n        result = FirebaseVisionImageMetadata.ROTATION_0;\n        break;\n    case 90:\n        result = FirebaseVisionImageMetadata.ROTATION_90;\n        break;\n    case 180:\n        result = FirebaseVisionImageMetadata.ROTATION_180;\n        break;\n    case 270:\n        result = FirebaseVisionImageMetadata.ROTATION_270;\n        break;\n    default:\n        result = FirebaseVisionImageMetadata.ROTATION_0;\n        Log.e(TAG, &quot;Bad rotation value: &quot; + rotationCompensation);\n}\nreturn result;\n</code></pre><p>}</p>\n<p>FirebaseVisionImage image = FirebaseVisionImage.fromMediaImage(mediaImage, rotation);</p>\n<p>FirebaseVisionImage image;\ntry {\n    image = FirebaseVisionImage.fromFilePath(context, uri);\n} catch (IOException e) {\n    e.printStackTrace();\n}\nFirebaseVisionTextRecognizer detector = FirebaseVision.getInstance()\n        .getOnDeviceTextRecognizer();\nFirebaseVisionTextRecognizer detector = FirebaseVision.getInstance()\n        .getCloudTextRecognizer();\n// Or, to change the default settings:\n//   FirebaseVisionTextRecognizer detector = FirebaseVision.getInstance()\n//          .getCloudTextRecognizer(options);\nTextRecognitionActivity.java</p>\n<p>// Or, to provide language hints to assist with language detection:\n// See https://cloud.google.com/vision/docs/languages for supported languages\nFirebaseVisionCloudTextRecognizerOptions options = new FirebaseVisionCloudTextRecognizerOptions.Builder()\n        .setLanguageHints(Arrays.asList(&quot;en&quot;, &quot;hi&quot;))\n        .build();\nTask<FirebaseVisionText> result =\n        detector.processImage(image)\n                .addOnSuccessListener(new OnSuccessListener<FirebaseVisionText>() {\n                    @Override\n                    public void onSuccess(FirebaseVisionText firebaseVisionText) {\n                        // Task completed successfully\n                        // ...\n                    }\n                })\n                .addOnFailureListener(\n                        new OnFailureListener() {\n                            @Override\n                            public void onFailure(@NonNull Exception e) {\n                                // Task failed with an exception\n                                // ...\n                            }\n                        });\nString resultText = result.getText();\nfor (FirebaseVisionText.TextBlock block: result.getTextBlocks()) {\n    String blockText = block.getText();\n    Float blockConfidence = block.getConfidence();\n    List<RecognizedLanguage> blockLanguages = block.getRecognizedLanguages();\n    Point[] blockCornerPoints = block.getCornerPoints();\n    Rect blockFrame = block.getBoundingBox();\n    for (FirebaseVisionText.Line line: block.getLines()) {\n        String lineText = line.getText();\n        Float lineConfidence = line.getConfidence();\n        List<RecognizedLanguage> lineLanguages = line.getRecognizedLanguages();\n        Point[] lineCornerPoints = line.getCornerPoints();\n        Rect lineFrame = line.getBoundingBox();\n        for (FirebaseVisionText.Element element: line.getElements()) {\n            String elementText = element.getText();\n            Float elementConfidence = element.getConfidence();\n            List<RecognizedLanguage> elementLanguages = element.getRecognizedLanguages();\n            Point[] elementCornerPoints = element.getCornerPoints();\n            Rect elementFrame = element.getBoundingBox();\n        }\n    }\n}</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 文字認識",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n画像内の顔を検出します。顔の各パーツの位置なども検出できます。端末内API\nのみ対応。\nFirebaseVisionFaceDetectorOptions options =\n    new FirebaseVisionFaceDetectorOptions.Builder()\n        .setModeType(FirebaseVisionFaceDetectorOptions.ACCURATE_MODE)\n        .setLandmarkType(FirebaseVisionFaceDetectorOptions.ALL_LANDMARKS)\n        .setClassificationType(FirebaseVisionFaceDetectorOptions.ALL_CLASSIFICATIONS)\n        .setMinFaceSize(0.2f)\n        .setTrackingEnabled(true)\n        .build();\nFirebaseVisionFaceDetector detector = FirebaseVision.getInstance()\n    .getVisionFaceDetector(options);\nFirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()\n    .setWidth(1280)\n    .setHeight(720)\n    .setFormat(FirebaseVisionImageMetadata.IMAGE_FORMAT_NV21)\n    .setRotation(FirebaseVisionImageMetadata.ROTATION_0)\n    .build();\nFirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()\n    .setRotation(FirebaseVisionImageMetadata.ROTATION_0)\n    .build();\nTask&lt;SparseArray<FirebaseVisionFace>&gt; result =\n    detector.detectInImage(image, metadata)  // or detectInBuffer(buffer, metadata)\n    .addOnSuccessListener(\n        this,\n        new OnSuccessListener&lt;SparseArray<FirebaseVisionFace>&gt;() {\n          @Override\n          public void onSuccess(SparseArray<FirebaseVisionFace> faces) {\n            // Task completed successfully\n            // ...\n          }\n        })\n    .addOnFailureListener(\n        this,\n        new OnFailureListener() {\n          @Override\n          public void onFailure(@NonNull Exception e) {\n            // Task failed with an exception\n            // ...\n          }\n        });\nfor(int i = 0; i &lt; faces.size(); i++) {\n  FirebaseVisionFace face = faces.valueAt(i);</p>\n<p>  Rect bounds = face.getBoundingBox();\n  if (face.hasHeadEulerAngleY()) {\n    float rotY = face.getHeadEulerAngleY();  // Head is rotated to the right rotY degrees\n  }\n  if (face.hasHeadEulerAngleZ()) {\n    float rotZ = face.getHeadEulerAngleZ();  // Head is rotated upward rotZ degrees\n  }</p>\n<p>  // If landmark detection was enabled (mouth, ears, eyes, cheeks, and\n  // nose available):\n  if (face.hasLeftEarPosition()) {\n    PointF leftEarPos = face.getLeftEarPosition();\n  }\n  if (face.hasNoseBasePosition()) {\n    PointF nosePos = face.getNoseBasePosition();\n  }</p>\n<p>  // If classification was enabled:\n  if (face.hasSmilingProbability()) {\n    float smileProb = face.getSmilingProbability();\n  }\n  if (face.hasRightEyeOpenProbability()) {\n    float rightEyeOpenProb = face.getRightEyeOpenProbability();\n  }</p>\n<p>  // If face tracking was enabled:\n  if (face.hasTrackingId()) {\n    int id = face.getTrackingId();\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 顔検出",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n画像内のバーコードを検出し、その内容を表示します。端末内APIのみ対応。\nFirebaseVisionBarcodeDetectorOptions options =\n    new FirebaseVisionBarcodeDetectorOptions.Builder()\n        .setBarcodeFormats(FirebaseVisionBarcode.FORMAT_QR_CODE,\n                           FirebaseVisionBarcode.FORMAT_AZTEC)\n        .build();\nFirebaseVisionBarcodeDetector detector = FirebaseVision.getInstance()\n    .getVisionBarcodeDetector(options);\nFirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()\n    .setWidth(1280)\n    .setHeight(720)\n    .setFormat(FirebaseVisionImageMetadata.IMAGE_FORMAT_NV21)\n    .setRotation(FirebaseVisionImageMetadata.ROTATION_0)\n    .build();\nFirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()\n    .setRotation(FirebaseVisionImageMetadata.ROTATION_0)\n    .build();\nTask&lt;SparseArray<FirebaseVisionBarcode>&gt; result =\n    detector.detectInImage(image, metadata)  // or detectInBuffer(buffer, metadata)\n    .addOnSuccessListener(\n        this,\n        new OnSuccessListener&lt;SparseArray<FirebaseVisionBarcode>&gt;() {\n          @Override\n          public void onSuccess(SparseArray<FirebaseVisionBarcode> barcodes) {\n            // Task completed successfully\n            // ...\n          }\n        })\n    .addOnFailureListener(\n        this,\n        new OnFailureListener() {\n          @Override\n          public void onFailure(@NonNull Exception e) {\n            // Task failed with an exception\n            // ...\n          }\n        });</p>\n<p>for(int i = 0; i &lt; barcodes.size(); i++) {\n  FirebaseVisionBarcode barcode = barcodes.valueAt(i);</p>\n<p>  Rect bounds = barcode.getBoundingBox();\n  Point[] corners = barcode.getCornerPoints();</p>\n<p>  String rawValue = barcode.getRawValue();</p>\n<p>  int valueType = barcode.getValueType();\n  // See API reference for complete list of supported types\n  switch (valueType) {\n    case FirebaseVisionBarcode.TYPE_WIFI:\n      String ssid = barcode.getWifi().getSsid();\n      String password = barcode.getWifi().getPassword();\n      int type = barcode.getWifi().getEncryptionType();\n      break;\n    case FirebaseVisionBarcode.TYPE_URL:\n      String title = barcode.getUrl().getTitle();\n      String url = barcode.getUrl().getUrl();\n      break;\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 バーコードスキャン",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n画像内のランドマーク（有名な建築物など）を検出します。クラウドAPIのみ\n対応。\nFirebaseVisionCloudDetectorOptions options =\n    new FirebaseVisionCloudDetectorOptions.Builder()\n        .setModelType(FirebaseVisionCloudDetectorOptions.LATEST_MODEL)\n        .setMaxResults(15)\n        .build();\nFirebaseVisionCloudLandmarkDetector detector = FirebaseVision.getInstance()\n    .getVisionCloudLandmarkDetector(options);\nFirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()\n    .setWidth(1280)\n    .setHeight(720)\n    .setFormat(FirebaseVisionImageMetadata.IMAGE_FORMAT_NV21)\n    .setRotation(FirebaseVisionImageMetadata.ROTATION_0)\n    .build();\nFirebaseVisionImageMetadata metadata = new FirebaseVisionImageMetadata.Builder()\n    .setRotation(FirebaseVisionImageMetadata.ROTATION_0)\n    .build();\nTask&lt;SparseArray<FirebaseVisionCloudLandmark>&gt; result =\n    detector.detectInImage(image, metadata)  // or detectInBuffer(buffer, metadata)\n    .addOnSuccessListener(\n        this,\n        new OnSuccessListener&lt;SparseArray<FirebaseVisionCloudLandmark>&gt;() {\n          @Override\n          public void onSuccess(SparseArray<FirebaseVisionCloudLandmark> landmarks) {\n            // Task completed successfully\n            // ...\n          }\n        })\n    .addOnFailureListener(\n        this,\n        new OnFailureListener() {\n          @Override\n          public void onFailure(@NonNull Exception e) {\n            // Task failed with an exception\n            // ...\n          }\n        });\n   for(int i = 0; i &lt; landmarks.size(); i++) {\n  FirebaseVisionCloudLandmark landmark = landmarks.valueAt(i);</p>\n<p>  Rect bounds = landmark.getBoundingBox();\n  String landmarkName = landmark.getlandmark();\n  String entityId = landmark.getEntityId();\n  float confidence = landmark.getScore();</p>\n<p>  // Multiple locations are possible, e.g., the location of the depicted\n  // landmark and the location the picture was taken.\n  for (FirebaseVisionLatLng loc: landmark.getLocations()) {\n    double latitude = loc.getLatitude();\n    double longitude = loc.getLongitude();\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 ランドマーク認識",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nBaseAPIの機能以外にも自らで用意したモデルもTensorFlow Liteで読み込め\nる形式であれば使うことが出来ます。\n特徴としては次のようなものがあります。\nFirebase上にモデルを置いておくことができます。アプリ内にバンドルするこ\nともできます。\nFirebase上のモデルを更新すると、アプリ側で自動でダウンロードさせて端末\n内のモデルを更新させることができます。\nFirebase上のモデルと端末内のモデルを使用することができ、Firebase上のモ\nデルが使用できなければ端末内のものを使うということも出来ます。 \n今回はあまりカスタムモデルの実装の仕方については触れません。Codelabsに\n例があるので、そちらを確認して頂ければと思います。\nFirebaseModelDownloadConditions.Builder conditionsBuilder =\n        new FirebaseModelDownloadConditions.Builder().requireWifi();\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) {\n    // Enable advanced conditions on Android Nougat and newer.\n    conditionsBuilder = conditionsBuilder\n            .requireCharging()\n            .requireDeviceIdle();\n}\nFirebaseModelDownloadConditions conditions = conditionsBuilder.build();</p>\n<p>// Build a remote model source object by specifying the name you assigned the model\n// when you uploaded it in the Firebase console.\nFirebaseRemoteModel cloudSource = new FirebaseRemoteModel.Builder(&quot;my_cloud_model&quot;)\n        .enableModelUpdates(true)\n        .setInitialDownloadConditions(conditions)\n        .setUpdatesDownloadConditions(conditions)\n        .build();\nFirebaseModelManager.getInstance().registerRemoteModel(cloudSource);\nimport tensorflow as tf</p>\n<p>interpreter = tf.lite.Interpreter(model_path=&quot;my_model.tflite&quot;)\ninterpreter.allocate_tensors()</p>\n<h1 id=\"print-input-shape-and-type\">Print input shape and type</h1>\n<p>print(interpreter.get_input_details()[0][&#39;shape&#39;])  # Example: [1 224 224 3]\nprint(interpreter.get_input_details()[0][&#39;dtype&#39;])  # Example: <class 'numpy.float32'></p>\n<h1 id=\"print-output-shape-and-type\">Print output shape and type</h1>\n<p>print(interpreter.get_output_details()[0][&#39;shape&#39;])  # Example: [1 1000]\nprint(interpreter.get_output_details()[0][&#39;dtype&#39;])  # Example: <class 'numpy.float32'>\nFirebaseModelInputOutputOptions inputOutputOptions =\n        new FirebaseModelInputOutputOptions.Builder()\n                .setInputFormat(0, FirebaseModelDataType.FLOAT32, new int[]{1, 224, 224, 3})\n                .setOutputFormat(0, FirebaseModelDataType.FLOAT32, new int[]{1, 5})\n                .build();\nBitmap bitmap = getYourInputImage();\nbitmap = Bitmap.createScaledBitmap(bitmap, 224, 224, true);</p>\n<p>int batchNum = 0;\nfloat[][][][] input = new float[1][224][224][3];\nfor (int x = 0; x &lt; 224; x++) {\n    for (int y = 0; y &lt; 224; y++) {\n        int pixel = bitmap.getPixel(x, y);\n        // Normalize channel values to [-1.0, 1.0]. This requirement varies by\n        // model. For example, some models might require values to be normalized\n        // to the range [0.0, 1.0] instead.\n        input[batchNum][x][y][0] = (Color.red(pixel) - 127) / 128.0f;\n        input[batchNum][x][y][1] = (Color.green(pixel) - 127) / 128.0f;\n        input[batchNum][x][y][2] = (Color.blue(pixel) - 127) / 128.0f;\n    }\n}\nFirebaseModelInputs inputs = new FirebaseModelInputs.Builder()\n        .add(input)  // add() as many input arrays as your model requires\n        .build();\nfirebaseInterpreter.run(inputs, inputOutputOptions)\n        .addOnSuccessListener(\n                new OnSuccessListener<FirebaseModelOutputs>() {\n                    @Override\n                    public void onSuccess(FirebaseModelOutputs result) {\n                        // ...\n                    }\n                })\n        .addOnFailureListener(\n                new OnFailureListener() {\n                    @Override\n                    public void onFailure(@NonNull Exception e) {\n                        // Task failed with an exception\n                        // ...\n                    }\n                });\nfloat[][] output = result.getOutput(0);\nfloat[] probabilities = output[0];\nBufferedReader reader = new BufferedReader(\n        new InputStreamReader(getAssets().open(&quot;retrained_labels.txt&quot;)));\nfor (int i = 0; i &lt; probabilities.length; i++) {\n    String label = reader.readLine();\n    Log.i(&quot;MLKit&quot;, String.format(&quot;%s: %1.4f&quot;, label, probabilities[i]));\n}</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 カスタムモデル",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nTensorFlow LiteはTensorFlowのモバイル向けのライブラリ群です。専用のモ\nデルのフォーマットを使うなどして、TensorFlowをモバイル用に最適化したも\nのです。\n今の所はTensorFlow Liteはデベロッパープレビューとして公開されています。\nなので、事前に検証された機械学習もまだまだ少なく、機能としても少ない状態\nです。しかし、同様のモバイル向けのTensorFlowとして公開されている\nTensorFlow Mobileに比べてより軽量でパフォーマンスの良いアプリケーション\nを開発できると謳われています。なので今の所は、サービスに使うのであれば\nTensorFlow Mobileを使用し、今後の正式リリースに備えてTensorFlow Liteを\n検証して追いかけておく、というのが良さそうです。\nbazel build --cxxopt=&#39;--std=c++11&#39; -c opt        \\\n  --fat_apk_cpu=x86,x86_64,arm64-v8a,armeabi-v7a   \\\n  //tensorflow/lite/java:tensorflow-lite</p>\n<p>  mvn install:install-file -Dfile=bazel-genfiles/tensorflow/lite/java/tensorflow-lite.aar -DgroupId=org.tensorflow \\\n  -DartifactId=tensorflow-lite -Dversion=0.1.100 -Dpackaging=aar\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 TensorFlow Liteとは",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ML Kitのクイックスタートを使って、試してみました。 内容としてはAndroidで\nカメラに表示しているものに対してリアルタイムでBaseAPIの端末内APIを利用し\nた検出を行うLivePreviewActivityと、静止画に対してクラウドAPIを利用した\n検出を行うStillImageActivityがあります。</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 クイックスタートをやってみた",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Android Studioを事前にインストールしておく必要があります。\ngit clone https://github.com/firebase/quickstart-android.git\nクローンで落としてきたディレクトリの中のmlkitをAndroid Studioで開きます。</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 前提と準備",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://cdn-ssl-devio-img.classmethod.jp/wp-content/uploads/2018/08/d9f2249278d042f6b2e6ff6192af078c.png",
              "type" : "Picture"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "11.4 Firebase consoleでプロジェクトを作成",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>プロジェクトの作成が出来たら、Androidアプリの追加を行います。\napp/build.gradleに記載されているapplicationIdをAndroidパッケージ名とし\nて入力して登録します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "12.0 Androidアプリの追加",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://cdn-ssl-devio-img.classmethod.jp/wp-content/uploads/2018/08/a8444f0f1e08edb548ea1e669e61c559-640x733.png",
              "type" : "Picture"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "12.4 Androidアプリの追加操作",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://cdn-ssl-devio-img.classmethod.jp/wp-content/uploads/2018/08/e065fe3b6ff4136775a23cb818415585-640x664.png",
              "type" : "Picture"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "13.4 google-services.jsonダウンロード",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://cdn-ssl-devio-img.classmethod.jp/wp-content/uploads/2018/08/be268fd4a53299021f09e9fcce715491-640x940.png",
              "type" : "Picture"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "14.4 google-services.json移動",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://cdn-ssl-devio-img.classmethod.jp/wp-content/uploads/2018/08/firebase_plan-640x493.png",
              "type" : "Picture"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "15.4 従量課金選択",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://cdn-ssl-devio-img.classmethod.jp/wp-content/uploads/2018/08/f5c0555ee16525eb9aae426cee8db58f-640x410.png",
              "type" : "Picture"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "16.4 CloudVisionAPIを有効化",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://cdn-ssl-devio-img.classmethod.jp/wp-content/uploads/2018/08/3b3ca3e306e7b59a3d9e05d93e60d84d-640x280.png",
              "type" : "Picture"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "17.4 実際に動かしてみる",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_6",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "18.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_7" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>npm install -g @angular/cli\nng new tensorflowApp</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 Generate an Angular App",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ncd tensorflowApp\nnpm install @tensorflow/tfjs --save</p>\n<p>But instead of using a pre-install, I just hand edited\n<code>node_modules/@angular-devkit/build-angular/src/angular\n-cli-files/models/webpack-configs/browser.js&#39; and \nchanged the lines in that regex:\n// old:\nnode: false,\n// new:\nnode: { crypto: true, stream: true },\n``</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 Install Tensorflow.js",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIn the following section I will show you how to build,\n train, and make predictions with TensorFlow.js. Our \n ML model is just a simple linear regression that \n takes a 1-dimensional value as its input and attempts\n  to fit a straight line to the dataset.</p>\n<p>After the model is trained, we will show the user a \nform input that will make a new prediction when the \nvalue changes. \n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 Train a Basic TensorFlow.js Linear Model",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nI will be writing all the code in app.component.ts. \nNotice how we are calling the train() method when the\n component is initialized. \nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport * as tf from &#39;@tensorflow/tfjs&#39;;</p>\n<p>@Component({...})\nexport class AppComponent implements OnInit {</p>\n<p>  linearModel: tf.Sequential;\n  prediction: any;</p>\n<p>  ngOnInit() {\n    this.train();\n  }</p>\n<p>  async train() {\n    // todo\n  }</p>\n<p>  predict(val) {\n    // todo\n  }\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 Import TensorFlow.js",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMachine learning models are trained by iterating over \nbatches of samples and slowly optimizing the prediction.\n Most neural networks use some variation of gradient \n descent as an optimizer - we’re using Stochastic Gradient \n Descent (SGD) to minimize the Mean Squared Error (MSE). \n This is a highly complex area that could fill an entire\n  book. \nasync train(): Promise<any> {\n    // Define a model for linear regression.\n  this.linearModel = tf.sequential();\n  this.linearModel.add(tf.layers.dense({units: 1, inputShape: [1]}));</p>\n<p>  // Prepare the model for training: Specify the loss and the optimizer.\n  this.linearModel.compile({loss: &#39;meanSquaredError&#39;, optimizer: &#39;sgd&#39;});</p>\n<p>  // Training data, completely random stuff\n  const xs = tf.tensor1d([3.2, 4.4, 5.5]);\n  const ys = tf.tensor1d([1.6, 2.7, 3.5]);</p>\n<p>  // Train\n  await this.linearModel.fit(xs, ys)</p>\n<p>  console.log(&#39;model trained!&#39;)\n}\nWhat the hell is a tensor? There’s no easy explanation, but just think \nTensor === Array. It’s really just an abstraction of a multi-dimensional \narray for doing math in TensorFlow. If you want a detailed physical \nexplanation, watch this professor’s breakdown.\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 Build a Machine Learning Model",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nNow that our model is trained, we can feed it values to make \npredictions. TensorFlow runs in the context of a session, so \nwe need to call dataSync on the Tensor value to extract the \ndata out into something usable in JavaScript. \npredict(val: number) {\n  const output = this.linearModel.predict(tf.tensor2d([val], [1, 1])) as any;\n  this.prediction = Array.from(output.dataSync())[0]\n}\nWe can run this method as an event handler when the file of an HTML \nform input changes. \nTensorFlow says {{ prediction }}</p>\n<p><input type=\"number\" (change)=\"predict($event.target.value)\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 Make a Prediction with the Model",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Training a model can be extremely CPU and memory intensive - that’s \nwhy most models are trained on high-powered GPUs that can distribute \nbillions of matrix multiplication operations efficiently. \nFortunately, we can use pre-trained models to bypass this step \ncompletely. This means we can skip straight to the fun part - making \npredictions. You can find models for a sorts of different applications \non Kaggle Kernels. \nIn the steps below, we will convert a Keras-based Convolutional Neural\n Network into a model that predicts the value of a handwritten digit \n from the famous MNIST dataset.</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 How to use Pre-Trained Python Keras Models",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>TensorFlow.js has a Python CLI tool that converts an h5 model saved in \nKeras to a set files that can be used on the web. Install it by running:\npip install tensorflowjs\nAt this point, you will need to have a Keras model saved on your local \nsystem. If you clone the project for this lesson, you can run the \nfollowing command to generate your model. \ntensorflowjs_converter --input_format keras \\\n                       keras/cnn.h5 \\\n                       src/assets\nCurrently, I am saving the output in the assets folder of the Angular app,\n but TF can also read from a URL, so you can also save your model files \n in a cloud storage bucket.</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 Convert a Keras Model to TensorFlow.js",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Now we load the model with a simple one-liner. \nasync loadModel() {\n  this.model = await tf.loadModel(&#39;/assets/model.json&#39;);\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 Load the Model",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nNow that our model is loaded, it is expecting 4-dimensional image data \nin a shape of [any, 28, 28, 1] - that translates into batchsize, width \npixels, height pixels, and color channels. An even simpler way to think \nabout it is just an array of images with a single color channel. \nWe run our predictions inside of tf.tidy to clean up the intermediate \nmemory allocated to the tensors. Basically, we are just trying to avoid \nmemory leaks. \nTensorFlow.js gives us a fromPixels helper to convert an ImageData HTML\n object into a Tensor. You can also use a plain HTMLImageElement or even \n a video. Under the hood it turns the pixels into a 3D matrix of numbers. \nasync predict(imageData: ImageData) {</p>\n<p>  await tf.tidy(() =&gt; {</p>\n<pre><code>// Convert the canvas pixels to a Tensor of the matching shape\nlet img = tf.fromPixels(imageData, 1);\nimg = img.reshape([1, 28, 28, 1]);\nimg = tf.cast(img, &#39;float32&#39;);\n\n// Make and format the predications\nconst output = this.model.predict(img) as any;\n\n// Save predictions on the component\nthis.predictions = Array.from(output.dataSync()); \n</code></pre><p>  });</p>\n<p>}\nThe result of this method is an Array of 10 values that add up to a\n total of 1, which is a prediction function known as softmax. We can\n  use the index with highest probability as the prediction for the digit.\nGiven the prediction below, the model interprets the image drawn on\n the canvas is a value of 2 with 93% confidence.\n[0.02, 0.003, 0.93, ...]\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 Make Predictions from Image Data",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Building and training machine learning models in the browser ushers\n in a whole new set of possibilities for web developers. I’m excited \n to see what people create with TensorFlow.js and hope this guide \n helps kickstart your project. If you want to see more advanced \n TensorFlow content, let me know in the comments or on Slack.</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 The End",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_7",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_8" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Oracle はリレーショナルモデルを使用した、RDBMS(リレーショナルデータベー\nスマネージメントシステム)である。\nリレーショナルデータベースは、Rows：ローと Columns：カラムから構成される。\n(Rows：ローとは行、Columns：カラムとは列をあらわす) この 2 次元の表形式\nでデータを格納する。\n行と列の交差する部分はフィールドと呼ばれる。</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 リレーショナルモデル",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>主キー(Primary Key)\nNOT NULL 制約と一意制約を組み合せたもの\n主キーの値が、表の中の複数行に存在することはできない。\n主キーを構成する列に NULL を持たせることはできない。\n一意キー\n表の中の2 つの行が一意キーに対して同じ値を持たないようにする。\n単一の列で構成される一意キーの場合は、複数のNULL（行） を持つことが可能。\n複合一意キーにおいてすべてのキー列に対してNULL を持つ行も同様に複数持つこと\nが可能。\nただし、1つ以上のキー列に対して NULLを持ち、その他のキー列に対して同じ組合せ\nの値を持つ 2つの行は制約違反となる。(※)\n(※) この制限は Oracle 検索メカニズムによるとマニュアルに書かれている。標準\nSQL では制約の 1つのキー列でも NULL を持つ場合には制約違反にはならない。\n外部キー(Foreign Key)\n表と表の論理的な関連付けを行い外部キーに対して値（親キー）が存在することを保\n証する。\n外部キーには、親表の値もしくはNULLを持つことが可能。\n外部キーの親キーは主キーもしくは一意キーでなければならない。 \n補足\n表のデータのすべての行(NULLを含む)を一意に識別するためには一意キーではなく、\n主キーを使用しなければならない。\nキーとインデックスは異なる。キーは制約の元で使われる。インデックスはキーを実装\nするために利用されているが制約ではない。RDBMS の実装における副産物のようなもの\nである。</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 制約とキー",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>オラクルとは 1979 年に世界ではじめて商用として出荷された RDBMS : データベース\n・システムである。\nオラクルは リレーショナル・モデル によるデータベースであり、それに加えて データ\nベースを作成、削除および管理する機能が提供されている。つまり リレーショナル・デ\nータベース を管理するシステム (Relational Database Management System: RDBMS)\nOracle というと会社を指すことも多いが、Oracle データベース・システム製品のことを\n言っていることが圧倒的に多い。 （念のため、オラクルはデータベースだけではなく、様\n々なソフトウェアを取り扱っている）\nOracle データベース・システムとは Oracle データベースと Oracle データベース・サ\nーバーから構成されている。\nOralce データベースにはシステム情報、ユーザー情報、制御情報が格納されている。 そ\nの Oracle データベースを管理するシステムが Oracle データベース・サーバーである。</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 Oracle とは",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SQL 言語リファレンス\nエラー・メッセージ\n開発ガイド (旧アプリケーション開発者ガイド - 基礎編 相当） \n（パフォーマンス・チューニング・ガイドを読む前に…）\nパフォーマンス・チューニング・ガイド\nデータ・ウェアハウス・ガイド（パーティション表、分析計算およびレポート用SQL関数）\nPL/SQLパッケージ・プロシージャおよびタイプ・リファレンス\nグローバリゼーション・サポート・ガイド(NLS_*** 関連)\n概要（Oracle Database 概要マニュアル）\n管理者ガイド（概要と管理者ガイドは2つで1セットのようなもの）\nリファレンス（初期化パラメータやディクショナリの説明が載っている）\nユーティリティ(Oracle Data Pump、SQL*Loader、外部表）</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 Oracle のマニュアル",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsqlplus scott/tiger@orcl\n                   ↑ ここにスペースを入れると別の意味になるので要注意</p>\n<p>SQL<em>Plus: Release 10.1.0.2.0 - Production\nCopyright (c) 1982, 2004, Oracle.  All rights reserved.\n↑ SQL</em>Plusのバージョン情報とクレジットが表示される(20年以上前・・・)</p>\n<p>Oracle Database 10g {Enterprise Edition}  Release {10.1.0.2.0} - Production \n                     ↑インストールしたエディション  ↑Oracleのバージョンが表示される\nWith the Partitioning, OLAP and Data Mining options\n　　　   ↑オプションでインストールしたコンポーネント\nに接続されました。</p>\n<p>SQL&gt; SQL文 ;\n    or\nSQL&gt; PL/SQL文 ;\nSQL&gt; /   ← PL/SQLの場合には、&#39;/&#39; で内容を実行(RUN)させる。\n       結果表示\nSQL&gt; QUIT\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 SQL*Plus とは",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SQLPlus コマンド    コマンド 説明\n@    ファイルの内容を実行（詳細は START 参照）\n@@    \n@?    \nn    カレント行を n にする\n/    バッファ内のSQL、PL/SQLブロックを実行（SQL バッファ非表示）\nACCEPT    ACCEPT vData PROMPT &#39; vDataを入力する。&#39;\nAPPEND    行末にテキストを追加\nARCHIVE LOG    アーカイブログ運用の設定と状態表示\nATTRIBUTE    オブジェクト型列の表示書式を設定\nBREAK    \nBTITLE    下部に指定のタイトルの書式設定\nCHANGE    SQL バッファの文字を置換\nCLEAR    画面、バッファ、書式、タイマーの設定などの初期化\nCOLUMN    カラムの書式指定（書式モデル）\nCOMPUTE    \nCONNECT    データベースへの接続\nCOPY    下位互換用\nDEFINE    ユーザー定義定数の設定と表示\nDEL    SQL バッファの一部を削除\nDESCRIBE    スキーマオブジェクトの仕様を表示\nDISCONNECT    データベースから切断\nEDIT    ホストのエディタを使用した編集\nEXECUTE    PL/SQL ブロックの実行\nEXIT    SQL*Plus の終了\nGET    ファイルの内容をSQLバッファに読み込む\nHELP    オンライン・コマンドヘルプ\nHOST    シェルでコマンドの実行\nINPUT    文字列の追加(単独の場合には複数行追加可能)\nLIST    SQL バッファ内を表示\nPASSWORD    パスワードの変更\nPAUSE    処理の一時停止\nPRINT    バインド変数の内容を表示する\nPROMPT    メッセージの表示\nRECOVER    データベースのリカバリー\nREMARK    コメント行\nREPFOOTER    \nREPHEADER    \nQUIT    EXIT コマンドのエイリアス\nRUN    バッファ内SQL、PL/SQLブロックを表示し実行\nSAVE    SQLバッファの内容をファイルに保存\nSET    システム変数を設定する\nSHOW    メモリ、システム変数、初期化パラメータなどの表示\nSHUTDOWN    オラクルの停止\nSPOOL    出力結果をファイルへ出力の開始と終了\nSTART    ファイルの内容を実行\nSTARTUP    オラクルの起動\nSTORE    \nTIMING    タイマーの設定、表示と解除</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 SQL*Plus コマンド 一覧",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>コマンド    説明\nSET APPINFO    スクリプトの進行状況などを設定\nSET ARRAYSIZE    DBMS_OUTPUT のバッファ、データベースから一度にフェッチする配列の大きさ\nSET AUTOCOMMIT    オートコミットの有効／無効\nSET AUTOPRINT    バインド変数 の自動表示\nSET AUTORECOVERY    RECOVERY コマンドのアーカイブログファイル名を自動補完する／しない\nSET AUTOTRACE    オートトレースの有効／無効、または、トレースモードの設定\nSET BLOCKTERMINATOR    PL/SQL ブロックの終了文字の設定\nSET CMDSEP    SQL*Plus コマンドの区切り文字\nSET COLINVISIBLE    DESCRIBE コマンド において非表示列の表示／非表示の設定\nSET COLSEP    カラムとカラムの間の区切り文字\nSET COMPATIBILITY    Oracle 8 以前向けの下位互換動作用\nSET CONCAT    後続に文字連結するときの置換変数の終了文字の設定\nSET COPYCOMMIT    COPY コマンドのコミットポイント設定\nSET COPYTYPECHECK    COPY コマンドの型チェックの有効／無効\nSET DEFINE    置換変数を有効／無効または接頭辞を設定\nSET DESCRIBE    DESCRIBE コマンド の表示方法の調整\nSET ECHO    スクリプトのSQL*Plusコマンドを表示をする／しない\nSET EDITFILE    EDIT コマンド で使用する一時ファイル名の設定\n    エディタプログラムの指定は _EDITOR 事前定義変数\nSET EMBEDDED    異なるレポート(SQL)でも同一ページ含める／含めない\nSET ERRORLOGGING    実行中に発生した例外を指定したテーブルに出力する\nSET ESCAPE    エスケープ機能を有効／無効、または、別のエスケープ文字を設定\nSET ESCCHAR    ファイル名を指定するときにエスケープして意味を持たせない文字を指定\nSET EXITCOMMIT    EXIT(QUIT) 時のデフォルトの振る舞いで COMMIT するか ROLLBACK \nするかの設定\nSET FEEDBACK    問い合わせの結果の件数を表示をする／しない、または、表示する最小件数の設定\nSET FLAGGER    SQL が SQL92 に準拠しているか調べる／調べないを設定\nSET FLUSH    画面出力にバッファを使用する／しないの設定\nSET HEADING    列ヘッダを表示する／しない\nSET HEADSEP    列ヘッダの区切り文字の設定\nSET HISTORY    コマンドの履歴の無効、または、有効。有効時のヒストリ件数を設定\nSET INSTANCE    デフォルトのインスタンスの設定\nSET LINESIZE    １行に表示する（文字数）バイト数の設定\nSET LOBOFFSET    CLOB、NCLOBの取り出し開始位置の設定\nSET LOBPREFETCH    LOB のプリフェッチサイズ（バイト）の設定\nSET LOGSOURCE    RECOVERY コマンドで使用するアーカイブログファイル位置の設定\nSET LONG    LONG、CLOB、NCLOB の表示幅\nSET LONGCHUNKSIZE    LONG、CLOB、NCLOBのチャンクサイズ\nSET MARKUP    出力をHTML 形式にエンコードをする／しないの設定(SQL*Plusの場合）\nSET NEWPAGE    ページの開始位置から列ヘッダーまでの余白行数の設定\nSET NULL    NULL データの代替文字列設定\nSET NUMFORMAT    数値のデフォルト書式の設定（書式モデル）\nSET NUMWIDTH    数値のデフォルト表示幅\nSET PAGESIZE    1ページの行数\nSET PAUSE    １ページ毎に一時停止をする／しない\nSET RECSEP    レコードセパレータを常に出力する／しない、または、折り返しが発生時のみ出力する\nSET RECSEPCHAR    RECSEP が発生したときに表示される文字の設定\nSET ROWPREFETCH    結果セットのプリフェッチ行数の設定\nSET SECUREDCOL    セキュリティ設定で制限されたカラムに対する表示内容の設定\nSET SERVEROUTPUT    標準出力に表示する／しない、または、バッファの上限サイズ\nSET SHIFTINOUT    シフト文字を表示する／しない（特殊なコンソールのみ）\nSET SHOWMODE    システム変数の変更前値の通知を表示する／しない\nSET SQLBLANKLINES    SQL コマンド、PL/SQL ブロックに空白行を許可する／しない\nSET SQLCASE    すべての入力文字を大文字、または、小文字に変換する／しない\nSET SQLCONTINUE    複数行の SQL*Plusコマンド入力時のプロンプトの設定\nSET SQLNUMBER    複数行の SQL コマンド、PL/SQL ブロック入力時に表示される行番号を表示する／しない\nSET SQLPLUSCOMPATIBILITY    動作保証できる SQL*Plus のバージョンの設定\nSET SQLPREFIX    SQL*Plus コマンドの接頭辞の設定\nSET SQLPROMPT    SQL*Plus のコマンドプロンプトに表示される文字列の設定\nSET SQLTERMINATOR    SQL コマンド、PL/SQL ブロックの終了文字の設定\nSET STATEMENTCACHE    ステートメントキャッシュ（再パースの回避) 数の設定\nSET SUFFIX    スクリプトファイルのデフォルト拡張子の設定\nSET TAB    タブ文字の使用をする／しない\nSET TERMOUT    @、@@、START のスクリプトによるアウトプットを表示する／しない\nSET TIME    SQL プロンプトに時刻表示する／しない\nSET TIMING    タイミング統計（タイマー）を表示する／しない\nSET TRIMOUT    各行の出力の終わりから行末までの空白を出力する／しない（スプールには無関係）\nSET TRIMSPOOL    スプールにおける TRIMOUT システム変数（画面出力には無関係）\nSET UNDERLINE    列ヘッダの下の表示される -----… 文字のあり／なし／文字の設定\nSET VERIFY    置換変数に設定する前後の状態を表示する／しない\nSET WRAP    表示幅に収まらない部分を折り返す／切り捨てる</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 SQL*Plus システム変数一覧",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsqlplus\nsqlplus rivus/rivus_pass\nsqlplus /nolog\nconnect rivus/rivus_pass\nexit\ndisconnect\nsqlplus rivus/rivus_pass @go.sql\nsqlplus rivus/rivus_pass@orcl_net @param.sql &quot;100&quot; &quot;200&quot;</p>\n<p>@param.sql\n-- 引数１＋引数２\nselect to_number(&#39;&amp;1&#39;) + to_number(&#39;&amp;2&#39;) from dual;\nquit\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 SQL*Plus の起動",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>select user_id, user_name from account;\n@atmark.sql param1 param2 ....\n実行中のコマンド、スクリプトを停止する \nSQL*Plus で実行中のスクリプトや延々とデータを表示している状態を Ctrl+C キーを\n押すことで停止することができる。\n旧バージョンではアラートログを出してセッションも切断してしまう事があったので注意。\nDML の処理を実行中で Ctrl+C キーの応答もない場合には、別のセッションから SID と \nSERIAL# を特定して ALTER SYSTEM KILL コマンドを使用してセッションを切断する。</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 SQL コマンドの実行",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSQL&gt; conn rivus/rivus_pass\nSQL&gt; set serveroutput on\n接続されました。\nSQL&gt; declare\n  2     vName   VARCHAR2(10);\n  3  begin\n  4     for vRec in (select user_name from account)\n  5     loop\n  6             dbms_output.put_line(vRec.user_name);\n  7     end loop;\n  8  end;\n  9  /\n富樫 歩夢\n小杉 光輝\n倉本 大翔\n長谷川 春奈\n荒木 奈央子</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 PL/SQL ブロックの実行",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSQL&gt; set serveroutput on\nSQL&gt; call dbms_output.put_line(&#39;プロシージャをコールした&#39;);\nプロシージャをコールした</p>\n<p>コールが完了しました。</p>\n<p>SQL&gt; execute dbms_output.put_line(&#39;プロシージャを実行した&#39;);\nプロシージャを実行した</p>\n<p>PL/SQLプロシージャが正常に完了しました。</p>\n<p>SQL&gt;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 PL/SQL プロシージャを実行する",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSQL&gt; variable vNum number;\nSQL&gt; call sys.standard.greatest(100,2,300,4) into :vNum;</p>\n<p>コールが完了しました。</p>\n<p>SQL&gt; print vNum</p>\n<pre><code>  VNUM\n</code></pre><hr>\n<pre><code>   300\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 PL/SQL ファンクションを実行する",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nCALL は Oracle 9i からサポートされた 標準SQL のコマンドであり、EXECUTE は\n旧来からある SQL*Plus コマンド である。（※ PL/SQL のコマンドでもない）\n双方ともファンクションやプロシージャの実行に使用するが、その仕様は異なり新し\nく用意された CALL が良いというものでもないといえる。\nOracle 10g までは CALL の引数は位置表記法のみに限定されていたが Oracle 11g \nからは 位置表記法および両方を併用した混合表記も可能になっている。 同時に SQL\n の関数の呼び出しも 位置表記法と混合表記がサポートされた。  </p>\n<p>EXECUTE コマンドは テキストを PL/SQL ブロックに変換してから実行する。</p>\n<p>CALL による呼び出しで、 SQL としてまだサポートされていない BOOLEAN 型 (TRUE\n/FALSE) を PL/SQL のファンクションに使用すると、エラーが発生する。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 CALL 文 と EXECUTE コマンドの違い",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>セミコロン(;)\nSQL*Plus コマンドの終端文字 \n単独で使用すると LIST コマンドと同じ動作になる。\nSQL と SQL*Plus コマンドの終端文字はデフォルトで同一であるが SQL*Plus コマンド\nの終端文字は CMDSEP システム変数で変更可能。\nセミコロン(;)\n単一の SQL 文、 PL/SQL ステートメントの終端文字\nSQLTERMINATOR システム変数で変更可能\nスラッシュ(/)\nSQL バッファの実行 兼 ブロック全体の終端文字\nPL/SQLブロック内には、文の終端文字としてセミコロンが既に使用されているため、文末\nと全体の終端との区別のためにある。 機能的には、RUN コマンドと似ているがスラッシュ\nは SQL バッファを表示しないで実行する、 また、RUN コマンドには終端文字として機能\nはないという点も異なる。\n単独で使用すると SQL バッファを実行(再実行)する。\nドット(.)\nブロック全体の終端文字\n行頭で使用することで、終端文字として扱われる。(変数の終了文字としても使用する。)\nブロック要素の入力途中での間違いや入力を中断したいときに使用する(程度しか思い当た\nらない) (入力文字はバッファに入る)\nBLOCKTERMINATOR システム変数で変更可能</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 RUN コマンド",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSQL&gt; SPOOL\n現在はスプールしていません。\nSQL&gt; SET COLSEP ,\nSQL&gt; SET HEAD OFF\nSQL&gt; SPOOL id_name_csv_file.csv\nSQL&gt; select id ,name from account order by id ;</p>\n<pre><code>     1,小栗 有美\n     2,新村 憲一\n     3,茂木 拓也\n     4,石山 美紀\n     5,古橋 聡\n</code></pre><p>SQL&gt; SPOOL OFF\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 問い合わせなどの実行結果をファイルに出力する",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nwindows\nSQL&gt; $ dir | sort | more\n               2 個のファイル               9,493 バイト\n              66 個のディレクトリ   3,703,697,408 バイトの空き領域\n C:\\oracle\\product\\10.2.0\\db_1 のディレクトリ\n ドライブ C のボリューム ラベルがありません。\n ボリューム シリアル番号は A818-F405 です\n2006/04/05  00:10                43 install.platform\n2006/04/05  00:10    <DIR>          admin\n2006/04/05  00:10    <DIR>          assistants\n.....</p>\n<h2 id=\"sql\">SQL&gt;</h2>\n<p>linux\nSQL&gt; ! vi /tmp/sqlplus_test.txt\n... エディタが起動\n... 終了するまで、プロンプトは戻らない\n... エディタを終了\nSQL&gt;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 システムコマンド（OSコマンド）を実行する",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>set pagesize 0\nset linesize 300\nselect * from table(unload.get_csv(q&#39;{select * from user_tables order by table_name}&#39;));</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "17.0 結果を CSV で出力する",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>set echo off\nset feedback off\nset term off\nset head off\nset linesize 1000\n-- set linesize 2000\n-- set linesize 4000\n-- set linesize 32767\n--  ↑↑ １レコードの文字列の長さによって適宜調整する（レコード数増加により相当遅くなる）\nset long 32767\nset longchunksize 32767\nset pagesize 0\nset trimspool on\nset serveroutput on\nvar cur refcursor\nbegin\n    :cur := unload.sql_to_csv(\n        data_source =&gt; &#39;select * from user_tables order by table_name&#39;,\n        date_format =&gt; &#39;YYYY&quot;年&quot;MM&quot;月&quot;DD&quot;日&quot;&#39;,\n        set_col_sep =&gt; CHR(9)\n    );\nexception\n when others then\n    dbms_output.put_line(&#39;ERROR : &#39; || SQLERRM);\n    raise;\nend;\n/\nset term off\nspool user_tables.csv\nprint cur\nspool off\nset term on</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "18.0 結果を CSV で出力する (複雑)",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSET SERVEROUTPUT ON [SIZE n]\nSET SERVEROUTPUT ON [SIZE n] [ FORMAT 表示制御オプション ]\nSET SERVEROUTPUT OFF\nSET SERVEROUTPUT ON UNLIMITED  (Oracle 10g R2〜)</p>\n<p>SQL&gt; SET LINESIZE 15\nSQL&gt; -- 文字ベースの折り返し\nSQL&gt; SET SERVEROUTPUT ON FORMAT WRAPPED\nSQL&gt; call dbms_output.put_line(&#39;1234567890 1234567890&#39;);\n1234567890 1234\n567890</p>\n<p>SQL&gt; -- 単語ベースの折り返し（半角・全角空白）\nSQL&gt; SET SERVEROUTPUT ON FORMAT WORD_WRAPPED\nSQL&gt; call dbms_output.put_line(&#39;1234567890 1234567890&#39;);\n1234567890\n1234567890</p>\n<p>SQL&gt; -- 切り捨て\nSQL&gt; SET SERVEROUTPUT ON FORMAT TRUNCATED\nSQL&gt; call dbms_output.put_line(&#39;1234567890 1234567890&#39;);\n1234567890 1234</p>\n<p>SQL&gt;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "19.0 SERVEROUTPUT システム変数",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>CREATE TABLE USER_MASTER\n(\n   USER_ID           VARCHAR2(8) NOT NULL,\n   DEPT_NO           VARCHAR2(8),\n   USER_NAME         VARCHAR2(32),\n   CREATED_ON        DATE DEFAULT SYSDATE,\n   MODIFIED_ON       DATE\n);</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "20.0 テーブル定義",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ALTER TABLE my_table ADD ( time_col TIMESTAMP(3) ) ;\nALTER TABLE my_table MODIFY ( char_col VARCHAR2(80 char)  ) ;\nALTER TABLE my_table RENAME COLUMN time_col TO date_col ;\nALTER TABLE my_table DROP (\n    char_col , number_col\n)\n-- 以下はオプションなので必須ではない\nCASCADE CONSTRAINT INVALIDATE;</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "21.0 ALTER TABLE （列の追加、変更、削除）",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>DROP TABLE USER_MASTER CASCADE CONSTRAINTS ;\nFLASHBACK TABLE USER_MASTER TO BEFORE DROP ;</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "22.0 DROP TABLE、FLASHBACK TABLE",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ALTER TABLE table_name ADD CONSTRAINT primary_key_name \n  PRIMARY KEY  (user_id) \n  USING INDEX -- インデックス CREATE 文\n  (\n    -- CREATE INDEX 文をそのまま記述\n    -- インデックス名はプライマリキー同じ名前でも名前の衝突はしない\n    CREATE UNIQUE INDEX primary_key_name ON table_name (col_name, colname2 ..) \n    PCTFREE 50 INITRANS 20\n    STORAGE( INITIAL 1M )\n    TABLESPACE USERS\n  ) ;</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "23.0 ALTER TABLE （プライマリキーの追加、削除、変更）",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSQL DDL コマンド一覧\nALTER 〜 すべて (＝セッション、システム制御文を含むかどうかわかりません)\nANALYZE\nASSOCIATE STATISTICS / DISASSOCIATE STATISTICS\nAUDIT\nCOMMENT </p>\n<p>CREATE 〜 すべて\nDROP 〜 すべて\nTRUNCATE\nFLASHBACK 〜 すべて\nPURGE\nRENAME </p>\n<p>GRANT\nREVOKE\nNOAUDIT</p>\n<p>データ操作言語 / DML (Data Manipulation Language） \nOracle において DML とは Data ( access and ) Manipulation Language となっている。\nSQL DML コマンド一覧\nSELECT (≠ Manipulate) ／ SELECT FOR UPDATE\nINSERT\nDELETE\nUPDATE\nMERGE  </p>\n<p>CALL\nLOCK TABLE </p>\n<p>EXPLAIN PLAN</p>\n<p>トランザクション制御文 \nトランザクション制御文\nCOMMIT\nROLLBACK\nSET TRANSACTION\nSAVEPOINT</p>\n<p>セッション制御文 ( ALTER SESSION / SET ROLE ) \nセッションのプロパティを設定する。(暗黙コミットは発生しない)\nALTER SESSION \nADVISE { COMMIT|ROLLBACK | NOTHING }\nCLOSE DATABASE LINK dblink\n{ ENABLE | DISABLE } COMMIT IN PROCEDURE\n{ ENABLE | DISABLE } GUARD\n{ ENABLE | DISABLE | FORCE } PARALLEL { DML | DDL |QUERY} [ PARALLEL integer ]\nENABLE RESUMABLE [ TIMEOUT integer ] [ NAME string ]\nDISABLE RESUMABLE\nSET parameter = value [, value, ...]\nSET ROLE \nNONE\nALL [ EXCEPT { role | role_list } ]\nrole IDENTIFIED BY password</p>\n<p>システム制御文 ( ALTER SYSTEM ) \nインスタンスのプロパティを設定する。(暗黙コミットは発生しない)\nALTER SYSTEM \nARCHIVE LOG 〜\nCHECKPOINT [ GLOBAL | LOCAL ]\nCHECK DATAFILES [ GLOBAL | LOCAL ]\n{ ENABLE | DISABLE } DISTRIBUTED RECOVERY\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "24.0 SQL コマンド一覧 （SQL の種類）",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>INSERT INTO USER_MASTER (\n        USER_ID, DEPT_NO, USER_NAME, CREATED_ON, MODIFIED_ON\n) VALUES (\n        &#39;0020&#39;, &#39;1001&#39;,\n        &#39;小泉 純一&#39;,\n        DEFAULT,\n        NULL\n) ;\n-- 行コメント</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "25.0 DMLの基本形式:INSERT",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SELECT * \n  FROM USER_MASTER\n WHERE CREATED_ON BETWEEN &#39;2004/10/01&#39; AND &#39;2004/10/31&#39;\n または\nSELECT * \n  FROM USER_MASTER\n WHERE CREATED_ON &gt;= &#39;2004/10/01&#39; AND CREATED_ON &lt;= &#39;2004/10/31&#39;</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "26.0 DMLの基本形式:SELECT",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>DELETE FROM (\n     SELECT\n            DEPT_NO\n     FROM USER_MASTER\n     WHERE  DEPT_NO = &#39;1002&#39;\n) -- [ ビューの別名 ]\n /*\n WHERE\n    DEPT_NO = &#39;1002&#39;\n */</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "27.0 DMLの基本形式:UPDATE",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nalter session set nls_timestamp_tz_format = &#39;YYYY-MM-DD HH24:MI:SSXFF TZR&#39;;</p>\n<p>SQL&gt; select tzr, ts_tz, ts_tz AT LOCAL as at_local_time from at_timezone_sample;</p>\n<p>TZR             TS_TZ                              AT_LOCAL_TIME</p>\n<hr>\n<p>Asia/Tokyo      2007-01-01 09:00:00.000000 +09:00  2007-01-01 09:00:00.000000 +09:00\nUTC             2007-01-01 09:00:00.000000 +00:00  2007-01-01 18:00:00.000000 +09:00\nUS/Hawaii       2007-01-01 09:00:00.000000 -10:00  2007-01-02 04:00:00.000000 +09:00\nUS/Pacific      2007-01-01 09:00:00.000000 -07:00  2007-01-02 01:00:00.000000 +09:00\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "28.0 日付に変換",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n=    等しい\n&lt;&gt;    等しくない\n!=    ¬= は、あまり一般的でないプラットフォーム向け\n^=    &lt;&gt; は標準SQLに規定されている不等号\n¬=    </p>\n<blockquote>\n<p>   （左辺が）より大きい、より小さい\n&lt;<br>=    （左辺が）以上、以下\n&lt;=<br></code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "29.0 SQL 比較条件、比較演算子",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSQL&gt; select * from null_test where col IS NULL;</p>\n<h2 id=\"col\">COL</h2>\n<p><NULL>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "30.0 NULL 値の検索",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SELECT DISTINCT /* 重複行を削除するキーワード DISTINCT */\n       DEPT_NO\n  FROM USER_MASTER\n ORDER BY DEPT_NO</code></pre>",
              "type" : "Html"
            },
            "id" : "x33",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "31.0 重複行の削除: DISTINCT",
            "update_at" : 1556488166377
          },
          "x34" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSQL&gt; select * from my_table where rownum &lt;= 10;</p>\n<p>FIRST_NAME           LAST_NAME</p>\n<hr>\n<p>Ellen                Abel\nSundar               Ande\nMozhe                Atkinson\nDavid                Austin\nHermann              Baer\nShelli               Baida\nAmit                 Banda\nElizabeth            Bates\nSarah                Bell\nDavid                Bernstein</p>\n<p>10行が選択されました。</p>\n<p>SQL&gt; select rownum, <em> from my_table where rownum &lt;= 10;\nselect rownum, </em> from my_table where rownum &lt;= 10\n               *\n行1でエラーが発生しました。:\nORA-00936: 式がありません。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x34",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "34",
            "time" : 1555228371611,
            "title" : "32.0 SELECT ＊ と疑似列を併記する方法",
            "update_at" : 1556488166377
          },
          "x35" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SELECT * FROM USER_MASTER\n ORDER BY DEPT_NO DESC</code></pre>",
              "type" : "Html"
            },
            "id" : "x35",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "35",
            "time" : 1555228371611,
            "title" : "33.0 並び替え:ORDER BY",
            "update_at" : 1556488166377
          },
          "x36" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SELECT &quot;学年&quot;, &quot;生徒番号&quot; FROM &quot;成績表&quot;\nWHERE &quot;学年&quot; = 4\nGROUP BY &quot;生徒番号&quot;\nHAVING MAX(&quot;成績&quot;) &gt;= 3</code></pre>",
              "type" : "Html"
            },
            "id" : "x36",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "36",
            "time" : 1555228371611,
            "title" : "34.0 検索結果のグループ化 (GROUP BY と HAVING)",
            "update_at" : 1556488166377
          },
          "x37" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>SELECT ... FOR UPDATE ;\nIF (condition) THEN\n    UPDATE ... SET ... ;\n    -- COMMIT;  ここには COMMIT 文を記述しない\nEND IF;\nCOMMIT ;   -- ← ここで COMMIT すると FOR UPDATE は常に解放される</code></pre>",
              "type" : "Html"
            },
            "id" : "x37",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "37",
            "time" : 1555228371611,
            "title" : "35.0 SELECT 時に明示的な行ロックを行なう方法",
            "update_at" : 1556488166377
          },
          "x38" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSELECT 1, 2 FROM DUAL\nUNION ALL\nSELECT 1, 2 FROM DUAL;\n         1          2</p>\n<hr>\n<pre><code>     1          2\n     1          2\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x38",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "38",
            "time" : 1555228371611,
            "title" : "36.0 UNION と UNION ALL 集合演算子",
            "update_at" : 1556488166377
          },
          "x39" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSELECT 1, 2 FROM DUAL\nUNION\nSELECT 2, 3 FROM DUAL\nINTERSECT\nSELECT 1, 2 FROM DUAL;</p>\n<pre><code>     1          2\n</code></pre><hr>\n<pre><code>     1          2\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x39",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "39",
            "time" : 1555228371611,
            "title" : "37.0 INTERSECT",
            "update_at" : 1556488166377
          },
          "x40" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSELECT ROWNUM FROM EMP ;</p>\n<pre><code>ROWNUM\n</code></pre><hr>\n<pre><code>     1\n     2\n</code></pre><p>  ...\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x40",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "40",
            "time" : 1555228371611,
            "title" : "38.0 ROWNUM 擬似列",
            "update_at" : 1556488166377
          },
          "x41" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSQL&gt; select\n  2     color_code,　　　　　　　　   -- カラーコード\n  3     CASE color_code\n  4       WHEN &#39;FFF&#39; THEN &#39;WHITE&#39;　   -- FFF なら白\n  5       WHEN &#39;000&#39; THEN &#39;BACK&#39;      -- 000 なら黒\n  6       ELSE             color_code -- それ以外ならコード値を戻す\n  7     END color_name\n  8  from\n  9     color_sample;</p>\n<p>COLOR_CODE COLOR_NAME</p>\n<hr>\n<p>FFF        WHITE\n000        BACK\nF00        F00\n0F0        0F0\n00F        00F\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x41",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "41",
            "time" : 1555228371611,
            "title" : "39.0 SQL の IF 「CASE 〜 WHEN 式」",
            "update_at" : 1556488166377
          },
          "x42" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>書式    入力\nfmt    n\nTO_CHAR( n, &#39;99.99&#39;)    0.5\n    -0.5\n    500\n    0.005\n    0\nTO_CHAR( n, &#39;9&#39;)    0\nTO_CHAR( n, &#39;00.00&#39;)    0.5</code></pre>",
              "type" : "Html"
            },
            "id" : "x42",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "42",
            "time" : 1555228371611,
            "title" : "40.0 書式",
            "update_at" : 1556488166377
          },
          "x43" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>主な用途は TO_CHAR（日付）、TO_DATE、TO_TIMESTAMP 関数などにおいて日付、\n時刻用のフォーマット文字列として使用する。</code></pre>",
              "type" : "Html"
            },
            "id" : "x43",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "43",
            "time" : 1555228371611,
            "title" : "41.0 日付用の書式",
            "update_at" : 1556488166377
          },
          "x44" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nCREATE OR REPLACE FUNCTION FUNC_GET_TIMESTAMP\nRETURN TIMESTAMP\nIS\nBEGIN\n  RETURN SYSTIMESTAMP;\nEND;\n/\nSELECT\n    D7 D7_1\n    ,TO_CHAR(SYSTIMESTAMP, &#39;FF6&#39;)           D1\n    ,TO_CHAR(FUNC_GET_TIMESTAMP(), &#39;FF6&#39;)   D2\n    ,TO_CHAR(FUNC_GET_TIMESTAMP(), &#39;FF6&#39;)   D3\n    ,TO_CHAR(SYSTIMESTAMP, &#39;FF6&#39;)           D4\n    ,( SELECT TO_CHAR(SYSTIMESTAMP, &#39;FF6&#39;)  FROM MY_DUAL ) D5\n    , D6\n    , D7 D7_2\n FROM (\n    SELECT\n            &#39;DUMMY&#39;\n　　　　　　,TO_CHAR(SYSTIMESTAMP, &#39;FF6&#39;)            D6\n            ,TO_CHAR(FUNC_GET_TIMESTAMP(), &#39;FF6&#39;)    D7\n    FROM\n            USER_CATALOG\n    WHERE ROWNUM &lt;= 5    --- これの有り無しで結果が異なった。\n );</p>\n<p> 実行計画  ROWNUM &lt;= 5  を使用した場合\n|8|SELECT STATEMENT|\n|1| └TEST.MY_DUAL TABLE ACCESS [FULL]|\n|7|   TEST. VIEW|\n|6|   └COUNT [STOPKEY]|\n|5|       FILTER|\n|2|       └SYS.OBJ$ TABLE ACCESS [FULL]|\n|4|       └SYS.TAB$ TABLE ACCESS [CLUSTER]|\n|3|         └SYS.I_OBJ# INDEX [UNIQUE SCAN]|</p>\n<p> 実行計画  ROWNUM &lt;= 5  を指定していない場合\n|6|SELECT STATEMENT\n|1|TEST.MY_DUAL TABLE ACCESS [FULL]\n|5|FILTER\n|2|└SYS.OBJ$ TABLE ACCESS [FULL]\n|4|└SYS.TAB$ TABLE ACCESS [CLUSTER]\n|3|  └SYS.I_OBJ# INDEX [UNIQUE SCAN]\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x44",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "44",
            "time" : 1555228371611,
            "title" : "42.0 SYSDATE で色々やってみる",
            "update_at" : 1556488166377
          },
          "x45" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x45",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_8",
            "name" : "tei952",
            "ord" : "45",
            "time" : 1555228371611,
            "title" : "43.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_9" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Java の世界へようこそ！ ここでは Java を用いたプログラミングに必要な、\n開発環境の整備をします。</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 Java 開発環境",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Java はオブジェクト指向のプログラミング言語です。 \n他のオブジェクト指向言語を習得している方はお分かりと思います。プログラ\nミングが始めて、あるいは、 オブジェクト指向というのは良くわからない、\nという方にはこのサイトで後で説明しますので、そちらをお読みください。 \nC 言語の「ポインタ」のように、柔軟だけれど危険でわかりにくい、といった\n要素を排除するなどされています。 Java はわかり易い言語仕様で、学習し易\nいといわれています。</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 Java とは",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Java の開発をするには Java Development Kit (JDK) を入手します。 \nJava のダウンロードサイトから、Java SE Development Kit (JDK) 6 をダ\nウンロードします。 \n私の環境は Windows 7 の 32 bit の環境だったのですが、JDK のダウンロー\nドファイル名は jdk-6u19-windows-i586.exe でした。これは 「JDK バージョ\nン 1.6 の Update 19。Windows の i586 用」 という意味になります。 \nパッケージをダブルクリックして、インストールを開始すれば OK です。 \nこのとき、念のためインストール先ディレクトリは変な問題が起きないように、 \nC:\\jdk\\1.6.0_19 のように空白を含まないパスにしておいたほうが良いようです。</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 JDK のダウンロードとインストール",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Eclipse のダウンロードサイト から Eclipse IDE for Java Developers を\nダウンロードします。 \nzip ファイルを展開してできる、eclipse ディレクトリを C:\\eclipse などに\n配置すればそれで完了です。 \nその中の eclipse.exe をダブルクリックすれば Eclipse の IDE が起動します。 \nただ、これだけです。簡単ですね。</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0  Eclipse のインストール",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>プログラミング中はなるべくキーボードから手を離さずに、様々な動作ができた方が\n効率が良いことが多いです。 Eclipse にも多数のショートカットキーがデフォルト\nで割り当てられています。 ショートカットは数あれど、ここではその中で、特に便\n利なショートカットキーを紹介します。\n編集タブの移動 : Ctrl + E\n元の場所に戻る・進む : Alt + ← または →\n対応する括弧を行き来する : Ctrl + Shift + P\n行のコメントアウト : Ctrl + /\n複数行のコメントアウト : Ctrl + Shift + /\nフォーマット : Ctrl + Shift + F\nクイックフィックス : Ctrl + 1\n型の階層表示 : F4\n型の検索ボックス表示 : Ctrl + Shift + T\nコードのアウトライン表示 : Ctrl + O\nアウトラインを上下に移動 : Ctrl + Shift + ↑ または ↓\n検索画面の表示 : Ctrl + F\nファイルを閉じる : Ctrl + W\nファイルを保存 : Ctrl + S\nショートカットの表示 : Ctrl + Shift + L</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 便利な Eclipse ショートカット集",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Java で Web アプリケーションを開発する場合は、Java を実行するアプリケー\nションサーバーが必要になります。 \nTomcat は Apache.org が開発している Java Servlet/JSP の実行環境で、Java \nのアプリケーションサーバーとして広く使われています。 ここでは、Tomcat の\nインストールを行い、さらに Eclipse から Tomcat を利用するためのプラグイ\nンの設定も行います。</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 Tomcat のインストール",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npublic class HelloJava {</p>\n<pre><code> public static void main(String[] args) {\n\n      System.out.println( &quot;Hello, world!&quot; );     \n\n }\n</code></pre><p>}\nこの内容を HelloJava.java というファイル名で保存してください。 ファイル名\nはそのコードのクラス名で名前をつけます。 \nこのプログラムでは、&quot;Hello, world!&quot; という文字を標準出力に出力します。その\nために System.out.println というメソッドを呼び出していますが、 よくわから\nないという方は、ここでは「画面に文字を出すときには System.out.println を使\nう」 と覚えておけば十分です。 \n次にコマンドプロンプトを開いて、コマンドラインからコンパイルしてみましょう。 \nコンパイルコマンドは javac です。javac に対して、次のように HelloJava.java \nというファイル名を渡します。 \n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 JAVAプログラムを動かそう",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>データ型  意味  既定値\nbyte     ８ビットの符号付整数\n         -128 から 127 までを表します。 0\nshort    １６ビットの符号付整数\n         -32,768 から 32,767 までを表します。0\nint      ３２ビットの符号付整数\n         -2,147,483,648 から 2,147,483,647 までを表します 0\nlong     ６４ビットの符号付整数\n         -9,223,372,036,854,775,808 から 9,223,372,036,854,775,807 まで\n         を表します 0L\nfloat   ３２ビットの浮動小数点値  0.0f\ndouble  ６４ビットの倍精度浮動小数点値 0.0d\nboolean true または false の値をとる  false\nchar    １６ビットの Unicode 文字\n         \\u0000 から \\uFFFF までの値  &#39;\\u0000&#39;</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 変数",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n配列\n配列 (array) とは、同じデータ型のデータを複数格納するコンテナです。配列内に格納\nできる要素数は固定です。 例えば、「５個の整数を格納する配列」 は次のように定義で\nきます。 \nint[] a;<br>a = new int[5];\n配列内の要素には添え字 (インデックス) でアクセスできます。 要素内の１番目の要素\nはインデックス [0]、２番目の要素はインデックス [1]、・・・ のように、 n 番目の\n要素には [n-1] というインデックスでアクセスできます。 \n次のコード例では、５個の整数を格納できる整数の配列を用意し、 それに、１番目の要\n素から順に１、２、３、４、５ を格納し、 それを逆に、５、４、３、２、１ という風\nに順番にその要素の中身を出力します。 \npublic class ArrayTest {</p>\n<pre><code> public static void main(String[] args) {\n\n      int[] a;\n\n      a = new int[5];\n\n      a[0] = 1;\n      a[1] = 2;\n      a[2] = 3;\n      a[3] = 4;\n      a[4] = 5;\n\n      System.out.println( a[4] );\n      System.out.println( a[3] );\n      System.out.println( a[2] );\n      System.out.println( a[1] );\n      System.out.println( a[0] );\n\n }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 配列",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n足し算、引き算、掛け算、割り算などを行う演算子は次のとおりです。 \n演算子  役割\n+      足し算\n-      引き算\n*      掛け算\n/      割り算\n%      割り算の余り</p>\n<h2 id=\"-1-\">++     1 だけインクリメント (加算) </h2>\n<p>1 だけデクリメント (減算) \nさっそく、この実行例を示します。 \npublic class OpTest1 {</p>\n<pre><code> public static void main(String[] args) {\n\n      System.out.println( 10 + 5 );\n      System.out.println( 10 - 5 );\n      System.out.println( 2 * 3 );\n      System.out.println( 10 / 2 );\n      System.out.println( 10 % 3 );\n\n }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 演算子",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nif 文\nif 文では、条件が真 (true) と評価されるときに実行するコードブロック、\n偽 (false) のときに実行するコードブロックを指定することができます。 \nif( 条件文1 ) {\n     // 条件文1 が真 (true) のときにここが実行される\n}\nelse {\n     // 条件文1 が偽 (false) のときにここが実行される\n}\n条件は複数あっても構いません。その場合は else if (条件文2) として記述\nします。 また、else ブロックは任意です。 \n実行例は次のとおりです。 \npublic class ControlFlow1 {</p>\n<pre><code> public static void main(String[] args) {\n\n      int i = 68;\n\n      if( 80 &lt; i ) {\n           System.out.println( &quot;A&quot; );\n      } else if( 60 &lt; i ) {\n           System.out.println( &quot;B&quot; );\n      } else {\n           System.out.println( &quot;C&quot; );\n      }\n\n }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "11.0 処理の分岐",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n最も基本的なクラス定義は次のようになります。 \nclass クラス名 {\n     // ここにフィールド、コンストラクタ、メソッドを書く\n}\n継承するクラス、実装するインターフェイスがある場合は次のように書きます。 \nclass クラス名 extends スーパークラス implements インターフェイス {\n     // ここにフィールド、コンストラクタ、メソッドを書く\n}\nスパークラスはひとつだけ指定できます。インターフェイスはカンマで区切り\n複数指定できます。 \nそれでは、具体的な例として「人」を表す Person クラスというのを実装して\nみましょう。 \npublic class Person {</p>\n<pre><code> // フィールド\n private int age;\n private String name;\n\n // コンストラクタ\n public Person( int a, String n ) {\n      age = a;\n      name = n;\n }\n\n public void setAge( int a ) {\n      age = a;\n }\n\n public void setName( String n ) {\n      name = n;\n }\n\n public int getAge() {\n      return age;\n }\n\n public String getName() {\n      return name;\n }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "12.0 クラス定義とオブジェクト",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nコンストラクタはクラスのオブジェクトを生成するときに呼ばれる特別な\nメソッドです。 コンストラクタにパラメータを渡すことで、オブジェク\nト生成時にオブジェクトを初期化できます。 \nさらに、Person クラスを継承して従業員 (Employee) クラスを定義しま\nしょう。 従業員クラスには従業員 ID という属性を持たせましょう。 \npublic class Employee extends Person {</p>\n<pre><code> private int employeeID;\n\n public Employee( int a, String n, int eid ) {\n      super( a, n );\n      employeeID = eid;\n }\n\n public void setEmployeeID( int eid ) {\n      employeeID = eid;\n }\n\n public int getEmployeeID() {\n      return employeeID;\n }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "13.0 コンストラクタ",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nクラスのインスタンス (オブジェクト) を作成するには new キーワード\nを使います。 \nクラス名 変数名 = new クラス名 (コンストラクタへのパラメータ);\nEmployee クラスを利用するテストプログラムを作成します。 \npublic class EmployeeTestApp1 {</p>\n<pre><code> public static void main(String[] args) {\n\n      Employee p = new Employee( 20, &quot;Ichiro Suzuki&quot;, 100 );\n\n      System.out.println( p.getAge() );\n      System.out.println( p.getName() );\n      System.out.println( p.getEmployeeID() );\n\n }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "14.0 オブジェクトの生成",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nオブジェクトのコピーを作る時には、そのオブジェクトが持つ参照に注意が\n必要です。 \n次のコードを見てください。 \nPerson p1 = new Person();\nPerson p2 = p1;</p>\n<p>p1.setAge(30);\nこの例では Person クラスのオブジェクト p1 が p2 に代入されています。 \nこのようにすると、p2 は p1 が指しているオブジェクトと全く同じオブジ\nェクトを指し示します。 すると、p1 に行った変更が p2 にも影響すること\nになります。（実体は全く同じものですから当然ですね） \nclone メソッドの利用\n他の変数に対して行った操作の影響を避けるためには、clone メソッドを利\n用します。 \nclone メソッドは Object クラスにて定義されており、二つのオブジェクト\nをフィールド毎に値を丸コピーします。 \n上のコード例の p1 と p2 が互いに変更の影響を受け合わないようにするに\nは、clone メソッドを用いて次のようにします。 \nPerson p1 = new Person();\nPerson p2 = p1.clone();</p>\n<p>p1.setAge(30);\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "15.0 コピーとクローンの問題点",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n上術のようなオブジェクトのコピー・クローンの問題を解決するには、\nCloneable インターフェイスを実装し clone メソッドを定義し直します。 \npublic class Person implements Cloneable {\n  Class1 o;\n  ...</p>\n<p>  public Person clone() throws CloneNotSupportedException {\n    Person cloned = (Person) super.clone();\n    cloned.o = (Class1) o.clone();\n    return cloned;\n  }\n}</p>\n<p>public class Class1 implements Cloneable {\n  ...</p>\n<p>  public Class1 clone() throws CloneNotSupportedException {\n    return (Class1) super.clone();\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "16.0 Cloneable インターフェイスと clone メソッドの定義",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>次の場面では、クラスに名前をつけること無くクラスを定義してインスタ\nンスを生成する事が可能です。 \nあるクラスの派生クラスのオブジェクトを一つだけインスタンス化する場合 \nあるインターフェイスを実装して一つだけインスタンスを作成する場合 \n名前を付けずにクラスを定義するので、このようなクラスを匿名内部クラス\n (Anonymous Inner Class) といいます。 \n匿名内部クラスの書き方は、次のようになります。 \nnew スーパータイプ ( コンストラクタ パラメータ) {\n  インナークラスのメソッド、データ\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "17.0 匿名内部クラス",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>String は Java で文字列をあらわす基本的なクラスです。基本的な、といっ\nてもプリミティブな変数として「文字列」という型があるわけではなく、 Java\n の標準ライブラリとして String クラスが用意されているということになります。 \nJava でいう「文字列」は Unicode 文字が並んだものです。文字列の定数は &quot; \n(二重引用符) で囲みます。例えば Hello と書きたければ、&quot;Hello&quot; のように二\n重引用符で囲みます。 &quot;Hello&quot; と書いた場合は、H、e、l、l、o という Unicode\n 文字が連続したものです。 \nまた、Unicode の文字コードを直接指定することもできます。 \n例えば次のように ☺ 記号を表す \\u263A を直接入力することもできます。 \npublic class StringTestApp1 {\n  public static void main(String[] args) {\n    System.out.println(&quot;Hello\\u2606&quot;);\n  }\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "18.0 文字列 (String)",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n以下は文字列操作のコードとその実行例です。 \npublic class StringTest1 {</p>\n<pre><code> public static void main(String[] args) {\n\n      // 単純な String の出力\n      String s1 = &quot;Hello!&quot;;\n\n      System.out.println( s1 );\n\n      // char の配列から String を作る\n      char[] c = { &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;!&#39; };\n      String s2 = new String( c );\n\n      System.out.println( s2 );\n\n      // 文字の結合\n      String s3 = s1.concat( s2 );\n\n      System.out.println( s3 );\n\n      // 文字列を結合する時に + 演算子を使う\n      System.out.println( s1 + &quot; - &quot; + s2 );\n\n      // 長さ\n      System.out.println( s1.length() );\n\n }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "19.0 文字列操作",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>しかし最初に言うのもなんですが、正規表現自体が非常に奥の深いもので、それだけ\nで本一冊できてしまうボリュームがあるテーマです。\n従って完全に網羅しているわけでないことはあらかじめお断りしておきます。\nその代わり、Java で正規表現を利用するはじめの一歩、取っ掛かりとして役に立つ\n項目を取り上げました。\nJava の正規表現 (Regular Expression) の基礎\nここでは Java で正規表現を利用するための基礎的なメソッドおよびそれの注意事項\nについて説明します。 \nグルーピングで文字を抜き出す\nマッチした箇所から特定の文字を抜き出すのに便利なグルーピングについて説明します。 \n正規表現による文字列のスプリット\n文字列への適用例として、正規表現を使って文字列をスプリットする例を紹介します。 \n正規表現による文字列の置換\n文字列への正規表現の適用例として、マッチした箇所の文字の置換方法を紹介します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "20.0 Java の正規表現",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n例外オブジェクト\nJava の例外オブジェクトは全て、java.lang.Throwable から派生します。 Error、\nException 等です。 \ntry-catch-finally ブロック\n例外処理の形式は次のとおりです。 \ntry {</p>\n<pre><code> // try ブロック\n</code></pre><p>} catch (例外型１ e) {</p>\n<pre><code> // 例外処理\n</code></pre><p>} catch (例外型２ e) {</p>\n<p>...</p>\n<p>} finally {</p>\n<pre><code> // 常に実行される\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "21.0 例外オブジェクト",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>実行時においてオブジェクトのクラス情報を調べたりすることを、リフレクションといい\nます。リフレクションによって、 実行時にクラスの名前、メソッドの名前やパラメータ\nなどを知ることができます。 \nClass クラスとは？\nJava の実行環境はそれぞれのオブジェクトの型情報を常に判別しています。ここではそ\nのことに関わる Class クラスについて説明します。 \nオブジェクトに関連する Class オブジェクトの取得\nClass オブジェクトの取得方法の一つを、具体例を交えて紹介します。 \nクラス名からの Class オブジェクトの取得\nClass オブジェクトのもう一つの取得方法について説明します。 \nClass オブジェクトからのインスタンスの作成\nここでは Class オブジェクトから、それが表す型のインスタンスを作成する方法をしめ\nします。\nClass オブジェクトからのインスタンスの作成とメソッド呼出し</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "22.0 リフレクション",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>パッケージの命名\nパッケージは通常次のようなルールで命名します。 \n全て小文字とする \nインターネットのドメイン名の逆にしたものをプレフィックスにする\n例. ドメイン名が java.keicode.com ならばプレフィックスは com.keicode.java \nただし、ハイフン等の記号、数字始まり、 Java のキーワード (int 等) を含む場合は _ \n(アンダースコア) をつける\n例. 1foo.com → com._1foo\nhawaii.nokoto.site → com.hajimete_hawaii \nパッケージの作成\nパッケージ名はソースファイルの一行目に package キーワードを用いて、パッケージ名\nを指定します。 \npackage パッケージ名;</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "23.0 パッケージ",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ジェネリックス (Generics) というのは汎用的なクラスやメソッドを特定の型に対応づけ\nる機能のことで、Java SE5.0 から導入されました。 \nいい例えかどうか分かりませんが、例えば「食べ物コンテナ」という汎用的なコンテナを\n作ったときに、 それを「ラーメンコンテナ」「カレーコンテナ」という風に特定の型にき\nちっと決めるものです。 \nそれがなぜいいのか？どうやって作るのか？どうやって使うのか？ということをみていき\nたいと思います。 \nジェネリックスとは？なぜジェネリックスなのか\nジェネリックスを導入する意図、それがないときの問題点について説明します。\nジェネリックスの名前付け\nサブタイプ\nジェネリックスメソッドとコンストラクタ\n境界型 (Bounded Types)\nワイルドカード\n&lt;? extends クラス名&gt; という意味について説明します。\nスーパータイプ バウンド\nこちらは &lt;? super クラス名&gt; について説明します。また図で理解を深めましょう。</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "24.0 ジェネリックス",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>ava では日付、時間およびタイムゾーンを扱うための便利なクラス、ライブラリが用意さ\nれています。 \n日本ではタイムゾーンはひとつだけなので、日本限定のプログラムであればあまりタイム\nゾーンを意識しなくても、 ローカル時間を使えば通常は問題ありません。しかし、例えば\nアメリカなどの複数のタイムゾーンが使われている国でも使えるように拡張しようと思え\nば、たちまちタイムゾーンは深刻な問題となります。 \nタイムゾーンの使い方\nここでは利用可能な TimeZone の列挙方法、タイムゾーン ID についてみていきます。 \nカレンダーとタイムゾーンの利用\nカレンダー (java.util.Calendar) とタイムゾーン (java.util.TimeZone) を利用\nする具体的な方法を紹介します。</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "25.0 日時・タイムゾーンの扱い",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>開発環境として、Eclipse と Tomcat を利用することを前提としますので、インストール\nしていない方は、 Tomcat をインストール してください。 \nWeb アプリケーションの動作確認 (Tomcat プロジェクト)\nTomcat プロジェクトを作って、JSP およびサーブレットの簡単な動作確認を行います。 \nサーブレットから JDBC を利用する\nサーブレットから MySQL に JDBC で接続してクエリを実行する具体例を示します。 \nJSP/Servlet フィルターの基本\nJSP/サーブレットフィルタの基本的な開発、設定方法を示します。 \nJSP\nJSP の事前定義変数 - 暗黙オブジェクト \n設定\nウェルカムページ (デフォルトページ) の設定 \nJSP/Servlet フィルターの登録\nJSP/Servlet フィルターのページで登録方法も示しています。</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "26.0 Web アプリケーションの開発",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>マルチスレッド・プログラミングは、うまいコードを書くのがもっとも難しいものの一つ\nといってよいでしょう。\nちょっと間違えてスレッドセーフではないコードを書いてしまえば、あっという間にデータ\nが壊れるか、 あるいはテスト環境ではうまく動いていたのに、本番の環境で時々つかみ所\nのないような形でバグがちょろちょろと顔を出してきます。\nここではそんな、 Java のマルチスレッド・プログラミングの基本的な事柄について説明\nします。\nJava のマルチスレッド・プログラミングの基本\nどんなときに複数のスレッドで処理を行うべきなのか、そしてそれはどのように行うのか、\nということについて簡単に説明します。 \nExecutorService の基本的な使い方、考え方\nスレッドプールを簡単に利用する方法として、ExecutorService があります。 Executor\nService の基本的な仕組みと利用方法について説明します。 \n処理のキャンセル、中断\nExecutorService で処理しているタスクを途中でキャンセルするにはどうしたらよいで\nしょうか。</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "27.0 マルチスレッド",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>これまで C 言語などでプログラミングをしてきた人は、きっとファイルを操作しようとして\n FILE* などがないことに驚くかもしれません。\nJava ではファイルやソケットなどの入出力は、入力ストリーム (Input Stream)、あるいは、\n出力ストリーム (Output Stream) として扱います。 読み込む元が入力ストリームで、書き\n出す先が出力ストリームです。\nそしてそのストリームに対して、リーダー (Reader) やライター (Writer) が用意されてい\nます。\nこれの優れているところは、ストリーム (読み込み元や書き出す先) が必ずしも伝統的なファ\nイルハンドル (ファイル、ソケット、パイプ等) と限らず、 メモリ上の単純なバイト列だった\nり、あるいは別のストリームであったりするところがあげられます。\nこうすることによってデータの入出力が、それがファイルであろうとメモリブロックであろうと\n、同様に扱えるようになるわけです。 また、多機能なストリームを数珠つなぎにすることによっ\nて、各種データをバッファリングしたり、GZIP したりできます。\nここではテキストファイルやバイナリファイルの入出力を行うことによって、基本的なストリー\nムやリーダー・ライターの使い方を見ていきます。\nテキストファイルの読み込みと書き込み \nバイナリファイルの読み込みと書き込み \nオブジェクトのシリアライズとデシリアライズ \nソケットの読み込みと書き込み</code></pre>",
              "type" : "Html"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "28.0 基本的な I/O",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>NIO は java.nio パッケージで提供されます。 これは低レベル I/O を極力サポートして、 \nプラットフォームに合わせてより効率的に I/O 操作ができることを目的としています。\nここでは NIO の具体的な利用方法をみていきましょう。\nNIO Buffer の使い方\n例えば OpenGL ES ライブラリを利用する時等にも、 NIO Buffer は利用されます。ここでは\n具体的な利用例と、それぞれのコードの意味について考えていきます。 バイトオーダー、ビュ\nーバッファなどの説明も。</code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "29.0 New I/O (java.nio)",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Java アプレット (Java applet) はウェブページに埋め込んだ形で実行可能なアプリケーショ\nンのことです。\nHTML ページに関連付けされたアプレットは、HTML や画像などと同じように自動的にダウンロー\nドされて実行され、 特に１９９０年台後半にインタラクティブなウェブページを実装するのに広\nく使われました。\nその後、JavaVM 自体の配布の問題やら、代替テクノロジ (Java Web Start) の出現などで、当\n時のような人気はなくなったものの、 環境さえ整えば有効に利用できることに変わりはありません。</code></pre>",
              "type" : "Html"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "30.0 Java アプレット",
            "update_at" : 1556488166377
          },
          "x32" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Swing とは？ \n最も単純なフレームの表示\n単純なフレームの表示方法を示します。 \nフレームの基本的な設定\nフレームの位置、タイトルなどの基本的な設定方法を示します。 \nルックアンドフィールの設定\nトップレベルコンテナー\nSwing のコンポーネント \nJComponent &gt; AbstractButton \nボタン JButton\nチェックボックス JCheckBox\nラジオボタン \nラジオボタン JRadioButton\nラジオボタングループのタイトルと枠線の表示\nコンボボックス JComboBox の使い方\nレイアウトの基礎 \nFlowLayout (フローレイアウト) の基礎\n等間隔のマス目に並べる GridLayout (グリッドレイアウト)\nBorderLayout (ボーダーレイアウト) \nBoxLayout (ボックスレイアウト) \nCardLayout (カードレイアウト)\nタブ表示 \nタブ表示 JTabbedPane の使い方\nJTabbedPane のタブ切り替えイベント\nイベント処理の基本 （委譲イベントモデル）</code></pre>",
              "type" : "Html"
            },
            "id" : "x32",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "32",
            "time" : 1555228371611,
            "title" : "31.0 Swing による GUI",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>一般的な業務で使われるシステムの目的は、結局のところ構造化されたデータを操作する\nことがメインであることがほとんどと言ってよいでしょう。\n在庫データ、発注データ、販売データ、ナントカデータと、あげればキリがありません。\nカメラアプリなどのように 「一発撮ってファイルに落として、ハイ終了」、というのは\nむしろレアケースです。\n特に標準的な RDBMS に保存される表組みデータを扱うにはグリッドコンポーネントが欠\nかせません。 グリッドとか、表組みとか、呼び名はいろいろあれど要は表組みです。\nSwing ではこれを JTable コンポーネントで行います。\nJTable の簡単な使い方\nJTable でデータとビューをつなぐテーブルモデル\nJTable でのデータの表示方法を決める セルレンダラー\nデフォルトセルレンダラーを使って中央揃えにする方法\nカスタムのセルレンダラーを作りセルの値によって背景色を変更する方法\nJTable のセルの値を更新するテーブルモデルの実装方法\nJTable のセルに編集用のドロップダウンを設定する方法\nJTable での単純なソート（並べ替え）\nJTable でデータフィルターを実装する方法\nJTable に行を追加する\n単純に表示をすれば良い場合から、テーブル内でドロップダウンを表示してデータ編集を行う\nとか、行を追加するとか、いろいろな使用レベルがあります。\n無駄に複雑なコードにしなくていいように、ここでは順を追って少しずつ複雑な形にしていき\nながら説明しています。</code></pre>",
              "type" : "Html"
            },
            "id" : "x33",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "32.0 JTable の使い方",
            "update_at" : 1556488166377
          },
          "x34" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Java のコレクションインターフェイスは主に次のものが挙げられます。 \nList - 要素が順番に並んだものを扱う \nMap - キーと値のペアを扱う \nQueue と Deque - 順番に入れたものを順番に取り出す方式のデータ構造を扱う \nSet - 順番は問わないが各要素へアクセス可能としたいとき \nデータ構造についてあまり知らない人は、あまりピンとこないかもしれませんので、不安の\nある人はデータ構造・アルゴリズムに関する文献等でリスト、キュー・・・などの基本的な\n考え方を学んでおいてください。 \nJava のコレクション・クラスライブラリでは、これらのインターフェイスを実装した各種\nクラスがあり、状況に応じて適切なクラスを利用することが可能です。 \n具体例をみてみましょう。 \nList インターフェイスと ArrayList \nキー・バリューペアを保持する Map の基礎 - HashMap、Hashtable、TreeMap \nArrayList 要素のソートと Comparator\nHashSet と TreeSet はどう使う？\n状況によって、望ましい実装は変わります。（その詳細はデータ構造・アルゴリズムの教科書\nを読んでください） \n実装は変わっても、概念的に同系統のものであれば、 それを利用する具体的な方法（コード）\nは統一された方法になる・・・。これがインターフェイスと実装を切り離す利点です。</code></pre>",
              "type" : "Html"
            },
            "id" : "x34",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "34",
            "time" : 1555228371611,
            "title" : "33.0 コレクション",
            "update_at" : 1556488166377
          },
          "x35" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>XML はテキストファイルでデータ交換をするためのデータフォーマットとして、現在の主流の\nデータ形式といってよいでしょう。 テキスト形式で要素間の階層構造、属性が人間にもわかり易\nく定義され、また、様々な言語での解析用、要素操作用のライブラリが揃っています。 \nここでは、Java で XML 操作をするときの基本的な方法をみていきましょう。 \nXML を読み込む \nXmlPull を利用した XML の解析 - kXML</code></pre>",
              "type" : "Html"
            },
            "id" : "x35",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "35",
            "time" : 1555228371611,
            "title" : "34.0 XML",
            "update_at" : 1556488166377
          },
          "x36" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x36",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_9",
            "name" : "tei952",
            "ord" : "36",
            "time" : 1555228371611,
            "title" : "35.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_a" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n了解小程序登录之前，我们写了解下小程序/公众号登录涉及到两个最关键的用户\n标识：</p>\n<p>  &#39;OpenId&#39; 是一个用户对于一个小程序／公众号的标识，开发者可以通过这个\n  标识识别出用户。\n  &#39;UnionId&#39; 是一个用户对于同主体微信小程序／公众号／APP的标识，开发\n  者需要在微信开放平台下绑定相同账号的主体。开发者可通过UnionId，实现多\n  个小程序、公众号、甚至APP 之间的数据互通了。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 小程序-登录 unionid和openid",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n  <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/api-login.html\">&#39;wx.login&#39;</a> 官方提供的登录能力</p>\n<p>  <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/signature.html#wxchecksessionobject\">&#39;wx.checkSession&#39;</a> 校验用\n  户当前的session_key是否有效</p>\n<p>  <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/authorize.html\">&#39;wx.authorize&#39;</a> 提前向用户发起授权请求</p>\n<p>  <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/api-login.html\">&#39;wx.getUserInfo&#39;</a> 获取用户基本信息\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 关键Api",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 登录流程设计",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 小程序-图片导出",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n经常开发和使用小程序的同学对这个功能一定不陌生，这是一种常见的引流方式，\n一般同时会在图片中附加一个小程序二维码。</p>\n<p>基本原理</p>\n<ol>\n<li><p>借助 &#39;canvas&#39; 元素，将需要导出的样式首先在 &#39;canvas&#39; 画布上绘制出\n来 （api基本和h5保持一致，但有轻微差异，使用时注意即可）</p>\n</li>\n<li><p>借助微信提供的 &#39;canvasToTempFilePath&#39; 导出图片，最后再使用 \n&#39;saveImageToPhotosAlbum&#39; （需要授权）保存图片到本地</p>\n</li>\n</ol>\n<p>如何优雅实现</p>\n<p>根据上述的原理来看，实现是很简单的，只不过就是设计稿的提取，绘制即可，但\n是作为一个常用功能，每次都这样写一坨代码岂不是非常的难受。那小程序如何设\n计一个通用的方法来帮助我们导出图片呢？思路如下：</p>\n<ol>\n<li><p>绘制出需要的样式这一步是省略不掉的。但是我们可以封装一个绘制库，包\n含常见图形的绘制，例如矩形，圆角矩形，圆， 扇形， 三角形， 文字，图片\n减少绘制代码，只需要提炼出样式信息，便可以轻松的绘制，最后导出图片存入\n相册。笔者觉得以下这种方式绘制更为优雅清晰一些，其实也可以使用加入一个\ntype参数来指定绘制类型，传入的一个是样式数组，实现绘制。</p>\n</li>\n<li><p>结合上一步的实现，如果对于同一类型的卡片有多次导出需求的场景，也可\n以使用自定义组件的方式，封装同一类型的卡片为一个通用组件，在需要导出图\n片功能的地方，引入该组件即可。</p>\n</li>\n</ol>\n<p>js</p>\n<p>  class CanvasKit {\n    constructor() {\n    }\n    drawImg(option = {}) {\n      ...\n      return this\n    }\n    drawRect(option = {}) {\n      return this\n    }\n    drawText(option = {}) {\n      ...\n      return this\n    }\n    static exportImg(option = {}) {\n      ...\n    }\n  }</p>\n<p>  let drawer = new CanvasKit(&#39;canvasId&#39;).drawImg(styleObj1).drawText(styleObj2)\n  drawer.exportImg()</p>\n<p>注意事项</p>\n<ol>\n<li>小程序中无法绘制网络图片到canvas上，需要通过downLoadFile 先下载图\n片到本地临时文件才可以绘制</li>\n<li>通常需要绘制二维码到导出的图片上，有<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/qrcode.html\">一种方式</a>导出二\n维码时，需要携带的参数必须做编码，而且有具体的长度（32可见字符）限制，\n可以借助服务端生成 &#39;短链接&#39; 的方式来解决\n<code></li>\n</ol>\n<h2 id=\"5-0-\">5.0 小程序-数据统计</h2>\n<pcode>\n数据统计作为目前一种常用的分析用户行为的方式，小程序端也是必不可少的。小\n程序采取的曝光，点击数据埋点其实和h5原理是一样的。但是埋点作为一个和业务\n逻辑不相关的需求，我们如果在每一个点击事件，每一个生命周期加入各种埋点代\n码，则会干扰正常的业务逻辑，和使代码变的臃肿，笔者提供以下几种思路来解决\n数据埋点：</p>\n<p>设计一个埋点sdk</p>\n<p>小程序的代码结构是，每一个 Page 中都有一个 Page 方法，接受一个包含生命\n周期函数，数据的 &#39;业务逻辑对象&#39; 包装这层数据，借助小程序的底层逻辑实现页\n面的业务逻辑。通过这个我们可以想到思路，对Page进行一次包装，篡改它的生命\n周期和点击事件，混入埋点代码，不干扰业务逻辑，只要做一些简单的配置即可埋\n点，简单的代码实现如下：</p>\n<p>js</p>\n<p>  代码仅供理解思路\n  page = function(params) {\n    let keys = params.keys()\n    keys.forEach(v =&gt; {\n        if (v === &#39;onLoad&#39;) {\n          params[v] = function(options) {\n            stat()   //曝光埋点代码\n            params[v].call(this, options)\n          }\n        }\n        else if (v.includes(&#39;click&#39;)) {\n          params[v] = funciton(event) { \n            let data = event.dataset.config\n            stat(data)  // 点击埋点\n            param[v].call(this)\n          }\n        }\n    })\n  }</p>\n<p> 这种思路不光适用于埋点，也可以用来作全局异常处理，请求的统一处理等场\n 景。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 小程序-数据统计",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 分析接口",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 小程序-工程化",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n工程化做什么</p>\n<p>目前的前端开发过程，工程化是必不可少的一环，那小程序工程化都需要做些什么\n呢，先看下目前小程序开发当中存在哪些问题需要解决：</p>\n<ol>\n<li>不支持 css预编译器,作为一种主流的 css解决方案，不论是 less,sass,\nstylus 都可以提升css效率</li>\n<li>不支持引入npm包 （这一条，从微信公开课中听闻，微信准备支持）</li>\n<li>不支持ES7等后续的js特性，好用的async await等特性都无法使用</li>\n<li>不支持引入外部字体文件，只支持base64</li>\n<li>没有 eslint 等代码检查工具</li>\n</ol>\n<p>方案选型</p>\n<p>对于目前常用的工程化方案，webpack，rollup，parcel等来看，都常用与单页\n应用的打包和处理，而小程序天生是 “多页应用” 并且存在一些特定的配置。根据\n要解决的问题来看，无非是文件的编译，修改，拷贝这些处理，对于这些需求，我\n们想到基于流的 &#39;gulp&#39;非常的适合处理，并且相对于webpack配置多页应用更加\n简单。所以小程序工程化方案推荐使用 &#39;gulp&#39;</p>\n<p>具体开发思路</p>\n<p>通过 gulp 的 task 实现：</p>\n<ol>\n<li>实时编译 less 文件至相应目录</li>\n<li>引入支持async，await的运行时文件</li>\n<li>编译字体文件为base64 并生成相应css文件，方便使用</li>\n<li>依赖分析哪些地方引用了npm包，将npm包打成一个文件，拷贝至相应目录</li>\n<li>检查代码规范</li>\n</ol>\n<p>上述实现起来其实并不是很难，但是这样的话就是一份纯粹的 gulp 构建脚本和 \n约定好的目录而已，每次都有一个新的小程序都来拷贝这份脚本来处理吗？显然不\n合适，那如何真正的实现 &#39;小程序工程化&#39; 呢？\n我们可能需要一个简单的脚手架，脚手架需要支持的功能：</p>\n<ol>\n<li>支持新建项目，创建Page，创建Component</li>\n<li>支持内置构建脚本</li>\n<li>支持发布小程序，也可以想办法接入Jenkins等工具做持续集成\n...</li>\n</ol>\n<p>限于篇幅，没有将完整的代码贴上来，如果感兴趣，可以参考笔者公司实现和在生\n产环境实践过的一整套小程序工程化方案<a href=\"https://github.com/\npandolajs/pandora-cli\">pandora-cli</a>。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 小程序-持续集成",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n很多成熟的公司的软件开发流程中为了规范化和保证产品质量，都有 &#39;持续集成&#39;\n 这个环节。在小程序这一侧，由于依赖微信开发者平台，和以往的web开发有一定\n 的区别，本节主要介绍如何自动化的做小程序的预览，发布，提审，以实现规范\n 化的开发，上线。</p>\n<p>规范化的开发流程</p>\n<p>小程序在提审之前，开发者可以通过二维码测试，预览。在这种情况下，如果没有\n规范化的流程，开发测试流程就会比较混乱，也会存在一些问题(例如不同同学的\n功能测试，手动提供二维码给测试同学，二维码失效)，所以在开发时笔者建议采\n用如下开发流程（未接入持续集成）：</p>\n<ol>\n<li>不同的开发同学根据开发任务拉分支在本地开发，自测</li>\n<li>开发完成后提交到远端，经过 &#39;review&#39; 或者 &#39;代码审核&#39; 之后，合并到\ndevelop分支并上传体验包，作为可提测的版本</li>\n<li>告知测试同学可以测试，测试同学可以通过<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/mydev.html\">小程序开发助手</a>打\n开体验版本来测试</li>\n<li>测试完成之后，合并 &#39;develop&#39; 代码至 &#39;master&#39; 分支，并提审上线，\n上线完成后删除无用分支，打上版本&#39;tag&#39;</li>\n</ol>\n<p>如何做小程序的持续集成</p>\n<p>准备工作</p>\n<ol>\n<li>操作系统为 &#39;windows&#39; 或者 &#39;macOS&#39; 的服务器</li>\n<li>服务端安装小程序开发者工具 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">下载地址</a></li>\n<li>准备一个通用打包构建角色微信号，并将改微信号添加到所有小程序的开发\n者中，提供开发者权限</li>\n</ol>\n<p>开发小程序的集成脚本（可以使用各种语言&#39;shell&#39;, &#39;js&#39;, &#39;python&#39;...）</p>\n<p>开发者工具根据提供了 <a href=\"https://developers.weixin.qq.com/\nminiprogram/dev/devtools/cli.html 和 [http](https://\ndevelopers.weixin.qq.com/miniprogram/dev/devtools/http.html\">cli</a>两种方\n式供外部调用来实现登录，预览，上传，下面介绍下 &#39;http&#39; 调用，&#39;cli&#39; 方式\n也很类似。\n开发者工具打开之后，本地会启动一个 &#39;http&#39; 服务，端口号在用户目录的 &#39;.ide&#39; 文件中，并且提供以下几个接口供开发者调用：</p>\n<p>  &#39;/open&#39; 打开指定路径项目\n  &#39;/login&#39; 登录\n  &#39;/preview&#39; 预览指定项目\n  &#39;/upload&#39; 上传指定项目\n  &#39;/test&#39; 提交项目</p>\n<p>根据提供的这些能力，我们可以编写出发布脚本(以下是简单示例)：</p>\n<p>js</p>\n<p>  function getPort () {\n    const home = os.homedir()\n    const portPath = process.platform === &#39;win32&#39; \n      ? path.join(home, &#39;/AppData/Local/微信web开发者工具/User Data/Default/.ide&#39;) \n      : path.join(home, &#39;/Library/Application Support/微信web开发\n      者工具/Default/.ide&#39;)\n    if (!fs.existsSync(portPath)) {\n      this.log.error(&#39;error&#39;)\n    } else {\n      const port = fs.readFileSync(portPath, { encoding: &#39;utf8&#39; })\n      return +port\n    }\n  }</p>\n<p>  function release() {\n      http.get(&#39;http://127.0.0.1:${port}/upload?projectpath=${encodeURIComponent(path)}&amp;version=${version}&amp;desc=${encodeURIComponent(message)}&#39;, res =&gt; {\n      const { statusCode } = res\n      if (statusCode === 200) {\n        // success\n      } else {\n        // fail\n      }\n    })\n  }</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 集成",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n不同公司使用的工具有一些区别，下面简单介绍一下常见的两种(一般是运维同学\n来执行，笔者不是特别熟悉，所以只是简单介绍)：</p>\n<p>  gitlab</p>\n<p>  安装<a href=\"https://docs.gitlab.com.cn/runner/register/\n  index.html\">gitlab runner</a>，搭配gitlab提供的CI\n  编写CI文件，这份文件会包含构建命令，将上一步编写的脚本集成进执行命令即\n  可</p>\n<p>  Jenkis</p>\n<p>  安装<a href=\"https://jenkins.io/download/\">Jenkis</a>后新建构建任务，配置任务\n  (指定代码仓库，分支，构建参数)，指明构建方式（可以选择shell，然后编写\n  shell来执行你的脚本）</p>\n<p>做完集成后，就可以优化上面介绍的开发流程，将&#39;打测试包&#39;和&#39;发布&#39;的权利交给\n测试同学，开发者安心的开发啦。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 总结",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>以上是笔者实践过的对小程序持续集成的整个流程，不管公司有没有接入持续集\n成，上面的方式都可以方便开发者自动化的预览，发布，也可以集成到工程化流程\n中，使用起来会更加方便。具体的实现可以参考[pandora-cli](https://\ngithub.com/pandolajs/pandora-cli)。</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 小程序架构",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<img src=\"https://user-images.githubusercontent.com/2350193/44563914-ff97c380-a792-11e8-8e77-6d0970891e24.png\" alt=\"architecture\"></p>\n<p>微信小程序的框架包含两部分 View 视图层、App Service逻辑层。View 层用来\n渲染页面结构，AppService 层用来逻辑处理、数据请求、接口调用。</p>\n<p>它们在<strong>两个线程里</strong>运行。</p>\n<p>它们在<strong>两个线程里</strong>运行。</p>\n<p>它们在<strong>两个线程里</strong>运行。</p>\n<p>视图层和逻辑层通过系统层的 JSBridage 进行通信，逻辑层把数据变化通知到视\n图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。</p>\n<p>补充</p>\n<p><img src=\"https://user-images.githubusercontent.com/2350193/44186238-db146980-a14a-11e8-8096-bcb8fa6d28b2.png\" alt=\"one-context\"></p>\n<p>视图层使用 WebView 渲染，iOS 中使用自带 WKWebView，在 Android 使用腾\n讯的 x5 内核（基于 Blink）运行。**</p>\n<p>逻辑层使用在 iOS 中使用自带的 JSCore 运行，在 Android 中使用腾讯的 \nx5 内核（基于 Blink）运行。**</p>\n<p>开发工具使用 nw.js 同时提供了视图层和逻辑层的运行环境。**</p>\n<p>在 Mac下 使用 js-beautify 对微信开发工具 @v1.02.1808080代码批量格式\n化：</p>\n<p>Shell\ncd /Applications/wechatwebdevtools.app/Contents/Resources/package.nw\nfind . -type f -name &#39;<em>.js&#39; -not -path &quot;./node_modules/</em>&quot; -not -path -exec js-beautify -r -s 2 -p -f &#39;{}&#39; \\;</p>\n<p>在 &#39;js/extensions/appservice/index.js&#39; 中找到：</p>\n<p>js\n  267: function(a, b, c) {\n    const d = c(8),\n      e = c(227),\n      f = c(226),\n      g = c(228),\n      h = c(229),\n      i = c(230);\n    var j = window.<strong>global.navigator.userAgent,\n      k = -1 !== j.indexOf(&#39;game&#39;);\n    k || i(), window.</strong>global.getNewWeixinJSBridge = (a) =&gt; {\n      const {\n        invoke: b\n      } = f(a), {\n        publish: c\n      } = g(a), {\n        subscribe: d,\n        triggerSubscribeEvent: i\n      } = h(a), {\n        on: j,\n        triggerOnEvent: k\n      } = e(a);\n      return {\n        invoke: b,\n        publish: c,\n        subscribe: d,\n        on: j,\n        get <strong>triggerOnEvent() {\n          return k\n        },\n        get </strong>triggerSubscribeEvent() {\n          return i\n        }\n      }\n    }, window.WeixinJSBridge = window.<strong>global.WeixinJSBridge = window.</strong>global.getNewWeixinJSBridge(&#39;global&#39;), window.<strong>global.WeixinJSBridgeMap = {\n      </strong>globalBridge: window.WeixinJSBridge\n    }, <strong>devtoolsConfig.online &amp;&amp; </strong>devtoolsConfig.autoTest &amp;&amp; setInterval(() =&gt; {\n      console.clear()\n    }, 1e4);\n    try {\n      var l = new window.__global.XMLHttpRequest;\n      l.responseType = &#39;text&#39;, l.open(&#39;GET&#39;, &#39;http://${window.location.host}/calibration/${Date.now()}&#39;, !0), l.send()\n    } catch (a) {}\n  }</p>\n<p>在 &#39;js/extensions/gamenaitveview/index.js&#39; 中找到：</p>\n<p>js\n  299: function(a, b, c) {\n    &#39;use strict&#39;;\n    Object.defineProperty(b, &#39;__esModule&#39;, {\n      value: !0\n    });\n    var d = c(242),\n      e = c(241),\n      f = c(243),\n      g = c(244);\n    window.WeixinJSBridge = {\n      on: d.a,\n      invoke: e.a,\n      publish: f.a,\n      subscribe: g.a\n    }\n  },</p>\n<p>在 &#39;js/extensions/pageframe/index.js &#39;中找到：</p>\n<p>js\n317: function(a, b, c) {\n    &#39;use strict&#39;;</p>\n<pre><code>function d() {\n  window.WeixinJSBridge = {\n    on: e.a,\n    invoke: f.a,\n    publish: g.a,\n    subscribe: h.a\n  }, k.a.init();\n  let a = document.createEvent(&#39;UIEvent&#39;);\n  a.initEvent(&#39;WeixinJSBridgeReady&#39;, !1, !1), document.dispatchEvent(a), i.a.init()\n}\nObject.defineProperty(b, &#39;__esModule&#39;, {\n  value: !0\n});\nvar e = c(254),\n  f = c(253),\n  g = c(255),\n  h = c(256),\n  i = c(86),\n  j = c(257),\n  k = c.n(j);\n&#39;complete&#39; === document.readyState ? d() : window.addEventListener(&#39;load&#39;, function() {\n  d()\n})\n</code></pre><p>  },</p>\n<p>我们都看到了 WeixinJSBridge 的定义。分别都有 &#39;on&#39;、&#39;invoke&#39;、\n&#39;publish&#39;、&#39;subscribe&#39; 这个几个关键方法。</p>\n<p>拿 &#39;invoke&#39; 举例，在 &#39;js/extensions/appservice/index.js &#39;\n中发现这\n段代码：</p>\n<p>js\nf (!r) p[b] = s, f.send({\n    command: &#39;APPSERVICE_INVOKE&#39;,\n    data: {\n        api: c,\n        args: e,\n        callbackID: b\n    }\n});</p>\n<p>在 &#39;js/extensions/pageframe/index.js&#39; 中发现这段代码：</p>\n<p>js\ng[d] = c, e.a.send({\n    command: &#39;WEBVIEW_INVOKE&#39;,\n    data: {\n        api: a,\n        args: b,\n        callbackID: d\n    }\n})</p>\n<p>简单的分析得知：字段 &#39;command&#39; 用来区分行为，&#39;invoke&#39;\n 用来调用 Native 的 Api。在不同的来源要使用不同的前缀。&#39;data&#39; \n 里面包含 Api 名，\n参数。另外 &#39;callbackID&#39; 指定接受回调的方法句柄。Appservice 和 \nWebview 使用的通信协议是一致的。</p>\n<p>我们不能在代码里使用 BOM 和 DOM 是因为根本没有，另一方面也不希望 JS \n代码直接操作视图。</p>\n<p>在开发工具中 &#39;remote-helper.js&#39; 中找到了这样的代码：</p>\n<p>js\nconst vm = require(&quot;vm&quot;);</p>\n<p>const vmGlobal = {\n    require: undefined,\n    eval: undefined,\n    process: undefined,\n    setTimeout(...args) {\n        //...省略代码\n        return timerCount;\n    },\n    clearTimeout(id) {\n        const timer = timers[id];\n        if (timer) {\n            clearTimeout(timer);\n            delete timers[id];\n        }\n    },\n    setInterval(...args) {\n        //...省略代码\n        return timerCount;\n    },\n    clearInterval(id) {\n        const timer = timers[id];\n        if (timer) {\n            clearInterval(timer);\n            delete timers[id];\n        }\n    },\n    console: (() =&gt; {\n        //...省略代码\n        return consoleClone;\n    })()\n};\nconst jsVm = vm.createContext(vmGlobal);\n// 省略大量代码...\nfunction loadCode(filePath, sourceURL, content) {\n    let ret;\n    try {\n        const script = typeof content === &#39;string&#39; ? content : fs.readFileSync(filePath, &#39;utf-8&#39;).toString();\n        ret = vm.runInContext(script, jsVm, {\n            filename: sourceURL,\n        });\n    }\n    catch (e) {\n        // something went wrong in user code\n        console.error(e);\n    }\n    return ret;\n}</p>\n<p>这样的分层设计显然是有意为之的，它的中间层完全控制了程序对于\n界面进行的操作， 同时对于传递的数据和响应时间也能做到监控。一方\n面程序的行为受到了极大限制， 另一方面微信可以确保他们对于小程序\n内容和体验有绝对的控制。</p>\n<p>这样的结构也说明了小程序的动画和绘图 API 被设计成生成一个最终\n对象而不是一步一步执行的样子， 原因就是  Json 格式的数据传递\n和解析相比与原生 API 都是损耗不菲的，如果频繁调用很可能损耗过\n多性能，进而影响用户体验。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 下载小程序完整包",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>![download](https://user-images.githubusercontent.com/2350193/44563929-13432a00-a793-11e8-976e-e3040deded70.png)</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 App Service - Life Cylce",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>![lifecycle](https://user-images.githubusercontent.com/2350193/44563935-1b02ce80-a793-11e8-88d1-a89b7c93d4da.png)</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 面试题1",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n动画需要绑定在 data 上，而绘图却不用。你觉得是为什么呢？**</p>\n<p>js\nvar context = wx.createCanvasContext(&#39;firstCanvas&#39;)</p>\n<p>context.setStrokeStyle(&quot;#00ff00&quot;)\ncontext.setLineWidth(5)\ncontext.rect(0, 0, 200, 200)\ncontext.stroke()\ncontext.setStrokeStyle(&quot;#ff0000&quot;)\ncontext.setLineWidth(2)\ncontext.moveTo(160, 100)\ncontext.arc(100, 100, 60, 0, 2 <em> Math.PI, true)\ncontext.moveTo(140, 100)\ncontext.arc(100, 100, 40, 0, Math.PI, false)\ncontext.moveTo(85, 80)\ncontext.arc(80, 80, 5, 0, 2 </em> Math.PI, true)\ncontext.moveTo(125, 80)\ncontext.arc(120, 80, 5, 0, 2 * Math.PI, true)\ncontext.stroke()\ncontext.draw()</p>\n<p>Js\nPage({\n  data: {\n    animationData: {}\n  },\n  onShow: function(){\n    var animation = wx.createAnimation({\n      duration: 1000,\n      timingFunction: &#39;ease&#39;,\n    })</p>\n<pre><code>this.animation = animation\n\nanimation.scale(2,2).rotate(45).step()\n\nthis.setData({\n  animationData:animation.export()\n})\n</code></pre><p>  }\n})\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 面试题2",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n小程序的 Http Rquest 请求是不是用的浏览器 Fetch API?**</p>\n<p>知识点考察</p>\n<p>知道 Request 是由 Native 实现的\nJSCore 是不带 Http Request、Websocket、Storage等功能的，那是 Webkit 带的\n小程序的 &#39;wx.request&#39; 是不是遵循 fetch API 规范实现的呢？答案，\n显然不是。因为没有 &#39;Promise&#39;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 View - WXML",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nWXML（WeiXin Markup Language）</p>\n<p>  支持数据绑定\n  支持逻辑算术、运算\n  支持模板、引用\n  支持添加事件（bindtap）</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-e0a34d00890cab73c79d137edd1377a3_hd.jpg\" alt=\"WXML\"></p>\n<p>Wxml编译器：Wcc  把 Wxml文件 转为 JS</p>\n<p>执行方式：Wcc index.wxml</p>\n<p>使用 Virtual DOM，进行局部更新**\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 View - WXSS",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 尺寸单位 rpx",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nrpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为 \n750rpx。公式：</p>\n<p>Js\nconst dsWidth = 750</p>\n<p>export const screenHeightOfRpx = function () {\n  return 750 / env.screenWidth * env.screenHeight\n}</p>\n<p>export const rpxToPx = function (rpx) {\n  return env.screenWidth / 750 * rpx\n}</p>\n<p>export const pxToRpx = function (px) {\n  return 750 / env.screenWidth * px\n}</p>\n<p>| 设备         | rpx换算px (屏幕宽度/750) | px换算rpx (750/屏幕宽度) |\n| ------------ | ------------------------ | ------------------------ |\n| iPhone5      | 1rpx = 0.42px            | 1px = 2.34rpx            |\n| iPhone6      | 1rpx = 0.5px             | 1px = 2rpx               |\n| iPhone6 Plus | 1rpx = 0.552px           | 1px = 1.81rpx            |</p>\n<p>可以了解一下 <a href=\"https://github.com/mpvue/px2rpx-loader\">pr2rpx-loader </a>这个库。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 样式导入",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用 &#39;@import &#39;语句可以导入外联样式表，&#39;@import &#39;后跟需要导入的外联样\n式表的相对路径，用 &#39;;&#39; 表示语句结束。</p>\n<p>内联样式</p>\n<p>静态的样式统一写到 class 中。style 接收动态的样式，在运行时会进行解析，\n<strong>请尽量避免将静态的样式写进 style 中，以免影响渲染速度</strong>。</p>\n<p>全局样式与局部样式</p>\n<p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss \n文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相\n同的选择器。</p>\n<p>iconfont\n截止20180810**</p>\n<p>小程序未来有计划支持字体。参考<a href=\"http://daxue.qq.com/content/content/id/4113\">微信公开课</a>。</p>\n<p>小程序开发与平时 Web开发类似，也可以使用字体图标，但是 &#39;src:url()&#39; 无\n论本地还是远程地址都不行，base64 值则都是可以显示的。</p>\n<p>将 ttf 文件转换成 base64。打开这个平台 transfonter.org/。点击 \nAdd fonts 按钮，加载ttf格式的那个文件。将下边的 base64 encode 改为 on。点\n击 Convert 按钮进行转换，转换后点击 download 下载。</p>\n<p>复制下载的压缩文件中的 stylesheet.css 的内容到 font.wxss ，并且将 \nicomoon 中的 style.css 除了 @font-face 所有的代码也复制到 font.wxss \n并将i选择器换成 .iconfont，最后：</p>\n<p>html</p>\n<p><text class=\"iconfont icon-home\" style=\"font-size:50px;color:red\"></text>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 View - Component",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n小程序提供了一系列组件用于开发业务功能，按照功能与HTML5的标签进行对比如\n下：</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-480318a5bae828e51e8f05c1ea1921fa_hd.jpg\" alt=\"Component\"></p>\n<p>小程序的组件基于Web Component标准</p>\n<p>使用Polymer框架实现Web Component\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.0 View - Native Component",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n目前Native实现的组件有</p>\n<p>  canvas</p>\n<p>  video</p>\n<p>  map</p>\n<p>  textarea</p>\n<pre><code>![Native Component](https://pic1.zhimg.com/80/v2-f0e838350357658699aeeed7dad74048_hd.jpg)\n</code></pre><p>  Native组件层在 WebView 层之上。这目前带来了一些问题：\n  Native 实现的组件会遮挡其他组件\n  WebView 渲染出来的视图在滚动时，Native 实现的组件需要更新位置，\n  这会带来性能问题，在安卓机器上比较明显\n  小程序原生组件 &#39;cover-view&#39; 可以覆盖 canvas video 等，但是也有一\n  下弊端，比如在 canvas 上覆盖 &#39;cover-view&#39;，就会发现坐标系不统一处理\n  麻烦\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.0 目前小程序的问题或限制",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n截止20180810**</p>\n<p>包含但不限于：</p>\n<p>  小程序仍然使用 WebView 渲染，并非原生渲染。（部分原生）</p>\n<p>  服务端接口返回的头无法执行，比如：Set-Cookie。</p>\n<p>  依赖浏览器环境的 JS 库不能使用。</p>\n<p>  不能使用 npm，但是可以自搭构建工具或者使用 mpvue。（未来官方有计\n  划支持）</p>\n<p>  不能使用 ES7，可以自己用babel+webpack自搭或者使用 mpvue。</p>\n<p>  不支持使用自己的字体（未来官方计划支持）。</p>\n<p>  可以用 base64 的方式来使用 iconfont。</p>\n<p>  小程序不能发朋友圈（可以通过保存图片到本地，发图片到朋友前。二维码\n  可以使用<a href=\"https://developers.weixin.qq.com/miniprogram/dev/\n  api/qrcode.html\">B接口</a>）。</p>\n<p>  获取<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/qrcode.html\">二维码/小程序</a>接口的限制。</p>\n<pre><code>B 接口 scene 最大32个可见字符。\nAC 接口总共生成的码数量限制为 100,000，请谨慎调用。\n真机扫描二维码只能跳转到线上版本，所以测试环境下只可通过开发者工\n具的通过二维码编译进行调试。\n没有发布到线上版本的小程序页面路径会导致生成二维码失败，需要先将\n添加了页面的小程序发布到线上版本。\n</code></pre><p>  小程序推送只能使用“服务通知” 而且需要用户主动触发提交 formId，\n  formId 只有7天有效期。（现在的做法是在每个页面都放入form并且隐藏以此\n  获取更多的 formId。后端使用原则为：优先使用有效期最短的）</p>\n<p>  小程序大小限制 2M，分包总计不超过 8M</p>\n<p>  转发（分享）小程序不能拿到成功结果，原来可以。<a href=\"https://\n  mp.weixin.qq.com/s?__biz=MjM5NDAwMTA2MA==&amp;mid=2695730124&amp;idx=1&amp;\n  sn=666a448b047d657350de7684798f48d3&amp;\n  chksm=83d74a07b4a0c311569a748f4d11a5ebcce3ba8f6bd5a4b3183a4fea0b\n  3442634a1c71d3cdd0&amp;scene=21#wechat_redirect\">链接</a>（小游戏造的孽）</p>\n<p>  拿到相同的 unionId 必须绑在同一个开放平台下。开放平台绑定限制：</p>\n<pre><code>50个移动应用\n10个网站\n50个同主体公众号\n5个不同主体公众号\n50个同主体小程序\n5个不同主体小程序\n</code></pre><p>  公众号关联小程序，<a href=\"https://developers.weixin.qq.com/miniprogram/introduction/#%E5%85%AC%E4%BC%97%E5%8F%B7%E5%85%B3%E8%81%94%E5%B0%8F%E7%A8%8B%E5%BA%8F\">链接</a></p>\n<pre><code>所有公众号都可以关联小程序。\n一个公众号可关联10个同主体的小程序，3个不同主体的小程序。\n一个小程序可关联500个公众号。\n公众号一个月可新增关联小程序13次，小程序一个月可新增关联500次。\n</code></pre><p>  一个公众号关联的10个同主体小程序和3个非同主体小程序可以互相跳转</p>\n<p>  品牌搜索不支持金融、医疗</p>\n<p>  小程序授权需要用户主动点击</p>\n<p>  小程序不提供测试 <strong>access_token</strong></p>\n<p>  安卓系统下，小程序授权获取用户信息之后，删除小程序再重新获取，\n  并重新授权，得到旧签名，导致第一次授权失败</p>\n<p>  开发者工具上，授权获取用户信息之后，如果清缓存选择全部清除，则即使\n  使用了wx.checkSession，并且在session_key有效期内，授权获取用户信息\n  也会得到新的session_key\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "23.0 小程序HTTP2支持情况",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nHTTP2支持情况：模拟器与真机均不支持\n为了验证小程序对HTTP的支持适配情况，我找了两个服务器做测试，一个是网上\n搜索到支持HTTP2的服务器，一个是我本地起的一个HTTP2服务器。测试中所有请\n求方法均使用 &#39;wx.request&#39;。</p>\n<ol>\n<li>网上支持HTTP2的服务器：&#39;HTTPs://www.snel.com:443&#39;</li>\n<li><p>在Chrome上查看该服务器为 HTTP2</p>\n<p> <img src=\"https://user-images.githubusercontent.com/17850400/44331323-d11c9e80-a49b-11e8-9a52-5be0e17a016b.jpeg\" alt=\"WechatIMG11\"></p>\n</li>\n<li><p>在模拟器上请求该接口，&#39;请求头&#39;的HTTP版本为HTTP1.1，模拟器不支持\nHTTP2</p>\n<p> <img src=\"https://user-images.githubusercontent.com/17850400/44331316-cfeb7180-a49b-11e8-83fb-f18ad4ff0bab.jpeg\" alt=\"WechatIMG12\"></p>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>由于小程序线上环境需要在项目管理里配置请求域名，而这个域名不是我们\n需要的请求域名，没必要浪费一个域名位置，所以打开不验证域名，TSL 等选\n项请求该接口，通过抓包工具表现与模拟器相同</p>\n<p> <img src=\"https://user-images.githubusercontent.com/17850400/44331317-d0840800-a49b-11e8-854d-20c704b5da56.png\" alt=\"WechatIMG14\"></p>\n</li>\n</ol>\n<p>HTTP2服务器需要对小程序做兼容性适配\n由上可以看出，在真机与模拟器都不支持 HTTP2，但是都是成功请求的，并且 &#39;\n响应头&#39; 里的 HTTP 版本都变成了HTTP1.1 版本，说明服务器对 HTTP1.1 做了\n兼容性适配。</p>\n<ol>\n<li><p>本地新启一个 node 服务器，返回 JSON 为请求的 HTTP 版本</p>\n<p> <img src=\"https://user-images.githubusercontent.com/17850400/44331322-d0840800-a49b-11e8-9f4b-85a31458d32d.jpeg\" alt=\"WechatIMG16\"></p>\n</li>\n<li><p>如果服务器只支持 HTTP2，在模拟器请求时发生了一个 &#39;ALPN&#39; 协议的错\n误。并且提醒使用适配 HTTP1</p>\n<p> <img src=\"https://user-images.githubusercontent.com/17850400/44331314-cfeb7180-a49b-11e8-98a7-2baff8de63b4.jpeg\" alt=\"WechatIMG8\"></p>\n</li>\n<li><p>当把服务器的 &#39;allowHTTP1&#39;，设置为 &#39;true&#39;，并在请求时处理相关相关\n请求参数后，模拟器能正常访问接口，并打印出对应的 HTTP 请求版本</p>\n<p> <img src=\"https://user-images.githubusercontent.com/17850400/44331318-d0840800-a49b-11e8-9931-a95c1fe2b0c4.jpeg\" alt=\"WechatIMG15\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "24.0 授权获取用户信息流程",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<img src=\"https://user-images.githubusercontent.com/35895755/44379940-fa403c00-a53a-11e8-9165-21b217496aad.png\" width=\"70%\" height=\"70%\" /></p>\n<p>  session_key 有有效期，有效期并没有被告知开发者，只知道用户越频繁使\n  用小程序，session_key 有效期越长\n  在调用 wx.login 时会直接更新 session_key，导致旧 session_key 失\n  效\n  小程序内先调用 wx.checkSession 检查登录态，并保证没有过期的 \n  session_key 不会被更新，再调用 wx.login 获取 code。接着用户授权小程\n  序获取用户信息，小程序拿到加密后的用户数据，把加密数据和 code 传给后\n  端服务。后端通过 code 拿到 session_key 并解密数据，将解密后的用户信\n  息返回给小程序</p>\n<p>面试题：先授权获取用户信息再 login 会发生什么？**</p>\n<p><img src=\"https://user-images.githubusercontent.com/35895755/44244965-268d4d00-a209-11e8-8ef4-b80cc7a78af7.png\" width=\"70%\" height=\"70%\" />\n<img src=\"https://user-images.githubusercontent.com/35895755/44379952-0af0b200-a53b-11e8-86be-640bf651bc9e.png\" width=\"50%\" height=\"50%\" /></p>\n<p>用户授权时，开放平台使用旧的 session_key 对用户信息进行加密。调用 \nwx.login 重新登录，会刷新 session_key，这时后端服务从开放平台获取到新 \nsession_key，但是无法对老 session_key 加密过的数据解密，用户信息获取失\n败\n在用户信息授权之前先调用 wx.checkSession 呢？wx.checkSession 检查\n登录态，并且保证 wx.login 不会刷新 session_key，从而让后端服务正确解\n密数据。但是这里存在一个问题，如果小程序较长时间不用导致 session_key \n过期，则 wx.login 必定会重新生成 session_key，从而再一次导致用户信息\n解密失败。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "25.0 性能优化",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有\n用。**</p>\n<p>我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有\n用。**</p>\n<p>我们知道view部分是运行在webview上的，所以前端领域的大多数优化方式都有\n用。**</p>\n<p>加载优化</p>\n<p><img src=\"https://user-images.githubusercontent.com/2350193/44184904-d8624600-a143-11e8-8ab9-c932573bd243.png\" alt=\"preload\"></p>\n<p>代码包的大小是最直接影响小程序加载启动速度的因素。代码包越大不仅下载速\n度时间长，业务代码注入时间也会变长。所以最好的优化方式就是减少代码包的\n大小。</p>\n<p><img src=\"https://user-images.githubusercontent.com/2350193/44184987-4c9ce980-a144-11e8-9f28-764209b37341.png\" alt=\"load-time-series\"></p>\n<p>小程序加载的三个阶段的表示。</p>\n<p>优化方式**</p>\n<p>  代码压缩。\n  及时清理无用代码和资源文件。\n  减少代码包中的图片等资源文件的大小和数量。\n  分包加载。</p>\n<p>首屏加载的体验优化建议**</p>\n<p>  提前请求: 异步数据请求不需要等待页面渲染完成。\n  利用缓存: 利用 storage API 对异步请求数据进行缓存，二次启动时先\n  利用缓存数据渲染页面，在进行后台更新。\n  避免白屏：先展示页面骨架页和基础内容。\n  及时反馈：即时地对需要用户等待的交互操作给出反馈，避免用户以为小程\n  序无响应。</p>\n<p>使用分包加载优化\n<img src=\"https://user-images.githubusercontent.com/2350193/44185607-2298f680-a147-11e8-8440-24ca42033623.png\" alt=\"sub-package\"></p>\n<p>在构建小程序分包项目时，构建会输出一个或多个功能的分包，其中每个分包小\n程序必定含有一个主包，所谓的主包，即放置默认启动页面/TabBar 页面，以及\n一些所有分包都需用到公共资源/JS 脚本，而分包则是根据开发者的配置进行划\n分。</p>\n<p>在小程序启动时，默认会下载主包并启动主包内页面，如果用户需要打开分包内\n某个页面，客户端会把对应分包下载下来，下载完成后再进行展示。</p>\n<p>优点：</p>\n<p>对开发者而言，能使小程序有更大的代码体积，承载更多的功能与服务\n对用户而言，可以更快地打开小程序，同时在不影响启动速度前提下使用更多功能</p>\n<p>限制：</p>\n<p>整个小程序所有分包大小不超过 8M\n单个分包/主包大小不能超过 2M</p>\n<p>原生分包加载的配置**\n假设支持分包的小程序目录结构如下：</p>\n<p>├── app.js\n├── app.json\n├── app.wxss\n├── packageA\n│   └── pages\n│       ├── cat\n│       └── dog\n├── packageB\n│   └── pages\n│       ├── apple\n│       └── banana\n├── pages\n│   ├── index\n│   └── logs\n└── utils</p>\n<p>开发者通过在 app.json subPackages 字段声明项目分包结构：</p>\n<p>{\n  &quot;pages&quot;:[\n    &quot;pages/index&quot;,\n    &quot;pages/logs&quot;\n  ],\n  &quot;subPackages&quot;: [\n    {\n      &quot;root&quot;: &quot;packageA&quot;,\n      &quot;pages&quot;: [\n        &quot;pages/cat&quot;,\n        &quot;pages/dog&quot;\n      ]\n    }, {\n      &quot;root&quot;: &quot;packageB&quot;,\n      &quot;pages&quot;: [\n        &quot;pages/apple&quot;,\n        &quot;pages/banana&quot;\n      ]\n    }\n  ]\n}</p>\n<p>分包原则**</p>\n<ul>\n<li>声明 subPackages 后，将按 subPackages 配置路径进行打包，\nsubPackages 配置路径外的目录将被打包到 app（主包） 中</li>\n<li>app（主包）也可以有自己的 pages（即最外层的 pages 字段</li>\n<li>subPackage 的根目录不能是另外一个 subPackage 内的子目录</li>\n<li>首页的 TAB 页面必须在 app（主包）内</li>\n</ul>\n<p>引用原则**</p>\n<ul>\n<li>packageA 无法 require packageB JS 文件，但可以 require app、自己 package 内的 JS 文件</li>\n<li>packageA 无法 import packageB 的 template，但可以 require app、自己 package 内的 template</li>\n<li>packageA 无法使用 packageB 的资源，但可以使用 app、自己 package 内的资源</li>\n</ul>\n<p>官方即将推出**\n分包预加载</p>\n<p><img src=\"https://user-images.githubusercontent.com/2350193/44185655-63910b00-a147-11e8-9987-40f235ae08e9.png\" alt=\"preload-sub-package\"></p>\n<p>独立分包</p>\n<p><img src=\"https://user-images.githubusercontent.com/2350193/44185690-96d39a00-a147-11e8-9647-bd1cbc017f5a.png\" alt=\"single-sub-package\"></p>\n<p>渲染性能优化\n<img src=\"https://user-images.githubusercontent.com/2350193/44185879-af907f80-a148-11e8-8dcb-22aadd4e49a6.png\" alt=\"render\">\n  每次 setData 的调用都是一次进程间通信过程，通信开销与 setData 的\n  数据量正相关。</p>\n<p>  setData 会引发视图层页面内容的更新，这一耗时操作一定时间中会阻塞用\n  户交互。</p>\n<p>  <strong>setData 是小程序开发使用最频繁，也是最容易引发性能问题的。</strong></p>\n<p>避免不当使用 setData**</p>\n<p>  使用 data 在方法间共享数据，<strong>可能增加 setData 传输的数据量</strong>。\n  data 应仅包括与页面渲染相关的数据。\n  使用 setData 传输大量数据，**通讯耗时与数据正相关，页面更新延迟可能</p>\n<p>  造成页面更新开销增加<strong>。仅传输页面中发生变化的数据，使用 setData 的特\n  殊 key 实现局部更新。\n  短时间内频繁调用 setData，</strong>操作卡顿，交互延迟，阻塞通信，页面渲染\n  延迟<strong>。避免不必要的 setData，对连续的setData调用进行合并。\n  在后台页面进行 setData，</strong>抢占前台页面的渲染资源**。页面切入后台后\n  的 setData 调用，延迟到页面重新展示时执行。</p>\n<p><img src=\"https://user-images.githubusercontent.com/2350193/44186238-db146980-a14a-11e8-8096-bcb8fa6d28b2.png\" alt=\"one-context\"></p>\n<p>避免不当使用onPageScroll**</p>\n<p>  只在有必要的时候监听 pageScroll 事件。不监听，则不会派发。\n  避免在 onPageScroll 中执行复杂逻辑\n  避免在 onPageScroll 中频繁调用 setData\n  避免滑动时频繁查询节点信息（SelectQuery）用以判断是否显示，部分场景\n  建议使用节点布局橡胶状态监听（inersectionObserver）替代</p>\n<p>使用自定义组件**</p>\n<p>在需要频繁更新的场景下，自定义组件的更新只在组件内部进行，不受页面其他部\n分内容复杂性影响。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "26.0 自定义组件2.0",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n小程序的几个页面间，存在一些相同或是类似的区域，这时候可以把这些区域逻辑\n封装成一个自定义组件，代码就可以重用，或者对于比较独立逻辑，也可以把它封\n装成一个自定义组件，也就是微信去年发布的自定义组件，它让代码得到复用、减\n少代码量，更方便模块化，优化代码架构组织，也使得模块清晰，后期更好地维\n护，从而保证更好的性能。</p>\n<p>但微信打算在原来的基础上推出的自定义组件 2.0，它将拥有更高级的性能：</p>\n<p>  usingComponents 计划支持全局定义和通配符定义：这意味着不用在每个页\n  面反复定义，可以批量导入目录下的所有自定义组件\n  计划支持类似 Computed 和 watch 的功能，它能使代码逻辑更清晰\n  计划支持 Component 构造器插件，在实例化一个自定义组件的时候，允许你\n  在构造器的这个阶段，加入一些逻辑，方便进行一些扩展，甚至是可以扩展成 \n  Vue 的语法\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "27.0 npm支持",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>目前小程序开发的痛点是：开源组件要手动复制到项目，后续更新组件也需要手动\n操作。不久的将来，小程序将支持npm包管理，有了这个之后，想要引入一些开源\n的项目就变得很简单了，只要在项目里面声明，然后用简单的命令安装，就可以使\n用了。</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "28.0 官方自定义组件",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n微信小程序团队表示，他们在考虑推出一些官方自定义组件，为什么不内置到基础\n库里呢？因为内置组件要提供给开发者，这个组件一定是开发者很难实现或者是无\n法实现的一个能力。所以他们更倾向于封装成自定义组件，想基于这些内置组件\n里，封装一些比较常见的、交互逻辑比较复杂的组件给大家使用，让大家更容易开\n发。类似弹幕组件，开发者就不用关注弹幕怎么飘，可以节省开发者的开发成本。</p>\n<p>同时，他们也想给开发者提供一些规范和一些模板，让开发者设计出好用的自定义\n组件，更好地被大家去使用。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "29.0 添加体验评分",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n当小程序加载太慢时，可能会导致用户的流失，而小程序的开发者可能会面临着不\n知道如何定位问题或不知如何解决问题的困境。</p>\n<p>为此，小程序即将推出一个体验评分的功能，这是为了帮助开发者可以检查出小程\n序有一些什么体验不好的地方，也会同时给出一份优化的指引建议。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "30.0 原生组件同层渲染",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n小程序在最初的技术选型时，引入了原生组件的概念，因为原生组件可以使小程序\n的能力更加丰富，比如地图、音视频的能力，但是原生组件是由客户端原生渲染\n的，导致了原生组件的层级是最高的，开发者很容易遇到打开调试的问题，发现视\n频组件挡在了 vConsole 上。</p>\n<p>为了解决这个问题，当时微信做了一个过渡的方案：cover-view。cover-view可\n以覆盖在原生组件之上，这一套方案解决了大部分的需求场景。比如说视频组件上\n很多的按钮、标题甚至还有动画的弹幕，这些都是用 cover-view 去实现的，但\n它还是没有完全解决原生组件的开发体验问题，因为 cover-view 有一些限制：</p>\n<p>  无法与其他组件混在一起渲染\n  没有完整的触摸事件\n  cover-view 对样式的表现有差异\n  cover-view 对样式的支持度不够高</p>\n<p>因此微信决定将用同层渲染取代 cover-view，它能像普通组件一样使用，原生组\n件的层级不再是最高，而是和其他的非原生组件在同一层级渲染，可完全由 \nz-index 控制，可完全支持触摸事件。</p>\n<p>微信表示，同层渲染在 iOS 平台小程序上已经开始内测，会很快开放给开发者，\nAndroid 平台已经取得突破性进展，目前正在做一轮封装的工作，开放指日可\n待。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "31.0 wepy vs mpvue",
            "update_at" : 1556488166377
          },
          "x32" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n数据流管理\n相比传统的小程序框架，这个一直是我们作为资深开发者比较期望去解决的，在 \nWeb 开发中，随着 Flux、Redux、Vuex 等多个数据流工具出现，我们也期望在\n业务复杂的小程序中使用。</p>\n<p>  WePY 默认支持 Redux，在脚手架生成项目的时候可以内置</p>\n<p>  Mpvue 作为 Vue 的移植版本，当然支持 Vuex，同样在脚手架生成项目的时候\n  可以内置</p>\n<p>组件化\n如果你和我们一样，经历了从无到有的小程序业务开发，建议阅读【小程序的组件\n化开发】章节，进行官方语法的组件库开发（从基础库 1.6.3 开始，官方提供了\n组件化解决方案）。</p>\n<p>  WePY 类似 Vue 实现了单文件组件，最大的差别是文件后缀 .wpy，只是写法\n  上会有差异，具体可以查看【主流框架使用案例 1：WePY】章节，学习起来有\n  一定成本，不过也会很快适应：</p>\n<p>export default class Index extends wepy.page {}</p>\n<p>  Mpvue 作为 Vue 的移植版本，支持单文件组件，template、script 和 \n  style 都在一个 .vue 文件中，和 vue 的写法类似，所以对 Vue 开发熟悉\n  的同学会比较适应。</p>\n<p>工程化\n所有的小程序开发依赖官方提供的开发者工具。开发者工具简单直观，对调试小程\n序很有帮助，现在也支持腾讯云（目前我们还没有使用，但是对新的一些开发者还\n是有帮助的），可以申请测试报告查看小程序在真实的移动设备上运行性能和运行\n效果，但是它本身没有类似前端工程化中的概念和工具。</p>\n<p>  wepy 内置了构建，通过 wepy init 命令初始化项目，大致流程如下：</p>\n<p>  wepy-cli 会判断模版是在远程仓库还是在本地，如果在本地则会立即跳到\n  第 3 步，反之继续进行。\n  会从远程仓库下载模版，并保存到本地。\n  询问开发者 Project name 等问题，依据开发者的回答，创建项目。</p>\n<p>  mpvue 沿用了 vue 中推崇的 webpack 作为构建工具，但同时提供了一些自\n  己的插件以及配置文件的一些修改，比如：</p>\n<p>  不再需要 html-webpack-plugin\n  基于 webpack-dev-middleware 修改成 webpack-dev-middleware-hard-disk\n  最大的变化是基于 webpack-loader 修改成 mpvue-loader\n  但是配置方式还是类似，分环境配置文件，最终都会编译成小程序支持的目\n  录结构和文件后缀。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x32",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "32",
            "time" : 1555228371611,
            "title" : "32.0 综合比较",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>| 对比\\框架 | 微信小程序     | mpvue             | wepy            |\n| --------- | -------------- | ----------------- | --------------- |\n| 语法规范  | 小程序开发规范 | vue.js            | 类vue.js        |\n| 标签集合  | 小程序         | htm l + 小程序    | 小程序          |\n| 样式规范  | wxss           | sass,less,postcss | sass,less,styus |\n| 组件化    | 基础库@2.2.3自定义组件   | vue规范           | 自定义组件规范  |\n| 多段复用  | 不可复用       | 支持h5            | 支持h5          |\n| 自动构建  | 无自动构建     | webpack           | 框架内置        |\n| 上手成本  | 全新学习       | vue 学习          | vue 和 wepy     |\n| 数据管理  | 不支持         | vuex              | redux           |</code></pre>",
              "type" : "Html"
            },
            "id" : "x33",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "33.0 选型的个人看法",
            "update_at" : 1556488166377
          },
          "x34" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n先说结论：选择 mpvue。</p>\n<p>wepy vs mpvue。</p>\n<p>理由：</p>\n<p>工程化**\n原生开发因为不带工程化，诸如NPM包（未来会引入）、ES7、图片压缩、\nPostCss、pug、ESLint等等不能用。如果自己要搭工程化，不如直接使用wepy\n或mpvue。mpvue和wepy都可以和小程序原生开发混写。[参考mpvue-echart]\n(#https://github.com/mpvue/examples/tree/master/echarts)，<a href=\"https://github.com/Tencent/wepy/issues/1560\">参考\nwepy</a>。\n而问题在于wepy没有引入webpack(wepy@2.0.x依然没有引入)，以上说的这些东\n西都要造轮子（作者造或自己造）。没有引入 Webpack 是一个重大的硬伤。社区\n维护的成熟 Webpack 显然更稳定，轮子更多。</p>\n<p>维护**\nwepy 也是社区维护的，是官方的？其实 wepy 的主要开发者只有作者一人，附\n上一个<a href=\"https://github.com/Tencent/wepy/graphs/\ncontributors\">contrubutors</a>链接。另外被官方招安了也是后来的事，再说腾讯要有精力帮着\n一起维护好 wepy，为什么不花精力在小程序原生开发上呢？再来看看 mpvue，\n是美团一个前端小组维护的。</p>\n<p>学习成本**\nVue 的学习曲线比较平缓。mpvue 是 Vue的子集。所以 mpvue 的学习成本会低\n于 wepy。尤其是之前技术栈有学过用过 Vue 的。</p>\n<p>未来规划**\nmpvue 已经支持 web 和小程序。因为 mpvue 基于AST，所以未来可以支持支付\n宝小程序和快应用。他们也是有这样的规划。</p>\n<p>请在需求池下面自己找\n<img src=\"https://user-images.githubusercontent.com/2350193/44379522-f9a6a600-a538-11e8-8939-273ace7871ae.jpg\" alt=\"mpvue-feature\"></p>\n<p>坑**\n两者都有各自的坑。但是我觉得有一些wepy的坑是没法容忍的。比如<a href=\"https://github.com/Tencent/\nwepy/issues/1231\">repeat组建\n里面用computed得到的列表全是同一套数据</a>而且1.x是没法解决的。\nwepy和mpvue我都开发过完整小程序的体验下，我觉得wepy的坑更多，而且wepy\n有些坑碍于架构设计没办法解决。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x34",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "34",
            "time" : 1555228371611,
            "title" : "34.0 mpvue",
            "update_at" : 1556488166377
          },
          "x35" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n Vue.js 小程序版, fork 自 vuejs/vue@2.4.1，保留了 vue runtime 能力，\n 添加了小程序平台的支持。\n &#39;mpvue&#39; 是一个使用 &#39;Vue.js&#39; 开发小程序的前端框架。框架基于 &#39;Vue.js&#39; \n 核心，&#39;mpvue&#39; 修改了 &#39;Vue.js&#39; 的 runtime 和 compiler 实现，使其可以\n 运行在小程序环境中，从而为小程序开发引入了整套 &#39;Vue.js&#39; 开发体验。</p>\n<p>框架原理</p>\n<p>两个大方向**</p>\n<p>  通过&#39;mpvue&#39;提供 mp 的 runtime 适配小程序\n  通过&#39;mpvue-loader&#39;产出微信小程序所需要的文件结构和模块内容。</p>\n<p>七个具体问题**</p>\n<p>要了解 mpvue 原理必然要了解 Vue 原理，这是大前提。但是要讲清楚 Vue 原\n理需要花费大量的篇幅，不如参考<a href=\"https://github.com/answershuto/learnVue\">learnVue</a>。</p>\n<p>现在假设您对 Vue 原理有个大概的了解。</p>\n<p>由于 Vue 使用了 Virtual DOM，所以 Virtual DOM 可以在任何支持 \nJavaScript 语言的平台上操作，譬如说目前 Vue 支持浏览器平台或 weex，也\n可以是 mp(小程序)。那么最后 Virtual DOM 如何映射到真实的 DOM 节点上\n呢？vue为平台做了一层适配层，浏览器平台见 [runtime/node-ops.js]\n(https://github.com/Meituan-Dianping/mpvue/blob/master/src/\nplatforms/web/runtime/node-ops.js)、weex平台见<a href=\"https://github.com/Meituan-Dianping/mpvue/blob/\nmaster/src/platforms/weex/runtime/node-ops.js\">runtime/\nnode-ops.js</a>，小程序见<a href=\"https://github.com/Meituan-Dianping/mpvue/blob/\nmaster/src/platforms/mp/runtime/node-ops.js\">runtime/\nnode-ops.js</a>。不同平台之间通过适配层\n对外提供相同的接口，Virtual DOM进行操作Real DOM节点的时候，只需要调用\n这些适配层的接口即可，而内部实现则不需要关心，它会根据平台的改变而改变。</p>\n<p>所以思路肯定是往增加一个 mp 平台的 runtime 方向走。但问题是小程序不能\n操作 DOM，所以 mp 下的&#39;node-ops.js&#39; 里面的实现都是直接 &#39;return obj&#39;。</p>\n<p>新 Virtual DOM 和旧 Virtual DOM 之间需要做一个 patch，找出 diff。\npatch完了之后的 diff 怎么更新视图，也就是如何给这些 DOM 加入 attr、\nclass、style 等 DOM 属性呢？ Vue 中有 nextTick 的概念用以更新视图，\nmpvue这块对于小程序的 &#39;setData&#39; 应该怎么处理呢？</p>\n<p>另外个问题在于小程序的 Virtual DOM 怎么生成？也就是怎么将 template 编\n译成&#39;render function&#39;。这当中还涉及到[运行时-编译器-vs-只包含运行时]\n(https://cn.vuejs.org/v2/guide/\ninstallation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E\n5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6)\n，显然如果要提高性能、减少包大小、输出 wxml、mpvue 也要提供预编译的能\n力。因为要预输出 wxml 且没法动态改变 DOM，所以动态组件，自定义 \nrender，和&#39;<script type=\"text/x-template\">&#39; 字符串模版等都不支持(<a href=\"http://mpvue.com/mpvue/#_15\">参\n考</a>)。</p>\n<p>另外还有一些其他问题，最后总结一下</p>\n<p>  1.如何预编译生成&#39;render function&#39;\n  2.如何预编译生成 wxml，wxss，wxs\n  3.如何 patch 出 diff\n  4.如何更新视图\n  5.如何建立小程序事件代理机制，在事件代理函数中触发与之对应的vue组件\n  事件响应\n  6.如何建立vue实例与小程序 Page 实例关联\n  7.如何建立小程序和vue生命周期映射关系，能在小程序生命周期中触发vue4生命周期</p>\n<p><a href=\"(https://github.com/Meituan-Dianping/mpvue/tree/master/src/platforms/mp\">platform/mp的目录结构</a>)**\n.\n├── compiler //解决问题1，mpvue-template-compiler源码部分\n├── runtime //解决问题3 4 5 6 7\n├── util //工具方法\n├── entry-compiler.js //mpvue-template-compiler的入口。\npackage.json相关命令会自动生成mpvue-template-compiler这个package。\n├── entry-runtime.js //对外提供Vue对象，当然是mpvue\n└── join-code-in-build.js //编译出SDK时的修复</p>\n<p>后面的内容逐步解答这几个问题，也就弄明白了原理**\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x35",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "35",
            "time" : 1555228371611,
            "title" : "35.0 mpvue-loader",
            "update_at" : 1556488166377
          },
          "x36" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<a href=\"https://github.com/mpvue/mpvue-loader\">mpvue-loader</a> 是 \n<a href=\"https://github.com/vuejs/vue-loader\">vue-loader</a> 的一个扩展延伸\n版，类似于超集的关系，除了<a href=\"https://github.com/vuejs/\nvue-loader\">vue-loader</a> 本身所具备的能力之外，它还会利用\n<a href=\"https://github.com/Meituan-Dianping/\nmpvue/tree/master/packages/mpvue-template-compiler\">mpvue-template-compiler</a>生成&#39;render \nfunction&#39;。</p>\n<p>entry</p>\n<p>它会从 &#39;webpack&#39; 的配置中的 entry 开始，分析依赖模块，并分别打包。在\nentry 中 app 属性及其内容会被打包为微信小程序所需要的 \napp.js／app.json／app.wxss，其余的会生成对应的页面page.js/page.json/\npage.wxml/page.wxss，如示例的 entry 将会生成如下这些文件，文件内容下\n文慢慢讲来：</p>\n<p>js\n// webpack.config.js\n{\n    // ...\n    entry: {\n        app: resolve(&#39;./src/main.js&#39;),               // app 字段被识别为 app 类型\n        index: resolve(&#39;./src/pages/index/main.js&#39;),   // 其余字段被识别为 page 类型\n        &#39;news/home&#39;: resolve(&#39;./src/pages/news/home/index.js&#39;)\n    }\n}</p>\n<p>// 产出文件的结构\n.\n├── app.js\n├── app.json\n├──· app.wxss\n├── components\n│   ├── card$74bfae61.wxml\n│   ├── index$023eef02.wxml\n│   └── news$0699930b.wxml\n├── news\n│   ├── home.js\n│   ├── home.wxml\n│   └── home.wxss\n├── pages\n│   └── index\n│       ├── index.js\n│       ├── index.wxml\n│       └── index.wxss\n└── static\n    ├── css\n    │   ├── app.wxss\n    │   ├── index.wxss\n    │   └── news\n    │       └── home.wxss\n    └── js\n        ├── app.js\n        ├── index.js\n        ├── manifest.js\n        ├── news\n        │   └── home.js\n        └── vendor.js</p>\n<p>wxml\n  每一个 .vue 的组件都会被生成为一个 wxml 规范的 template，然后通过 \n  wxml 规范的 import 语法来达到一个复用，同时组件如果涉及到 props 的 \n  data 数据，我们也会做相应的处理，举个实际的例子：</p>\n<p>html</p>\n<template>\n    <div class=\"my-component\" @click=\"test\">\n        <h1>{{msg}}</h1>\n        <other-component :msg=\"msg\"></other-component>\n    </div>\n</template>\n<script>\nimport otherComponent from &#39;./otherComponent.vue&#39;\n\nexport default {\n  components: { otherComponent },\n  data () {\n    return { msg: &#39;Hello Vue.js!&#39; }\n  },\n  methods: {\n    test() {}\n  }\n}\n</script>\n\n\n这样一个 Vue 的组件的模版部分会生成相应的 wxml\n\nhtml\n<import src=\"components/other-component$hash.wxml\" />\n<template name=\"component$hash\">\n    <view class=\"my-component\" bindtap=\"handleProxy\">\n        <view class=\"_h1\">{{msg}}</view>\n        <template is=\"other-component$hash\" wx:if=\"{{ $c[0] }}\" data=\"{{ ...$c[0] }}\"></template>\n    </view>\n</template>\n\n\n<p>可能已经注意到了 other-component(:msg=&quot;msg&quot;) 被转化成了 <template \nis=\"other-component$hash\" data=\"{{ ...$c[0] }}\"></template> 。\nmpvue 在运行时会从根组件开始把所有的组件实例数据合并成一个树形的数据，\n然后通过 setData 到 appData,&#39;$c &#39;是 $children 的缩写。至于那个 0 则\n是我们的 compiler 处理过后的一个标记，会为每一个子组件打一个特定的不重\n复的标记。 树形数据结构如下：</p>\n<p>js\n// 这儿数据结构是一个数组，index 是动态的\n{\n  $child: {\n    &#39;0&#39;{\n      // ... root data\n      $child: {\n        &#39;0&#39;: {\n          // ... data\n          msg: &#39;Hello Vue.js!&#39;,\n          $child: {\n            // ...data\n          }\n        }\n      }\n    }\n  }\n}</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x36",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "36",
            "time" : 1555228371611,
            "title" : "36.0 wxss",
            "update_at" : 1556488166377
          },
          "x37" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n这个部分的处理同 web 的处理差异不大，唯一不同在于通过配置生成 .css 为\n .wxss ，其中的对于 css 的若干处理，在 postcss-mpvue-wxss 和 \n px2rpx-loader 这两部分的文档中又详细的介绍。</p>\n<p>app.json／page.json\n1.1.1 以上</p>\n<p>推荐和小程序一样，将 app.json／page.json 放到页面入口处，使用 \ncopy-webpack-plugin copy 到对应的生成位置。</p>\n<p>1.1.1 以下</p>\n<p>这部分内容来源于 app 和 page 的 entry 文件，通常习惯是 main.js，你需\n要在你的入口文件中 export default { config: {} }，这才能被我们的 \nloader 识别为这是一个配置，需要写成 json 文件。</p>\n<p>js\nimport Vue from &#39;vue&#39;;\nimport App from &#39;./app&#39;;</p>\n<p>const vueApp = new Vue(App);\nvueApp.$mount();</p>\n<p>// 这个是我们约定的额外的配置\nexport default {\n    // 这个字段下的数据会被填充到 app.json ／ page.json\n    config: {\n        pages: [&#39;static/calendar/calendar&#39;, &#39;^pages/list/list&#39;], // Will be filled in webpack\n        window: {\n            backgroundTextStyle: &#39;light&#39;,\n            navigationBarBackgroundColor: &#39;#455A73&#39;,\n            navigationBarTitleText: &#39;美团汽车票&#39;,\n            navigationBarTextStyle: &#39;#fff&#39;\n        }\n    }\n};</p>\n<p>同时，这个时候，我们会根据 entry 的页面数据，自动填充到 app.json 中的 \npages 字段。 pages 字段也是可以自定义的，约定带有 ^ 符号开头的页面，会\n放到数组的最前面。</p>\n<p>style scoped\n在 vue-loader 中对 style scoped 的处理方式是给每个样式加一个 attr 来\n标记 module-id，然后在 css 中也给每条 rule 后添加 [module-id]，最终可\n以形成一个 css 的“作用域空间”。</p>\n<p>在微信小程序中目前是不支持 attr 选择器的，所以我们做了一点改动，把 \nattr 上的 [module-id] 直接写到了 class 里，如下：</p>\n<p>html\n<!-- .vue --></p>\n<template>\n    <div class=\"container\">\n        // ...\n    </div>\n</template>\n<style scoped>\n    .container {\n        color: red;\n    }\n</style>\n\n<!-- vue-loader -->\n<template>\n    <div class=\"container\" data-v-23e58823>\n        // ...\n    </div>\n</template>\n<style scoped>\n    .container[data-v-23e58823] {\n        color: red;\n    }\n</style>\n\n<!-- mpvue-loader -->\n<template>\n    <div class=\"container data-v-23e58823\">\n        // ...\n    </div>\n</template>\n<style scoped>\n    .container.data-v-23e58823 {\n        color: red;\n    }\n</style>\n\n\ncompiler\n\n生产出的内容是：\n\njs\n(function(module, <strong>webpack_exports</strong>, <strong>webpack_require</strong>) {\n\n&quot;use strict&quot;;\n// mpvue-template-compiler会利用AST预编译生成一个render function用以\n生成Virtual DOM。\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  // _c创建虚拟节点，参考https://github.com/Meituan-Dianping/mpvue/blob/master/packages/mpvue/index.js#L3606\n  // 以及https://github.com/Meituan-Dianping/mpvue/blob/master/packages/mpvue/index.js#L3680\n  return _c(&#39;div&#39;, {\n    staticClass: &quot;my-component&quot;\n  }, [_c(&#39;h1&#39;, [_vm._v(_vm._s(_vm.msg))]), _vm._v(&quot; &quot;), _c(&#39;other-component&#39;, {\n    attrs: {\n      &quot;msg&quot;: _vm.msg,\n      &quot;mpcomid&quot;: &#39;0&#39;\n    }\n  })], 1)\n}\n\n// staticRenderFns的作用是静态渲染，在更新时不会进行patch，优化性能。\n而staticRenderFns是个空数组。\nvar staticRenderFns = []\nrender._withStripped = true\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/<em> harmony default export </em>/ <strong>webpack_exports</strong>[&quot;a&quot;] = (esExports);\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(&quot;vue-hot-reload-api&quot;).rerender(&quot;data-v-54ad9125&quot;, esExports)\n  }\n}\n\n/***/ })\n<code>## 37.0 compiler</code>\ncompiler相关，也就是template预编译这块，可以参考《<a href=\"https://github.com/answershuto/learnVue/blob/master/docs/\n%E8%81%8A%E8%81%8AVue%E7%9A%84template%E7%BC%96%E8%AF%91.\nMarkDown#createcompiler\">聊聊Vue的template\n编译</a>》来搞明白。原理是一样的。\n\nmpvue自己实现了&#39;export { compile, compileToFunctions, \ncompileToWxml }&#39;(<a href=\"https://github.com/Meituan-Dianping/mpvue/\nblob/master/src/platforms/mp/compiler/index.js\">链接</a>)其中\n&#39;compileToWxml&#39;是用来生成wxml，具体代码<a href=\"https://github.com/\nmpvue/mpvue-loader/blob/master/lib/mp-compiler/index.js#L30\">在这</a>。\n\n另外mpvue是不需要提供<a href=\"https://cn.vuejs.org/v2/guide/\ninstallation.\nhtml#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E\n5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6\">运行时-编译器</a>的，虽然理论上\n是能够做到的。因为小程序不能操作DOM，即便提供了运行时-编译器也产生不了界\n面。\n\n详细讲解compile过程：\n\n  1.将vue文件解析成模板对象\n\njs\n// mpvue-loader/lib/loader.js\nvar parts = parse(content, fileName, this.sourceMap)\n\n\n假如vue文件源码如下:\n\njs\n<template>\n  <view class=\"container-bg\">\n    <view class=\"home-container\">\n      <home-quotation-view v-for=\"(item, index) in lists\" :key=\"index\" :reason=\"item.reason\" :stockList=\"item.list\" @itemViewClicked=\"itemViewClicked\" />\n    </view>\n  </view>\n</template>\n\n<script lang=\"js\">\nimport homeQuotationView from '@/components/homeQuotationView'\nimport topListApi from '@/api/topListApi'\n\nexport default {\n  data () {\n    return {\n      lists: []\n    }\n  },\n  components: {\n    homeQuotationView\n  },\n  methods: {\n    async loadRankList () {\n      let {data} = await topListApi.rankList()\n      if (data) {\n        this.dateTime = data.dt\n        this.lists = data.rankList.filter((item) => {\n          return !!item\n        })\n      }\n    },\n    itemViewClicked (quotationItem) {\n      wx.navigateTo({\n        url: '/pages/topListDetail/main?item=${JSON.stringify(quotationItem)}'\n      })\n    }\n  },\n  onShow () {\n    this.loadRankList()\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n  .container-bg\n    width 100%\n    height 100%\n    background-color #F2F4FA\n\n  .home-container\n    width 100%\n    height 100%\n    overflow-x hidden\n\n</style>\n\n\n<p>调用&#39;parse(content, fileName, this.sourceMap)&#39; 函数得到的结果大致如下：</p>\n<p>js\n{\n  template: {\n    type: &#39;template&#39;,\n    content: &#39;\\n<view class=\"container-bg\">\\n  <view class=\"home-container\">\\n    <home-quotation-view v-for=\"(item, index) in lists\" :key=\"index\" :reason=\"item.reason\" :stockList=\"item.list\" @itemViewClicked=\"itemViewClicked\" />\\n  </view>\\n</view>\\n&#39;,\n    start: 10,\n    attrs: {},\n    end: 251\n  },\n  script: {\n    type: &#39;script&#39;,\n    content: &#39;\\n\\n\\n\\n\\n\\n\\n\\n\\nimport homeQuotationView from \\&#39;@/components/homeQuotationView\\&#39;\\nimport topListApi from \\&#39;@/api/topListApi\\&#39;\\n\\nexport default {\\n  data () {\\n    return {\\n      lists: []\\n    }\\n  },\\n  components: {\\n    homeQuotationView\\n  },\\n  methods: {\\n    async loadRankList () {\\n      let {data} = await topListApi.rankList()\\n      if (data) {\\n        this.dateTime = data.dt\\n        this.lists = data.rankList.filter((item) =&gt; {\\n          return !!item\\n        })\\n      }\\n    },\\n    itemViewClicked (quotationItem) {\\n      wx.navigateTo({\\n        url: &#39;/pages/topListDetail/main?item=${JSON.stringify(quotationItem)}&#39;\\n      })\\n    }\\n  },\\n  onShow () {\\n    this.loadRankList()\\n  }\\n}\\n&#39;,\n    start: 282,\n    attrs: {\n      lang: &#39;js&#39;\n    },\n    lang: &#39;js&#39;,\n    end: 946,\n    ...\n  },\n  styles: [{\n    type: &#39;style&#39;,\n    content: &#39;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n.container-bg\\n  width 100%\\n  height 100%\\n  background-color #F2F4FA\\n\\n.home-container\\n  width 100%\\n  height 100%\\n  overflow-x hidden\\n\\n&#39;,\n    start: 985,\n    attrs: [Object],\n    lang: &#39;stylus&#39;,\n    scoped: true,\n    end: 1135,\n    ...\n  }],\n  customBlocks: []\n}</p>\n<p>  2.调用mpvue-loader/lib/template-compiler/index.js导出的接口并传入\n  上面得到的html模板：</p>\n<p>js\nvar templateCompilerPath = normalize.lib(&#39;template-compiler/index&#39;)\n...\nvar defaultLoaders = {\n  html: templateCompilerPath + templateCompilerOptions,\n  css: options.extractCSS\n    ? getCSSExtractLoader()\n    : styleLoaderPath + &#39;!&#39; + &#39;css-loader&#39; + cssLoaderOptions,\n  js: hasBuble ? (&#39;buble-loader&#39; + bubleOptions) : hasBabel ? babelLoaderOptions : &#39;&#39;\n}</p>\n<p>// check if there are custom loaders specified via\n// webpack config, otherwise use defaults\nvar loaders = Object.assign({}, defaultLoaders, options.loaders)</p>\n<ol start=\"3\">\n<li>调用mpvue/packages/mpvue-template-compiler/build.js的compile接口：</li>\n</ol>\n<p>js\n// mpvue-loader/lib/template-compiler/index.js\nvar compiled = compile(html, compilerOptions)</p>\n<p>compile方法生产下面的ast(Abstract Syntax Tree)模板，render函数和staticRenderFns</p>\n<p>js\n{\n  ast: {\n    type: 1,\n    tag: &#39;view&#39;,\n    attrsList: [],\n    attrsMap: {\n      class: &#39;container-bg&#39;\n    },\n    parent: undefined,\n    children: [{\n      type: 1,\n      tag: &#39;view&#39;,\n      attrsList: [],\n      attrsMap: {\n        class: &#39;home-container&#39;\n      },\n      parent: {\n        type: 1,\n        tag: &#39;view&#39;,\n        attrsList: [],\n        attrsMap: {\n          class: &#39;container-bg&#39;\n        },\n        parent: undefined,\n        children: [\n          [Circular]\n        ],\n        plain: false,\n        staticClass: &#39;&quot;container-bg&quot;&#39;,\n        static: false,\n        staticRoot: false\n      },\n      children: [{\n        type: 1,\n        tag: &#39;home-quotation-view&#39;,\n        attrsList: [{\n          name: &#39;:reason&#39;,\n          value: &#39;item.reason&#39;\n        }, {\n          name: &#39;:stockList&#39;,\n          value: &#39;item.list&#39;\n        }, {\n          name: &#39;@itemViewClicked&#39;,\n          value: &#39;itemViewClicked&#39;\n        }],\n        attrsMap: {\n          &#39;v-for&#39;: &#39;(item, index) in lists&#39;,\n          &#39;:key&#39;: &#39;index&#39;,\n          &#39;:reason&#39;: &#39;item.reason&#39;,\n          &#39;:stockList&#39;: &#39;item.list&#39;,\n          &#39;@itemViewClicked&#39;: &#39;itemViewClicked&#39;,\n          &#39;data-eventid&#39;: &#39;{{\\&#39;0-\\&#39;+index}}&#39;,\n          &#39;data-comkey&#39;: &#39;{{$k}}&#39;\n        },\n        parent: [Circular],\n        children: [],\n        for: &#39;lists&#39;,\n        alias: &#39;item&#39;,\n        iterator1: &#39;index&#39;,\n        key: &#39;index&#39;,\n        plain: false,\n        hasBindings: true,\n        attrs: [{\n          name: &#39;reason&#39;,\n          value: &#39;item.reason&#39;\n        }, {\n          name: &#39;stockList&#39;,\n          value: &#39;item.list&#39;\n        }, {\n          name: &#39;eventid&#39;,\n          value: &#39;\\&#39;0-\\&#39;+index&#39;\n        }, {\n          name: &#39;mpcomid&#39;,\n          value: &#39;\\&#39;0-\\&#39;+index&#39;\n        }],\n        events: {\n          itemViewClicked: {\n            value: &#39;itemViewClicked&#39;,\n            modifiers: undefined\n          }\n        },\n        eventid: &#39;\\&#39;0-\\&#39;+index&#39;,\n        mpcomid: &#39;\\&#39;0-\\&#39;+index&#39;,\n        static: false,\n        staticRoot: false,\n        forProcessed: true\n      }],\n      plain: false,\n      staticClass: &#39;&quot;home-container&quot;&#39;,\n      static: false,\n      staticRoot: false\n    }],\n    plain: false,\n    staticClass: &#39;&quot;container-bg&quot;&#39;,\n    static: false,\n    staticRoot: false\n  },\n  render: &#39;with(this){return _c(\\&#39;view\\&#39;,{staticClass:&quot;container-bg&quot;},[_c(\\&#39;view\\&#39;,{staticClass:&quot;home-container&quot;},_l((lists),function(item,index){return _c(\\&#39;home-quotation-view\\&#39;,{key:index,attrs:{&quot;reason&quot;:item.reason,&quot;stockList&quot;:item.list,&quot;eventid&quot;:\\&#39;0-\\&#39;+index,&quot;mpcomid&quot;:\\&#39;0-\\&#39;+index},on:{&quot;itemViewClicked&quot;:itemViewClicked}})}))])}&#39;,\n  staticRenderFns: [],\n  errors: [],\n  tips: []\n}</p>\n<p>其中的render函数运行的结果是返回&#39;&#39;VNode&#39;&#39;对象，其实&#39;&#39;render&#39;&#39;函数应\n该长下面这样：</p>\n<p>js\n(function() {\n  with(this){\n    return _c(&#39;div&#39;,{   //创建一个 div 元素\n      attrs:{&quot;id&quot;:&quot;app&quot;}  //div 添加属性 id\n      },[\n        _m(0),  //静态节点 header，此处对应 staticRenderFns 数组索\n        引为 0 的 render 函数\n        _v(&quot; &quot;), //空的文本节点\n        (message) //三元表达式，判断 message 是否存在\n         //如果存在，创建 p 元素，元素里面有文本，值为 toString(message)\n        ?_c(&#39;p&#39;,[_v(&quot;\\n    &quot;+_s(message)+&quot;\\n  &quot;)])\n        //如果不存在，创建 p 元素，元素里面有文本，值为 No message. \n        :_c(&#39;p&#39;,[_v(&quot;\\n    No message.\\n  &quot;)])\n      ]\n    )\n  }\n})</p>\n<p>其中的&#39;&#39;_c&#39;&#39;就是vue对象的&#39;&#39;createElement&#39;&#39;方法 (创建元素)，&#39;&#39;_m&#39;&#39;是\n&#39;&#39;renderStatic&#39;&#39;（渲染静态节点），&#39;&#39;_v&#39;&#39; 是 \n&#39;&#39;createTextVNode&#39;&#39;（创建文本dom），&#39;&#39;_s&#39;&#39; 是 &#39;&#39;toString&#39;&#39; （转换为\n字符串）</p>\n<p>js\n// src/core/instance/render.js\nexport function initRender (vm: Component) {\n  ...\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, false)\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, true)\n  ...\n}</p>\n<p>...\nVue.prototype._s = toString\n...\nVue.prototype._m = renderStatic\n...\nVue.prototype._v = createTextVNode\n...</p>\n<ol start=\"4\">\n<li>调用compileWxml方法生产wxml模板，这个方法最终会调用 mpvue/packages/mpvue-template-compiler/build.js的compileToWxml方法将第一步compile出来的模板转成小程序的wxml模板</li>\n</ol>\n<p>js\n// mpvue-loader/lib/template-compiler/index.js\ncompileToWxml.call(this, compiled, html)</p>\n<p>以上解答了问题1、2**\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x37",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "37",
            "time" : 1555228371611,
            "title" : "38.0 runtime",
            "update_at" : 1556488166377
          },
          "x38" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<a href=\"(https://github.com/Meituan-Dianping/mpvue/tree/master/src/platforms/mp/runtime\">目录结构</a>)</p>\n<p>.\n├── events.js //解答问题5\n├── index.js //入口提供Vue对象，以及$mount，和各种初始化\n├── liefcycle //解答问题6、7\n├── node-ops.js //操作真实DOM的相关实现，因为小程序不能操作DOM，所以\n这里都是直接返回\n├── patch.js //解答问题3\n└── render.js //解答问题4</p>\n<p><a href=\"https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/patch.js\">patch.js</a>**</p>\n<p>和vue使用的&#39;createPatchFunction&#39;保持一致，任然是旧树和新树进行patch产出diff，但是多了一行this.$updateDataToMP()用以更新。</p>\n<p><a href=\"https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/render.js\">render.js</a>**</p>\n<p>两个核心的方法&#39;initDataToMP&#39;、&#39;updateDataToMP&#39;。</p>\n<p>&#39;initDataToMP&#39;收集vm上的data，然后调用小程序Page示例的&#39;setData&#39;渲染。</p>\n<p>&#39;updateDataToMP&#39;在每次patch，也就是依赖收集发现数据改变时更新(参考\npatch.js代码)，这部分一样会使用&#39;nextTick&#39;和队列。最终使用了节流阀\n&#39;throttleSetData&#39;。50毫秒用来控制频率以解决频繁修改Data，会造成大量传\n输Data数据而导致的性能问题。</p>\n<p>其中&#39;collectVmData&#39;最终也是用到了&#39;formatVmData&#39;。尤其要注意的是一句注\n释：</p>\n<blockquote>\n<p>getVmData 这儿获取当前组件内的所有数据，包含 props、computed 的数据</p>\n</blockquote>\n<p>我们又知道，service到view是两个线程间通信，如果Data含有大量数据，增加了\n传输数据量，加大了传输成本，将会造成性能下降。</p>\n<p><strong><a href=\"https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/events.js\">events.js</a></strong></p>\n<p>正如官网所说的，这里使用&#39;eventTypeMap&#39;做了各<a href=\"http://mpvue.com/mpvue/#_13\">事件的隐射</a>\njs\nimport { getComKey, eventTypeMap } from &#39;../util/index&#39;</p>\n<p>js\n// 用于小程序的 event type 到 web 的 event\nexport const eventTypeMap = {\n  tap: [&#39;tap&#39;, &#39;click&#39;],\n  touchstart: [&#39;touchstart&#39;],\n  touchmove: [&#39;touchmove&#39;],\n  touchcancel: [&#39;touchcancel&#39;],\n  touchend: [&#39;touchend&#39;],\n  longtap: [&#39;longtap&#39;],\n  input: [&#39;input&#39;],\n  blur: [&#39;change&#39;, &#39;blur&#39;],\n  submit: [&#39;submit&#39;],\n  focus: [&#39;focus&#39;],\n  scrolltoupper: [&#39;scrolltoupper&#39;],\n  scrolltolower: [&#39;scrolltolower&#39;],\n  scroll: [&#39;scroll&#39;]\n}</p>\n<p>使用了&#39;handleProxyWithVue&#39;方法来代理小程序事件到vue事件。</p>\n<p>另外看下作者自己对这部分的<a href=\"https://tech.meituan.com/mt_mpvue_development_framework.html\">思路</a></p>\n<blockquote>\n<p><strong>事件代理机制</strong>：用户交互触发的数据更新通过事件代理机制完成。在 \nVue.js 代码中，事件响应函数对应到组件的 method， Vue.js 自动维护了上下\n文环境。然而在小程序中并没有类似的机制，又因为 Vue.js 执行环境中维护着\n一份实时的虚拟 DOM，这与小程序的视图层完全对应，我们思考，在小程序组件节\n点上触发事件后，只要找到虚拟 DOM 上对应的节点，触发对应的事件不就完成了\n么；另一方面，Vue.js 事件响应如果触发了数据更新，其生命周期函数更新将自\n动触发，在此函数上同步更新小程序数据，数据同步也就实现了。</p>\n</blockquote>\n<p>&#39;getHandle&#39;这个方法应该就是作者思路当中所说的：找到对应节点，然后找到\nhandle。</p>\n<p><a href=\"https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/lifecycle.js\">lifecycle.js</a>**</p>\n<p>在&#39;initMP&#39;方法中，自己创建小程序的App、Page。实现生命周期相关方法，使用\n&#39;callHook&#39;代理兼容小程序App、Page的生命周期。</p>\n<p><a href=\"http://mpvue.com/mpvue/#_4\">官方文档生命周期</a>中说到了：</p>\n<blockquote>\n<p>同 vue，不同的是我们会在小程序 onReady 后，再去触发 vue mounted 生\n命周期</p>\n</blockquote>\n<p>这部分查看，&#39;onReady&#39;之后才会执行&#39;next&#39;，这个&#39;next&#39;回调最终是vue的\n&#39;mountComponent&#39;。可以在<a href=\"https://github.com/\nMeituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/\nindex.js#L37\">index.js</a>中看到。这部分代码也就是解决了&quot;小程序生命周期中触发vue生\n命周期&quot;。</p>\n<p>js\nexport function initMP (mpType, next) {\n  // ...\n    global.Page({\n      // 生命周期函数--监听页面初次渲染完成\n      onReady () {\n        mp.status = &#39;ready&#39;</p>\n<pre><code>    callHook(rootVueVM, &#39;onReady&#39;)\n    next()\n  },\n})\n</code></pre><p>  // ...\n}</p>\n<p>在小程序onShow时，使用$nextTick去第一次渲染数据，参考上面提到的render.js。</p>\n<p>js\nexport function initMP (mpType, next) {\n  // ...\n  global.Page({\n    // 生命周期函数--监听页面显示\n    onShow () {\n      mp.page = this\n      mp.status = &#39;show&#39;\n      callHook(rootVueVM, &#39;onShow&#39;)</p>\n<pre><code>  // 只有页面需要 setData\n  rootVueVM.$nextTick(() =&gt; {\n    rootVueVM._initDataToMP()\n  })\n},\n</code></pre><p>  })\n  // ...\n}</p>\n<p>在mpvue-loader生成template时，比如点击事件&#39;@click&#39;会变成\n&#39;bindtap=&quot;handleProxy&quot;&#39;，事件绑定全都会使用&#39;handleProxy&#39;这个方法。</p>\n<p>可以查看上面<a href=\"#mpvue-loader\">mpvue-loader</a>回顾一下。</p>\n<p>最终handleProxy调用的是event.js中的&#39;handleProxyWithVue&#39;。</p>\n<p>js\nexport function initMP (mpType, next) {\n  // ...\n    global.Page({\n      handleProxy (e) {\n        return rootVueVM.$handleProxyWithVue(e)\n      },\n    })\n  // ...\n}</p>\n<p><strong><a href=\"https://github.com/Meituan-Dianping/mpvue/blob/master/src/platforms/mp/runtime/index.js\">index.js</a></strong></p>\n<p>最后index.js就负责各种初始化和mount。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x38",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "38",
            "time" : 1555228371611,
            "title" : "39.0 Class和Style为什么暂不支持组件",
            "update_at" : 1556488166377
          },
          "x39" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n原因：目前的组件是使用小程序的 template 标签实现的，给组件指定的class\n和style是挂载在template标签上，而template 标签不支持 class 及 style \n属性。</p>\n<p>解决方案： 在自定义组件上绑定class或style到一个props属性上。</p>\n<p>html\n // 组件ComponentA.vue\n <template>\n  <div class=\"container\" :class=\"pClass\">\n    ...\n  </div>\n</template>\njs</p>\n<script>\n    export default {\n    props: {\n      pClass: {\n        type: String,\n        default: ''\n      }\n    }\n  }\n</script>\n\n<p>html\n<!--PageB.vue--></p>\n<p><template>\n    <component-a :pClass=\"cusComponentAClass\"  />\n</template>\njs</p>\n<script>\ndata () {\n    return {\n      cusComponentAClass: 'a-class b-class'\n    }\n  }\n</script>\ncss\n<style lang=\"stylus\" scoped>\n  .a-class\n    border red solid 2rpx\n  .b-class\n    margin-right 20rpx\n</style>\n 但是这样会有问题就是style加上scoped之后，编译模板生成的代码是下面这样的：\n\ncss\n .a-class.data-v-8f1d914e {\n   border: #f00 solid 2rpx;\n }\n .b-class.data-v-8f1d914e {\n   margin-right 20rpx\n }\n 所以想要这些组件的class生效就不能使用scoped的style，改成下面这样，\n 最好自己给a-class和b-class加前缀以防其他的文件引用这些样式：\n\ncss\n <style lang=\"stylus\">\n  .a-class\n    border red solid 2rpx\n  .b-class\n    margin-right 20rpx\n</style>\n\n<style lang=\"stylus\" scoped>\n  .other-class\n    border red solid 2rpx\n\n   ...\n</style>\n  在定义组件上绑定style属性到一个props属性上：\n\nhtml\n <!--P组件ComponentA.vue-->\n <template>\n  <div class=\"container\" :style=\"pStyle\">\n    ...\n  </div>\n</template>\njs\n<script>\n  export default {\n    props: {\n      pStyle: {\n        type: String,\n        default: ''\n      }\n    }\n  }\n</script>\n\n<p>html\n<!--PageB.vue--></p>\n<p><template>\n    <component-a :pStyle=\"cusComponentAStyle\"  />\n</template>\njs</p>\n<script>\nconst cusComponentAStyle = 'border:red solid 2rpx; margin-right:20rpx;'\ndata () {\n    return {\n      cusComponentAStyle\n    }\n  }\n</script>\n\n<p>css</p>\n<style lang=\"stylus\" scoped>\n  ...\n</style>\n\n<p>也可以通过定义styleObject，然后通过工具函数转化为styleString，如下所示：</p>\n<p>js\nconst bstyle = {\n  border: &#39;red solid 2rpx&#39;,\n  &#39;margin-right&#39;: &#39;20rpx&#39;\n}\nlet arr = []\nfor (let [key, value] of Object.entries(bstyle)) {\n  arr.push(&#39;${key}: ${value}&#39;)\n}</p>\n<p>const cusComponentAStyle = arr.join(&#39;; &#39;)</p>\n<p>  当然自定义组件确定只会改变某个css样式，通过pros传入单个样式的值，\n  然后通过:style绑定肯定没问题：</p>\n<p>html\n<!--组件ComponentA.vue-->\n <template>\n  <div class=\"container\" :style=\"{'background-color': backgroundColor}\">\n    ...\n  </div>\n</template>\njs</p>\n<script>\n    export default {\n    props: {\n      backgroundColor: {\n        type: String,\n        default: 'yellow'\n      }\n    }\n  }\n</script>\n\n<p>html\n<!-- PageB.vue --></p>\n<p><template>\n    <component-a backgroundColor=\"red\"  />\n</template>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x39",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "39",
            "time" : 1555228371611,
            "title" : "40.0 分包加载",
            "update_at" : 1556488166377
          },
          "x40" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage.json修改\n  升级： &quot;mpvue-loader&quot;: &quot;\\^1.1.2-rc.4&quot; &quot;webpack-mpvue-asset-plugin&quot;: &quot;\\^0.1.1&quot;\n  新增： &quot;relative&quot;: &quot;\\^3.0.2&quot;</p>\n<p>注意事项\n  1.1.2-rc.5 修复 slot 文件路径生成错误的问题\n  1.1.x 版本还不是很稳定，对稳定性要求较高的项目建议暂时使用 1.0.x 版本</p>\n<p>移动src/main.js中config相关内容到同级目录下main.json(新建)中</p>\n<p>js\nexport default {\n  // config: {...} 需要移动\n}</p>\n<p>to</p>\n<p>js\n{\n &quot;pages&quot;: [\n   &quot;pages/index/main&quot;,\n   &quot;pages/logs/main&quot;\n  ],\n  &quot;subPackages&quot;: [\n    {\n      &quot;root&quot;: &quot;pages/packageA&quot;,\n     &quot;pages&quot;: [\n       &quot;counter/main&quot;\n     ]\n   }\n ],\n &quot;window&quot;: {...}\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x40",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "40",
            "time" : 1555228371611,
            "title" : "41.0 webpack 配置配合升级指南**",
            "update_at" : 1556488166377
          },
          "x41" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n  <em> 本次升级意在调整生成文件目录结构，对依赖的文件由原来的写死绝对路径\n  该改为相对路径\n  </em> mpvue-loader@1.1.2-rc.4 依赖 webpack-mpvue-asset-plugin@0.1.0 \n  做依赖资源引用\n  <em> 之前写在 main.js 中的 config 信息，需要在 main.js 同级目录下新\n  建 main.json 文件，使用 webapck-copy-plugin copy 到 build 目录下\n  </em> app.json 中引用的图片不会自动 copy 到 dist 目录下\n    json 配置文件是由 webapck-copy-plugin copy 过去的，不会处理依\n    赖，可以将图片放到根目录下 static 目录下，使用 \n    webapck-copy-plugin copy 过去</p>\n<p>build/webpack.base.conf.js</p>\n<p>js\n+var CopyWebpackPlugin = require(&#39;copy-webpack-plugin&#39;)\n+var relative = require(&#39;relative&#39;)</p>\n<p> function resolve (dir) {\n   return path.join(__dirname, &#39;..&#39;, dir)\n }</p>\n<p>-function getEntry (rootSrc, pattern) {\n var files = glob.sync(path.resolve(rootSrc, pattern))\n return files.reduce((res, file) =&gt; {\n   var info = path.parse(file)\n   var key = info.dir.slice(rootSrc.length + 1) + &#39;/&#39; + info.name\n   res[key] = path.resolve(file)\n   return res\n }, {})\n+function getEntry (rootSrc) {\n+  var map = {};\n+  glob.sync(rootSrc + &#39;/pages/**/main.js&#39;)\n+  .forEach(file =&gt; {\n+    var key = relative(rootSrc, file).replace(&#39;.js&#39;, &#39;&#39;);\n+    map[key] = file;\n+  })\n+   return map;\n }</p>\n<p>   plugins: [\n   new MpvuePlugin()\n+    new MpvuePlugin(),\n+    new CopyWebpackPlugin([{\n+      from: &#39;*<em>/</em>.json&#39;,\n+      to: &#39;app.json&#39;\n+    }], {\n+      context: &#39;src/&#39;\n+    }),\n+    new CopyWebpackPlugin([ // 处理 main.json 里面引用的图片，\n不要放代码中引用的图片\n+      {\n+        from: path.resolve(<strong>dirname, &#39;../static&#39;),\n+        to: path.resolve(</strong>dirname, &#39;../dist/static&#39;),\n+        ignore: [&#39;.*&#39;]\n+      }\n+    ])\n   ]\n }</p>\n<p>build/webpack.dev.conf.js</p>\n<p>js\nmodule.exports = merge(baseWebpackConfig, {\n   devtool: &#39;#source-map&#39;,\n   output: {\n     path: config.build.assetsRoot,\n   filename: utils.assetsPath(&#39;js/[name].js&#39;),\n   chunkFilename: utils.assetsPath(&#39;js/[id].js&#39;)\n+    filename: utils.assetsPath(&#39;[name].js&#39;),\n+    chunkFilename: utils.assetsPath(&#39;[id].js&#39;)\n   },\n   plugins: [\n     new webpack.DefinePlugin({\n    module.exports = merge(baseWebpackConfig, {\n     // copy from ./webpack.prod.conf.js\n     // extract css into its own file\n     new ExtractTextPlugin({\n     filename: utils.assetsPath(&#39;css/[name].wxss&#39;)\n+      filename: utils.assetsPath(&#39;[name].wxss&#39;)\n     }),\n    module.exports = merge(baseWebpackConfig, {\n       }\n     }),\n     new webpack.optimize.CommonsChunkPlugin({\n     name: &#39;vendor&#39;,\n+      name: &#39;common/vendor&#39;,\n       minChunks: function (module, count) {\n         // any required modules inside node_modules are extracted to vendor\n         return (\n        module.exports = merge(baseWebpackConfig, {\n       }\n     }),\n     new webpack.optimize.CommonsChunkPlugin({\n     name: &#39;manifest&#39;,\n     chunks: [&#39;vendor&#39;]\n+      name: &#39;common/manifest&#39;,\n+      chunks: [&#39;common/vendor&#39;]\n     }),\n   // copy custom static assets\n   new CopyWebpackPlugin([\n     {\n       from: path.resolve(__dirname, &#39;../static&#39;),\n       to: config.build.assetsSubDirectory,\n       ignore: [&#39;.*&#39;]\n     }\n   ]),</p>\n<p>build/webpack.prod.conf.js</p>\n<p>js</p>\n<pre><code>var webpackConfig = merge(baseWebpackConfig, {\n</code></pre><p>   devtool: config.build.productionSourceMap ? &#39;#source-map&#39; : false,\n   output: {\n     path: config.build.assetsRoot,\n   filename: utils.assetsPath(&#39;js/[name].js&#39;),\n   chunkFilename: utils.assetsPath(&#39;js/[id].js&#39;)\n+    filename: utils.assetsPath(&#39;[name].js&#39;),\n+    chunkFilename: utils.assetsPath(&#39;[id].js&#39;)\n   },\n   plugins: [\n    var webpackConfig = merge(baseWebpackConfig, {\n     }),\n     // extract css into its own file\n     new ExtractTextPlugin({\n     // filename: utils.assetsPath(&#39;css/[name].[contenthash].css&#39;)\n     filename: utils.assetsPath(&#39;css/[name].wxss&#39;)\n+      // filename: utils.assetsPath(&#39;[name].[contenthash].css&#39;)\n+      filename: utils.assetsPath(&#39;[name].wxss&#39;)\n     }),\n     // Compress extracted CSS. We are using this plugin so that possible\n     // duplicated CSS from different components can be deduped.\n    var webpackConfig = merge(baseWebpackConfig, {\n     new webpack.HashedModuleIdsPlugin(),\n     // split vendor js into its own file\n     new webpack.optimize.CommonsChunkPlugin({\n     name: &#39;vendor&#39;,\n+      name: &#39;common/vendor&#39;,\n       minChunks: function (module, count) {\n         // any required modules inside node_modules are extracted to vendor\n         return (\n     var webpackConfig = merge(baseWebpackConfig, {\n     // extract webpack runtime and module manifest to its own file in order to\n     // prevent vendor hash from being updated whenever app bundle is updated\n     new webpack.optimize.CommonsChunkPlugin({\n     name: &#39;manifest&#39;,\n     chunks: [&#39;vendor&#39;]\n   }),\n+      name: &#39;common/manifest&#39;,\n+      chunks: [&#39;common/vendor&#39;]\n+    })\n   // copy custom static assets\n   new CopyWebpackPlugin([\n     {\n       from: path.resolve(__dirname, &#39;../static&#39;),\n       to: config.build.assetsSubDirectory,\n       ignore: [&#39;.*&#39;]\n     }\n   ])\n   ]\n })</p>\n<p>config/index.js</p>\n<p>js</p>\n<p>module.exports = {\n     env: require(&#39;./prod.env&#39;),\n     index: path.resolve(<strong>dirname, &#39;../dist/index.html&#39;),\n     assetsRoot: path.resolve(</strong>dirname, &#39;../dist&#39;),\n   assetsSubDirectory: &#39;static&#39;, // 不将资源聚合放在 static 目录下\n+    assetsSubDirectory: &#39;&#39;,\n     assetsPublicPath: &#39;/&#39;,\n     productionSourceMap: false,\n     // Gzip off by default as many popular static hosts such as\n@@ -26,7 +26,7 @@ module.exports = {\n     port: 8080,\n     // 在小程序开发者工具中不需要自动打开浏览器\n     autoOpenBrowser: false,\n   assetsSubDirectory: &#39;static&#39;, // 不将资源聚合放在 static 目录下\n+    assetsSubDirectory: &#39;&#39;,\n     assetsPublicPath: &#39;/&#39;,\n     proxyTable: {},\n     // CSS Sourcemaps off by default because relative paths are &quot;buggy&quot;</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x41",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "41",
            "time" : 1555228371611,
            "title" : "42.0 问题与展望",
            "update_at" : 1556488166377
          },
          "x42" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n技术的更新迭代是很快的，很多内容在写的时候还是这样。过了几天就发生了变\n化。又仔细看了小程序的文档，发现小程序原生开发深受vue影响啊，越来越像了。</p>\n<p>希望mpvue能够使用&#39;wx.nextTick&#39;<a href=\"https://\ndevelopers.weixin.qq.com/miniprogram/dev/api/\ncustom-component.html#wxnexttickfunction\">链接</a>，尝试来代替50毫秒</p>\n<p>希望能够解决<a href=\"https://github.com/\nMeituan-Dianping/mpvue/issues/639\">使用脏检查优化每次更新数据时都会传输大量数据的问题, 解决删\n除回退, 列表忽然滚动到顶部等问题</a>。也许可以靠下面的自定义组件。</p>\n<p>使用<a href=\"https://developers.weixin.qq.com/miniprogram/dev/\nframework/custom-component/\">自定义组件</a>代替template，这样可以解决诸如:</p>\n<p><a href=\"http://mpvue.com/mpvue/#_10\">组件根标签不能使用style和class</a>\n<a href=\"https://github.com/Meituan-Dianping/mpvue/issues?utf8=%E2%9C%93&amp;q=slot\">slot的各种问题</a>\n<a href=\"http://mpvue.com/mpvue/#vue_1\">Slot（scoped 暂时还没做支持）</a>\nsetData的性能提升，因为官方说的:&quot;在需要频繁更新的场景下，自定义组件的\n更新只在组件内部进行，不受页面其他部分内容复杂性影响。&quot;。也就是说，组件\n内部的setData只会影响组件范围。这个和Vue就很像了，我觉得原理肯定是一致\n的。</p>\n<p>在小程序完善了自定义组件之后，我现在的倾向变成了自搭或者网上找脚手架来工\n程化项目，使用诸如：NPM、PostCSS、pug、babel、ESLint、图片优化等功能。\n然后使用小程序原生开发的方式来开发，因为它做的越来越好，越来越像vue了。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x42",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "42",
            "time" : 1555228371611,
            "title" : "43.0 小程序-学习",
            "update_at" : 1556488166377
          },
          "x43" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n经常看到一些同学在查找小程序的学习资料和面对一些问题时无从下手。这一节\n笔者会基于自己的经验告诉大家如何学习开发小程序和如何解决遇到的问题。</p>\n<p>学习建议</p>\n<ol>\n<li><p><strong>文档一定要通读</strong>，<strong>文档一定要通读</strong>，<strong>文档一定要通读</strong>。如果\n你想轻松的实现各种功能，先不要去搜网上的各种二手资料，请一定要熟读文\n档。不是为了记下来，而是有个大概印象，知道小程序有哪些能力和限制。\n下面笔者列出一些文档和社区里很优质的内容（首页的就不列了），虽然在\n很显眼的位置，但是很多人没看过🤦。(个人感觉，平时很多开发者问的问题，\n百分之九十都在文档里有答案)</p>\n<p><a href=\"https://developers.weixin.qq.com/community/develop/list/512\">小程序-小故事</a> 可以了解小程序的发展和对一些功能的权衡取舍过程\n<a href=\"https://developers.weixin.qq.com/community/develop/list/4\">小程序基础教程</a> 非常好和全面的教程，墙裂推荐\n<a href=\"https://developers.weixin.qq.com/community/develop/list/2\">官方公告</a>  小程序仍然在快速迭代当中，了解官方的动态对于开发者非常有必要\n<a href=\"https://developers.weixin.qq.com/community/develop/buglist\">小程序已知问题和修复日志</a> 躲坑指南\n<a href=\"https://developers.weixin.qq.com/miniprogram/product/\">运营规范&amp;常见拒绝情形</a>  小程序宪法\n<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/authorize-index.html\">需要授权的操作</a> 授权是有可能流失用户的，要多注意\n<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140183\">微信公众平台技术文档</a> 涉及到和公众号交互等内容可能会用到\n<a href=\"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=1417674108&amp;token=&amp;lang=zh_CN\">微信开放平台技术文档</a> 涉及和App交互等内容可能会用到</p>\n</li>\n<li><p>利用好微信提供的各种辅助工具和能力</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/mydev.html\">小程序开发助手</a> 方便查看开发版，体验版，线上版\n<a href=\"https://developers.weixin.qq.com/miniprogram/dev/demo.html\">小程序示例</a> 直观的了解小程序的各种能力，新手可以当做demo跑一下\n<a href=\"https://developers.weixin.qq.com/miniprogram/analysis/assistant/\">小程序数据助手</a> 查看小程序pv，uv，方便了解自己的工作成果\n利用好小程序提供的<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/debug.html\">调试能力</a> 现在小程序已经有了真机调试，各种特殊场景的测试(扫码，支付)，已经非常全面。</p>\n</li>\n<li><p>看完文档直接上手开发，多动手喽，干就完了!</p>\n</li>\n</ol>\n<p>建议的进阶路线: </p>\n<pre><code>1. 熟读文档 \n2. 可开发一些小功能，熟悉开发流程\n3. 尝试开发一些复杂的任务(例如设计一个绘图库，埋点库) \n4. 可以翻阅一下业界优秀的小程序源码(办法自己想🤔)，框架源码\n5. 将微信开发者根据拖入你的ide翻一翻底层代码,思考和理解小程序的设计\n6. 成为老司机\n</code></pre><pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x43",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "43",
            "time" : 1555228371611,
            "title" : "44.0 如何解决遇到的问题",
            "update_at" : 1556488166377
          },
          "x44" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n由于小程序本身的技术架构，开发技能和web技术共性很多，我们之前在web开发\n中的很多开发经验也是有效的，大多数问题也是很好解决的(看文档)。常见的一\n些问题：</p>\n<ol>\n<li><p>兼容性问题</p>\n<p>一般遇到设备兼容性问题，从以下几个角度思考:</p>\n<ol>\n<li>不通的微信版本的<a href=\"https://developers.weixin.qq.com\n/miniprogram/dev/framework/client-lib.html\">小程序基础库</a>是不一样的，很多 &#39;API&#39; \n是有基础库的要求。</li>\n<li>样式写法问题，小程序提供了rpx单位让样式开发更简单，但如果单位混用\n的话可能会导致意想不到的效果。</li>\n<li>css兼容性问题 例如ios7，8对 &#39;flex布局&#39; 支持的不够好。</li>\n<li>设备兼容问题，例如ios不支持 &#39;webp&#39; 图片格式。</li>\n</ol>\n</li>\n<li><p>代码逻辑问题</p>\n<p>对于平常的业务逻辑来说一般都是跟小程序的<a href=\"https://\ndevelopers.weixin.qq.com/miniprogram/dev/framework/app-service/\npage.html\">生命周期</a>挂钩，如果业务逻辑复杂，代码组织能力不够，很容易将代码写的\n很乱，这样出现问题的风险自然也会很高。\n所以建议在开发复杂业务逻辑时，一定要先借助流程图，思维脑图等方式分析\n清楚业务，然后再规划代码逻辑，拆分出逻辑主次再开发。\n遇到问题时，推荐如下方法:</p>\n<ol>\n<li>&#39;debugger&#39; 大法，在出现问题的地方打上断点，一步步查看上下文中的\n变量异常</li>\n<li>&#39;二分删代码大法&#39; 遇到极其诡异（注意是极其诡异）的问题时，二分删代\n码直到问题消失，定位到问题代码(悄悄告诉你们，笔者用这个方法帮同事定位\n到好几个诡异的问题)</li>\n</ol>\n</li>\n<li><p>性能问题</p>\n<p>官方提供的<a href=\"https://\ndevelopers.weixin.qq.com/miniprogram/dev/framework/performance/\">性能优化工具，和文档</a>为第一资料，毕竟他们自己写的坑，自己最清楚。另外上面已经介绍过一些\n性能优化的方法了，参照业务场景对症下药即可。    </p>\n</li>\n<li><p>各种奇怪的问题</p>\n<p>事实上，90%的问题还是不看文档导致的，所以你们懂得。另外一些问题参考\n上述也可以定位到，如果还有不能解决的问题怎么办？\n那可能是微信的&#39;bug&#39;，所以去已知问题文档，官方社区翻一翻，一般都有蛛\n丝马迹。实在不行也可以向老司机提问，注意提问姿势，最好提供最小可复现\ndemo，代码片段功能了解一下\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x44",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "44",
            "time" : 1555228371611,
            "title" : "45.0 总结",
            "update_at" : 1556488166377
          },
          "x45" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x45",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_a",
            "name" : "tei952",
            "ord" : "45",
            "time" : 1555228371611,
            "title" : "46.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_b" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nUDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只\n是报文的搬运工，不会对报文进行任何拆分和拼接操作。</p>\n<p>具体来说</p>\n<p>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 \nUDP 头标识下是 UDP 协议，然后就传递给网络层了\n在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用\n层，不会任何拼接操作\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 UDP 面向报文",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>UDP 是无连接的，也就是说通信不需要建立和断开连接。\n  UDP 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数\n  据，对方能不能收到是不关心的\n  UDP 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也\n  不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会\n  导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就\n  需要使用 UDP 而不是 TCP。</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 不可靠性",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n因为 UDP 没有 TCP 那么复杂，需要保证数据不丢失且有序到达。所以 UDP 的头\n部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是\n很高效的。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/1/163195b245ceb89c?w=831&amp;\nh=170&amp;f=png&amp;s=22793\" alt=\"\"></p>\n<p>头部包含了以下几个数据</p>\n<p>两个十六位的端口号，分别为源端口（可选字段）和目标端口\n整个数据报文的长度\n整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中\n的错误\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 高效",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就\n是说 UDP 提供了单播，多播，广播的功能。</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 传输方式",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nTCP 头部比 UDP 头部复杂的多</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/1/1631be45b084e4bc?w=858&amp;h=305&amp;f=png&amp;s=62112\" alt=\"\"></p>\n<p>对于 TCP 头部来说，以下几个字段是很重要的</p>\n<p>Sequence number，这个序号保证了 TCP 传输的报文都是有序的，对端可以通\n过序号顺序的拼接报文\nAcknowledgement Number，这个序号表示数据接收端期望接收的下一个字节的\n编号是多少，同时也表示上一个序号的数据已经收到\nWindow Size，窗口大小，表示还能接收多少字节的数据，用于流量控制\n标识符\n  URG=1：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级\n  数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前\n  面，紧急指针标明了紧急数据的尾部。\n  ACK=1：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传\n  送的所有报文段都必须把 ACK 置为一。\n  PSH=1：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到\n  缓冲区满后再提交。\n  RST=1：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 \n  TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。\n  SYN=1：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当\n  SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。\n  FIN=1：该字段为一表示此报文段是一个释放连接的请求报文。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 TCP 头部",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nHTTP 是无连接的，所以作为下层的 TCP 协议也是无连接的，虽然看似 TCP 将两\n端连接了起来，但是其实只是两端共同维护了一个状态</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/1/1631bef9e3c60035?w=1280&amp;\nh=965&amp;f=png&amp;s=101432\" alt=\"\"></p>\n<p>TCP 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详\n细描述下两种握手。</p>\n<p>在这之前需要了解一个重要的性能指标 RTT。该指标表示发送端发送数据到接收到\n对端数据所需的往返时间。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 状态机",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<img src=\"https://user-gold-cdn.xitu.io/2018/5/1/1631bf1e79b3cd42?w=666&amp;h=426&amp;f=png&amp;s=32121\" alt=\"\"></p>\n<p>在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管\n是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一\n个全双工的协议。</p>\n<p>起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建\n完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据。</p>\n<p>第一次握手**</p>\n<p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。\n请求发送后，客户端便进入  SYN-SENT 状态，&#39;x&#39; 表示客户端的数据通信初始序\n号。</p>\n<p>第二次握手**</p>\n<p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会\n包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p>\n<p>第三次握手**</p>\n<p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这\n个报文段后便进入ESTABLISHED 状态，服务端收到这个应答后也进入 \nESTABLISHED 状态，此时连接建立成功。</p>\n<p>PS：第三次握手可以包含数据，通过 TCP 快速打开（TFO）技术。其实只要涉及到\n握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie，下\n次握手时发出 cookie 达到减少 RTT 的目的。</p>\n<p>你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？**</p>\n<p>因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误。</p>\n<p>可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超\n时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到\n达服务端，服务端应答完就建立了请求。如果连接请求 A 在两端关闭后终于抵达了\n服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并\n进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端\n一直等待，造成资源的浪费。</p>\n<p>PS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在\n建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数\n或者干脆在不能处理的情况下拒绝请求。</p>\n<p>断开链接四次握手</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/2/1631fb807f2c6c1b?w=640&amp;h=512&amp;f=png&amp;s=31059\" alt=\"\"></p>\n<p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p>\n<p>第一次握手**</p>\n<p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p>\n<p>第二次握手**</p>\n<p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并\n进入 CLOSE_WAIT 状态，表示 A 到 B 的连接已经释放，不接收 A 发的数据了。\n但是因为 TCP 连接时双向的，所以 B 仍旧可以发送数据给 A。</p>\n<p>第三次握手**</p>\n<p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然\n后 B 便进入 LAST-ACK 状态。</p>\n<p>PS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以\n将第二次和第三次握手合并，延迟 ACK 包的发送。</p>\n<p>第四次握手**</p>\n<p>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态\n会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时\n间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认\n应答后，也便进入 CLOSED 状态。</p>\n<p>为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？**</p>\n<p>为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状\n态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 建立连接三次握手",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达，ARQ \n协议包含停止等待 ARQ 和连续 ARQ</p>\n<p>停止等待 ARQ</p>\n<p>正常传输过程**</p>\n<p>只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在\n定时器时间内接收到对端应答就取消定时器并发送下一段报文。</p>\n<p>报文丢失或出错**</p>\n<p>在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送\n丢包的数据直到对端响应，所以需要每次都备份发送的数据。</p>\n<p>即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对\n端会抛弃该报文并等待 A 端重传。</p>\n<p>PS：一般定时器设定的时间都会大于一个 RTT 的平均时间。</p>\n<p>ACK 超时或丢失**</p>\n<p>对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重\n传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发\n送下一个序号的报文。</p>\n<p>在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收\n过，如果接收过只需要丢弃应答即可。</p>\n<p>这个协议的缺点就是传输效率低，在良好的网络环境下每次发送报文都得等待对端\n的 ACK 。**</p>\n<p>连续 ARQ </p>\n<p>在连续 ARQ 中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送\n窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。</p>\n<p>累计确认</p>\n<p>连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文\n就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后\n统一回复一个应答报文。报文中的 ACK 可以用来告诉发送端这个序号之前的数据已\n经全部接收到了，下次请发送这个序号 + 1的数据。</p>\n<p>但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文\n后，并未接到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况\n时，ACK 只能回复 6，这样会造成发送端重复发送数据，这种情况下可以通过 \nSack 来解决，这个会在下文说到。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 ARQ 协议",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在上面小节中讲到了发送窗口。在 TCP 中，两端都维护着窗口：分别为发送端窗口\n和接收端窗口。</p>\n<p>发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/5/1632f25c587ffd54?w=660&amp;\nh=270&amp;f=png&amp;s=37109\" alt=\"\"></p>\n<p>发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写\n入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大\n小，所以发送窗口的大小是不断变化的。</p>\n<p>当发送端接收到应答报文后，会随之将窗口进行滑动</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/5/1632f25cca99c8f4?w=660&amp;\nh=210&amp;f=png&amp;s=24554\" alt=\"\"></p>\n<p>滑动窗口实现了流量控制。接收方通过报文告知发送方还可以发送多少数据，从而\n保证接收方能够来得及接收数据。</p>\n<p>Zero 窗口</p>\n<p>在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会\n停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，\n让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 滑动窗口",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而\n前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。</p>\n<p>拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。</p>\n<p>慢开始算法</p>\n<p>慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免\n一开始就传输大量数据导致网络拥塞。</p>\n<p>慢开始算法步骤具体如下</p>\n<p>  连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最\n  大数据量）\n  每过一个 RTT 就将窗口大小乘二\n  指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值\n  时就会启动拥塞避免算法。</p>\n<p>拥塞避免算法</p>\n<p>拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增\n长导致网络拥塞，慢慢将大小调整到最佳值。</p>\n<p>在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行\n以下步骤：</p>\n<p>将阈值设为当前拥塞窗口的一半\n将拥塞窗口设为 1 MSS\n启动拥塞避免算法</p>\n<p>快速重传</p>\n<p>快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端\n只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重\n复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：</p>\n<p>TCP Taho 实现如下**</p>\n<p>  将阈值设为当前拥塞窗口的一半\n  将拥塞窗口设为 1 MSS\n  重新开始慢开始算法</p>\n<p>TCP Reno 实现如下**</p>\n<p>  拥塞窗口减半\n  将阈值设为当前拥塞窗口\n  进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该\n  阶段）\n  使用拥塞避免算法</p>\n<p>TCP New Ren 改进后的快恢复 </p>\n<p>TCP New Reno<strong> 算法改进了之前 </strong>TCP Reno** 算法的缺陷。在之前，快恢复\n中只要收到一个新的 ACK 包，就会退出快恢复。</p>\n<p>在 <strong>TCP New Reno</strong> 中，TCP 发送方先记下三个重复 ACK 的分段的最大序\n号。</p>\n<p>假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7\n 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应\n 答。这时候重发序号为 3 的报文，接收方顺利接收并会发送 ACK 序号为 7 的应\n 答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接\n 收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端\n 已经顺利接收，接下来会退出快恢复阶段。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 拥塞处理",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nHTTP 协议是个无状态协议，不会保存状态。</p>\n<p>Post 和 Get 的区别</p>\n<p>先引入副作用和幂等的概念。</p>\n<p>副作用指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。</p>\n<p>幂等指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态\n一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次\n是幂等的。</p>\n<p>在规范的应用场景上说，Get 多用于无副作用，幂等的场景，例如搜索关键字。\nPost 多用于副作用，不幂等的场景，例如注册。</p>\n<p>在技术上说：\n  Get 请求能缓存，Post 不能\n  Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里，且会被浏览\n  器保存历史纪录，Post 不会，但是在抓包的情况下都是一样的。\n  Post 可以通过 request body来传输比 Get 更多的数据，Get 没有这个\n  技术\n  URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不\n  是 RFC 规定的\n  Post 支持更多的编码类型且不对数据类型限制\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 HTTP",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n2XX 成功**</p>\n<p>  200 OK，表示从客户端发来的请求在服务器端被正确处理\n  204 No content，表示请求成功，但响应报文不含实体的主体部分\n  205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是\n  与 204 响应不同在于要求请求方重置内容\n  206 Partial Content，进行范围请求</p>\n<p>3XX 重定向**</p>\n<p>  301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\n  302 found，临时性重定向，表示资源临时被分配了新的 URL\n  303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\n  304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的\n  情况\n  307 temporary redirect，临时重定向，和302含义类似，但是期望客户端\n  保持请求方法不变向新的地址发出请求</p>\n<p>4XX 客户端错误**</p>\n<p> 400 bad request，请求报文存在语法错误\n 401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n 403 forbidden，表示对请求资源的访问被服务器拒绝\n 404 not found，表示在服务器上没有找到请求的资源</p>\n<p>  5XX 服务器错误**</p>\n<p> 500 internal sever error，表示服务器端在执行请求时发生了错误\n 501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\n 503 service unavailable，表明服务器暂时处于超负载或正在停机维护，\n  无法处理请求\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 常见状态码",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n|     通用字段      |                       作用                       |\n| :---------------: | :----------------------------------------------: |\n|   Cache-Control   |                  控制缓存的行为                  |\n|    Connection     | 浏览器想要优先使用的连接类型，比如  &#39;keep-alive&#39; |\n|       Date        |                   创建报文时间                   |\n|      Pragma       |                     报文指令                     |\n|        Via        |                代理服务器相关信息                |\n| Transfer-Encoding |                   传输编码方式                   |\n|      Upgrade      |                要求客户端升级协议                |\n|      Warning      |               在内容中可能存在错误               |</p>\n<p>|      请求字段       |                作用                |\n| :-----------------: | :--------------------------------: |\n|       Accept        |        能正确接收的媒体类型        |\n|   Accept-Charset    |         能正确接收的字符集         |\n|   Accept-Encoding   |      能正确接收的编码格式列表      |\n|   Accept-Language   |        能正确接收的语言列表        |\n|       Expect        |        期待服务端的指定行为        |\n|        From         |           请求方邮箱地址           |\n|        Host         |            服务器的域名            |\n|      If-Match       |          两端资源标记比较          |\n|  If-Modified-Since  | 本地资源未修改返回 304（比较时间） |\n|    If-None-Match    | 本地资源未修改返回 304（比较标记） |\n|     User-Agent      |             客户端信息             |\n|    Max-Forwards     |    限制可被代理及网关转发的次数    |\n| Proxy-Authorization |      向代理服务器发送验证信息      |\n|        Range        |        请求某个内容的一部分        |\n|       Referer       |    表示浏览器所访问的前一个页面    |\n|         TE          |            传输编码方式            |</p>\n<p>|      响应字段      |            作用            |\n| :----------------: | :------------------------: |\n|   Accept-Ranges    |   是否支持某些种类的范围   |\n|        Age         | 资源在代理缓存中存在的时间 |\n|        ETag        |          资源标识          |\n|      Location      |   客户端重定向到某个 URL   |\n| Proxy-Authenticate |  向代理服务器发送验证信息  |\n|       Server       |         服务器名字         |\n|  WWW-Authenticate  |   获取资源需要的验证信息   |</p>\n<p>|     实体字段     |              作用              |\n| :--------------: | :----------------------------: |\n|      Allow       |       资源的正确请求方式       |\n| Content-Encoding |         内容的编码格式         |\n| Content-Language |         内容使用的语言         |\n|  Content-Length  |       request body 长度        |\n| Content-Location |       返回数据的备用地址       |\n|   Content-MD5    | Base64加密格式的内容 MD5检验值 |\n|  Content-Range   |         内容的位置范围         |\n|   Content-Type   |         内容的媒体类型         |\n|     Expires      |         内容的过期时间         |\n|  Last_modified   |       内容的最后修改时间       |</p>\n<p>PS：缓存相关已在别的模块中写完，你可以 <a href=\"../Performance/\nperformance-ch.md#缓存\">阅读该小节</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 HTTP 首部",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nHTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。</p>\n<p>TLS</p>\n<p>TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，\n接下来可以通过 Session Resumption 减少到一个 RTT。</p>\n<p>在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。</p>\n<p>对称加密**：</p>\n<p>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</p>\n<p>非对称加密**：</p>\n<p>有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解\n密必须使用私钥解密，私钥只有分发公钥的一方才知道。</p>\n<p>TLS 握手过程如下图：**</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/1635260126b3a10c?w=1558&amp;h=1006&amp;f=webp&amp;s=59424\" alt=\"\"></p>\n<p>  客户端发送一个随机值，需要的协议和加密方式\n  服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协\n  议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需\n  要说明）\n  客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通\n  过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客\n  户端证书的话会附带证书\n  服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都\n  拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，\n  接下来的通信就可以通过该密钥来加密解密</p>\n<p>  通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但\n  是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用\n  对称加密的方式通信。</p>\n<p>  PS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连\n  接只需要一个 RTT，后面恢复连接不需要 RTT 了。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 HTTPS",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nHTTP 2.0 相比于 HTTP 1.X，可以说是大幅度提高了 web 的性能。</p>\n<p>在 HTTP 1.X 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名\n等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量，当页面中需\n要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大\n请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p>\n<p>你可以通过 <a href=\"https://http2.akamai.com/demo\">该链接</a> 感受下 HTTP 2.0 \n比 HTTP 1.X 到底快了多少。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/163542ca61eaff17?w=929&amp;\nh=512&amp;f=png&amp;s=245670\" alt=\"\"></p>\n<p>在 HTTP 1.X 中，因为队头阻塞的原因，你会发现请求是这样的</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/163542c96df8563d?w=518&amp;\nh=642&amp;f=png&amp;s=72417\" alt=\"\"></p>\n<p>在 HTTP 2.0 中，因为引入了多路复用，你会发现请求是这样的</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/163542c9d3128c7a?w=900&amp;\nh=616&amp;f=png&amp;s=71014\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 HTTP 2.0",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nHTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过\n文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会\n被分割，并采用二进制格式编码。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/163543c25e5e9f23?w=874&amp;\nh=459&amp;f=png&amp;s=26320\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 二进制传输",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在 HTTP 2.0 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。</p>\n<p>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成\n的数据流。</p>\n<p>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多\n个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 \nHTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/1635442531d3e5ee?w=494&amp;\nh=138&amp;f=png&amp;s=9636\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 多路复用",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在 HTTP 1.X 中，我们使用文本的形式传输 header，在 header 携带 cookie \n的情况下，可能每次都需要重复传输几百到几千的字节。</p>\n<p>在 HTTP 2.0 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了\n header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传\n 输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过\n 键名找到对应的值。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 Header 压缩",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在 HTTP 2.0 中，服务端可以在客户端某个请求后，主动推送其他资源。</p>\n<p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 \npush 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。\n当然在浏览器兼容的情况下你也可以使用 prefetch 。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 服务端 Push",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n这是一个谷歌出品的基于 UDP 实现的同为传输层的协议，目标很远大，希望替代 \nTCP 协议。</p>\n<p>该协议支持多路复用，虽然 HTTP 2.0 也支持多路复用，但是下层仍是 TCP，\n因为 TCP 的重传机制，只要一个包丢失就得判断丢失包并且重传，导致发生队头\n阻塞的问题，但是 UDP 没有这个机制\n实现了自己的加密协议，通过类似 TCP 的 TFO 机制可以实现 0-RTT，当然\n TLS 1.3 已经实现了 0-RTT 了\n支持重传和纠错机制（向前恢复），在只丢失一个包的情况下不需要重传，使用\n纠错机制恢复丢失的包\n  纠错机制：通过异或的方式，算出发出去的数据的异或值并单独发出一个包，\n  服务端在发现有一个包丢失的情况下，通过其他数据包和异或值包算出丢失包\n  在丢失两个包或以上的情况就使用重传机制，因为算不出来了\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 QUIC",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nDNS 的作用就是通过域名查询到具体的 IP。</p>\n<p>因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域\n名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称\n是什么。</p>\n<p>在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你\n在浏览器中想访问 &#39;www.google.com&#39; 时，会进行一下操作：</p>\n<p>  操作系统会首先在本地缓存中查询\n  没有的话会去系统配置的 DNS 服务器中查询\n  如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负\n  责 &#39;com&#39; 这个一级域名的服务器\n  然后去该服务器查询 &#39;google&#39; 这个二级域名\n  接下来三级域名的查询其实是我们配置的，你可以给 &#39;www&#39; 这个域名配置\n  一个 IP，然后还可以给别的三级域名配置一个 IP</p>\n<p>以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做\n请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。</p>\n<p>PS：DNS 是基于 UDP 做的查询。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.0 DNS",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n这是一个很经典的面试题，在这题中可以将本文讲得内容都串联起来。</p>\n<p>  首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最\n  快的 IP 地址回来\n  接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两\n  端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指\n  示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构\n  中，最后就是物理层面的传输了\n  TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据\n  数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用\n  就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件\n  首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或\n   500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，\n   避免过多次的重定向，超过次数也会报错\n  浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件\n  的编码格式知道该如何去解码文件\n  文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 \n  CSS 的话会去构建 CSSOM 树。如果遇到 &#39;script&#39; 标签的话，会判断是否存\n  在 &#39;async&#39; 或者 &#39;defer&#39; ，前者会并行进行下载并执行 JS，后者会先下载文\n  件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流\n  程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0\n   协议的话会极大的提高多图的下载效率。\n  初始的 HTML 被完全加载和解析后会触发 &#39;DOMContentLoaded&#39; 事件\n  CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页\n  面元素的布局、样式等等诸多方面的东西\n  在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将\n  内容显示在屏幕上了\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.0 从输入 URL 到页面加载完成的过程",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_b",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "23.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_c" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nDNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。</p>\n<p>html</p>\n<p><link rel=\"dns-prefetch\" href=\"//yuchengkai.cn\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 DNS 预解析",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复\n加载提高网页的整体加载速度。</p>\n<p>通常浏览器缓存策略分为两种：强缓存和协商缓存。</p>\n<p>强缓存</p>\n<p>实现强缓存可以通过两种响应头实现：&#39;Expires&#39; 和 &#39;Cache-Control&#39; 。强缓\n存表示在缓存期间不需要请求，&#39;state code&#39; 为 200</p>\n<p>js\nExpires: Wed, 22 Oct 2018 08:41:00 GMT</p>\n<p>&#39;Expires&#39; 是 HTTP / 1.0 的产物，表示资源会在 &#39;Wed, 22 Oct 2018 08:41:00\n GMT&#39; 后过期，需要再次请求。并且 &#39;Expires&#39; 受限于本地时间，如果\n修改了本地时间，可能会造成缓存失效。</p>\n<p>js\nCache-control: max-age=30</p>\n<p>&#39;Cache-Control&#39; 出现于 HTTP / 1.1，优先级高于 &#39;Expires&#39; 。该属性表示\n资源会在 30 秒后过期，需要再次请求。</p>\n<p>协商缓存</p>\n<p>如果缓存过期了，我们就可以使用协商缓存来解决问题。协商缓存需要请求，如果\n缓存有效会返回 304。</p>\n<p>协商缓存需要客户端和服务端共同实现，和强缓存一样，也有两种实现方式。</p>\n<p>Last-Modified 和 If-Modified-Since</p>\n<p>&#39;Last-Modified&#39; 表示本地文件最后修改日期，&#39;If-Modified-Since&#39; 会将 \n&#39;Last-Modified&#39; 的值发送给服务器，询问服务器在该日期后资源是否有更新，\n有更新的话就会将新的资源发送回来。</p>\n<p>但是如果在本地打开缓存文件，就会造成 &#39;Last-Modified&#39; 被修改，所以在 \nHTTP / 1.1 出现了 &#39;ETag&#39; 。</p>\n<p>ETag 和 If-None-Match</p>\n<p>&#39;ETag&#39; 类似于文件指纹，&#39;If-None-Match&#39; 会将当前 &#39;ETag&#39; 发送给服务器，\n询问该资源 &#39;ETag&#39; 是否变动，有变动的话就将新的资源发送回来。并且 &#39;ETag&#39; \n优先级比 &#39;Last-Modified&#39; 高。</p>\n<p>选择合适的缓存策略</p>\n<p>对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方\n可能需要选择特殊的缓存策略</p>\n<p>对于某些不需要缓存的资源，可以使用 &#39;Cache-control: no-store&#39; ，表\n示该资源不需要缓存\n对于频繁变动的资源，可以使用 &#39;Cache-Control: no-cache&#39; 并配合 &#39;ETag&#39;\n 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新。\n对于代码文件来说，通常使用 &#39;Cache-Control: max-age=31536000&#39; 并配\n合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的\n文件。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 缓存",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n因为浏览器会有并发请求限制，在 HTTP / 1.1 时代，每个请求都需要建立和\n断开，消耗了好几个 RTT 时间，并且由于 TCP 慢启动的原因，加载体积大的\n文件会需要更多的时间。</p>\n<p>在  HTTP / 2.0 中引入了多路复用，能够让多个请求使用同一个 TCP 链接，\n极大的加快了网页的加载速度。并且还支持 Header 压缩，进一步的减少了请\n求的数据大小。</p>\n<p>更详细的内容你可以查看 <a href=\"../Network/Network-zh.md##http-20\">该小节</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 使用 HTTP / 2.0",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在开发中，可能会遇到这样的情况。有些资源不需要马上用到，但是希望尽早\n获取，这时候就可以使用预加载。</p>\n<p>预加载其实是声明式的 &#39;fetch&#39; ，强制浏览器请求资源，并且不会阻塞 \n&#39;onload&#39; 事件，可以使用以下代码开启预加载</p>\n<p>html</p>\n<link rel=\"preload\" href=\"http://example.com\">\n\n<p>预加载可以一定程度上降低首屏的加载时间，因为可以将一些不影响首屏但重要\n的文件延后加载，唯一缺点就是兼容性不好。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 预加载",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染</p>\n<p>html</p>\n<link rel=\"prerender\" href=\"http://example.com\"> \n\n<p>预渲染虽然可以提高页面的加载速度，但是要确保该页面百分百会被用户在之\n后打开，否则就白白浪费资源去渲染\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 预渲染",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>对于代码层面的优化，你可以查阅浏览器系列中的 [相关内容]\n(../Browser/4browser-ch.md#渲染机制)。</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 优化渲染过程",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某\n些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一\n般可以通过定时器或者事件的调用来唤醒。</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 懒执行",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n懒加载就是将不关键的资源延后加载。</p>\n<p>懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可\n视区域）内需要加载的东西。对于图片来说，先设置图片标签的 &#39;src&#39; 属性为\n一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，\n就将自定义属性替换为 &#39;src&#39; 属性，这样图片就会去下载资源，实现了图片懒\n加载。</p>\n<p>懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始\n播放视频等等。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 懒加载",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n计算图片大小</p>\n<p>对于一张 100 <em> 100 像素的图片来说，图像上有 10000 个像素点，如果每个\n像素的值是 RGBA 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1\n 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 </em> 1 * 4 \n / 1024）。</p>\n<p>但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过\n减少每个像素的调色板来相应缩小图片的大小。</p>\n<p>了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个\n思路了：</p>\n<p>减少像素点\n减少每个像素点能够显示的颜色</p>\n<p>图片加载优化</p>\n<p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用\n CSS 去代替。\n对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一\n般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图\n片。\n小图使用 base64 格式\n将多个图标文件整合到一张图片中（雪碧图）\n选择正确的图片格式：\n   对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式\n   具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无\n   差异的图像质量，缺点就是兼容性并不好\n   小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n   照片使用 JPEG\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 图片优化",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>CSS 文件放在 &#39;head&#39; 中\n服务端开启文件压缩功能\n将 &#39;script&#39; 标签放在 &#39;body&#39; 底部，因为 JS 文件执行会阻塞渲染。当然也\n可以把 &#39;script&#39; 标签放在任意位置然后加上 &#39;defer&#39; ，表示该文件会并行下\n载，但是会放到 HTML 解析完成后顺序执行。对于没有任何依赖的 JS 文件可以加\n上 &#39;async&#39; ，表示加载和渲染后续文档元素的过程将和  JS 文件的加载与执行并\n行无序进行。\n执行 JS 代码过长会卡住渲染，对于需要很多时间计算的代码可以考虑使用 \n&#39;Webworker&#39;。&#39;Webworker&#39; 可以让我们另开一个线程执行脚本而不影响渲染。</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 其他文件优化",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑\n使用多个 CDN 域名。对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，\n否则每次请求都会带上主站的 Cookie。</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 CDN",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>对于 Webpack4，打包项目使用 production 模式，这样会自动开启代码压缩\n使用 ES6 模块来开启 tree shaking，这个技术可以移除没有使用的代码\n优化图片，对于小图可以使用 base64 的方式写入文件中\n按照路由拆分代码，实现按需加载\n给打包出来的文件名添加哈希，实现浏览器缓存文件</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 使用 Webpack 优化项目",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n对于代码运行错误，通常的办法是使用 &#39;window.onerror&#39; 拦截报错。该方法能\n拦截到大部分的详细报错信息，但是也有例外</p>\n<p>对于跨域的代码运行错误会显示 &#39;Script error.&#39; 对于这种情况我们需要给\n &#39;script&#39; 标签添加 &#39;crossorigin&#39; 属性\n对于某些浏览器可能不会显示调用栈信息，这种情况可以通过 \n&#39;arguments.callee.caller&#39; 来做栈递归</p>\n<p>对于异步代码来说，可以使用 &#39;catch&#39; 的方式捕获错误。比如 &#39;Promise&#39; 可以\n直接使用 &#39;catch&#39; 函数，&#39;async await&#39; 可以使用 &#39;try catch&#39;</p>\n<p>但是要注意线上运行的代码都是压缩过的，需要在打包时生成 sourceMap 文件便\n于 debug。</p>\n<p>对于捕获的错误需要上传给服务器，通常可以通过 &#39;img&#39; 标签的 &#39;src&#39; 发起一个\n请求。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 监控",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n如何渲染几万条数据并不卡住界面**</p>\n<p>这道题考察了如何在不卡住页面的情况下渲染数据，也就是说不能一次性将几万条\n都渲染出来，而应该一次渲染部分 DOM，那么就可以通过 \n&#39;requestAnimationFrame&#39; 来每 16 ms 刷新一次。</p>\n<p>html\n&lt;!DOCTYPE html&gt;</p>\n<html lang=\"en\">\n\n<p><head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head></p>\n<p><body>\n  <ul>控件</ul>\n  <script>\n    setTimeout(() =&gt; {\n      // 插入十万条数据\n      const total = 100000\n      // 一次插入 20 条，如果觉得性能不好就减少\n      const once = 20\n      // 渲染数据总共需要几次\n      const loopCount = total / once\n      let countOfRender = 0\n      let ul = document.querySelector(&quot;ul&quot;);\n      function add() {\n        // 优化性能，插入不会造成回流\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i &lt; once; i++) {\n          const li = document.createElement(&quot;li&quot;);\n          li.innerText = Math.floor(Math.random() * total);\n          fragment.appendChild(li);\n        }\n        ul.appendChild(fragment);\n        countOfRender += 1;\n        loop();\n      }\n      function loop() {\n        if (countOfRender &lt; loopCount) {\n          window.requestAnimationFrame(add);\n        }\n      }\n      loop();\n    }, 0);\n  </script>\n</body>\n</html>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 面试题",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_c",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_d" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n事件触发有三个阶段</p>\n<p>  &#39;window&#39; 往事件触发处传播，遇到注册的捕获事件会触发\n  传播到事件触发处时触发注册的事件\n  从事件触发处往 &#39;window&#39; 传播，遇到注册的冒泡事件会触发</p>\n<p>事件触发一般来说会按照上面的顺序进行，但是也有特例，如果给一个目标节点\n同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。</p>\n<p>js\n// 以下会先打印冒泡然后是捕获\nnode.addEventListener(&#39;click&#39;,(event) =&gt;{\n    console.log(&#39;冒泡&#39;)\n},false);\nnode.addEventListener(&#39;click&#39;,(event) =&gt;{\n    console.log(&#39;捕获 &#39;)\n},true)\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 事件触发三阶段",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n通常我们使用 &#39;addEventListener&#39; 注册事件，该函数的第三个参数可以是布\n尔值，也可以是对象。对于布尔值 &#39;useCapture&#39; 参数来说，该参数默认值为\n &#39;false&#39; 。&#39;useCapture&#39; 决定了注册的事件是捕获事件还是冒泡事件。对于对\n象参数来说，可以使用以下几个属性</p>\n<p>  &#39;capture&#39;，布尔值，和 &#39;useCapture&#39; 作用一样\n  &#39;once&#39;，布尔值，值为 &#39;true&#39; 表示该回调只会调用一次，调用后会移除\n  监听\n  &#39;passive&#39;，布尔值，表示永远不会调用 &#39;preventDefault&#39; </p>\n<p>一般来说，我们只希望事件只触发在目标上，这时候可以使用 &#39;stopPropagation&#39;\n 来阻止事件的进一步传播。通常我们认为 &#39;stopPropagation&#39; 是用来阻止事件冒\n 泡的，其实该函数也可以阻止捕获事件。&#39;stopImmediatePropagation&#39; 同样也\n 能实现阻止事件，但是还能阻止该事件\n目标执行别的注册事件。</p>\n<p>js\nnode.addEventListener(&#39;click&#39;,(event) =&gt;{\n    event.stopImmediatePropagation()\n    console.log(&#39;冒泡&#39;)\n},false);\n// 点击 node 只会执行上面的函数，该函数不会执行\nnode.addEventListener(&#39;click&#39;,(event) =&gt; {\n    console.log(&#39;捕获 &#39;)\n},true)\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 注册事件",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册\n在父节点上</p>\n<p>html</p>\n<p><ul id=\"ul\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n</ul></p>\n<script>\n    let ul = document.querySelector('#ul')\n    ul.addEventListener('click', (event) => {\n        console.log(event.target);\n    })\n</script>\n\n<p>事件代理的方式相对于直接给目标注册事件来说，有以下优点</p>\n<p>  节省内存\n  不需要给子节点注销事件\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 事件代理",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有\n一个不同就是跨域，Ajax 请求会失败。</p>\n<p>我们可以通过以下几种常用方法解决跨域的问题\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 跨域",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nJSONP 的原理很简单，就是利用 &#39;<script>&#39; 标签没有跨域限制的漏洞。通过\n &#39;<script>&#39; 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需\n 要通讯时。</p>\n<p>js</p>\n<script src=\"http://domain/api?param1=a&param2=b&callback=jsonp\"></script>\n<script>\n    function jsonp(data) {\n        console.log(data)\n    }\n</script>    \n\n\n<p>JSONP 使用简单且兼容性不错，但是只限于 &#39;get&#39; 请求。</p>\n<p>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自\n己封装一个 JSONP，以下是简单实现</p>\n<p>js\nfunction jsonp(url, jsonpCallback, success) {\n  let script = document.createElement(&quot;script&quot;);\n  script.src = url;\n  script.async = true;\n  script.type = &quot;text/javascript&quot;;\n  window[jsonpCallback] = function(data) {\n    success &amp;&amp; success(data);\n  };\n  document.body.appendChild(script);\n}\njsonp(\n  &quot;http://xxx&quot;,\n  &quot;callback&quot;,\n  function(value) {\n    console.log(value);\n  }\n);\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 JSONP",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nCORS需要浏览器和后端同时支持。IE 8 和 9 需要通过 &#39;XDomainRequest&#39; \n来实现。</p>\n<p>浏览器会自动进行 CORS 通信，实现CORS通信的关键是后端。只要后端实现了 \nCORS，就实现了跨域。</p>\n<p>服务端设置 &#39;Access-Control-Allow-Origin&#39; 就可以开启 CORS。 该属性\n表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 CORS",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n该方式只能用于二级域名相同的情况下，比如 &#39;a.test.com&#39; 和 &#39;b.test.com&#39;\n 适用于该方式。</p>\n<p>只需要给页面添加 &#39;document.domain = &#39;test.com&#39;&#39; 表示二级域名都相同\n就可以实现跨域\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 document.domain",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一\n个页面判断来源并接收消息</p>\n<p>js\n// 发送消息端\nwindow.parent.postMessage(&#39;message&#39;, &#39;http://test.com&#39;);\n// 接收消息端\nvar mc = new MessageChannel();\nmc.addEventListener(&#39;message&#39;, (event) =&gt; {\n    var origin = event.origin || event.originalEvent.origin; \n    if (origin === &#39;http://test.com&#39;) {\n        console.log(&#39;验证通过&#39;)\n    }\n});\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 postMessage",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n众所周知 JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互\n而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能\n会发生问题（一个线程中新加节点，另一个线程中删除节点），当然可以引入读\n写锁解决这个问题。</p>\n<p>JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。\n如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦\n执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行\n栈中执行，所以本质上来说 JS 中的异步还是同步行为。</p>\n<p>js\nconsole.log(&#39;script start&#39;);</p>\n<p>setTimeout(function() {\n  console.log(&#39;setTimeout&#39;);\n}, 0);</p>\n<p>console.log(&#39;script end&#39;);</p>\n<p>以上代码虽然 &#39;setTimeout&#39; 延时为 0，其实还是异步。这是因为 HTML5 标准\n规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 &#39;setTimeout&#39;\n 还是会在 &#39;script end&#39; 之后打印。</p>\n<p>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务\n（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 \n&#39;jobs&#39;，macrotask 称为 &#39;task&#39;。</p>\n<p>js\nconsole.log(&#39;script start&#39;);</p>\n<p>setTimeout(function() {\n  console.log(&#39;setTimeout&#39;);\n}, 0);</p>\n<p>new Promise((resolve) =&gt; {\n    console.log(&#39;Promise&#39;)\n    resolve()\n}).then(function() {\n  console.log(&#39;promise1&#39;);\n}).then(function() {\n  console.log(&#39;promise2&#39;);\n});</p>\n<p>console.log(&#39;script end&#39;);\n// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</p>\n<p>以上代码虽然 &#39;setTimeout&#39; 写在 &#39;Promise&#39; 之前，但是因为 &#39;Promise&#39; \n属于微任务而 &#39;setTimeout&#39; 属于宏任务，所以会有以上的打印。</p>\n<p>微任务包括 &#39;process.nextTick&#39; ，&#39;promise&#39; ，&#39;Object.observe&#39; ，&#39;MutationObserver&#39;</p>\n<p>宏任务包括 &#39;script&#39; ， &#39;setTimeout&#39; ，&#39;setInterval&#39; ，&#39;setImmediate&#39; ，&#39;I/O&#39; ，&#39;UI rendering&#39;</p>\n<p>很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括\n了 &#39;script&#39; ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行\n微任务。</p>\n<p>所以正确的一次 Event loop 顺序是这样的</p>\n<ol>\n<li>执行同步代码，这属于宏任务</li>\n<li>执行栈为空，查询是否有微任务需要执行</li>\n<li>执行所有微任务</li>\n<li>必要的话渲染 UI</li>\n<li>然后开始下一轮 Event loop，执行宏任务中的异步代码</li>\n</ol>\n<p>通过上述的  Event loop 顺序可知，如果宏任务中的异步代码有大量的计算并\n且需要操作 DOM 的话，为了更快的 界面响应，我们可以把操作 DOM 放入微任\n务中。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 Event loop",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nNode 中的 Event loop 和浏览器中的不相同。</p>\n<p>Node 的 Event loop 分为6个阶段，它们会按照顺序反复运行</p>\n<p>┌───────────────────────┐\n┌─&gt;│        timers         │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     I/O callbacks     │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n│  │     idle, prepare     │\n│  └──────────┬────────────┘      ┌───────────────┐\n│  ┌──────────┴────────────┐      │   incoming:   │\n│  │         poll          │&lt;──connections───     │\n│  └──────────┬────────────┘      │   data, etc.  │\n│  ┌──────────┴────────────┐      └───────────────┘\n│  │        check          │\n│  └──────────┬────────────┘\n│  ┌──────────┴────────────┐\n└──┤    close callbacks    │\n   └───────────────────────┘\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 Node 中的 Event loop",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ntimers 阶段会执行 &#39;setTimeout&#39; 和 &#39;setInterval&#39;</p>\n<p>一个 &#39;timer&#39; 指定的时间并不是准确时间，而是在达到这个时间后尽快执行回\n调，可能会因为系统正在执行别的事务而延迟。</p>\n<p>下限的时间有一个范围：&#39;[1, 2147483647]&#39; ，如果设定的时间不在这个范围\n，将被设置为1。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 timer",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nI/O 阶段会执行除了 close 事件，定时器和 &#39;setImmediate&#39; 的回调</p>\n<p>idle, prepare </p>\n<p>idle, prepare 阶段内部实现</p>\n<p>poll </p>\n<p>poll 阶段很重要，这一阶段中，系统会做两件事情</p>\n<ol>\n<li>执行到点的定时器</li>\n<li>执行 poll 队列中的事件</li>\n</ol>\n<p>并且当 poll 中没有定时器的情况下，会发现以下两件事情</p>\n<p>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者系\n统限制\n如果 poll 队列为空，会有两件事发生\n  如果有 &#39;setImmediate&#39; 需要执行，poll 阶段会停止并且进入到 check \n  阶段执行 &#39;setImmediate&#39;\n  如果没有 &#39;setImmediate&#39; 需要执行，会等待回调被加入到队列中并立即\n  执行回调</p>\n<p>如果有别的定时器需要被执行，会回到 timer 阶段执行回调。</p>\n<p>check</p>\n<p>check 阶段执行 &#39;setImmediate&#39; </p>\n<p>close callbacks</p>\n<p>close callbacks 阶段执行 close 事件</p>\n<p>并且在 Node 中，有些情况下的定时器执行顺序是随机的</p>\n<p>js\nsetTimeout(() =&gt; {\n    console.log(&#39;setTimeout&#39;);\n}, 0);\nsetImmediate(() =&gt; {\n    console.log(&#39;setImmediate&#39;);\n})\n// 这里可能会输出 setTimeout，setImmediate\n// 可能也会相反的输出，这取决于性能\n// 因为可能进入 event loop 用了不到 1 毫秒，这时候会执行 setImmediate\n// 否则会执行 setTimeout</p>\n<p>当然在这种情况下，执行顺序是相同的</p>\n<p>js\nvar fs = require(&#39;fs&#39;)</p>\n<p>fs.readFile(__filename, () =&gt; {\n    setTimeout(() =&gt; {\n        console.log(&#39;timeout&#39;);\n    }, 0);\n    setImmediate(() =&gt; {\n        console.log(&#39;immediate&#39;);\n    });\n});\n// 因为 readFile 的回调在 poll 中执行\n// 发现有 setImmediate ，所以会立即跳到 check 阶段执行回调\n// 再去 timer 阶段执行 setTimeout\n// 所以以上输出一定是 setImmediate，setTimeout</p>\n<p>上面介绍的都是 macrotask 的执行情况，microtask 会在以上每个阶段完成\n后立即执行。</p>\n<p>js\nsetTimeout(()=&gt;{\n    console.log(&#39;timer1&#39;)</p>\n<pre><code>Promise.resolve().then(function() {\n    console.log(&#39;promise1&#39;)\n})\n</code></pre><p>}, 0)</p>\n<p>setTimeout(()=&gt;{\n    console.log(&#39;timer2&#39;)</p>\n<pre><code>Promise.resolve().then(function() {\n    console.log(&#39;promise2&#39;)\n})\n</code></pre><p>}, 0)</p>\n<p>// 以上代码在浏览器和 node 中打印情况是不同的\n// 浏览器中一定打印 timer1, promise1, timer2, promise2\n// node 中可能打印 timer1, timer2, promise1, promise2\n// 也可能打印 timer1, promise1, timer2, promise2</p>\n<p>Node 中的 &#39;process.nextTick&#39; 会先于其他 microtask 执行。</p>\n<p>js\nsetTimeout(() =&gt; {\n  console.log(&quot;timer1&quot;);</p>\n<p>  Promise.resolve().then(function() {\n    console.log(&quot;promise1&quot;);\n  });\n}, 0);</p>\n<p>process.nextTick(() =&gt; {\n  console.log(&quot;nextTick&quot;);\n});\n// nextTick, timer1, promise1\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 I/O",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ncookie，localStorage，sessionStorage，indexDB</p>\n<p>|     特性     |                   cookie                   |       localStorage       | sessionStorage |         indexDB          |\n| :----------: | :----------------------------------------: | :----------------------: | :------------: | :----------------------: |\n| 数据生命周期 |     一般由服务器生成，可以设置过期时间     | 除非被清理，否则一直存在 | 页面关闭就清理 | 除非被清理，否则一直存在 |\n| 数据存储大小 |                     4K                     |            5M            |       5M       |           无限           |\n| 与服务端通信 | 每次都会携带在 header 中，对于请求性能影响 |          不参与          |     不参与     |          不参与          |</p>\n<p>从上表可以看到，&#39;cookie&#39; 已经不建议用于存储。如果没有大量数据存储需求的\n话，可以使用 &#39;localStorage&#39; 和 &#39;sessionStorage&#39; 。对于不怎么改变的数\n据尽量使用 &#39;localStorage&#39; 存储，否则可以用 &#39;sessionStorage&#39; 存储。</p>\n<p>对于 &#39;cookie&#39;，我们还需要注意安全性。</p>\n<p>|   属性    |                             作用                             |\n| :-------: | :----------------------------------------------------------: |\n|   value   | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识 |\n| http-only |            不能通过 JS 访问 Cookie，减少 XSS 攻击            |\n|  secure   |               只能在协议为 HTTPS 的请求中携带                |\n| same-site |    规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击     |\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 存储",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 Service Worker",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n浏览器的渲染机制一般分为以下几个步骤</p>\n<ol>\n<li>处理 HTML 并构建 DOM 树。</li>\n<li>处理 CSS 构建 CSSOM 树。</li>\n<li>将 DOM 与 CSSOM 合并成一个渲染树。</li>\n<li>根据渲染树来布局，计算每个节点的位置。</li>\n<li>调用 GPU 绘制，合成图层，显示在屏幕上。</li>\n</ol>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/11/162b2ab2ec70ac5b?w=900&amp;h=352&amp;f=png&amp;s=49983\" alt=\"\"></p>\n<p>在构建 CSSOM 树时，会阻塞渲染，直至 CSSOM 树构建完成。并且构建 CSSOM \n树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，减少过度层叠，越\n是具体的 CSS 选择器，执行速度越慢。</p>\n<p>当 HTML 解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重\n新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文\n件。并且 CSS 也会影响 JS 的执行，只有当解析完样式表才会执行 JS，所以也\n可以认为这种情况下，CSS 也会暂停构建 DOM。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/8/1647838a3b408372?w=1676&amp;h=688&amp;f=png&amp;s=154480\" alt=\"\"></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/8/16478388e773b16a?w=1504&amp;h=760&amp;f=png&amp;s=123231\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 渲染机制",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nLoad 事件触发代表页面中的 DOM，CSS，JS，图片已经全部加载完毕。</p>\n<p>DOMContentLoaded 事件触发代表初始的 HTML 被完全加载和解析，不需要等待\n CSS，JS，图片加载。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 Load 和 DOMContentLoaded 区别",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n一般来说，可以把普通文档流看成一个图层。特定的属性可以生成一个新的图层。\n<strong>不同的图层渲染互不影响</strong>，所以对于某些频繁需要渲染的建议单独生成一个新\n图层，提高性能。但也不能生成过多的图层，会引起反作用。</p>\n<p>通过以下几个常用属性可以生成新图层</p>\n<p>  3D 变换：&#39;translate3d&#39;、&#39;translateZ&#39;\n  &#39;will-change&#39;\n  &#39;video&#39;、&#39;iframe&#39; 标签\n  通过动画实现的 &#39;opacity&#39; 动画转换\n  &#39;position: fixed&#39;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 图层",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。</p>\n<p>  重绘是当节点需要更改外观而不会影响布局的，比如改变 &#39;color&#39; 就叫称\n  为重绘\n  回流是布局或者几何属性需要改变就称为回流。</p>\n<p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，\n改变深层次的节点很可能导致父节点的一系列回流。</p>\n<p>所以以下几个动作可能会导致性能问题：</p>\n<p>  改变 window 大小\n  改变字体\n  添加或删除样式\n  文字改变\n  定位或者浮动\n  盒模型</p>\n<p>很多人不知道的是，重绘和回流其实和 Event loop 有关。</p>\n<ol>\n<li>当 Event loop 执行完 Microtasks 后，会判断 document 是否需要更\n新。因为浏览器是 60Hz 的刷新率，每 16ms 才会更新一次。</li>\n<li>然后判断是否有 &#39;resize&#39; 或者 &#39;scroll&#39; ，有的话会去触发事件，所以\n&#39;resize&#39; 和 &#39;scroll&#39; 事件也是至少 16ms 才会触发一次，并且自带节流\n功能。</li>\n<li>判断是否触发了 media query</li>\n<li>更新动画并且发送事件</li>\n<li>判断是否有全屏操作事件</li>\n<li>执行 &#39;requestAnimationFrame&#39; 回调</li>\n<li>执行 &#39;IntersectionObserver&#39; 回调，该方法用于判断元素是否可见，可\n以用于懒加载上，但是兼容性不好</li>\n<li>更新界面</li>\n<li><p>以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 \n&#39;requestIdleCallback&#39; 回调。</p>\n<p>以上内容来自于 <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model\">HTML 文档</a>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 重绘（Repaint）和回流（Reflow）",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用 &#39;translate&#39; 替代 &#39;top&#39;</p>\n<p>html\n<div class=\"test\"></div>\n<style>\n .test {</p>\n<pre><code> position: absolute;\n top: 10px;\n width: 100px;\n height: 100px;\n background: red;\n</code></pre><p> }\n</style></p>\n<script>\n setTimeout(() => {\n     // 引起回流\n     document.querySelector('.test').style.top = '100px'\n }, 1000)\n</script>\n\n<p>使用 &#39;visibility&#39; 替换 &#39;display: none&#39; ，因为前者只会引起重绘，\n后者会引发回流（改变了布局）</p>\n<p>把 DOM 离线后修改，比如：先把 DOM 给 &#39;display:none&#39; (有一次 \nReflow)，然后你修改100次，然后再把它显示出来</p>\n<p>不要把 DOM 结点的属性值放在一个循环里当成循环里的变量</p>\n</li>\n</ol>\n<p>js\n  for(let i = 0; i &lt; 1000; i++) {\n      // 获取 offsetTop 会导致回流，因为需要去获取正确的值\n      console.log(document.querySelector(&#39;.test&#39;).style.offsetTop)\n  }</p>\n<p>  不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新\n  布局</p>\n<p>  动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 \n  &#39;requestAnimationFrame&#39;</p>\n<p>  CSS 选择符从右往左匹配查找，避免 DOM 深度过深</p>\n<p>  将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如\n  对于 &#39;video&#39; 标签，浏览器会自动将该节点变为图层。</p>\n<p>  <img src=\"https://user-gold-cdn.xitu.io/2018/3/29/1626fb6f33a6f9d7?w=1588&amp;h=768&amp;f=png&amp;s=263260\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 减少重绘和回流",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_d",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_e" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n栈是一个线性结构，在计算机中是一个相当常见的数据结构。</p>\n<p>栈的特点是只能在某一端添加或删除数据，遵循先进后出的原则</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/20/1637b785d2d68735?w=640&amp;h=460&amp;f=png&amp;s=6932\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 栈 概念",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n每种数据结构都可以用很多种方式来实现，其实可以把栈看成是数组的一个子集，\n所以这里使用数组来实现</p>\n<p>js\nclass Stack {\n  constructor() {\n    this.stack = []\n  }\n  push(item) {\n    this.stack.push(item)\n  }\n  pop() {\n    this.stack.pop()\n  }\n  peek() {\n    return this.stack[this.getCount() - 1]\n  }\n  getCount() {\n    return this.stack.length\n  }\n  isEmpty() {\n    return this.getCount() === 0\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 栈 实现",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n选取了 <a href=\"https://leetcode.com/problems/valid-parentheses/submissions/1\">LeetCode 上序号为 20 的题目</a></p>\n<p>题意是匹配括号，可以通过栈的特性来完成这道题目</p>\n<p>js\nvar isValid = function (s) {\n  let map = {\n    &#39;(&#39;: -1,\n    &#39;)&#39;: 1,\n    &#39;[&#39;: -2,\n    &#39;]&#39;: 2,\n    &#39;{&#39;: -3,\n    &#39;}&#39;: 3\n  }\n  let stack = []\n  for (let i = 0; i &lt; s.length; i++) {\n    if (map[s[i]] &lt; 0) {\n      stack.push(s[i])\n    } else {\n      let last = stack.pop()\n      if (map[last] + map[s[i]] != 0) return false\n    }\n  }\n  if (stack.length &gt; 0) return false\n  return true\n};\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 栈 应用",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n队列一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循先进先出\n的原则。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/20/1637cba2a6155793?w=640&amp;h=419&amp;f=png&amp;s=15737\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 队列 概念",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n这里会讲解两种实现队列的方式，分别是单链队列和循环队列。</p>\n<p>单链队列</p>\n<p>js\nclass Queue {\n  constructor() {\n    this.queue = []\n  }\n  enQueue(item) {\n    this.queue.push(item)\n  }\n  deQueue() {\n    return this.queue.shift()\n  }\n  getHeader() {\n    return this.queue[0]\n  }\n  getLength() {\n    return this.queue.length\n  }\n  isEmpty() {\n    return this.getLength() === 0\n  }\n}</p>\n<p>因为单链队列在出队操作的时候需要 O(n) 的时间复杂度，所以引入了循环队列。\n循环队列的出队操作平均是 O(1) 的时间复杂度。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 队列 实现",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>js\nclass SqQueue {\n  constructor(length) {\n    this.queue = new Array(length + 1)\n    // 队头\n    this.first = 0\n    // 队尾\n    this.last = 0\n    // 当前队列大小\n    this.size = 0\n  }\n  enQueue(item) {\n    // 判断队尾 + 1 是否为队头\n    // 如果是就代表需要扩容数组\n    // % this.queue.length 是为了防止数组越界\n    if (this.first === (this.last + 1) % this.queue.length) {\n      this.resize(this.getLength() * 2 + 1)\n    }\n    this.queue[this.last] = item\n    this.size++\n    this.last = (this.last + 1) % this.queue.length\n  }\n  deQueue() {\n    if (this.isEmpty()) {\n      throw Error(&#39;Queue is empty&#39;)\n    }\n    let r = this.queue[this.first]\n    this.queue[this.first] = null\n    this.first = (this.first + 1) % this.queue.length\n    this.size--\n    // 判断当前队列大小是否过小\n    // 为了保证不浪费空间，在队列空间等于总长度四分之一时\n    // 且不为 2 时缩小总长度为当前的一半\n    if (this.size === this.getLength() / 4 &amp;&amp; this.getLength() / 2 !== 0) {\n      this.resize(this.getLength() / 2)\n    }\n    return r\n  }\n  getHeader() {\n    if (this.isEmpty()) {\n      throw Error(&#39;Queue is empty&#39;)\n    }\n    return this.queue[this.first]\n  }\n  getLength() {\n    return this.queue.length - 1\n  }\n  isEmpty() {\n    return this.first === this.last\n  }\n  resize(length) {\n    let q = new Array(length)\n    for (let i = 0; i &lt; length; i++) {\n      q[i] = this.queue[(i + this.first) % this.queue.length]\n    }\n    this.queue = q\n    this.first = 0\n    this.last = this.size\n  }\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 循环队列",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n链表是一个线性结构，同时也是一个天然的递归结构。链表结构可以充分利用计算\n机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同\n时链表由于增加了结点的指针域，空间开销比较大。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/22/16388487759b1152?w=1060&amp;h=178&amp;f=png&amp;s=20820\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 链表 概念",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n单向链表</p>\n<p>javascript\nclass Node {\n  constructor(v, next) {\n    this.value = v\n    this.next = next\n  }\n}\nclass LinkList {\n  constructor() {\n    // 链表长度\n    this.size = 0\n    // 虚拟头部\n    this.dummyNode = new Node(null, null)\n  }\n  find(header, index, currentIndex) {\n    if (index === currentIndex) return header\n    return this.find(header.next, index, currentIndex + 1)\n  }\n  addNode(v, index) {\n    this.checkIndex(index)\n    // 当往链表末尾插入时，prev.next 为空\n    // 其他情况时，因为要插入节点，所以插入的节点\n    // 的 next 应该是 prev.next\n    // 然后设置 prev.next 为插入的节点\n    let prev = this.find(this.dummyNode, index, 0)\n    prev.next = new Node(v, prev.next)\n    this.size++\n    return prev.next\n  }\n  insertNode(v, index) {\n    return this.addNode(v, index)\n  }\n  addToFirst(v) {\n    return this.addNode(v, 0)\n  }\n  addToLast(v) {\n    return this.addNode(v, this.size)\n  }\n  removeNode(index, isLast) {\n    this.checkIndex(index)\n    index = isLast ? index - 1 : index\n    let prev = this.find(this.dummyNode, index, 0)\n    let node = prev.next\n    prev.next = node.next\n    node.next = null\n    this.size--\n    return node\n  }\n  removeFirstNode() {\n    return this.removeNode(0)\n  }\n  removeLastNode() {\n    return this.removeNode(this.size, true)\n  }\n  checkIndex(index) {\n    if (index &lt; 0 || index &gt; this.size) throw Error(&#39;Index error&#39;)\n  }\n  getNode(index) {\n    this.checkIndex(index)\n    if (this.isEmpty()) return\n    return this.find(this.dummyNode, index, 0).next\n  }\n  isEmpty() {\n    return this.size === 0\n  }\n  getSize() {\n    return this.size\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 链表 实现",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。</p>\n<p>二叉树拥有一个根节点，每个节点至多拥有两个子节点，分别为：左节点和右节\n点。树的最底部节点称之为叶节点，当一颗树的叶数量数量为满时，该树可以称之\n为满二叉树。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/22/163884f74c9f4e4d?w=320&amp;h=267&amp;f=png&amp;s=11622\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 二叉树",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n二分搜索树也是二叉树，拥有二叉树的特性。但是区别在于二分搜索树每个节点的\n值都比他的左子树的值大，比右子树的值小。</p>\n<p>这种存储方式很适合于数据搜索。如下图所示，当需要查找 6 的时候，因为需要查\n找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效\n率。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/5/22/1638850ba7458208?w=596&amp;h=485&amp;f=png&amp;s=36796\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 二分搜索树",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\njs\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n  }\n}\nclass BST {\n  constructor() {\n    this.root = null\n    this.size = 0\n  }\n  getSize() {\n    return this.size\n  }\n  isEmpty() {\n    return this.size === 0\n  }\n  addNode(v) {\n    this.root = this._addChild(this.root, v)\n  }\n  // 添加节点时，需要比较添加的节点值和当前\n  // 节点值的大小\n  _addChild(node, v) {\n    if (!node) {\n      this.size++\n      return new Node(v)\n    }\n    if (node.value &gt; v) {\n      node.left = this._addChild(node.left, v)\n    } else if (node.value &lt; v) {\n      node.right = this._addChild(node.right, v)\n    }\n    return node\n  }\n}</p>\n<p>以上是最基本的二分搜索树实现，接下来实现树的遍历。</p>\n<p>对于树的遍历来说，有三种遍历方法，分别是先序遍历、中序遍历、后序遍历。三\n种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分\n别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要\n第一次遍历到节点时进行操作即可。</p>\n<p>以下都是递归实现，如果你想学习非递归实现，可以 <a href=\"../Algorithm/algorithm-ch.md#%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0\">点击这里阅读</a></p>\n<p>js\n// 先序遍历可用于打印树的结构\n// 先序遍历先访问根节点，然后访问左节点，最后访问右节点。\npreTraversal() {\n  this._pre(this.root)\n}\n_pre(node) {\n  if (node) {\n    console.log(node.value)\n    this._pre(node.left)\n    this._pre(node.right)\n  }\n}\n// 中序遍历可用于排序\n// 对于 BST 来说，中序遍历可以实现一次遍历就\n// 得到有序的值\n// 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。\nmidTraversal() {\n  this._mid(this.root)\n}\n_mid(node) {\n  if (node) {\n    this._mid(node.left)\n    console.log(node.value)\n    this._mid(node.right)\n  }\n}\n// 后序遍历可用于先操作子节点\n// 再操作父节点的场景\n// 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。\nbackTraversal() {\n  this._back(this.root)\n}\n_back(node) {\n  if (node) {\n    this._back(node.left)\n    this._back(node.right)\n    console.log(node.value)\n  }\n}</p>\n<p>以上的这几种遍历都可以称之为深度遍历，对应的还有种遍历叫做广度遍历，也就\n是一层层地遍历树。对于广度遍历来说，我们需要利用之前讲过的队列结构来完\n成。</p>\n<p>js\nbreadthTraversal() {\n  if (!this.root) return null\n  let q = new Queue()\n  // 将根节点入队\n  q.enQueue(this.root)\n  // 循环判断队列是否为空，为空\n  // 代表树遍历完毕\n  while (!q.isEmpty()) {\n    // 将队首出队，判断是否有左右子树\n    // 有的话，就先左后右入队\n    let n = q.deQueue()\n    console.log(n.value)\n    if (n.left) q.enQueue(n.left)\n    if (n.right) q.enQueue(n.right)\n  }\n}</p>\n<p>接下来先介绍如何在树中寻找最小值或最大数。因为二分搜索树的特性，所以最小\n值一定在根节点的最左边，最大值相反</p>\n<p>js\ngetMin() {\n  return this._getMin(this.root).value\n}\n_getMin(node) {\n  if (!node.left) return node\n  return this._getMin(node.left)\n}\ngetMax() {\n  return this._getMax(this.root).value\n}\n_getMax(node) {\n  if (!node.right) return node\n  return this._getMin(node.right)\n}</p>\n<p>向上取整和向下取整，这两个操作是相反的，所以代码也是类似的，这里只介绍如\n何向下取整。既然是向下取整，那么根据二分搜索树的特性，值一定在根节点的左\n侧。只需要一直遍历左子树直到当前节点的值不再大于等于需要的值，然后判断节\n点是否还拥有右子树。如果有的话，继续上面的递归判断。</p>\n<p>js\nfloor(v) {\n  let node = this._floor(this.root, v)\n  return node ? node.value : null\n}\n_floor(node, v) {\n  if (!node) return null\n  if (node.value === v) return v\n  // 如果当前节点值还比需要的值大，就继续递归\n  if (node.value &gt; v) {\n    return this._floor(node.left, v)\n  }\n  // 判断当前节点是否拥有右子树\n  let right = this._floor(node.right, v)\n  if (right) return right\n  return node\n}</p>\n<p>排名，这是用于获取给定值的排名或者排名第几的节点的值，这两个操作也是相反\n的，所以这个只介绍如何获取排名第几的节点的值。对于这个操作而言，我们需要\n略微的改造点代码，让每个节点拥有一个 &#39;size&#39; 属性。该属性表示该节点下有多\n少子节点（包含自身）。</p>\n<p>js\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    // 修改代码\n    this.size = 1\n  }\n}\n// 新增代码\n_getSize(node) {\n  return node ? node.size : 0\n}\n_addChild(node, v) {\n  if (!node) {\n    return new Node(v)\n  }\n  if (node.value &gt; v) {\n    // 修改代码\n    node.size++\n    node.left = this._addChild(node.left, v)\n  } else if (node.value &lt; v) {\n    // 修改代码\n    node.size++\n    node.right = this._addChild(node.right, v)\n  }\n  return node\n}\nselect(k) {\n  let node = this._select(this.root, k)\n  return node ? node.value : null\n}\n_select(node, k) {\n  if (!node) return null\n  // 先获取左子树下有几个节点\n  let size = node.left ? node.left.size : 0\n  // 判断 size 是否大于 k\n  // 如果大于 k，代表所需要的节点在左节点\n  if (size &gt; k) return this._select(node.left, k)\n  // 如果小于 k，代表所需要的节点在右节点\n  // 注意这里需要重新计算 k，减去根节点除了右子树的节点数量\n  if (size &lt; k) return this._select(node.right, k - size - 1)\n  return node\n}</p>\n<p>接下来讲解的是二分搜索树中最难实现的部分：删除节点。因为对于删除节点来\n说，会存在以下几种情况</p>\n<p>  需要删除的节点没有子树\n  需要删除的节点只有一条子树\n  需要删除的节点有左右两条树</p>\n<p>对于前两种情况很好解决，但是第三种情况就有难度了，所以先来实现相对简单的\n操作：删除最小节点，对于删除最小节点来说，是不存在第三种情况的，删除最大\n节点操作是和删除最小节点相反的，所以这里也就不再赘述。</p>\n<p>js\ndelectMin() {\n  this.root = this._delectMin(this.root)\n  console.log(this.root)\n}\n_delectMin(node) {\n  // 一直递归左子树\n  // 如果左子树为空，就判断节点是否拥有右子树\n  // 有右子树的话就把需要删除的节点替换为右子树\n  if ((node != null) &amp; !node.left) return node.right\n  node.left = this._delectMin(node.left)\n  // 最后需要重新维护下节点的 &#39;size&#39;\n  node.size = this._getSize(node.left) + this._getSize(node.right) + 1\n  return node\n}</p>\n<p>最后讲解的就是如何删除任意节点了。对于这个操作，T.Hibbard 在 1962 年提\n出了解决这个难题的办法，也就是如何解决第三种情况。</p>\n<p>当遇到这种情况时，需要取出当前节点的后继节点（也就是当前节点右子树的最小\n节点）来替换需要删除的节点。然后将需要删除节点的左子树赋值给后继结点，右\n子树删除后继结点后赋值给他。</p>\n<p>你如果对于这个解决办法有疑问的话，可以这样考虑。因为二分搜索树的特性，父\n节点一定比所有左子节点大，比所有右子节点小。那么当需要删除父节点时，势必\n需要拿出一个比父节点大的节点来替换父节点。这个节点肯定不存在于左子树，必\n然存在于右子树。然后又需要保持父节点都是比右子节点小的，那么就可以取出右\n子树中最小的那个节点来替换父节点。</p>\n<p>js\ndelect(v) {\n  this.root = this._delect(this.root, v)\n}\n_delect(node, v) {\n  if (!node) return null\n  // 寻找的节点比当前节点小，去左子树找\n  if (node.value &lt; v) {\n    node.right = this._delect(node.right, v)\n  } else if (node.value &gt; v) {\n    // 寻找的节点比当前节点大，去右子树找\n    node.left = this._delect(node.left, v)\n  } else {\n    // 进入这个条件说明已经找到节点\n    // 先判断节点是否拥有拥有左右子树中的一个\n    // 是的话，将子树返回出去，这里和 &#39;_delectMin&#39; 的操作一样\n    if (!node.left) return node.right\n    if (!node.right) return node.left\n    // 进入这里，代表节点拥有左右子树\n    // 先取出当前节点的后继结点，也就是取当前节点右子树的最小值\n    let min = this._getMin(node.right)\n    // 取出最小值后，删除最小值\n    // 然后把删除节点后的子树赋值给最小值节点\n    min.right = this._delectMin(node.right)\n    // 左子树不动\n    min.left = node.left\n    node = min\n  }\n  // 维护 size\n  node.size = this._getSize(node.left) + this._getSize(node.right) + 1\n  return node\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 实现",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n二分搜索树实际在业务中是受到限制的，因为并不是严格的 O(logN)，在极端情况\n下会退化成链表，比如加入一组升序的数字就会造成这种情况。</p>\n<p>AVL 树改进了二分搜索树，在 AVL 树中任意节点的左右子树的高度差都不大于 \n1，这样保证了时间复杂度是严格的 O(logN)。基于此，对 AVL 树增加或删除节点\n时可能需要旋转树来达到高度的平衡。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 AVL 树 概念",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n因为 AVL 树是改进了二分搜索树，所以部分代码是于二分搜索树重复的，对于重\n复内容不作再次解析。</p>\n<p>对于 AVL 树来说，添加节点会有四种情况</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/6/23/1642cc145a0cfb26?w=800&amp;h=566&amp;f=png&amp;s=73573\" alt=\"\"></p>\n<p>对于左左情况来说，新增加的节点位于节点 2 的左侧，这时树已经不平衡，需要\n旋转。因为搜索树的特性，节点比左节点大，比右节点小，所以旋转以后也要实现\n这个特性。 </p>\n<p>旋转之前：new &lt; 2 &lt; C &lt; 3 &lt; B &lt; 5 &lt; A，右旋之后节点 3 为根节点，这时\n候需要将节点 3 的右节点加到节点 5 的左边，最后还需要更新节点的高度。</p>\n<p>对于右右情况来说，相反于左左情况，所以不再赘述。</p>\n<p>对于左右情况来说，新增加的节点位于节点 4 的右侧。对于这种情况，需要通过\n两次旋转来达到目的。</p>\n<p>首先对节点的左节点左旋，这时树满足左左的情况，再对节点进行一次右旋就可以\n达到目的。</p>\n<p>js\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    this.height = 1\n  }\n}</p>\n<p>class AVL {\n  constructor() {\n    this.root = null\n  }\n  addNode(v) {\n    this.root = this._addChild(this.root, v)\n  }\n  _addChild(node, v) {\n    if (!node) {\n      return new Node(v)\n    }\n    if (node.value &gt; v) {\n      node.left = this._addChild(node.left, v)\n    } else if (node.value &lt; v) {\n      node.right = this._addChild(node.right, v)\n    } else {\n      node.value = v\n    }\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    let factor = this._getBalanceFactor(node)\n    // 当需要右旋时，根节点的左树一定比右树高度高\n    if (factor &gt; 1 &amp;&amp; this._getBalanceFactor(node.left) &gt;= 0) {\n      return this._rightRotate(node)\n    }\n    // 当需要左旋时，根节点的左树一定比右树高度矮\n    if (factor &lt; -1 &amp;&amp; this._getBalanceFactor(node.right) &lt;= 0) {\n      return this._leftRotate(node)\n    }\n    // 左右情况\n    // 节点的左树比右树高，且节点的左树的右树比节点的左树的左树高\n    if (factor &gt; 1 &amp;&amp; this._getBalanceFactor(node.left) &lt; 0) {\n      node.left = this._leftRotate(node.left)\n      return this._rightRotate(node)\n    }\n    // 右左情况\n    // 节点的左树比右树矮，且节点的右树的右树比节点的右树的左树矮\n    if (factor &lt; -1 &amp;&amp; this._getBalanceFactor(node.right) &gt; 0) {\n      node.right = this._rightRotate(node.right)\n      return this._leftRotate(node)\n    }</p>\n<pre><code>return node\n</code></pre><p>  }\n  _getHeight(node) {\n    if (!node) return 0\n    return node.height\n  }\n  _getBalanceFactor(node) {\n    return this._getHeight(node.left) - this._getHeight(node.right)\n  }\n  // 节点右旋\n  //           5                    2\n  //         /   \\                /   \\\n  //        2     6   ==&gt;       1      5\n  //       /  \\               /       /  \\\n  //      1    3             new     3    6\n  //     /\n  //    new\n  _rightRotate(node) {\n    // 旋转后新根节点\n    let newRoot = node.left\n    // 需要移动的节点\n    let moveNode = newRoot.right\n    // 节点 2 的右节点改为节点 5\n    newRoot.right = node\n    // 节点 5 左节点改为节点 3\n    node.left = moveNode\n    // 更新树的高度\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    newRoot.height =\n      1 +\n      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))</p>\n<pre><code>return newRoot\n</code></pre><p>  }\n  // 节点左旋\n  //           4                    6\n  //         /   \\                /   \\\n  //        2     6   ==&gt;       4      7\n  //             /  \\         /   \\      \\\n  //            5     7      2     5      new\n  //                   \\\n  //                    new\n  _leftRotate(node) {\n    // 旋转后新根节点\n    let newRoot = node.right\n    // 需要移动的节点\n    let moveNode = newRoot.left\n    // 节点 6 的左节点改为节点 4\n    newRoot.left = node\n    // 节点 4 右节点改为节点 5\n    node.right = moveNode\n    // 更新树的高度\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    newRoot.height =\n      1 +\n      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))</p>\n<pre><code>return newRoot\n</code></pre><p>  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 实现",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 Trie 概念",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n总得来说 Trie 的实现相比别的树结构来说简单的很多，实现就以搜索英文字符\n为例。</p>\n<p>js\nclass TrieNode {\n  constructor() {\n    // 代表每个字符经过节点的次数\n    this.path = 0\n    // 代表到该节点的字符串有几个\n    this.end = 0\n    // 链接\n    this.next = new Array(26).fill(null)\n  }\n}\nclass Trie {\n  constructor() {\n    // 根节点，代表空字符\n    this.root = new TrieNode()\n  }\n  // 插入字符串\n  insert(str) {\n    if (!str) return\n    let node = this.root\n    for (let i = 0; i &lt; str.length; i++) {\n      // 获得字符先对应的索引\n      let index = str[i].charCodeAt() - &#39;a&#39;.charCodeAt()\n      // 如果索引对应没有值，就创建\n      if (!node.next[index]) {\n        node.next[index] = new TrieNode()\n      }\n      node.path += 1\n      node = node.next[index]\n    }\n    node.end += 1\n  }\n  // 搜索字符串出现的次数\n  search(str) {\n    if (!str) return\n    let node = this.root\n    for (let i = 0; i &lt; str.length; i++) {\n      let index = str[i].charCodeAt() - &#39;a&#39;.charCodeAt()\n      // 如果索引对应没有值，代表没有需要搜素的字符串\n      if (!node.next[index]) {\n        return 0\n      }\n      node = node.next[index]\n    }\n    return node.end\n  }\n  // 删除字符串\n  delete(str) {\n    if (!this.search(str)) return\n    let node = this.root\n    for (let i = 0; i &lt; str.length; i++) {\n      let index = str[i].charCodeAt() - &#39;a&#39;.charCodeAt()\n      // 如果索引对应的节点的 Path 为 0，代表经过该节点的字符串\n      // 已经一个，直接删除即可\n      if (--node.next[index].path == 0) {\n        node.next[index] = null\n        return\n      }\n      node = node.next[index]\n    }\n    node.end -= 1\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 实现",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n并查集是一种特殊的树结构，用于处理一些不交集的合并及查询问题。该结构中\n每个节点都有一个父节点，如果只有当前一个节点，那么该节点的父节点指向自\n己。</p>\n<p>这个结构中有两个重要的操作，分别是：</p>\n<p>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子\n集。\nUnion：将两个子集合并成同一个集合。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/6/9/163e45b56fd25172?w=421&amp;h=209&amp;f=png&amp;s=26545\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 并查集 概念",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>js\nclass DisjointSet {\n  // 初始化样本\n  constructor(count) {\n    // 初始化时，每个节点的父节点都是自己\n    this.parent = new Array(count)\n    // 用于记录树的深度，优化搜索复杂度\n    this.rank = new Array(count)\n    for (let i = 0; i &lt; count; i++) {\n      this.parent[i] = i\n      this.rank[i] = 1\n    }\n  }\n  find(p) {\n    // 寻找当前节点的父节点是否为自己，不是的话表示还没找到\n    // 开始进行路径压缩优化\n    // 假设当前节点父节点为 A\n    // 将当前节点挂载到 A 节点的父节点上，达到压缩深度的目的\n    while (p != this.parent[p]) {\n      this.parent[p] = this.parent[this.parent[p]]\n      p = this.parent[p]\n    }\n    return p\n  }\n  isConnected(p, q) {\n    return this.find(p) === this.find(q)\n  }\n  // 合并\n  union(p, q) {\n    // 找到两个数字的父节点\n    let i = this.find(p)\n    let j = this.find(q)\n    if (i === j) return\n    // 判断两棵树的深度，深度小的加到深度大的树下面\n    // 如果两棵树深度相等，那就无所谓怎么加\n    if (this.rank[i] &lt; this.rank[j]) {\n      this.parent[i] = j\n    } else if (this.rank[i] &gt; this.rank[j]) {\n      this.parent[j] = i\n    } else {\n      this.parent[i] = j\n      this.rank[j] += 1\n    }\n  }\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 实现",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n堆通常是一个可以被看做一棵树的数组对象。</p>\n<p>堆的实现通过构造<strong>二叉堆</strong>，实为二叉树的一种。这种数据结构具有以下性质。</p>\n<p>  任意节点小于（或大于）它的所有子节点\n  堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层从\n  左到右填入。</p>\n<p>将根节点最大的堆叫做<strong>最大堆</strong>或<strong>大根堆</strong>，根节点最小的堆叫做<strong>最小堆</strong>\n或<strong>小根堆</strong>。</p>\n<p>优先队列也完全可以用堆来实现，操作是一模一样的。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 堆 概念",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n堆的每个节点的左边子节点索引是 &#39;i <em> 2 + 1&#39;，右边是 &#39;i </em> 2 + 2&#39;，父节点\n是 &#39;(i - 1) /2&#39;。</p>\n<p>堆有两个核心的操作，分别是 &#39;shiftUp&#39; 和 &#39;shiftDown&#39; 。前者用于添加元\n素，后者用于删除根节点。</p>\n<p>&#39;shiftUp&#39; 的核心思路是一路将节点与父节点对比大小，如果比父节点大，就和\n父节点交换位置。</p>\n<p>&#39;shiftDown&#39; 的核心思路是先将根节点和末尾交换位置，然后移除末尾元素。接下\n来循环判断父节点和两个子节点的大小，如果子节点大，就把最大的子节点和父节\n点交换。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/6/15/164009e58a5a21f8?w=537&amp;h=394&amp;f=png&amp;s=77222\" alt=\"\"></p>\n<p>js\nclass MaxHeap {\n  constructor() {\n    this.heap = []\n  }\n  size() {\n    return this.heap.length\n  }\n  empty() {\n    return this.size() == 0\n  }\n  add(item) {\n    this.heap.push(item)\n    this._shiftUp(this.size() - 1)\n  }\n  removeMax() {\n    this._shiftDown(0)\n  }\n  getParentIndex(k) {\n    return parseInt((k - 1) / 2)\n  }\n  getLeftIndex(k) {\n    return k * 2 + 1\n  }\n  _shiftUp(k) {\n    // 如果当前节点比父节点大，就交换\n    while (this.heap[k] &gt; this.heap[this.getParentIndex(k)]) {\n      this._swap(k, this.getParentIndex(k))\n      // 将索引变成父节点\n      k = this.getParentIndex(k)\n    }\n  }\n  _shiftDown(k) {\n    // 交换首位并删除末尾\n    this._swap(k, this.size() - 1)\n    this.heap.splice(this.size() - 1, 1)\n    // 判断节点是否有左孩子，因为二叉堆的特性，有右必有左\n    while (this.getLeftIndex(k) &lt; this.size()) {\n      let j = this.getLeftIndex(k)\n      // 判断是否有右孩子，并且右孩子是否大于左孩子\n      if (j + 1 &lt; this.size() &amp;&amp; this.heap[j + 1] &gt; this.heap[j]) j++\n      // 判断父节点是否已经比子节点都大\n      if (this.heap[k] &gt;= this.heap[j]) break\n      this._swap(k, j)\n      k = j\n    }\n  }\n  _swap(left, right) {\n    let rightValue = this.heap[right]\n    this.heap[right] = this.heap[left]\n    this.heap[left] = rightValue\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 实现大根堆",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_e",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_f" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nMVVM 由以下三个内容组成</p>\n<p>  View：界面\n  Model：数据模型\n  ViewModel：作为桥梁负责沟通 View 和 Model</p>\n<p>在 JQuery 时期，如果需要刷新 UI 时，需要先取到对应的 DOM 再更新 UI，这样\n数据和业务的逻辑就和页面有强耦合。</p>\n<p>在 MVVM 中，UI 是通过数据驱动的，数据一旦改变就会相应的刷新对应的 UI，UI\n 如果改变，也会改变对应的数据。这种方式就可以在业务处理中只关心数据的流转\n ，而无需直接和页面打交道。ViewModel 只关心数据和业务的处理，不关心 View\n  如何处理数据，在这种情况下，View 和 Model 都可以独立出来，任何一方改变\n  了也不一定需要改变另一方，并且可以将一些可复用的逻辑放在一个 ViewModel \n  中，让多个 View 复用这个 ViewModel。</p>\n<p>在 MVVM 中，最核心的也就是数据双向绑定，例如 Angluar 的脏数据检测，Vue\n 中的数据劫持。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 MVVM",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n当触发了指定事件后会进入脏数据检测，这时会调用 &#39;$digest&#39; 循环遍历所有的\n数据观察者，判断当前值是否和先前的值有区别，如果检测到变化的话，会调用 \n&#39;$watch&#39; 函数，然后再次调用 &#39;$digest&#39; 循环直到发现没有变化。循环至少为\n二次 ，至多为十次。</p>\n<p>脏数据检测虽然存在低效的问题，但是不关心数据是通过什么方式改变的，都可以\n完成任务，但是这在 Vue 中的双向绑定是存在问题的。并且脏数据检测可以实现\n批量检测出更新的值，再去统一更新 UI，大大减少了操作 DOM 的次数。所以低\n效也是相对的，这就仁者见仁智者见智了。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 脏数据检测",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nVue 内部使用了 &#39;Object.defineProperty()&#39; 来实现双向绑定，通过这个函数\n可以监听到 &#39;set&#39; 和 &#39;get&#39; 的事件。</p>\n<p>js\nvar data = { name: &#39;yck&#39; }\nobserve(data)\nlet name = data.name // -&gt; get value\ndata.name = &#39;yyy&#39; // -&gt; change value</p>\n<p>function observe(obj) {\n  // 判断类型\n  if (!obj || typeof obj !== &#39;object&#39;) {\n    return\n  }\n  Object.keys(obj).forEach(key =&gt; {\n    defineReactive(obj, key, obj[key])\n  })\n}</p>\n<p>function defineReactive(obj, key, val) {\n  // 递归子属性\n  observe(val)\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      console.log(&#39;get value&#39;)\n      return val\n    },\n    set: function reactiveSetter(newVal) {\n      console.log(&#39;change value&#39;)\n      val = newVal\n    }\n  })\n}</p>\n<p>以上代码简单的实现了如何监听数据的 &#39;set&#39; 和 &#39;get&#39; 的事件，但是仅仅如此\n是不够的，还需要在适当的时候给属性添加发布订阅</p>\n<p>html</p>\n<div>\n    {{name}}\n</div>\n\n<p>::: v-pre\n在解析如上模板代码时，遇到 &#39;{{name}}&#39; 就会给属性 &#39;name&#39; 添加发布订阅。\n:::</p>\n<p>js\n// 通过 Dep 解耦\nclass Dep {\n  constructor() {\n    this.subs = []\n  }\n  addSub(sub) {\n    // sub 是 Watcher 实例\n    this.subs.push(sub)\n  }\n  notify() {\n    this.subs.forEach(sub =&gt; {\n      sub.update()\n    })\n  }\n}\n// 全局属性，通过该属性配置 Watcher\nDep.target = null</p>\n<p>function update(value) {\n  document.querySelector(&#39;div&#39;).innerText = value\n}</p>\n<p>class Watcher {\n  constructor(obj, key, cb) {\n    // 将 Dep.target 指向自己\n    // 然后触发属性的 getter 添加监听\n    // 最后将 Dep.target 置空\n    Dep.target = this\n    this.cb = cb\n    this.obj = obj\n    this.key = key\n    this.value = obj[key]\n    Dep.target = null\n  }\n  update() {\n    // 获得新值\n    this.value = this.obj[this.key]\n    // 调用 update 方法更新 Dom\n    this.cb(this.value)\n  }\n}\nvar data = { name: &#39;yck&#39; }\nobserve(data)\n// 模拟解析到 &#39;{{name}}&#39; 触发的操作\nnew Watcher(data, &#39;name&#39;, update)\n// update Dom innerText\ndata.name = &#39;yyy&#39; </p>\n<p>接下来,对 &#39;defineReactive&#39; 函数进行改造</p>\n<p>js\nfunction defineReactive(obj, key, val) {\n  // 递归子属性\n  observe(val)\n  let dp = new Dep()\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      console.log(&#39;get value&#39;)\n      // 将 Watcher 添加到订阅\n      if (Dep.target) {\n        dp.addSub(Dep.target)\n      }\n      return val\n    },\n    set: function reactiveSetter(newVal) {\n      console.log(&#39;change value&#39;)\n      val = newVal\n      // 执行 watcher 的 update 方法\n      dp.notify()\n    }\n  })\n}</p>\n<p>以上实现了一个简易的双向绑定，核心思路就是手动触发一次属性的 getter 来\n实现发布订阅的添加。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 数据劫持",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n&#39;Object.defineProperty&#39; 虽然已经能够实现双向绑定了，但是他还是有缺陷的。</p>\n<ol>\n<li>只能对属性进行数据劫持，所以需要深度遍历整个对象</li>\n<li>对于数组不能监听到数据的变化</li>\n</ol>\n<p>虽然 Vue 中确实能检测到数组数据的变化，但是其实是使用了 hack 的办法，并\n且也是有缺陷的。</p>\n<p>js\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n// hack 以下几个函数\nconst methodsToPatch = [\n  &#39;push&#39;,\n  &#39;pop&#39;,\n  &#39;shift&#39;,\n  &#39;unshift&#39;,\n  &#39;splice&#39;,\n  &#39;sort&#39;,\n  &#39;reverse&#39;\n]\nmethodsToPatch.forEach(function (method) {\n  // 获得原生函数\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    // 调用原生函数\n    const result = original.apply(this, args)\n    const ob = this.<strong>ob</strong>\n    let inserted\n    switch (method) {\n      case &#39;push&#39;:\n      case &#39;unshift&#39;:\n        inserted = args\n        break\n      case &#39;splice&#39;:\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // 触发更新\n    ob.dep.notify()\n    return result\n  })\n})</p>\n<p>反观 Proxy 就没以上的问题，原生支持监听数组变化，并且可以直接对整个对\n象进行拦截，所以 Vue 也将在下个大版本中使用 Proxy 替换 Object.define\nProperty</p>\n<p>js\nlet onWatch = (obj, setBind, getLogger) =&gt; {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver);\n    },\n    set(target, property, value, receiver) {\n      setBind(value);\n      return Reflect.set(target, property, value);\n    }\n  };\n  return new Proxy(obj, handler);\n};</p>\n<p>let obj = { a: 1 }\nlet value\nlet p = onWatch(obj, (v) =&gt; {\n  value = v\n}, (target, property) =&gt; {\n  console.log(&#39;Get &#39;${property}&#39; = ${target[property]}&#39;);\n})\np.a = 2 // bind &#39;value&#39; to &#39;2&#39;\np.a // -&gt; Get &#39;a&#39; = 2\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 Proxy 与 Object.defineProperty 对比",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n前端路由实现起来其实很简单，本质就是监听 URL 的变化，然后匹配路由规则，\n显示相应的页面，并且无须刷新。目前单页面使用的路由就只有两种实现方式</p>\n<p>  hash 模式\n  history 模式</p>\n<p>&#39;www.test.com/#/&#39; 就是 Hash URL，当 &#39;#&#39; 后面的哈希值发生变化时，不会\n向服务器请求数据，可以通过 &#39;hashchange&#39; 事件来监听到 URL 的变化，从而\n进行跳转页面。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/11/164888109d57995f?w=942&amp;h=493&amp;f=png&amp;s=39581\" alt=\"\"></p>\n<p>History 模式是 HTML5 新推出的功能，比之 Hash URL 更加美观</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/11/164888478584a217?w=1244&amp;h=585&amp;f=png&amp;s=59637\" alt=\"\">\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 路由原理",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n<a href=\"https://github.com/KieSun/My-wheels/tree/master/Virtual%20Dom\">代码地址</a></p>\n<p>为什么需要 Virtual Dom</p>\n<p>众所周知，操作 DOM 是很耗费性能的一件事情，既然如此，我们可以考虑通过 \nJS 对象来模拟 DOM 对象，毕竟操作 JS 对象比操作 DOM 省时的多。</p>\n<p>举个例子</p>\n<p>js\n// 假设这里模拟一个 ul，其中包含了 5 个 li\n[1, 2, 3, 4, 5]\n// 这里替换上面的 li\n[1, 2, 5, 4]</p>\n<p>从上述例子中，我们一眼就可以看出先前的 ul 中的第三个 li 被移除了，四五\n替换了位置。</p>\n<p>如果以上操作对应到 DOM 中，那么就是以下代码</p>\n<p>js\n// 删除第三个 li\nul.childNodes[2].remove()\n// 将第四个 li 和第五个交换位置\nlet fromNode = ul.childNodes[4]\nlet toNode = node.childNodes[3]\nlet cloneFromNode = fromNode.cloneNode(true)\nlet cloenToNode = toNode.cloneNode(true)\nul.replaceChild(cloneFromNode, toNode)\nul.replaceChild(cloenToNode, fromNode)</p>\n<p>当然在实际操作中，我们还需要给每个节点一个标识，作为判断是同一个节点的\n依据。所以这也是 Vue 和 React 中官方推荐列表里的节点使用唯一的 &#39;key&#39; \n来保证性能。</p>\n<p>那么既然 DOM 对象可以通过 JS 对象来模拟，反之也可以通过 JS 对象来渲染\n出对应的 DOM</p>\n<p>以下是一个 JS 对象模拟 DOM 对象的简单实现</p>\n<p>js\nexport default class Element {\n  /*<em>\n   </em> @param {String} tag &#39;div&#39;\n   <em> @param {Object} props { class: &#39;item&#39; }\n   </em> @param {Array} children [ Element1, &#39;text&#39;]\n   <em> @param {String} key option\n   </em>/\n  constructor(tag, props, children, key) {\n    this.tag = tag\n    this.props = props\n    if (Array.isArray(children)) {\n      this.children = children\n    } else if (isString(children)) {\n      this.key = children\n      this.children = null\n    }\n    if (key) this.key = key\n  }\n  // 渲染\n  render() {\n    let root = this._createElement(\n      this.tag,\n      this.props,\n      this.children,\n      this.key\n    )\n    document.body.appendChild(root)\n    return root\n  }\n  create() {\n    return this._createElement(this.tag, this.props, this.children, this.key)\n  }\n  // 创建节点\n  _createElement(tag, props, child, key) {\n    // 通过 tag 创建节点\n    let el = document.createElement(tag)\n    // 设置节点属性\n    for (const key in props) {\n      if (props.hasOwnProperty(key)) {\n        const value = props[key]\n        el.setAttribute(key, value)\n      }\n    }\n    if (key) {\n      el.setAttribute(&#39;key&#39;, key)\n    }\n    // 递归添加子节点\n    if (child) {\n      child.forEach(element =&gt; {\n        let child\n        if (element instanceof Element) {\n          child = this._createElement(\n            element.tag,\n            element.props,\n            element.children,\n            element.key\n          )\n        } else {\n          child = document.createTextNode(element)\n        }\n        el.appendChild(child)\n      })\n    }\n    return el\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 Virtual Dom",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n既然我们已经通过 JS 来模拟实现了 DOM，那么接下来的难点就在于如何判断旧\n的对象和新的对象之间的差异。</p>\n<p>DOM 是多叉树的结构，如果需要完整的对比两颗树的差异，那么需要的时间复杂\n度会是 O(n ^ 3)，这个复杂度肯定是不能接受的。于是 React 团队优化了算法\n，实现了 O(n) 的复杂度来对比差异。</p>\n<p>实现 O(n) 复杂度的关键就是只对比同层的节点，而不是跨层对比，这也是考虑\n到在实际业务中很少会去跨层的移动 DOM 元素。</p>\n<p>所以判断差异的算法就分为了两步</p>\n<p>首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个\n节点添加索引，便于最后渲染差异\n一旦节点有子元素，就去判断子元素是否有不同\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 Virtual Dom 算法简述",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n树的递归</p>\n<p>首先我们来实现树的递归算法，在实现该算法前，先来考虑下两个节点对比会有\n几种情况</p>\n<ol>\n<li>新的节点的 &#39;tagName&#39; 或者 &#39;key&#39; 和旧的不同，这种情况代表需要替\n换旧的节点，并且也不再需要遍历新旧节点的子元素了，因为整个旧节点都被\n删掉了</li>\n<li>新的节点的 &#39;tagName&#39; 和 &#39;key&#39;（可能都没有）和旧的相同，开始遍历\n子树</li>\n<li>没有新的节点，那么什么都不用做</li>\n</ol>\n<p>js\nimport { StateEnums, isString, move } from &#39;./util&#39;\nimport Element from &#39;./element&#39;</p>\n<p>export default function diff(oldDomTree, newDomTree) {\n  // 用于记录差异\n  let pathchs = {}\n  // 一开始的索引为 0\n  dfs(oldDomTree, newDomTree, 0, pathchs)\n  return pathchs\n}</p>\n<p>function dfs(oldNode, newNode, index, patches) {\n  // 用于保存子树的更改\n  let curPatches = []\n  // 需要判断三种情况\n  // 1.没有新的节点，那么什么都不用做\n  // 2.新的节点的 tagName 和 &#39;key&#39; 和旧的不同，就替换\n  // 3.新的节点的 tagName 和 key（可能都没有） 和旧的相同，开始遍历\n  子树\n  if (!newNode) {\n  } else if (newNode.tag === oldNode.tag &amp;&amp; newNode.key === oldNode.key) {\n    // 判断属性是否变更\n    let props = diffProps(oldNode.props, newNode.props)\n    if (props.length) curPatches.push({ type: StateEnums.ChangeProps, props })\n    // 遍历子树\n    diffChildren(oldNode.children, newNode.children, index, patches)\n  } else {\n    // 节点不同，需要替换\n    curPatches.push({ type: StateEnums.Replace, node: newNode })\n  }</p>\n<p>  if (curPatches.length) {\n    if (patches[index]) {\n      patches[index] = patches[index].concat(curPatches)\n    } else {\n      patches[index] = curPatches\n    }\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 Virtual Dom 算法实现",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n判断属性的更改也分三个步骤</p>\n<ol>\n<li>遍历旧的属性列表，查看每个属性是否还存在于新的属性列表中</li>\n<li>遍历新的属性列表，判断两个列表中都存在的属性的值是否有变化</li>\n<li>在第二步中同时查看是否有属性不存在与旧的属性列列表中</li>\n</ol>\n<p>js\nfunction diffProps(oldProps, newProps) {\n  // 判断 Props 分以下三步骤\n  // 先遍历 oldProps 查看是否存在删除的属性\n  // 然后遍历 newProps 查看是否有属性值被修改\n  // 最后查看是否有属性新增\n  let change = []\n  for (const key in oldProps) {\n    if (oldProps.hasOwnProperty(key) &amp;&amp; !newProps[key]) {\n      change.push({\n        prop: key\n      })\n    }\n  }\n  for (const key in newProps) {\n    if (newProps.hasOwnProperty(key)) {\n      const prop = newProps[key]\n      if (oldProps[key] &amp;&amp; oldProps[key] !== newProps[key]) {\n        change.push({\n          prop: key,\n          value: newProps[key]\n        })\n      } else if (!oldProps[key]) {\n        change.push({\n          prop: key,\n          value: newProps[key]\n        })\n      }\n    }\n  }\n  return change\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 判断属性的更改",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n这个算法是整个 Virtual Dom 中最核心的算法，且让我一一为你道来。\n这里的主要步骤其实和判断属性差异是类似的，也是分为三步</p>\n<ol>\n<li>遍历旧的节点列表，查看每个节点是否还存在于新的节点列表中</li>\n<li>遍历新的节点列表，判断是否有新的节点</li>\n<li>在第二步中同时判断节点是否有移动</li>\n</ol>\n<p>PS：该算法只对有 &#39;key&#39; 的节点做处理</p>\n<p>js\nfunction listDiff(oldList, newList, index, patches) {\n  // 为了遍历方便，先取出两个 list 的所有 keys\n  let oldKeys = getKeys(oldList)\n  let newKeys = getKeys(newList)\n  let changes = []</p>\n<p>  // 用于保存变更后的节点数据\n  // 使用该数组保存有以下好处\n  // 1.可以正确获得被删除节点索引\n  // 2.交换节点位置只需要操作一遍 DOM\n  // 3.用于 &#39;diffChildren&#39; 函数中的判断，只需要遍历\n  // 两个树中都存在的节点，而对于新增或者删除的节点来说，完全没必要\n  // 再去判断一遍\n  let list = []\n  oldList &amp;&amp;\n    oldList.forEach(item =&gt; {\n      let key = item.key\n      if (isString(item)) {\n        key = item\n      }\n      // 寻找新的 children 中是否含有当前节点\n      // 没有的话需要删除\n      let index = newKeys.indexOf(key)\n      if (index === -1) {\n        list.push(null)\n      } else list.push(key)\n    })\n  // 遍历变更后的数组\n  let length = list.length\n  // 因为删除数组元素是会更改索引的\n  // 所有从后往前删可以保证索引不变\n  for (let i = length - 1; i &gt;= 0; i--) {\n    // 判断当前元素是否为空，为空表示需要删除\n    if (!list[i]) {\n      list.splice(i, 1)\n      changes.push({\n        type: StateEnums.Remove,\n        index: i\n      })\n    }\n  }\n  // 遍历新的 list，判断是否有节点新增或移动\n  // 同时也对 &#39;list&#39; 做节点新增和移动节点的操作\n  newList &amp;&amp;\n    newList.forEach((item, i) =&gt; {\n      let key = item.key\n      if (isString(item)) {\n        key = item\n      }\n      // 寻找旧的 children 中是否含有当前节点\n      let index = list.indexOf(key)\n      // 没找到代表新节点，需要插入\n      if (index === -1 || key == null) {\n        changes.push({\n          type: StateEnums.Insert,\n          node: item,\n          index: i\n        })\n        list.splice(i, 0, key)\n      } else {\n        // 找到了，需要判断是否需要移动\n        if (index !== i) {\n          changes.push({\n            type: StateEnums.Move,\n            from: index,\n            to: i\n          })\n          move(list, index, i)\n        }\n      }\n    })\n  return { changes, list }\n}</p>\n<p>function getKeys(list) {\n  let keys = []\n  let text\n  list &amp;&amp;\n    list.forEach(item =&gt; {\n      let key\n      if (isString(item)) {\n        key = [item]\n      } else if (item instanceof Element) {\n        key = item.key\n      }\n      keys.push(key)\n    })\n  return keys\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 判断列表差异算法实现",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n对于这个函数来说，主要功能就两个</p>\n<ol>\n<li>判断两个列表差异</li>\n<li>给节点打上标记</li>\n</ol>\n<p>总体来说，该函数实现的功能很简单</p>\n<p>js\nfunction diffChildren(oldChild, newChild, index, patches) {\n  let { changes, list } = listDiff(oldChild, newChild, index, patches)\n  if (changes.length) {\n    if (patches[index]) {\n      patches[index] = patches[index].concat(changes)\n    } else {\n      patches[index] = changes\n    }\n  }\n  // 记录上一个遍历过的节点\n  let last = null\n  oldChild &amp;&amp;\n    oldChild.forEach((item, i) =&gt; {\n      let child = item &amp;&amp; item.children\n      if (child) {\n        index =\n          last &amp;&amp; last.children ? index + last.children.length + 1 : index + 1\n        let keyIndex = list.indexOf(item.key)\n        let node = newChild[keyIndex]\n        // 只遍历新旧中都存在的节点，其他新增或者删除的没必要遍历\n        if (node) {\n          dfs(item, node, index, patches)\n        }\n      } else index += 1\n      last = item\n    })\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 遍历子元素打标识",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n通过之前的算法，我们已经可以得出两个树的差异了。既然知道了差异，就需要局\n部去更新 DOM 了，下面就让我们来看看 Virtual Dom 算法的最后一步骤</p>\n<p>这个函数主要两个功能</p>\n<ol>\n<li>深度遍历树，将需要做变更操作的取出来</li>\n<li>局部更新 DOM</li>\n</ol>\n<p>整体来说这部分代码还是很好理解的</p>\n<p>js\nlet index = 0\nexport default function patch(node, patchs) {\n  let changes = patchs[index]\n  let childNodes = node &amp;&amp; node.childNodes\n  // 这里的深度遍历和 diff 中是一样的\n  if (!childNodes) index += 1\n  if (changes &amp;&amp; changes.length &amp;&amp; patchs[index]) {\n    changeDom(node, changes)\n  }\n  let last = null\n  if (childNodes &amp;&amp; childNodes.length) {\n    childNodes.forEach((item, i) =&gt; {\n      index =\n        last &amp;&amp; last.children ? index + last.children.length + 1 : index + 1\n      patch(item, patchs)\n      last = item\n    })\n  }\n}</p>\n<p>function changeDom(node, changes, noChild) {\n  changes &amp;&amp;\n    changes.forEach(change =&gt; {\n      let { type } = change\n      switch (type) {\n        case StateEnums.ChangeProps:\n          let { props } = change\n          props.forEach(item =&gt; {\n            if (item.value) {\n              node.setAttribute(item.prop, item.value)\n            } else {\n              node.removeAttribute(item.prop)\n            }\n          })\n          break\n        case StateEnums.Remove:\n          node.childNodes[change.index].remove()\n          break\n        case StateEnums.Insert:\n          let dom\n          if (isString(change.node)) {\n            dom = document.createTextNode(change.node)\n          } else if (change.node instanceof Element) {\n            dom = change.node.create()\n          }\n          node.insertBefore(dom, node.childNodes[change.index])\n          break\n        case StateEnums.Replace:\n          node.parentNode.replaceChild(change.node.create(), node)\n          break\n        case StateEnums.Move:\n          let fromNode = node.childNodes[change.from]\n          let toNode = node.childNodes[change.to]\n          let cloneFromNode = fromNode.cloneNode(true)\n          let cloenToNode = toNode.cloneNode(true)\n          node.replaceChild(cloneFromNode, toNode)\n          node.replaceChild(cloenToNode, fromNode)\n          break\n        default:\n          break\n      }\n    })\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 渲染差异",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nVirtual Dom 算法的实现也就是以下三步</p>\n<ol>\n<li>通过 JS 来模拟创建 DOM 对象</li>\n<li>判断两个对象的差异</li>\n<li>渲染差异</li>\n</ol>\n<p>js\nlet test4 = new Element(&#39;div&#39;, { class: &#39;my-div&#39; }, [&#39;test4&#39;])\nlet test5 = new Element(&#39;ul&#39;, { class: &#39;my-div&#39; }, [&#39;test5&#39;])</p>\n<p>let test1 = new Element(&#39;div&#39;, { class: &#39;my-div&#39; }, [test4])</p>\n<p>let test2 = new Element(&#39;div&#39;, { id: &#39;11&#39; }, [test5, test4])</p>\n<p>let root = test1.render()</p>\n<p>let pathchs = diff(test1, test2)\nconsole.log(pathchs)</p>\n<p>setTimeout(() =&gt; {\n  console.log(&#39;开始更新&#39;)\n  patch(root, pathchs)\n  console.log(&#39;结束更新&#39;)\n}, 1000)</p>\n<p>当然目前的实现还略显粗糙，但是对于理解 Virtual Dom 算法来说已经是完全\n足够的了。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 最后",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_f",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_g" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n该命令可以让和 &#39;merge&#39; 命令得到的结果基本是一致的。</p>\n<p>通常使用 &#39;merge&#39; 操作将分支上的代码合并到 &#39;master&#39; 中，分支样子如下所\n示</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/23/162f109db27be054?w=505&amp;h=461&amp;f=png&amp;s=22796\" alt=\"\"></p>\n<p>使用 &#39;rebase&#39; 后，会将 &#39;develop&#39; 上的 &#39;commit&#39; 按顺序移到 &#39;master&#39; \n的第三个 &#39;commit&#39; 后面，分支样子如下所示</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/23/162f11cc2cb8b332?w=505&amp;h=563&amp;f=png&amp;s=26514\" alt=\"\"></p>\n<p>Rebase 对比 merge，优势在于合并后的结果很清晰，只有一条线，劣势在于如\n果一旦出现冲突，解决冲突很麻烦，可能要解决多个冲突，但是 merge 出现冲\n突只需要解决一次。</p>\n<p>使用 rebase 应该在需要被 rebase 的分支上操作，并且该分支是本地分支。\n如果 &#39;develop&#39; 分支需要 rebase 到 &#39;master&#39; 上去，那么应该如下操作</p>\n<p>shell</p>\n<h2 id=\"branch-develop\">branch develop</h2>\n<p>git rebase master\ngit checkout master</p>\n<h2 id=\"-master-head-commit\">用于将 &#39;master&#39; 上的 HEAD 移动到最新的 commit</h2>\n<p>git merge develop\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_g",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 Rebase 合并",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n&#39;stash&#39; 用于临时保存工作目录的改动。开发中可能会遇到代码写一半需要切分\n支打包的问题，如果这时候你不想 &#39;commit&#39; 的话，就可以使用该命令。</p>\n<p>shell\ngit stash</p>\n<p>使用该命令可以暂存你的工作目录，后面想恢复工作目录，只需要使用</p>\n<p>shell\ngit stash pop</p>\n<p>这样你之前临时保存的代码又回来了\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_g",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "2.0 stash",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n&#39;reflog&#39; 可以看到 HEAD 的移动记录，假如之前误删了一个分支，可以通过\n &#39;git reflog&#39; 看到移动 HEAD 的哈希值</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/23/162f14df98ce3d83?w=950&amp;h=118&amp;f=png&amp;s=77151\" alt=\"\"></p>\n<p>从图中可以看出，HEAD 的最后一次移动行为是 &#39;merge&#39; 后，接下来分支 \n&#39;new&#39; 就被删除了，那么我们可以通过以下命令找回 &#39;new&#39; 分支</p>\n<p>shell\ngit checkout 37d9aca\ngit checkout -b new</p>\n<p>PS：&#39;reflog&#39; 记录是时效的，只会保存一段时间内的记录。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_g",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "3.0 reflog",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n如果你想删除刚写的 commit，就可以通过以下命令实现</p>\n<p>shell\ngit reset --hard HEAD^</p>\n<p>但是 &#39;reset&#39; 的本质并不是删除了 commit，而是重新设置了 HEAD 和它\n指向的 branch。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_g",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "4.0 Reset",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_g",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "5.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLtaiBADqiIat-6k_h" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nGit 属于分布式版本控制系统，而 SVN 属于集中式。</p>\n<p><div align=\"center\"> <img src=\"pics/1fe2dc77-9a2d-4643-90b3-bbf50f649bac.png\" width=\"600px\"> </div><br></p>\n<p>集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上\n就有一份完整的代码。</p>\n<p>集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。</p>\n<p>集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件的会慢的无\n法让人忍受。而分布式版本控制不需要连网就能工作。</p>\n<p>分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个\n分支相当于复制一份完整代码。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 集中式与分布式",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n中心服务器用来交换每个用户的修改，没有中心服务器也能工作，但是中心服务器\n能够 24 小时保持开机状态，这样就能更方便的交换修改。</p>\n<p>Github 就是一个中心服务器。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 中心服务器",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它\n属于 Git 的版本库。</p>\n<p>Git 的版本库有一个称为 Stage 的暂存区以及最后的 History 版本库，History\n 中存有所有分支，使用一个 HEAD 指针指向当前分支。</p>\n<p><div align=\"center\"> <img src=\"pics/71b97a50-a49f-4f1a-81d1-48c3364d61b3.png\" width=\"700px\"> </div><br></p>\n<p>git add files 把文件的修改添加到暂存区\ngit commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了\ngit reset -- files 使用当前分支上的修改覆盖暂存区，用来撤销最后一次 git add files\ngit checkout -- files 使用暂存区的修改覆盖工作目录，用来撤销本地修改</p>\n<p><div align=\"center\"> <img src=\"pics/603dbb49-dac5-4825-9694-5f1d65cefd44.png\" width=\"320px\"> </div><br></p>\n<p>可以跳过暂存区域直接从分支中取出修改，或者直接提交修改到分支中。</p>\n<p>git commit -a 直接把所有文件的修改添加到暂存区然后执行提交\ngit checkout HEAD -- files 取出最后一次修改，可以用来进行回滚操作</p>\n<p><div align=\"center\"> <img src=\"pics/265bab88-7be9-44c5-a33f-f93d9882c096.png\" width=\"500px\"> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 工作流",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n使用指针将每个提交连接成一条时间线，HEAD 指针指向当前分支指针。</p>\n<p><div align=\"center\"> <img src=\"pics/ec4d7464-7140-46d8-827e-d63634202e1e.png\" width=\"220px\"> </div><br></p>\n<p>新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支\n表示新分支成为当前分支。</p>\n<p><div align=\"center\"> <img src=\"pics/66d00642-ce37-466c-8f7a-143d0bf84cd6.png\" width=\"220px\"> </div><br></p>\n<p>每次提交只会让当前分支指针向前移动，而其它分支指针不会移动。</p>\n<p><div align=\"center\"> <img src=\"pics/72a01242-e6b4-46c5-a285-24e754d63093.png\" width=\"300px\"> </div><br></p>\n<p>合并分支也只需要改变指针即可。</p>\n<p><div align=\"center\"> <img src=\"pics/94617147-0cbd-4a28-847d-81e52efb1b1e.png\" width=\"300px\"> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 分支实现",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。</p>\n<p><div align=\"center\"> <img src=\"pics/32b05e81-41b3-414a-8656-736c9604e3d6.png\" width=\"300px\"> </div><br></p>\n<p>Git 会使用 &lt;&lt;&lt;&lt;&lt;&lt;&lt; ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容，只需要把\n不同分支中冲突部分修改成一样就能解决冲突。</p>\n<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<h1 id=\"creating-a-new-branch-is-quick-simple-\">Creating a new branch is quick &amp; simple.</h1>\n<p>Creating a new branch is quick AND simple.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>feature1\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 冲突",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n&quot;快进式合并&quot;（fast-farward merge），会直接将 master 分支指向合并的分\n支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支\n信息。</p>\n<p>可以在合并时加上 --no-ff 参数来禁用 Fast forward 模式，并且加上 -m 参\n数让合并时产生一个新的 commit。</p>\n<p>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</p>\n<p><div align=\"center\"> <img src=\"pics/9a519773-84b2-4c81-81cf-4e7dd739a97a.png\" width=\"350px\"> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 Fast forward",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nmaster 分支应该是非常稳定的，只用来发布新版本；</p>\n<p>日常开发在开发分支 dev 上进行。</p>\n<p><div align=\"center\"> <img src=\"pics/245fd2fb-209c-4ad5-bc5e-eb5664966a0e.jpg\" width=\"\"> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 分支管理策略",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，\n那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘\n故。</p>\n<p>可以使用 git stash 将当前分支的修改储藏起来，此时当前工作区的所有修改都\n会被存到栈上，也就是说当前工作区是干净的，没有任何未提交的修改。此时就可\n以安全的切换到其它分支上了。</p>\n<p>$ git stash\nSaved working directory and index state \\ &quot;WIP on master: 049d078 added the index file&quot;\nHEAD is now at 049d078 added the index file (To restore them type &quot;git stash apply&quot;)</p>\n<p>该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此\n时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即\n提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev\n 分支的未提交修改储藏起来。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 储藏（Stashing）",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nGit 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。</p>\n<p>如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这\n两个文件，可以通过以下命令来创建 SSH Key：</p>\n<p>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</p>\n<p>然后把公钥 id_rsa.pub 的内容复制到 Github &quot;Account settings&quot; 的 SSH \nKeys 中。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 SSH 传输设置",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n忽略以下文件：</p>\n<p>操作系统自动生成的文件，比如缩略图；\n编译生成的中间文件，比如 Java 编译产生的 .class 文件；\n自己的敏感信息，比如存放口令的配置文件。</p>\n<p>不需要全部自己编写，可以到 <a href=\"https://github.com/github/gitignore\">https://github.com/github/gitignore</a> \n中进行查询。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 .gitignore 文件",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nGit 命令一览</p>\n<p><div align=\"center\"> <img src=\"pics/7a29acce-f243-4914-9f00-f2988c528412.jpg\" width=\"\"> </div><br></p>\n<p>比较详细的地址：http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 Git 命令一览",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLtaiBADqiIat-6k_h",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLuLklhwL7keqLFNmD" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n基本类型有六种： null，undefined，boolean，number，string，symbol\n对象（Object）是引用类型，在使用过程中会遇到浅拷贝和深拷贝的问题。\nlet a = { name: &#39;FE&#39; }\nlet b = a\nb.name = &#39;EF&#39;\nconsole.log(a.name) // EF</p>\n<p>Typeof\ntypeof 1 // &#39;number&#39;\ntypeof &#39;1&#39; // &#39;string&#39;\ntypeof undefined // &#39;undefined&#39;\ntypeof true // &#39;boolean&#39;\ntypeof Symbol() // &#39;symbol&#39;\ntypeof b // b 没有声明，但是还会显示 undefined\ntypeof [] // &#39;object&#39;\ntypeof {} // &#39;object&#39;\ntypeof console.log // &#39;function&#39;\ntypeof null // &#39;object&#39;\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 内置类型",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "answer" : "a",
              "options" : {
                "a" : "symbol",
                "b" : "undefined",
                "c" : "object",
                "d" : "function"
              },
              "title" : "typeof Symbol()的结果是",
              "type" : "Select"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "1.1 内置类型选择题",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "inputanswer" : "Object",
              "inputcontent" : "对象（）是引用类型，在使用过程中会遇到浅拷贝和深拷贝的问题",
              "title" : "在（）中填入正确文字",
              "type" : "Input"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "1.2 内置类型填空题",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>在条件判断时，除了 undefined， null， false， NaN， &#39;&#39;， 0， -0，其他所有值都转为 true，包括所有对象。\n对象在转换基本类型时，首先会调用 valueOf 然后调用 toString。并且这两个方法你是可以重写的。\nlet a = {\n  valueOf() {\n    return 0;\n  },\n  toString() {\n    return &#39;1&#39;;\n  },\n  [Symbol.toPrimitive]() {\n    return 2;\n  }\n}\n1 + a // =&gt; 3\n&#39;1&#39; + a // =&gt; &#39;12&#39;</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "2.0 类型转换",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "answer" : "d",
              "options" : {
                "a" : "undefined",
                "b" : "null",
                "c" : "false",
                "d" : "&#39;1&#39;"
              },
              "title" : "在条件判断时转化为true的是",
              "type" : "Select"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "2.1 类型转换选择题",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "inputanswer" : "false",
              "inputcontent" : "在条件判断时-0转化为（）",
              "title" : "在（）中填入正确文字",
              "type" : "Input"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "2.2 类型转换填空题",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>// [] 转成 true，然后取反变成 false\n[] == false\n// 根据第 8 条得出\n[] == ToNumber(false)\n[] == 0\n// 根据第 10 条得出\nToPrimitive([]) == 0\n// [].toString() -&gt; &#39;&#39;\n&#39;&#39; == 0\n// 根据第 6 条得出\n0 == 0 // -&gt; true</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "3.0 == 操作符",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "answer" : "c",
              "options" : {
                "a" : "[] == false",
                "b" : "[] == 0",
                "c" : "ToPrimitive([]) ！== 0",
                "d" : "&#39;&#39; == 0"
              },
              "title" : "下述选择答案为false的是",
              "type" : "Select"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "3.1 == 操作符选择题",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "inputanswer" : "true",
              "inputcontent" : "0 == 0的结果是（）",
              "title" : "在（）中填入正确文字",
              "type" : "Input"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "3.2 == 操作符填空题",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n每个函数都有 prototype 属性，除了 Function.prototype.bind()，该属性指向原型。\n每个对象都有 <strong>proto</strong> 属性，指向了创建该对象的构造函数的原型。其实这个属性指\n向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使\n用 <em>proto</em> 来访问。\n对象可以通过 <strong>proto</strong> 来寻找不属于该对象的属性，<strong>proto</strong> 将对象连接起来组成\n了原型链。\nnew\nfunction create() {\n    // 创建一个空的对象\n    let obj = new Object()\n    // 获得构造函数\n    let Con = [].shift.call(arguments)\n    // 链接到原型\n    obj.<strong>proto</strong> = Con.prototype\n    // 绑定 this，执行构造函数\n    let result = Con.apply(obj, arguments)\n    // 确保 new 出来的是个对象\n    return typeof result === &#39;object&#39; ? result : obj\n}</p>\n<p>function Foo() {\n    return this;\n}\nFoo.getName = function () {\n    console.log(&#39;1&#39;);\n};\nFoo.prototype.getName = function () {\n    console.log(&#39;2&#39;);\n};</p>\n<p>new Foo.getName();   // -&gt; 1\nnew Foo().getName(); // -&gt; 2<br></code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "4.0 prototype",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>function instanceof(left, right) {\n    // 获得类型的原型\n    let prototype = right.prototype\n    // 获得对象的原型\n    left = left.__proto__\n    // 判断对象的类型是否等于类型的原型\n    while (true) {\n        if (left === null)\n            return false\n        if (prototype === left)\n            return true\n        left = left.__proto__\n    }\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "5.0 instanceof",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nfunction foo() {\n    console.log(this.a)\n}\nvar a = 1\nfoo()</p>\n<p>var obj = {\n    a: 2,\n    foo: foo\n}\nobj.foo()\n// 以上两者情况 this 只依赖于调用函数前的对象，优先级是第二个情况大于\n第一个情况\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "6.0 this",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n全局执行上下文\n函数执行上下文\neval 执行上下文\nvar foo = 1\n(function foo() {\n    foo = 10\n    console.log(foo)\n}()) // -&gt; ƒ foo() { foo = 10 ; console.log(foo) }</p>\n<p>var 会产生很多错误，所以在 ES6中引入了 let。let 不能在声明前使用，但是\n这并不是常说的 let 不会提升，let 提升了声明但没有赋值，因为临时死区导致\n了并不能在声明前使用。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "7.0 执行上下文",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B \n就被称为闭包。\nfor ( var i=1; i&lt;=5; i++) {\n    setTimeout( function timer() {\n        console.log( i );\n    }, i*1000 );\n}</p>\n<p>for (var i = 1; i &lt;= 5; i++) {\n  (function(j) {\n    setTimeout(function timer() {\n      console.log(j);\n    }, j * 1000);\n  })(i);\n}</p>\n<p>for ( var i=1; i&lt;=5; i++) {\n    setTimeout( function timer(j) {\n        console.log( j );\n    }, i*1000, i);\n}</p>\n<p>for ( let i=1; i&lt;=5; i++) {\n    setTimeout( function timer() {\n        console.log( i );\n    }, i*1000 );\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "8.0 闭包:",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nlet a = {\n    age: 1\n}\nlet b = a\na.age = 2\nconsole.log(b.age) // 2</p>\n<p>let a = {\n    age: 1\n}\nlet b = Object.assign({}, a)\na.age = 2\nconsole.log(b.age) // 1\nlet a = {\n    age: 1\n}\nlet b = {...a}//展开运算符（…）\na.age = 2\nconsole.log(b.age) // 1\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "9.0 浅拷贝",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nlet a = {\n    age: 1,\n    jobs: {\n        first: &#39;FE&#39;\n    }\n}\nlet b = {...a}\na.jobs.first = &#39;native&#39;\nconsole.log(b.jobs.first) // native</p>\n<p>let a = {\n    age: 1,\n    jobs: {\n        first: &#39;FE&#39;\n    }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = &#39;native&#39;\nconsole.log(b.jobs.first) // FE</p>\n<p>但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大\n部分问题，并且该函数是内置函数中处理深拷贝性能最快的。当然如果你的\n数据中含有以上三种情况下，可以使用 lodash 的深拷贝函数。\nfunction structuralClone(obj) {\n  return new Promise(resolve =&gt; {\n    const {port1, port2} = new MessageChannel();\n    port2.onmessage = ev =&gt; resolve(ev.data);\n    port1.postMessage(obj);\n  });\n}</p>\n<p>var obj = {a: 1, b: {\n    c: b\n}}\n// 注意该方法是异步的\n// 可以处理 undefined 和循环引用对象\n(async () =&gt; {\n  const clone = await structuralClone(obj)\n})()</p>\n<p>在有 Babel 的情况下，我们可以直接使用 ES6 的模块化</p>\n<p>// file a.js\nexport function a() {}\nexport function b() {}\n// file b.js\nexport default function() {}</p>\n<p>import {a, b} from &#39;./a.js&#39;\nimport XXX from &#39;./b.js&#39;</p>\n<p>CommonJS\nCommonJs 是 Node 独有的规范，浏览器中使用就需要用到 Browserify 解析了。\n// a.js\nmodule.exports = {\n    a: 1\n}\n// or\nexports.a = 1</p>\n<p>// b.js\nvar module = require(&#39;./a.js&#39;)\nmodule.a // -&gt; log 1</p>\n<p>var module = require(&#39;./a.js&#39;)\nmodule.a\n// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，\n// 重要的是 module 这里，module 是 Node 独有的一个变量\nmodule.exports = {\n    a: 1\n}\n// 基本实现\nvar module = {\n  exports: {} // exports 就是个空对象\n}\n// 这个是为什么 exports 和 module.exports 用法相似的原因\nvar exports = module.exports\nvar load = function (module) {\n    // 导出的东西\n    var a = 1\n    module.exports = a\n    return module.exports\n};\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "10.0 深拷贝",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>// AMD\ndefine([&#39;./a&#39;, &#39;./b&#39;], function(a, b) {\n    a.do()\n    b.do()\n})\ndefine(function(require, exports, module) {   \n    var a = require(&#39;./a&#39;)  \n    a.doSomething()   \n    var b = require(&#39;./b&#39;)\n    b.doSomething()\n})</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "11.0 AMD:AMD 是由 RequireJS 提出的",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) =&gt; {\n  // 缓存一个定时器id\n  let timer = 0\n  // 这里返回的函数是每次用户实际调用的防抖函数\n  // 如果已经设定过定时器了就清空上一次的定时器\n  // 开始一个新的定时器，延迟执行用户传入的方法\n  return function(...args) {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() =&gt; {\n      func.apply(this, args)\n    }, wait)\n  }\n}\n// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还\n未到就被清除了，并不会执行函数</p>\n<p>// 这个是用来获取当前时间戳的\nfunction now() {\n  return +new Date()\n}\n/*<em>\n </em> 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，\n func 才会执行\n <em>\n </em> @param  {function} func        回调函数\n <em> @param  {number}   wait        表示时间窗口的间隔\n </em> @param  {boolean}  immediate   设置为ture时，是否立即调用函数\n <em> @return {function}             返回客户调用函数\n </em>/\nfunction debounce (func, wait = 50, immediate = true) {\n  let timer, context, args</p>\n<p>  // 延迟执行函数\n  const later = () =&gt; setTimeout(() =&gt; {\n    // 延迟函数执行完毕，清空缓存的定时器序号\n    timer = null\n    // 延迟执行的情况下，函数会在延迟函数中执行\n    // 使用到之前缓存的参数和上下文\n    if (!immediate) {\n      func.apply(context, args)\n      context = args = null\n    }\n  }, wait)</p>\n<p>  // 这里返回的函数是每次实际调用的函数\n  return function(...params) {\n    // 如果没有创建延迟执行函数（later），就创建一个\n    if (!timer) {\n      timer = later()\n      // 如果是立即执行，调用函数\n      // 否则缓存参数和调用上下文\n      if (immediate) {\n        func.apply(this, params)\n      } else {\n        context = this\n        args = params\n      }\n    // 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个\n    // 这样做延迟函数会重新计时\n    } else {\n      clearTimeout(timer)\n      timer = later()\n    }\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "12.0 防抖",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>/**\n * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait\n *\n * @param  {function}   func      回调函数\n * @param  {number}     wait      表示时间窗口的间隔\n * @param  {object}     options   如果想忽略开始函数的的调用，传入{leading: false}。\n *                                如果想忽略结尾函数的调用，传入{trailing: false}\n *                                两者不能共存，否则函数不能执行\n * @return {function}             返回客户调用函数   \n */\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    // 之前的时间戳\n    var previous = 0;\n    // 如果 options 没传则设为空对象\n    if (!options) options = {};\n    // 定时器回调函数\n    var later = function() {\n      // 如果设置了 leading，就将 previous 设为 0\n      // 用于下面函数的第一个 if 判断\n      previous = options.leading === false ? 0 : _.now();\n      // 置空一是为了防止内存泄漏，二是为了下面的定时器判断\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      // 获得当前时间戳\n      var now = _.now();\n      // 首次进入前者肯定为 true\n      // 如果需要第一次不执行函数\n      // 就将上次时间戳设为当前的\n      // 这样在接下来计算 remaining 的值时会大于0\n      if (!previous &amp;&amp; options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 如果当前调用已经大于上次调用时间 + wait\n      // 或者用户手动调了时间\n       // 如果设置了 trailing，只会进入这个条件\n      // 如果没有设置 leading，那么第一次会进入这个条件\n      // 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了\n      // 其实还是会进入的，因为定时器的延时\n      // 并不是准确的时间，很可能你设置了2秒\n      // 但是他需要2.2秒才触发，这时候就会进入这个条件\n      if (remaining &lt;= 0 || remaining &gt; wait) {\n        // 如果存在定时器就清理掉否则会调用二次回调\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout &amp;&amp; options.trailing !== false) {\n        // 判断是否设置了定时器和 trailing\n        // 没有的话就开启一个定时器\n        // 并且不能不能同时设置 leading 和 trailing\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "13.0 节流",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在 ES5 中，我们可以使用如下方式解决继承的问题\nfunction Super() {}\nSuper.prototype.getNumber = function() {\n  return 1\n}</p>\n<p>function Sub() {}\nlet s = new Sub()\nSub.prototype = Object.create(Super.prototype, {\n  constructor: {\n    value: Sub,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n})</p>\n<p>在 ES6 中，我们可以通过 class 语法轻松解决这个问题</p>\n<p>class MyDate extends Date {\n  test() {\n    return this.getTime()\n  }\n}\nlet myDate = new MyDate()\nmyDate.test()</p>\n<p>call, apply, bind 区别\nlet a = {\n    value: 1\n}\nfunction getValue(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value)\n}\ngetValue.call(a, &#39;yck&#39;, &#39;24&#39;)\ngetValue.apply(a, [&#39;yck&#39;, &#39;24&#39;])</p>\n<p>call, apply, bind 区别\nall 和 apply 都是为了解决改变 this 的指向。作用都是相同的，只是传\n参的方式不同。\nlet a = {\n    value: 1\n}\nfunction getValue(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value)\n}\ngetValue.call(a, &#39;yck&#39;, &#39;24&#39;)\ngetValue.apply(a, [&#39;yck&#39;, &#39;24&#39;])</p>\n<p>Function.prototype.myCall = function (context) {\n  var context = context || window\n  // 给 context 添加一个属性\n  // getValue.call(a, &#39;yck&#39;, &#39;24&#39;) =&gt; a.fn = getValue\n  context.fn = this\n  // 将 context 后面的参数取出来\n  var args = [...arguments].slice(1)\n  // getValue.call(a, &#39;yck&#39;, &#39;24&#39;) =&gt; a.fn(&#39;yck&#39;, &#39;24&#39;)\n  var result = context.fn(...args)\n  // 删除 fn\n  delete context.fn\n  return result\n}</p>\n<p>Function.prototype.myApply = function (context) {\n  var context = context || window\n  context.fn = this</p>\n<p>  var result\n  // 需要判断是否存储第二个参数\n  // 如果存在，就将第二个参数展开\n  if (arguments[1]) {\n    result = context.fn(...arguments[1])\n  } else {\n    result = context.fn()\n  }</p>\n<p>  delete context.fn\n  return result\n}</p>\n<p>Function.prototype.myBind = function (context) {\n  if (typeof this !== &#39;function&#39;) {\n    throw new TypeError(&#39;Error&#39;)\n  }\n  var _this = this\n  var args = [...arguments].slice(1)\n  // 返回一个函数\n  return function F() {\n    // 因为返回了一个函数，我们可以 new F()，所以需要判断\n    if (this instanceof F) {\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "14.0 继承",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nPromise 是 ES6 新增的语法，解决了回调地狱的问题。\n// 三种状态\nconst PENDING = &quot;pending&quot;;\nconst RESOLVED = &quot;resolved&quot;;\nconst REJECTED = &quot;rejected&quot;;\n// promise 接收一个函数参数，该函数会立即执行\nfunction MyPromise(fn) {\n  let _this = this;\n  _this.currentState = PENDING;\n  _this.value = undefined;\n  // 用于保存 then 中的回调，只有当 promise\n  // 状态为 pending 时才会缓存，并且每个实例至多缓存一个\n  _this.resolvedCallbacks = [];\n  _this.rejectedCallbacks = [];</p>\n<p>  _this.resolve = function (value) {\n    if (value instanceof MyPromise) {\n      // 如果 value 是个 Promise，递归执行\n      return value.then(_this.resolve, _this.reject)\n    }\n    setTimeout(() =&gt; { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = RESOLVED;\n        _this.value = value;\n        _this.resolvedCallbacks.forEach(cb =&gt; cb());\n      }\n    })\n  };</p>\n<p>  _this.reject = function (reason) {\n    setTimeout(() =&gt; { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = REJECTED;\n        _this.value = reason;\n        _this.rejectedCallbacks.forEach(cb =&gt; cb());\n      }\n    })\n  }\n  // 用于解决以下问题\n  // new Promise(() =&gt; throw Error(&#39;error))\n  try {\n    fn(_this.resolve, _this.reject);\n  } catch (e) {\n    _this.reject(e);\n  }\n}</p>\n<p>MyPromise.prototype.then = function (onResolved, onRejected) {\n  var self = this;\n  // 规范 2.2.7，then 必须返回一个新的 promise\n  var promise2;\n  // 规范 2.2.onResolved 和 onRejected 都为可选参数\n  // 如果类型不是函数需要忽略，同时也实现了透传\n  // Promise.resolve(4).then().then((value) =&gt; console.log(value))\n  onResolved = typeof onResolved === &#39;function&#39; ? onResolved : v =&gt; v;\n  onRejected = typeof onRejected === &#39;function&#39; ? onRejected : r =&gt; throw r;</p>\n<p>  if (self.currentState === RESOLVED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      // 规范 2.2.4，保证 onFulfilled，onRjected 异步执行\n      // 所以用了 setTimeout 包裹下\n      setTimeout(function () {\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }</p>\n<p>  if (self.currentState === REJECTED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      setTimeout(function () {\n        // 异步执行onRejected\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }</p>\n<p>  if (self.currentState === PENDING) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      self.resolvedCallbacks.push(function () {\n        // 考虑到可能会有报错，所以使用 try/catch 包裹\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });</p>\n<pre><code>  self.rejectedCallbacks.push(function () {\n    try {\n      var x = onRejected(self.value);\n      resolutionProcedure(promise2, x, resolve, reject);\n    } catch (r) {\n      reject(r);\n    }\n  });\n}));\n</code></pre><p>  }\n};\n// 规范 2.3\nfunction resolutionProcedure(promise2, x, resolve, reject) {\n  // 规范 2.3.1，x 不能和 promise2 相同，避免循环引用\n  if (promise2 === x) {\n    return reject(new TypeError(&quot;Error&quot;));\n  }\n  // 规范 2.3.2\n  // 如果 x 为 Promise，状态为 pending 需要继续等待否则执行\n  if (x instanceof MyPromise) {\n    if (x.currentState === PENDING) {\n      x.then(function (value) {\n        // 再次调用该函数是为了确认 x resolve 的\n        // 参数是什么类型，如果是基本类型就再次 resolve\n        // 把值传给下个 then\n        resolutionProcedure(promise2, value, resolve, reject);\n      }, reject);\n    } else {\n      x.then(resolve, reject);\n    }\n    return;\n  }\n  // 规范 2.3.3.3.3\n  // reject 或者 resolve 其中一个执行过得话，忽略其他的\n  let called = false;\n  // 规范 2.3.3，判断 x 是否为对象或者函数\n  if (x !== null &amp;&amp; (typeof x === &quot;object&quot; || typeof x === &quot;function&quot;)) {\n    // 规范 2.3.3.2，如果不能取出 then，就 reject\n    try {\n      // 规范 2.3.3.1\n      let then = x.then;\n      // 如果 then 是函数，调用 x.then\n      if (typeof then === &quot;function&quot;) {\n        // 规范 2.3.3.3\n        then.call(\n          x,\n          y =&gt; {\n            if (called) return;\n            called = true;\n            // 规范 2.3.3.3.1\n            resolutionProcedure(promise2, y, resolve, reject);\n          },\n          e =&gt; {\n            if (called) return;\n            called = true;\n            reject(e);\n          }\n        );\n      } else {\n        // 规范 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      if (called) return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    // 规范 2.3.4，x 为基本类型\n    resolve(x);\n  }\n}</p>\n<p>Generator 实现\nGenerator 是 ES6 中新增的语法，和 Promise 一样，都可以用来异步编程\n// 使用 <em> 表示这是一个 Generator 函数\n// 内部可以通过 yield 暂停代码\n// 通过调用 next 恢复执行\nfunction</em> test() {\n  let a = 1 + 2;\n  yield 2;\n  yield 3;\n}\nlet b = test();\nconsole.log(b.next()); // &gt;  { value: 2, done: false }\nconsole.log(b.next()); // &gt;  { value: 3, done: false }\nconsole.log(b.next()); // &gt;  { value: undefined, done: true }</p>\n<p>// cb 也就是编译过的 test 函数\nfunction generator(cb) {\n  return (function() {\n    var object = {\n      next: 0,\n      stop: function() {}\n    };</p>\n<pre><code>return {\n  next: function() {\n    var ret = cb(object);\n    if (ret === undefined) return { value: undefined, done: true };\n    return {\n      value: ret,\n      done: false\n    };\n  }\n};\n</code></pre><p>  })();\n}\n// 如果你使用 babel 编译后可以发现 test 函数变成了这样\nfunction test() {\n  var a;\n  return generator(function(_context) {\n    while (1) {\n      switch ((_context.prev = _context.next)) {\n        // 可以发现通过 yield 将代码分割成几块\n        // 每次执行 next 函数就执行一块代码\n        // 并且表明下次需要执行哪块代码\n        case 0:\n          a = 1 + 2;\n          _context.next = 4;\n          return 2;\n        case 4:\n          _context.next = 6;\n          return 3;\n        // 执行完毕\n        case 6:\n        case &quot;end&quot;:\n          return _context.stop();\n      }\n    }\n  });\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "15.0 Promise 实现",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n[1, 2, 3].map((v) =&gt; v + 1)\n// -&gt; [2, 3, 4]</p>\n<p>[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;].map(parseInt)\n//  parseInt(&#39;1&#39;, 0) -&gt; 1\n//  parseInt(&#39;2&#39;, 1) -&gt; NaN\n//  parseInt(&#39;3&#39;, 2) -&gt; NaN</p>\n<p>[1, [2], 3].flatMap((v) =&gt; v + 1)\n// -&gt; [2, 3, 4]\n如果想将一个多维数组彻底的降维，可以这样实现\nconst flattenDeep = (arr) =&gt; Array.isArray(arr)\n  ? arr.reduce( (a, b) =&gt; [...a, ...flattenDeep(b)] , [])\n  : [arr]</p>\n<p>flattenDeep([1, [[2], [3, [4]], 5]])</p>\n<p>Reduce 作用是数组中的值组合起来，最终得到一个值\nfunction a() {\n    console.log(1);\n}</p>\n<p>function b() {\n    console.log(2);\n}</p>\n<p>[a, b].reduce((a, b) =&gt; a(b()))\n// -&gt; 2 1\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "16.0 Map、FlatMap 和 Reduce",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n一个函数如果加上 async ，那么该函数就会返回一个 Promise\nasync function test() {\n  return &quot;1&quot;;\n}\nconsole.log(test()); // -&gt; Promise {<resolved>: &quot;1&quot;}</p>\n<p>await 只能在 async 函数中使用\nfunction sleep() {\n  return new Promise(resolve =&gt; {\n    setTimeout(() =&gt; {\n      console.log(&#39;finish&#39;)\n      resolve(&quot;sleep&quot;);\n    }, 2000);\n  });\n}\nasync function test() {\n  let value = await sleep();\n  console.log(&quot;object&quot;);\n}\ntest()\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "17.0 async 和 await",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nProxy 是 ES6 中新增的功能，可以用来自定义对象中的操作\nlet p = new Proxy(target, handler);\n// target 代表需要添加代理的对象\n// handler 用来自定义对象中的操作</p>\n<p>可以很方便的使用 Proxy 来实现一个数据绑定和监听\nlet onWatch = (obj, setBind, getLogger) =&gt; {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver);\n    },\n    set(target, property, value, receiver) {\n      setBind(value);\n      return Reflect.set(target, property, value);\n    }\n  };\n  return new Proxy(obj, handler);\n};</p>\n<p>let obj = { a: 1 }\nlet value\nlet p = onWatch(obj, (v) =&gt; {\n  value = v\n}, (target, property) =&gt; {\n  console.log(Get &#39;${property}&#39; = ${target[property]});\n})\np.a = 2 // bind value to 2\np.a // -&gt; Get &#39;a&#39; = 2\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "18.0 Proxy",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "19.9 学習終了頂きまして、おめでとうございます！",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLuU-AHWwvMHDT-QpQ" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nnextTick 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。</p>\n<p>在 Vue 2.4 之前都是使用的 microtasks，但是 microtasks 的优先级过高，在某些情况下\n可能会出现比事件冒泡更快的情况，但如果都使用 macrotasks 又可能会出现渲染的性能问题\n。所以在新版本中，会默认使用 microtasks，但在特殊情况下会使用 macrotasks，比如 v-on。</p>\n<p>对于实现 macrotasks ，会先判断是否能使用 setImmediate ，不能的话降级为 \nMessageChannel ，以上都不行的话就使用 setTimeout </p>\n<p>js\nif (typeof setImmediate !== &#39;undefined&#39; &amp;&amp; isNative(setImmediate)) {\n  macroTimerFunc = () =&gt; {\n    setImmediate(flushCallbacks)\n  }\n} else if (\n  typeof MessageChannel !== &#39;undefined&#39; &amp;&amp;\n  (isNative(MessageChannel) ||\n    // PhantomJS\n    MessageChannel.toString() === &#39;[object MessageChannelConstructor]&#39;)\n) {\n  const channel = new MessageChannel()\n  const port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = () =&gt; {\n    port.postMessage(1)\n  }\n} else {\n  /<em> istanbul ignore next </em>/\n  macroTimerFunc = () =&gt; {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 NextTick 原理分析",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>js\nexport function nextTick(cb?: Function, ctx?: Object) {\n  let _resolve\n  // 将回调函数整合进一个数组中\n  callbacks.push(() =&gt; {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, &#39;nextTick&#39;)\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    if (useMacroTask) {\n      macroTimerFunc()\n    } else {\n      microTimerFunc()\n    }\n  }\n  // 判断是否可以使用 Promise \n  // 可以的话给 _resolve 赋值\n  // 这样回调函数就能以 promise 的方式调用\n  if (!cb &amp;&amp; typeof Promise !== &#39;undefined&#39;) {\n    return new Promise(resolve =&gt; {\n      _resolve = resolve\n    })\n  }\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 nextTick 同时也支持 Promise 的使用，会判断是否实现了 Promise",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n生命周期函数就是组件在初始化或者数据更新时会触发的钩子函数。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/12/1648d9df78201f07?w=1200&amp;h=3039&amp;f=png&amp;s=50021\" alt=\"\"></p>\n<p>在初始化时，会调用以下代码，生命周期就是通过 callHook 调用的</p>\n<p>js\nVue.prototype._init = function(options) {\n    initLifecycle(vm)\n    initEvents(vm)\n    initRender(vm)\n    callHook(vm, &#39;beforeCreate&#39;) // 拿不到 props data\n    initInjections(vm) \n    initState(vm)\n    initProvide(vm)\n    callHook(vm, &#39;created&#39;)\n}</p>\n<p>可以发现在以上代码中，beforeCreate 调用的时候，是获取不到 props 或者 data 中的数据的，因为这些数据的初始化都在 initState 中。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 生命周期分析",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n接下来会执行挂载函数</p>\n<p>js\nexport function mountComponent {\n    callHook(vm, &#39;beforeMount&#39;)\n    // ...\n    if (vm.$vnode == null) {\n        vm._isMounted = true\n        callHook(vm, &#39;mounted&#39;)\n    }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 挂载函数",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n接下来是数据更新时会调用的钩子函数</p>\n<p>js\nfunction flushSchedulerQueue() {\n  // ...\n  for (index = 0; index &lt; queue.length; index++) {\n    watcher = queue[index]\n    if (watcher.before) {\n      watcher.before() // 调用 beforeUpdate\n    }\n    id = watcher.id\n    has[id] = null\n    watcher.run()\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1\n      if (circular[id] &gt; MAX_UPDATE_COUNT) {\n        warn(\n          &#39;You may have an infinite update loop &#39; +\n            (watcher.user\n              ? in watcher with expression &quot;${watcher.expression}&quot;\n              : in a component render function.),\n          watcher.vm\n        )\n        break\n      }\n    }\n  }\n  callUpdatedHooks(updatedQueue)\n}</p>\n<p>function callUpdatedHooks(queue) {\n  let i = queue.length\n  while (i--) {\n    const watcher = queue[i]\n    const vm = watcher.vm\n    if (vm._watcher === watcher &amp;&amp; vm._isMounted) {\n      callHook(vm, &#39;updated&#39;)\n    }\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 钩子函数",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n上图还有两个生命周期没有说，分别为 activated 和 deactivated ，这两个钩子函数是 keep-alive 组件独有的。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 actived 钩子函数。</p>\n<p>最后就是销毁组件的钩子函数了</p>\n<p>js\nVue.prototype.$destroy = function() {\n  // ...\n  callHook(vm, &#39;beforeDestroy&#39;)\n  vm._isBeingDestroyed = true\n  // remove self from parent\n  const parent = vm.$parent\n  if (parent &amp;&amp; !parent._isBeingDestroyed &amp;&amp; !vm.$options.abstract) {\n    remove(parent.$children, vm)\n  }\n  // teardown watchers\n  if (vm._watcher) {\n    vm._watcher.teardown()\n  }\n  let i = vm._watchers.length\n  while (i--) {\n    vm._watchers[i].teardown()\n  }\n  // remove reference from data ob\n  // frozen object may not have observer.\n  if (vm._data.<strong>ob</strong>) {\n    vm._data.<strong>ob</strong>.vmCount--\n  }\n  // call the last hook...\n  vm._isDestroyed = true\n  // invoke destroy hooks on current rendered tree\n  vm.<strong>patch</strong>(vm._vnode, null)\n  // fire destroyed hook\n  callHook(vm, &#39;destroyed&#39;)\n  // turn off all instance listeners.\n  vm.$off()\n  // remove <strong>vue</strong> reference\n  if (vm.$el) {\n    vm.$el.<strong>vue</strong> = null\n  }\n  // release circular reference (#6759)\n  if (vm.$vnode) {\n    vm.$vnode.parent = null\n  }\n}</p>\n<p>在执行销毁操作前会调用 beforeDestroy 钩子函数，然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 destroyed 钩子函数。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 销毁组件的钩子函数",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>以下思维导图罗列了源码中重要的一些函数\n![](https://user-gold-cdn.xitu.io/2018/7/27/164da511aeec01c9?w=3000&amp;h=1345&amp;f=png&amp;s=1424682)</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 重要函数思维导图",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在开始之前，推荐大家 clone 一份源码对照着看。因为篇幅较长，函数间的跳转也很多。</p>\n<p>使用路由之前，需要调用 Vue.use(VueRouter)，这是因为让插件可以使用 Vue \njs\nexport function initUse (Vue: GlobalAPI) {\n  Vue.use = function (plugin: Function | Object) {\n    // 判断重复安装插件\n    const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\n    if (installedPlugins.indexOf(plugin) &gt; -1) {\n      return this\n    }\n    const args = toArray(arguments, 1)\n    // 插入 Vue\n    args.unshift(this)\n    // 一般插件都会有一个 install 函数\n    // 通过该函数让插件可以使用 Vue\n    if (typeof plugin.install === &#39;function&#39;) {\n      plugin.install.apply(plugin, args)\n    } else if (typeof plugin === &#39;function&#39;) {\n      plugin.apply(null, args)\n    }\n    installedPlugins.push(plugin)\n    return this\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 路由注册",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\njs\nexport function install (Vue) {\n  // 确保 install 调用一次\n  if (install.installed &amp;&amp; _Vue === Vue) return\n  install.installed = true\n  // 把 Vue 赋值给全局变量\n  _Vue = Vue\n  const registerInstance = (vm, callVal) =&gt; {\n    let i = vm.$options._parentVnode\n    if (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal)\n    }\n  }\n  // 给每个组件的钩子函数混入实现\n  // 可以发现在 beforeCreate 钩子执行时\n  // 会初始化路由\n  Vue.mixin({\n    beforeCreate () {\n      // 判断组件是否存在 router 对象，该对象只在根组件上有\n      if (isDef(this.$options.router)) {\n        // 根路由设置为自己\n        this._routerRoot = this\n        this._router = this.$options.router\n        // 初始化路由\n        this._router.init(this)\n        // 很重要，为 _route 属性实现双向绑定\n        // 触发组件渲染\n        Vue.util.defineReactive(this, &#39;_route&#39;, this._router.history.current)\n      } else {\n        // 用于 router-view 层级判断\n        this._routerRoot = (this.$parent &amp;&amp; this.$parent._routerRoot) || this\n      }\n      registerInstance(this, this)\n    },\n    destroyed () {\n      registerInstance(this)\n    }\n  })\n  // 全局注册组件 router-link 和 router-view\n  Vue.component(&#39;RouterView&#39;, View)\n  Vue.component(&#39;RouterLink&#39;, Link)\n}</p>\n<p>对于路由注册来说，核心就是调用 Vue.use(VueRouter)，使得 VueRouter 可以使用 Vue。然后通过 Vue 来调用 VueRouter 的 install 函数。在该函数中，核心就是给组件混入钩子函数和全局注册两个路由组件。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 接下来看下 install 函数的部分实现",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在安装插件后，对 VueRouter 进行实例化。\njs\nconst Home = { template: &#39;<div>home</div>&#39; }\nconst Foo = { template: &#39;<div>foo</div>&#39; }\nconst Bar = { template: &#39;<div>bar</div>&#39; }</p>\n<p>// 3. Create the router\nconst router = new VueRouter({\n  mode: &#39;hash&#39;,\n  base: __dirname,\n  routes: [\n    { path: &#39;/&#39;, component: Home }, // all paths are defined without the hash.\n    { path: &#39;/foo&#39;, component: Foo },\n    { path: &#39;/bar&#39;, component: Bar }\n  ]\n})\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 VueRouter 实例化",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\njs\nconstructor(options: RouterOptions = {}) {\n    // ...\n    // 路由匹配对象\n    this.matcher = createMatcher(options.routes || [], this)</p>\n<pre><code>// 根据 mode 采取不同的路由方式\nlet mode = options.mode || &#39;hash&#39;\nthis.fallback =\n  mode === &#39;history&#39; &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== false\nif (this.fallback) {\n  mode = &#39;hash&#39;\n}\nif (!inBrowser) {\n  mode = &#39;abstract&#39;\n}\nthis.mode = mode\n\nswitch (mode) {\n  case &#39;history&#39;:\n    this.history = new HTML5History(this, options.base)\n    break\n  case &#39;hash&#39;:\n    this.history = new HashHistory(this, options.base, this.fallback)\n    break\n  case &#39;abstract&#39;:\n    this.history = new AbstractHistory(this, options.base)\n    break\n  default:\n    if (process.env.NODE_ENV !== &#39;production&#39;) {\n      assert(false, invalid mode: ${mode})\n    }\n}\n</code></pre><p>  }\n在实例化 VueRouter 的过程中，核心是创建一个路由匹配对象，并且根据 mode 来采取不同的路由方式。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 来看一下 VueRouter 的构造函数",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\njs\nexport function createMatcher (\n  routes: Array<RouteConfig>,\n  router: VueRouter\n): Matcher {\n    // 创建路由映射表\n  const { pathList, pathMap, nameMap } = createRouteMap(routes)</p>\n<p>  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap)\n  }\n  // 路由匹配\n  function match (\n    raw: RawLocation,\n    currentRoute?: Route,\n    redirectedFrom?: Location\n  ): Route {\n    //...\n  }</p>\n<p>  return {\n    match,\n    addRoutes\n  }\n}\ncreateMatcher 函数的作用就是创建路由映射表，然后通过闭包的方式让 addRoutes 和 match 函数能够使用路由映射表的几个对象，最后返回一个 Matcher 对象。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 创建路由匹配对象",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n接下来看 createMatcher 函数时如何创建映射表的\njs\nexport function createRouteMap (\n  routes: Array<RouteConfig>,\n  oldPathList?: Array<string>,\n  oldPathMap?: Dictionary<RouteRecord>,\n  oldNameMap?: Dictionary<RouteRecord>\n): {\n  pathList: Array<string>;\n  pathMap: Dictionary<RouteRecord>;\n  nameMap: Dictionary<RouteRecord>;\n} {\n  // 创建映射表\n  const pathList: Array<string> = oldPathList || []\n  const pathMap: Dictionary<RouteRecord> = oldPathMap || Object.create(null)\n  const nameMap: Dictionary<RouteRecord> = oldNameMap || Object.create(null)\n  // 遍历路由配置，为每个配置添加路由记录\n  routes.forEach(route =&gt; {\n    addRouteRecord(pathList, pathMap, nameMap, route)\n  })\n  // 确保通配符在最后\n  for (let i = 0, l = pathList.length; i &lt; l; i++) {\n    if (pathList[i] === &#39;*&#39;) {\n      pathList.push(pathList.splice(i, 1)[0])\n      l--\n      i--\n    }\n  }\n  return {\n    pathList,\n    pathMap,\n    nameMap\n  }\n}\n// 添加路由记录\nfunction addRouteRecord (\n  pathList: Array<string>,\n  pathMap: Dictionary<RouteRecord>,\n  nameMap: Dictionary<RouteRecord>,\n  route: RouteConfig,\n  parent?: RouteRecord,\n  matchAs?: string\n) {\n  // 获得路由配置下的属性\n  const { path, name } = route\n  const pathToRegexpOptions: PathToRegexpOptions = route.pathToRegexpOptions || {}\n  // 格式化 url，替换 / \n  const normalizedPath = normalizePath(\n    path,\n    parent,\n    pathToRegexpOptions.strict\n  )\n  // 生成记录对象\n  const record: RouteRecord = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name,\n    parent,\n    matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  }</p>\n<p>  if (route.children) {\n    // 递归路由配置的 children 属性，添加路由记录\n    route.children.forEach(child =&gt; {\n      const childMatchAs = matchAs\n        ? cleanPath(${matchAs}/${child.path})\n        : undefined\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs)\n    })\n  }\n  // 如果路由有别名的话\n  // 给别名也添加路由记录\n  if (route.alias !== undefined) {\n    const aliases = Array.isArray(route.alias)\n      ? route.alias\n      : [route.alias]</p>\n<pre><code>aliases.forEach(alias =&gt; {\n  const aliasRoute = {\n    path: alias,\n    children: route.children\n  }\n  addRouteRecord(\n    pathList,\n    pathMap,\n    nameMap,\n    aliasRoute,\n    parent,\n    record.path || &#39;/&#39; // matchAs\n  )\n})\n</code></pre><p>  }\n  // 更新映射表\n  if (!pathMap[record.path]) {\n    pathList.push(record.path)\n    pathMap[record.path] = record\n  }\n  // 命名路由添加记录\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record\n    } else if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; !matchAs) {\n      warn(\n        false,\n        Duplicate named routes definition:  +\n        { name: &quot;${name}&quot;, path: &quot;${record.path}&quot; }\n      )\n    }\n  }\n}\n以上就是创建路由匹配对象的全过程，通过用户配置的路由规则来创建对应的路由映射表。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 创建映射表",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n当根组件调用 beforeCreate 钩子函数时，会执行以下代码\njs\nbeforeCreate () {\n// 只有根组件有 router 属性，所以根组件初始化时会初始化路由\n  if (isDef(this.$options.router)) {\n    this._routerRoot = this\n    this._router = this.$options.router\n    this._router.init(this)\n    Vue.util.defineReactive(this, &#39;_route&#39;, this._router.history.current)\n  } else {\n    this._routerRoot = (this.$parent &amp;&amp; this.$parent._routerRoot) || this\n  }\n  registerInstance(this, this)\n}</p>\n<p>接下来看下路由初始化会做些什么\njs\ninit(app: any /<em> Vue component instance </em>/) {\n    // 保存组件实例\n    this.apps.push(app)\n    // 如果根组件已经有了就返回\n    if (this.app) {\n      return\n    }\n    this.app = app\n    // 赋值路由模式\n    const history = this.history\n    // 判断路由模式，以哈希模式为例\n    if (history instanceof HTML5History) {\n      history.transitionTo(history.getCurrentLocation())\n    } else if (history instanceof HashHistory) {\n      // 添加 hashchange 监听\n      const setupHashListener = () =&gt; {\n        history.setupListeners()\n      }\n      // 路由跳转\n      history.transitionTo(\n        history.getCurrentLocation(),\n        setupHashListener,\n        setupHashListener\n      )\n    }\n    // 该回调会在 transitionTo 中调用\n    // 对组件的 _route 属性进行赋值，触发组件渲染\n    history.listen(route =&gt; {\n      this.apps.forEach(app =&gt; {\n        app._route = route\n      })\n    })\n  }\n在路由初始化时，核心就是进行路由的跳转，改变 URL 然后渲染对应的组件。接下来来看一下路由是如何进行跳转的。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 路由初始化",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>js\ntransitionTo (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  // 获取匹配的路由信息\n  const route = this.router.match(location, this.current)\n  // 确认切换路由\n  this.confirmTransition(route, () =&gt; {\n    // 以下为切换路由成功或失败的回调\n    // 更新路由信息，对组件的 _route 属性进行赋值，触发组件渲染\n    // 调用 afterHooks 中的钩子函数\n    this.updateRoute(route)\n    // 添加 hashchange 监听\n    onComplete &amp;&amp; onComplete(route)\n    // 更新 URL\n    this.ensureURL()\n    // 只执行一次 ready 回调\n    if (!this.ready) {\n      this.ready = true\n      this.readyCbs.forEach(cb =&gt; { cb(route) })\n    }\n  }, err =&gt; {\n  // 错误处理\n    if (onAbort) {\n      onAbort(err)\n    }\n    if (err &amp;&amp; !this.ready) {\n      this.ready = true\n      this.readyErrorCbs.forEach(cb =&gt; { cb(err) })\n    }\n  })\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 路由跳转",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>在路由跳转中，需要先获取匹配的路由信息，所以先来看下如何获取匹配的路由信息\njs\nfunction match (\n  raw: RawLocation,\n  currentRoute?: Route,\n  redirectedFrom?: Location\n): Route {\n  // 序列化 url\n  // 比如对于该 url 来说 /abc?foo=bar&amp;baz=qux#hello\n  // 会序列化路径为 /abc\n  // 哈希为 #hello\n  // 参数为 foo: &#39;bar&#39;, baz: &#39;qux&#39;\n  const location = normalizeLocation(raw, currentRoute, false, router)\n  const { name } = location\n  // 如果是命名路由，就判断记录中是否有该命名路由配置\n  if (name) {\n    const record = nameMap[name]\n    // 没找到表示没有匹配的路由\n    if (!record) return _createRoute(null, location)\n    const paramNames = record.regex.keys\n      .filter(key =&gt; !key.optional)\n      .map(key =&gt; key.name)\n    // 参数处理\n    if (typeof location.params !== &#39;object&#39;) {\n      location.params = {}\n    }\n    if (currentRoute &amp;&amp; typeof currentRoute.params === &#39;object&#39;) {\n      for (const key in currentRoute.params) {\n        if (!(key in location.params) &amp;&amp; paramNames.indexOf(key) &gt; -1) {\n          location.params[key] = currentRoute.params[key]\n        }\n      }\n    }\n    if (record) {\n      location.path = fillParams(record.path, location.params, named route &quot;${name}&quot;)\n      return _createRoute(record, location, redirectedFrom)\n    }\n  } else if (location.path) {\n    // 非命名路由处理\n    location.params = {}\n    for (let i = 0; i &lt; pathList.length; i++) {\n     // 查找记录\n      const path = pathList[i]\n      const record = pathMap[path]\n      // 如果匹配路由，则创建路由\n      if (matchRoute(record.regex, location.path, location.params)) {\n        return _createRoute(record, location, redirectedFrom)\n      }\n    }\n  }\n  // 没有匹配的路由\n  return _createRoute(null, location)\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 获取匹配的路由信息",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n接下来看看如何创建路由\njs\n// 根据条件创建不同的路由\nfunction _createRoute(\n  record: ?RouteRecord,\n  location: Location,\n  redirectedFrom?: Location\n): Route {\n  if (record &amp;&amp; record.redirect) {\n    return redirect(record, redirectedFrom || location)\n  }\n  if (record &amp;&amp; record.matchAs) {\n    return alias(record, location, record.matchAs)\n  }\n  return createRoute(record, location, redirectedFrom, router)\n}</p>\n<p>export function createRoute (\n  record: ?RouteRecord,\n  location: Location,\n  redirectedFrom?: ?Location,\n  router?: VueRouter\n): Route {\n  const stringifyQuery = router &amp;&amp; router.options.stringifyQuery\n  // 克隆参数\n  let query: any = location.query || {}\n  try {\n    query = clone(query)\n  } catch (e) {}\n  // 创建路由对象\n  const route: Route = {\n    name: location.name || (record &amp;&amp; record.name),\n    meta: (record &amp;&amp; record.meta) || {},\n    path: location.path || &#39;/&#39;,\n    hash: location.hash || &#39;&#39;,\n    query,\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery),\n    matched: record ? formatMatch(record) : []\n  }\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery)\n  }\n  // 让路由对象不可修改\n  return Object.freeze(route)\n}\n// 获得包含当前路由的所有嵌套路径片段的路由记录\n// 包含从根路由到当前路由的匹配记录，从上至下\nfunction formatMatch(record: ?RouteRecord): Array<RouteRecord> {\n  const res = []\n  while (record) {\n    res.unshift(record)\n    record = record.parent\n  }\n  return res\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 如何创建路由",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n至此匹配路由已经完成，我们回到 transitionTo 函数中，接下来执行 confirmTransition \njs\ntransitionTo (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  // 确认切换路由\n  this.confirmTransition(route, () =&gt; {}\n}\nconfirmTransition(route: Route, onComplete: Function, onAbort?: Function) {\n  const current = this.current\n  // 中断跳转路由函数\n  const abort = err =&gt; {\n    if (isError(err)) {\n      if (this.errorCbs.length) {\n        this.errorCbs.forEach(cb =&gt; {\n          cb(err)\n        })\n      } else {\n        warn(false, &#39;uncaught error during route navigation:&#39;)\n        console.error(err)\n      }\n    }\n    onAbort &amp;&amp; onAbort(err)\n  }\n  // 如果是相同的路由就不跳转\n  if (\n    isSameRoute(route, current) &amp;&amp;\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL()\n    return abort()\n  }\n  // 通过对比路由解析出可复用的组件，需要渲染的组件，失活的组件\n  const { updated, deactivated, activated } = resolveQueue(\n    this.current.matched,\n    route.matched\n  )</p>\n<p>  function resolveQueue(\n      current: Array<RouteRecord>,\n      next: Array<RouteRecord>\n    ): {\n      updated: Array<RouteRecord>,\n      activated: Array<RouteRecord>,\n      deactivated: Array<RouteRecord>\n    } {\n      let i\n      const max = Math.max(current.length, next.length)\n      for (i = 0; i &lt; max; i++) {\n        // 当前路由路径和跳转路由路径不同时跳出遍历\n        if (current[i] !== next[i]) {\n          break\n        }\n      }\n      return {\n        // 可复用的组件对应路由\n        updated: next.slice(0, i),\n        // 需要渲染的组件对应路由\n        activated: next.slice(i),\n        // 失活的组件对应路由\n        deactivated: current.slice(i)\n      }\n  }\n  // 导航守卫数组\n  const queue: Array&lt;?NavigationGuard&gt; = [].concat(\n    // 失活的组件钩子\n    extractLeaveGuards(deactivated),\n    // 全局 beforeEach 钩子\n    this.router.beforeHooks,\n    // 在当前路由改变，但是该组件被复用时调用\n    extractUpdateHooks(updated),\n    // 需要渲染组件 enter 守卫钩子\n    activated.map(m =&gt; m.beforeEnter),\n    // 解析异步路由组件\n    resolveAsyncComponents(activated)\n  )\n  // 保存路由\n  this.pending = route\n  // 迭代器，用于执行 queue 中的导航守卫钩子\n  const iterator = (hook: NavigationGuard, next) =&gt; {\n  // 路由不相等就不跳转路由\n    if (this.pending !== route) {\n      return abort()\n    }\n    try {\n    // 执行钩子\n      hook(route, current, (to: any) =&gt; {\n        // 只有执行了钩子函数中的 next，才会继续执行下一个钩子函数\n        // 否则会暂停跳转\n        // 以下逻辑是在判断 next() 中的传参\n        if (to === false || isError(to)) {\n          // next(false) \n          this.ensureURL(true)\n          abort(to)\n        } else if (\n          typeof to === &#39;string&#39; ||\n          (typeof to === &#39;object&#39; &amp;&amp;\n            (typeof to.path === &#39;string&#39; || typeof to.name === &#39;string&#39;))\n        ) {\n        // next(&#39;/&#39;) 或者 next({ path: &#39;/&#39; }) -&gt; 重定向\n          abort()\n          if (typeof to === &#39;object&#39; &amp;&amp; to.replace) {\n            this.replace(to)\n          } else {\n            this.push(to)\n          }\n        } else {\n        // 这里执行 next\n        // 也就是执行下面函数 runQueue 中的 step(index + 1)\n          next(to)\n        }\n      })\n    } catch (e) {\n      abort(e)\n    }\n  }\n  // 经典的同步执行异步函数\n  runQueue(queue, iterator, () =&gt; {\n    const postEnterCbs = []\n    const isValid = () =&gt; this.current === route\n    // 当所有异步组件加载完成后，会执行这里的回调，也就是 runQueue 中的 cb()\n    // 接下来执行 需要渲染组件的导航守卫钩子\n    const enterGuards = extractEnterGuards(activated, postEnterCbs, isValid)\n    const queue = enterGuards.concat(this.router.resolveHooks)\n    runQueue(queue, iterator, () =&gt; {\n    // 跳转完成\n      if (this.pending !== route) {\n        return abort()\n      }\n      this.pending = null\n      onComplete(route)\n      if (this.router.app) {\n        this.router.app.$nextTick(() =&gt; {\n          postEnterCbs.forEach(cb =&gt; {\n            cb()\n          })\n        })\n      }\n    })\n  })\n}\nexport function runQueue (queue: Array&lt;?NavigationGuard&gt;, fn: Function, cb: Function) {\n  const step = index =&gt; {\n  // 队列中的函数都执行完毕，就执行回调函数\n    if (index &gt;= queue.length) {\n      cb()\n    } else {\n      if (queue[index]) {\n      // 执行迭代器，用户在钩子函数中执行 next() 回调\n      // 回调中判断传参，没有问题就执行 next()，也就是 fn 函数中的第二个参数\n        fn(queue[index], () =&gt; {\n          step(index + 1)\n        })\n      } else {\n        step(index + 1)\n      }\n    }\n  }\n  // 取出队列中第一个钩子函数\n  step(0)\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 Transition",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>接下来介绍导航守卫\njs\nconst queue: Array&lt;?NavigationGuard&gt; = [].concat(\n    // 失活的组件钩子\n    extractLeaveGuards(deactivated),\n    // 全局 beforeEach 钩子\n    this.router.beforeHooks,\n    // 在当前路由改变，但是该组件被复用时调用\n    extractUpdateHooks(updated),\n    // 需要渲染组件 enter 守卫钩子\n    activated.map(m =&gt; m.beforeEnter),\n    // 解析异步路由组件\n    resolveAsyncComponents(activated)\n)</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 导航守卫",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>第一步是先执行失活组件的钩子函数\njs\nfunction extractLeaveGuards(deactivated: Array&lt;RouteRecord&gt;): Array&lt;?Function&gt; {\n// 传入需要执行的钩子函数名\n  return extractGuards(deactivated, &#39;beforeRouteLeave&#39;, bindGuard, true)\n}\nfunction extractGuards(\n  records: Array&lt;RouteRecord&gt;,\n  name: string,\n  bind: Function,\n  reverse?: boolean\n): Array&lt;?Function&gt; {\n  const guards = flatMapComponents(records, (def, instance, match, key) =&gt; {\n   // 找出组件中对应的钩子函数\n    const guard = extractGuard(def, name)\n    if (guard) {\n    // 给每个钩子函数添加上下文对象为组件自身\n      return Array.isArray(guard)\n        ? guard.map(guard =&gt; bind(guard, instance, match, key))\n        : bind(guard, instance, match, key)\n    }\n  })\n  // 数组降维，并且判断是否需要翻转数组\n  // 因为某些钩子函数需要从子执行到父\n  return flatten(reverse ? guards.reverse() : guards)\n}\nexport function flatMapComponents (\n  matched: Array&lt;RouteRecord&gt;,\n  fn: Function\n): Array&lt;?Function&gt; {\n// 数组降维\n  return flatten(matched.map(m =&gt; {\n  // 将组件中的对象传入回调函数中，获得钩子函数数组\n    return Object.keys(m.components).map(key =&gt; fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ))\n  }))\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 执行失活组件的钩子函数",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>第二步执行全局 beforeEach 钩子函数\njs\nbeforeEach(fn: Function): Function {\n    return registerHook(this.beforeHooks, fn)\n}\nfunction registerHook(list: Array&lt;any&gt;, fn: Function): Function {\n  list.push(fn)\n  return () =&gt; {\n    const i = list.indexOf(fn)\n    if (i &gt; -1) list.splice(i, 1)\n  }\n}\n在 VueRouter 类中有以上代码，每当给 VueRouter 实例添加 beforeEach 函数时就会将函数 push 进 beforeHooks 中。</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.0 全局 beforeEach 钩子函数",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>第三步执行 beforeRouteUpdate 钩子函数，调用方式和第一步相同，只是传入的函数名不同，在该函数中可以访问到 this 对象。</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.0 beforeRouteUpdate",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>第四步执行 beforeEnter 钩子函数，该函数是路由独享的钩子函数。</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "23.0 beforeEnter",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>第五步是解析异步组件。\njs\nexport function resolveAsyncComponents (matched: Array&lt;RouteRecord&gt;): Function {\n  return (to, from, next) =&gt; {\n    let hasAsync = false\n    let pending = 0\n    let error = null\n    // 该函数作用之前已经介绍过了\n    flatMapComponents(matched, (def, _, match, key) =&gt; {\n    // 判断是否是异步组件\n      if (typeof def === &#39;function&#39; &amp;&amp; def.cid === undefined) {\n        hasAsync = true\n        pending++\n        // 成功回调\n        // once 函数确保异步组件只加载一次\n        const resolve = once(resolvedDef =&gt; {\n          if (isESModule(resolvedDef)) {\n            resolvedDef = resolvedDef.default\n          }\n          // 判断是否是构造函数\n          // 不是的话通过 Vue 来生成组件构造函数\n          def.resolved = typeof resolvedDef === &#39;function&#39;\n            ? resolvedDef\n            : _Vue.extend(resolvedDef)\n        // 赋值组件\n        // 如果组件全部解析完毕，继续下一步\n          match.components[key] = resolvedDef\n          pending--\n          if (pending &lt;= 0) {\n            next()\n          }\n        })\n        // 失败回调\n        const reject = once(reason =&gt; {\n          const msg = Failed to resolve async component ${key}: ${reason}\n          process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(false, msg)\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg)\n            next(error)\n          }\n        })\n        let res\n        try {\n        // 执行异步组件函数\n          res = def(resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n        if (res) {\n        // 下载完成执行回调\n          if (typeof res.then === &#39;function&#39;) {\n            res.then(resolve, reject)\n          } else {\n            const comp = res.component\n            if (comp &amp;&amp; typeof comp.then === &#39;function&#39;) {\n              comp.then(resolve, reject)\n            }\n          }\n        }\n      }\n    })\n    // 不是异步组件直接下一步\n    if (!hasAsync) next()\n  }\n}</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "24.0 解析异步组件",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>以上就是第一个 runQueue 中的逻辑，第五步完成后会执行第一个 runQueue 中回调函数\njs\n// 该回调用于保存 beforeRouteEnter 钩子中的回调函数\nconst postEnterCbs = []\nconst isValid = () =&gt; this.current === route\n// beforeRouteEnter 导航守卫钩子\nconst enterGuards = extractEnterGuards(activated, postEnterCbs, isValid)\n// beforeResolve 导航守卫钩子\nconst queue = enterGuards.concat(this.router.resolveHooks)\nrunQueue(queue, iterator, () =&gt; {\n  if (this.pending !== route) {\n    return abort()\n  }\n  this.pending = null\n  // 这里会执行 afterEach 导航守卫钩子\n  onComplete(route)\n  if (this.router.app) {\n    this.router.app.$nextTick(() =&gt; {\n      postEnterCbs.forEach(cb =&gt; {\n        cb()\n      })\n    })\n  }\n})</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "25.0 保存 beforeRouteEnter 钩子中的回调函数",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n第六步是执行 beforeRouteEnter 导航守卫钩子，beforeRouteEnter 钩子不能访问 this 对象，因为钩子在导航确认前被调用，需要渲染的组件还没被创建。但是该钩子函数是唯一一个支持在回调中获取 this 对象的函数，回调会在路由确认执行。\njs\nbeforeRouteEnter (to, from, next) {\n  next(vm =&gt; {\n    // 通过 vm 访问组件实例\n  })\n}</p>\n<p>下面来看看是如何支持在回调中拿到 this 对象的\njs\nfunction extractEnterGuards(\n  activated: Array<RouteRecord>,\n  cbs: Array<Function>,\n  isValid: () =&gt; boolean\n): Array&lt;?Function&gt; {\n// 这里和之前调用导航守卫基本一致\n  return extractGuards(\n    activated,\n    &#39;beforeRouteEnter&#39;,\n    (guard, _, match, key) =&gt; {\n      return bindEnterGuard(guard, match, key, cbs, isValid)\n    }\n  )\n}\nfunction bindEnterGuard(\n  guard: NavigationGuard,\n  match: RouteRecord,\n  key: string,\n  cbs: Array<Function>,\n  isValid: () =&gt; boolean\n): NavigationGuard {\n  return function routeEnterGuard(to, from, next) {\n    return guard(to, from, cb =&gt; {\n    // 判断 cb 是否是函数\n    // 是的话就 push 进 postEnterCbs\n      next(cb)\n      if (typeof cb === &#39;function&#39;) {\n        cbs.push(() =&gt; {\n          // 循环直到拿到组件实例\n          poll(cb, match.instances, key, isValid)\n        })\n      }\n    })\n  }\n}\n// 该函数是为了解决 issus #750\n// 当 router-view 外面包裹了 mode 为 out-in 的 transition 组件 \n// 会在组件初次导航到时获得不到组件实例对象\nfunction poll(\n  cb: any, // somehow flow cannot infer this is a function\n  instances: Object,\n  key: string,\n  isValid: () =&gt; boolean\n) {\n  if (\n    instances[key] &amp;&amp;\n    !instances[key]._isBeingDestroyed // do not reuse being destroyed instance\n  ) {\n    cb(instances[key])\n  } else if (isValid()) {\n  // setTimeout 16ms 作用和 nextTick 基本相同\n    setTimeout(() =&gt; {\n      poll(cb, instances, key, isValid)\n    }, 16)\n  }\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "26.0 beforeRouteEnter 导航守卫钩子",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>第七步是执行 beforeResolve 导航守卫钩子，如果注册了全局 beforeResolve 钩子就会在这里执行。</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "27.0 beforeResolve 导航守卫钩子",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>第八步就是导航确认，调用 afterEach 导航守卫钩子了。</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "28.0 调用 afterEach 导航守卫钩子",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>以上都执行完成后，会触发组件的渲染\njs\nhistory.listen(route =&gt; {\n      this.apps.forEach(app =&gt; {\n        app._route = route\n      })\n})</code></pre>",
              "type" : "Html"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "29.0 触发组件的渲染",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n以上回调会在 updateRoute 中调用\njs\nupdateRoute(route: Route) {\n    const prev = this.current\n    this.current = route\n    this.cb &amp;&amp; this.cb(route)\n    this.router.afterHooks.forEach(hook =&gt; {\n      hook &amp;&amp; hook(route, prev)\n    })\n}</p>\n<p>至此，路由跳转已经全部分析完毕。核心就是判断需要跳转的路由是否存在于记录中，然后执行各种导航守卫函数，最后完成 URL 的改变和组件的渲染。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "30.0 updateRoute",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "31.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLubY6J4gW1t94t63x" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片1.PNG",
              "type" : "Picture"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.4 課程紹介",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片2.PNG",
              "type" : "Picture"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.4 目録",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片3.PNG",
              "type" : "Picture"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.4 前書",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片4.PNG",
              "type" : "Picture"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.4 紹介",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片5.PNG",
              "type" : "Picture"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.4 開発環境構築",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片6.PNG",
              "type" : "Picture"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.4 HelloWord!",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片7.PNG",
              "type" : "Picture"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.4 基礎語彙",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片8.PNG",
              "type" : "Picture"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.4 変数タイプ",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片9.PNG",
              "type" : "Picture"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.4 オペレーター",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片10.PNG",
              "type" : "Picture"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.4 条件分岐",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片11.PNG",
              "type" : "Picture"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.4 ループ",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片12.PNG",
              "type" : "Picture"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.4 Whileループ",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片13.PNG",
              "type" : "Picture"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.4 Forループ",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片14.PNG",
              "type" : "Picture"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.4 ネストループ",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片15.PNG",
              "type" : "Picture"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.4 Break",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片16.PNG",
              "type" : "Picture"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.4 Continue",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片17.PNG",
              "type" : "Picture"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.4 Pass",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片18.PNG",
              "type" : "Picture"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.4 Number",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片19.PNG",
              "type" : "Picture"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.4 データ変換",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片20.PNG",
              "type" : "Picture"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.4 数学関数",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片21.PNG",
              "type" : "Picture"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.4 ストリング",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片22.PNG",
              "type" : "Picture"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.4 ストリングエスケープ",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片23.PNG",
              "type" : "Picture"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "23.4 ストリングオペレーター",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片24.PNG",
              "type" : "Picture"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "24.4 ストリングフォーマット",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片25.PNG",
              "type" : "Picture"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "25.4 リスト（初期化、追加、削除）",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片26.PNG",
              "type" : "Picture"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "26.4 リスト（オペレーター）",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片27.PNG",
              "type" : "Picture"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "27.4 リスト（関数）",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片28.PNG",
              "type" : "Picture"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "28.4 リスト（メソッド）",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片29.PNG",
              "type" : "Picture"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "29.4 Tuple（初期化、追加、削除）",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片30.PNG",
              "type" : "Picture"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "30.4 Tuple（オペレーター）",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片31.PNG",
              "type" : "Picture"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "31.4 Tuple（関数）",
            "update_at" : 1556488166377
          },
          "x32" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片32.PNG",
              "type" : "Picture"
            },
            "id" : "x32",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "32",
            "time" : 1555228371611,
            "title" : "32.4 Dictionary（初期化、追加、削除）",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片33.PNG",
              "type" : "Picture"
            },
            "id" : "x33",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "33.4 Dictionary（関数）",
            "update_at" : 1556488166377
          },
          "x34" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片34.PNG",
              "type" : "Picture"
            },
            "id" : "x34",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "34",
            "time" : 1555228371611,
            "title" : "34.4 Dictionary（メソッド）",
            "update_at" : 1556488166377
          },
          "x35" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片35.PNG",
              "type" : "Picture"
            },
            "id" : "x35",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "35",
            "time" : 1555228371611,
            "title" : "35.4 DateTime",
            "update_at" : 1556488166377
          },
          "x36" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片36.PNG",
              "type" : "Picture"
            },
            "id" : "x36",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "36",
            "time" : 1555228371611,
            "title" : "36.4 関数(基本)",
            "update_at" : 1556488166377
          },
          "x37" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片37.PNG",
              "type" : "Picture"
            },
            "id" : "x37",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "37",
            "time" : 1555228371611,
            "title" : "37.4 関数（変更不可パラメータ）",
            "update_at" : 1556488166377
          },
          "x38" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片38.PNG",
              "type" : "Picture"
            },
            "id" : "x38",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "38",
            "time" : 1555228371611,
            "title" : "38.4 関数（変更可能パラメータ）",
            "update_at" : 1556488166377
          },
          "x39" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片39.PNG",
              "type" : "Picture"
            },
            "id" : "x39",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "39",
            "time" : 1555228371611,
            "title" : "39.4 モジュール",
            "update_at" : 1556488166377
          },
          "x40" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片40.PNG",
              "type" : "Picture"
            },
            "id" : "x40",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "40",
            "time" : 1555228371611,
            "title" : "40.4 モジュール（関数一覧）",
            "update_at" : 1556488166377
          },
          "x41" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片41.PNG",
              "type" : "Picture"
            },
            "id" : "x41",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "41",
            "time" : 1555228371611,
            "title" : "41.4 モジュール（Package）",
            "update_at" : 1556488166377
          },
          "x42" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片42.PNG",
              "type" : "Picture"
            },
            "id" : "x42",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "42",
            "time" : 1555228371611,
            "title" : "42.4 ファイルI/O",
            "update_at" : 1556488166377
          },
          "x43" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片43.PNG",
              "type" : "Picture"
            },
            "id" : "x43",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "43",
            "time" : 1555228371611,
            "title" : "43.4 ファイル読む",
            "update_at" : 1556488166377
          },
          "x44" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片44.PNG",
              "type" : "Picture"
            },
            "id" : "x44",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "44",
            "time" : 1555228371611,
            "title" : "44.4 ファイル書く",
            "update_at" : 1556488166377
          },
          "x45" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片45.PNG",
              "type" : "Picture"
            },
            "id" : "x45",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "45",
            "time" : 1555228371611,
            "title" : "45.4 異常処理",
            "update_at" : 1556488166377
          },
          "x46" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片46.PNG",
              "type" : "Picture"
            },
            "id" : "x46",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "46",
            "time" : 1555228371611,
            "title" : "46.4 Directory",
            "update_at" : 1556488166377
          },
          "x47" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片47.PNG",
              "type" : "Picture"
            },
            "id" : "x47",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "47",
            "time" : 1555228371611,
            "title" : "47.4 内部関数",
            "update_at" : 1556488166377
          },
          "x48" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片48.PNG",
              "type" : "Picture"
            },
            "id" : "x48",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "48",
            "time" : 1555228371611,
            "title" : "48.4 Object",
            "update_at" : 1556488166377
          },
          "x49" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片49.PNG",
              "type" : "Picture"
            },
            "id" : "x49",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "49",
            "time" : 1555228371611,
            "title" : "49.4 Object使う",
            "update_at" : 1556488166377
          },
          "x50" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片50.PNG",
              "type" : "Picture"
            },
            "id" : "x50",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "50",
            "time" : 1555228371611,
            "title" : "50.4 正規表現",
            "update_at" : 1556488166377
          },
          "x51" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片51.PNG",
              "type" : "Picture"
            },
            "id" : "x51",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "51",
            "time" : 1555228371611,
            "title" : "51.4 DBアクセス（データ検索）",
            "update_at" : 1556488166377
          },
          "x52" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片52.PNG",
              "type" : "Picture"
            },
            "id" : "x52",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "52",
            "time" : 1555228371611,
            "title" : "52.4 DBアクセス（テーブル作成）",
            "update_at" : 1556488166377
          },
          "x53" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片53.PNG",
              "type" : "Picture"
            },
            "id" : "x53",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "53",
            "time" : 1555228371611,
            "title" : "53.4 DBアクセス（データインサート）",
            "update_at" : 1556488166377
          },
          "x54" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片54.PNG",
              "type" : "Picture"
            },
            "id" : "x54",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "54",
            "time" : 1555228371611,
            "title" : "54.4 ネットワーク（サーバ）",
            "update_at" : 1556488166377
          },
          "x55" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片55.PNG",
              "type" : "Picture"
            },
            "id" : "x55",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "55",
            "time" : 1555228371611,
            "title" : "55.4 ネットワーク（クライアント）",
            "update_at" : 1556488166377
          },
          "x56" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片56.PNG",
              "type" : "Picture"
            },
            "id" : "x56",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "56",
            "time" : 1555228371611,
            "title" : "56.4 SMTP",
            "update_at" : 1556488166377
          },
          "x57" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片57.PNG",
              "type" : "Picture"
            },
            "id" : "x57",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "57",
            "time" : 1555228371611,
            "title" : "57.4 Multithread",
            "update_at" : 1556488166377
          },
          "x58" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片58.PNG",
              "type" : "Picture"
            },
            "id" : "x58",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "58",
            "time" : 1555228371611,
            "title" : "58.4 Multithread（Class）",
            "update_at" : 1556488166377
          },
          "x59" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片59.PNG",
              "type" : "Picture"
            },
            "id" : "x59",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "59",
            "time" : 1555228371611,
            "title" : "59.4 XML処理（XMLファイル）",
            "update_at" : 1556488166377
          },
          "x60" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片60.PNG",
              "type" : "Picture"
            },
            "id" : "x60",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "60",
            "time" : 1555228371611,
            "title" : "60.4 XML処理（SAX）\u000B",
            "update_at" : 1556488166377
          },
          "x61" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片61.PNG",
              "type" : "Picture"
            },
            "id" : "x61",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "61",
            "time" : 1555228371611,
            "title" : "61.4 GUI処理",
            "update_at" : 1556488166377
          },
          "x62" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片62.PNG",
              "type" : "Picture"
            },
            "id" : "x62",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "62",
            "time" : 1555228371611,
            "title" : "62.4 GUI処理（ Tkinter ）",
            "update_at" : 1556488166377
          },
          "x63" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片63.PNG",
              "type" : "Picture"
            },
            "id" : "x63",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "63",
            "time" : 1555228371611,
            "title" : "63.4 GUI処理（ Tkinterコンポーネント）\u000B",
            "update_at" : 1556488166377
          },
          "x64" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片64.PNG",
              "type" : "Picture"
            },
            "id" : "x64",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "64",
            "time" : 1555228371611,
            "title" : "64.4 オンライン環境",
            "update_at" : 1556488166377
          },
          "x65" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片65.PNG",
              "type" : "Picture"
            },
            "id" : "x65",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "65",
            "time" : 1555228371611,
            "title" : "65.4 IDE",
            "update_at" : 1556488166377
          },
          "x66" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片66.PNG",
              "type" : "Picture"
            },
            "id" : "x66",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "66",
            "time" : 1555228371611,
            "title" : "66.4 TensorFlow",
            "update_at" : 1556488166377
          },
          "x67" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片67.PNG",
              "type" : "Picture"
            },
            "id" : "x67",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "67",
            "time" : 1555228371611,
            "title" : "67.4 Package",
            "update_at" : 1556488166377
          },
          "x68" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "http://jp.highwayns.com/study_1/pythonintro/幻灯片68.PNG",
              "type" : "Picture"
            },
            "id" : "x68",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "68",
            "time" : 1555228371611,
            "title" : "68.4 PyIndex",
            "update_at" : 1556488166377
          },
          "x69" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x69",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "tei952",
            "ord" : "69",
            "time" : 1555228371611,
            "title" : "69.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLv2K4G35jI5thkNgR" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Spring Frameworkの開発元（米Pivotal）では、Spring \nFrameworkを利用した開発のための専用ツールを用意しています。\n「Spring Tool Suite（STS）」と呼ばれるもので、Eclipseを\nベースに専用のプラグインを組み合わせて作られています。\nhttp://spring.io/tools/sts</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 Springプロジェクトの作成",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nSpring利用プロジェクトの作成について説明しましょう。まずは、\nMavenを利用している場合の作成方法です。コマンドプロンプトある\nいはターミナルを起動し、プロジェクトを作成する場所にcdコマンド\nで移動してから、以下のように実行して下さい。\nmvn archetype:generate</p>\n<p>実行すると、利用可能なリポジトリがずらっと表示されます。\nChoose a number or apply filter (format: [groupId:]artifactId, \ncase sensitive contains): 618:</p>\n<p>これはそのままEnterしてOKです。\nChoose org.apache.maven.archetypes:maven-archetype-quickstart version:</p>\n<p>最新バージョンがデフォルトで指定されていますので、そのまま\nEnterすればOKです。\nDefine value for property &#39;groupId&#39;: :</p>\n<p>グループIDを指定します。ここでは、「com.tuyano.libro」として\nおきました。\nDefine value for property &#39;artifactId&#39;: :</p>\n<p>アーティファクトIDの指定です。ここでは、「MySpringApp」として\nおきました。\nDefine value for property &#39;version&#39;:  1.0-SNAPSHOT: :</p>\n<p>versionプロパティの設定です。defaultのままでいいので、そのま\nまEnterします。\nDefine value for property &#39;package&#39;:  com.tuyano.libro: :</p>\n<p>プログラムのパッケージを指定します。これはグループIDが指定され\nていますのでそのままEnterすればいいでしょう。</p>\n<p>ここまで設定した内容がずらっとまとめて表示されるので、間違いが\nなければそのままEnterします。間違いがあったら、「N」とタイプし\nてEnterし、再度入力をします。これでプロジェクトが生成されます\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 Mavenによるプロジェクトの作成",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n作成されたプロジェクトのフォルダ（ここでは「MySpringApp」フォ\nルダ）の中には、「src」フォルダと「pom.xml」というファイルが\n作成されています。</p>\n<p>「src」フォルダは、プロジェクトのファイル類がまとめられている\nところです。この中には以下のフォルダがあります。</p>\n<p>「main」フォルダ――プログラムで使用するファイル類がまとめられま\nす。\n「test」フォルダ――プログラムで使うユニットテストのソースコード\nがまとめられます。</p>\n<p>「main」フォルダ内には「java」フォルダがあり、その中にパッケ\nージのフォルダ構成が用意され、そこに「App.java」というソース\nコードファイルが作成されます。これは、サンプルとして作成された\nソースコードファイルで、中身はSpring Frameworkとは全然関係の\nない、ただのシンプルなJavaアプリケーションです。</p>\n<p>もう１つの「pom.xml」ファイルが、Mavenプロジェクトのキモとな\nるものです。これは、プロジェクトに必要なライブラリなどの情報を\n記述したものです。Mavenでは、このファイルの情報を元に必要なフ\nァイル類をダウンロードしプロジェクトを生成していきます。つま\nり、このpom.xmlをきっちりと書いておかないと、プロジェクトはう\nまく作成できないのです。</p>\n<p>下に、デフォルトで記述されているpom.xmlの内容をあげておきま\nす。pom.xmlは、<project>というタグの中に、ざっと以下のような\nタグを記述して構成されています。</p>\n<p><groupId>　――グループIDです。</p>\n<p><artifactId>　――アーティファクトIDです。</p>\n<version>　――バージョンを示すテキストです。\n<packaging>　――パッケージの種類です。\n<name>　――プロジェクト名です。\n<url>　――URLです。\n\n<properties>　――各種のプロパティが記述されます。ここでは、&lt;project.build.sourceEncoding&gt;というものが用意されています。これはプロジェクトのデフォルトエンコーディングを指定するも\nのです。\n\n<dependencies>　――この中に<dependency>というタグを使って、\n必要なライブラリの情報を記述します。デフォルトでは、JUnitのラ\nイブラリに関する情報が記述されています。\n\n――これらのタグを記述して必要なライブライを構成していくのが、\nMavenによるプロジェクト作成の基本なのです。\n<code>## 4.0 pom.xml</code>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.tuyano.libro</groupId>\n    <artifactId>MySpringApp</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>MySpringApp</name>\n    <url>http://maven.apache.org</url>\n\n    <properties>\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    </properties>\n\n    <dependencies>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>3.8.1</version>\n        <scope>test</scope>\n    </dependency>\n    </dependencies>\n</project>\n<code>## 5.0 pom.xmlにSpringのコアライブラリを追記する</code>\n下に掲載したのが、修正したpom.xmlです。ここでは、<dependencies>タグの中に、以下のようなタグが追加されています\nね。\n<dependency>\n  <groupId>org.springframework</groupId>\n  <artifactId>spring-context</artifactId>\n  <version>4.1.7.RELEASE</version>\n</dependency>\n\n記述したら、「cd MySpringApp」でプロジェクトのフォルダ内に移\n動し、以下のように実行して下さい。\nmvn install\n<code>## 6.0 プログラム実行</code>\nこれで、必要なライブラリなどをダウンロードし、プロジェクトをビ\nルドしてJarファイルを作成します。「target」フォルダというもの\nが作成されるので、この中を見てみましょう。すると、「MySpringApp-0.0.1-SNAPSHOT.jar」というファイルが作成され\nているはずです。これがビルドされたJarファイルです。\n\nでは、これを実行してみましょう。コマンドラインから「cd \ntarget」を実行して「target」フォルダ内に移動し、以下のように\n実行をします。\njava -classpath .;MySpringApp-0.0.1-SNAPSHOT.jar com.tuyano.libro.App\n\nクラスパスにMySpringApp-0.0.1-SNAPSHOT.jarを指定して、\ncom.tuyano.libro.Appを実行します。これで、Appクラスのmainメ\nソッドが実行され、「Hello World!」とテキストが表示されます。\n<code>## 7.0 STSでSpringプロジェクトを作成する</code>\nSTSを起動し、＜File＞メニューの＜New＞メニュー内から、\n＜Spring Project＞メニューを選びます。\n\n現れたダイアログで、以下のように設定を行います。\n\nProject name――プロジェクト名です。先ほどMavenで作成したのと\n同じものを作るならば、「MySpringApp」と入力しておけばいいでし\nょう。\n\nTemplate――「Simple Project」内にある「Simple Spring \nMaven」を選択します。\n\nWorking sets――ここでは特に使わないのでチェックはOFFにしてお\nきます。\n\nこれで「Finish」ボタンを押せば、プロジェクトが作成されます。た\nだし、この段階では、特にJavaのソースコードファイルは用意されて\nいませんので、後で必要に応じてクラスを作成していくことになるで\nしょう。\n<code>## 8.0 DIは「依存性」を切り離すこと</code>\nSpring Frameworkは、「DIコンテナ」と呼ばれるフレームワークと\nしてスタートしました。DIとは、「依存性注入」と呼ばれる機能で\nす。\n\nプログラムでは、さまざまな機能をコンポーネント化して利用するこ\nとが多いものです。コンポーネントに各種のプロパティなどを設定し\nて利用するわけですね。このとき、細々とした設定をすべてコードと\nして記述しておくと、後々変更やテストなどが非常に面倒になりま\nす。\n\nこのコンポーネントの設定などのように、特定の状況などで設定され\nるものを「依存性」と呼びます。この依存性があるために、コードが\n特定の状況でしか使えない形になってしまっているのですね。\n\nそこで、コンポーネントの設定情報などの依存性をコードから切り離\nし、外部から注入するようにしよう、というのが「依存性注入」の基\n本的な考え方です。これは、いくつかのやり方があるのですが、基本\nは「Beanと設定ファイル」でプログラムを作ること、と考えておくと\nわかりやすいでしょう。\n\nBeanは、さまざまな値などをプロパティとして持っているシンプルな\nクラスですね。通常は、Beanはインスタンスを作成して、各種のプロ\nパティなどを設定して利用します。が、この設定処理（依存性の部\n分）をコードから切り離してしまうことができれば、コードもシンプ\nルになるしテストもしやすくなりますね。\n\nSpring Frameworkでは、依存性の部分をXMLファイルとして用意\nし、これを読み込むことで自動的にBeanインスタンスを生成すること\nができます。他にもアノテーションを利用する方法などもあるのです\nが、Beanの設定ファイルを利用する方法が一番基本として覚えておく\nとよいでしょう。\n\n<code>## 9.0 インターフェイスとBeanクラスの作成</code>\nSampleBeanInterfaceインターフェイス\npackage com.tuyano.libro;\n\npublic interface SampleBeanInterface {\n    public String getMessage();\n    public void setMessage(String message);\n}\n\nSampleBeanクラス\n\npackage com.tuyano.libro;\n\npublic class SampleBean implements SampleBeanInterface {\n    private String message;\n\n    public SampleBean() {\n        message = &quot;(no message)&quot;;\n    }\n\n    public SampleBean(String message) {\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;SampleBean [message=&quot; + message + &quot;]&quot;;\n    }\n}\n<code>## 10.0 Bean設定ファイルの作成</code>\nこのBeanを利用するための設定ファイルを作成しましょう。プロジェ\nクトの「src」フォルダ内にある「main」フォルダの中に、\n「resources」というフォルダを用意して下さい。この中に、Bean設\n定ファイルを作成します。\n\n下のリスト欄に掲載したのが、そのサンプルです。これを記述し、\n「bean.xml」というファイル名で「resources」フォルダ内に保存\nしましょう。\n\nこのBean設定ファイルは、<beans>というタグの中に、<bean>タグ\nを使ってBeanの情報を記述していきます。これは以下のように記述し\nます。\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n    http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\n    <bean id=\"bean1\" class=\"com.tuyano.libro.SampleBean\">\n        <property name=\"message\" value=\"Hello, this is Bean Sample!!\" />\n    </bean>\n\n</beans>\n<code>## 11.0 アプリケーションからBeanを利用する</code>\npackage com.tuyano.libro;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n    public static void main(String[] args) {\n        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);\n        SampleBeanInterface bean1 = (SampleBeanInterface)app.getBean(&quot;bean1&quot;);\n        System.out.println(bean1);\n    }\n\n}\n<code>## 12.0 別のBeanを追加する</code>\nクラスの用意ができたら、bean.xmlを開き、先に記述した<bean>タ\nグの部分を下のように書き換えてみてください。\n<bean id=\"bean1\" class=\"com.tuyano.libro.SomeBean\">\n    <property name=\"message\" value=\"2015/7/24\" />\n</bean>\n\n\npackage com.tuyano.libro;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class SomeBean \n     implements SampleBeanInterface {\n    private Date date;\n    private SimpleDateFormat format;\n\n    public SomeBean() {\n        date = Calendar.getInstance().getTime();\n        format = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;);\n    }\n\n    public String getMessage() {\n        return format.format(date);\n    }\n\n    public void setMessage(String message) {\n        try {\n            date = format.parse(message);\n        } catch (ParseException e) {\n            e.printStackTrace();\n            date = null;\n        }\n    }\n\n    @Override\n    public String toString() {\n        return &quot;SomeBean [date=&quot; + format.format(date) + &quot;]&quot;;\n    }\n}\n<code>## 13.0 アノテーションによるBean操作とは？</code>\nアノテーションとは、クラスやメソッド、フィールドなどの宣言文の\n上に書かれる、「＠記号で始まるテキスト」のことです。例えば、あ\nるクラスのサブクラスを作ったとき、メソッドのオーバーライドを明\n示的にするために、「@Override」といったアノテーションを書いた\nことぐらいはあるでしょう。\n\nアノテーションは、クラス内には影響を与えません。また、修正すれ\nば再ビルドなどは必要になりますが、メソッドやクラスにシンプルな\n単語を書くだけで必要な操作を行えるためわかりやすく、多くのフレ\nームワークが設定ファイルに別れを告げてアノテーション方式に切り\n替えています。\n\nSpring Frameworkでも、設定ファイル方式とアノテーション方式の\nいずれのやり方もサポートしています。前回、Bean設定ファイルを使\nった基本について説明しましたから、今回はアノテーション方式につ\nいて説明しましょう。\n\n<code>## 14.0 Bean設定クラスを作成する</code>\nアノテーション方式は、Bean設定ファイルを使わず、Javaのクラス\nで全てを作成するというやり方です。ということは、Bean設定ファイ\nルに相当するクラスを用意する必要があります。\n\nでは、Bean設定クラスを作成してみましょう。前回、利用した\nMySpringAppプロジェクトをそのまま利用します。今回は、\ncom.tuyano.libroパッケージ内に「SampleBeanConfig」というク\nラスを作成しましょう。下にソースコードを掲載しておきましたの\nで、それを参考に記述下さい。\n\nBean設定クラスも、見ればわかるようにシンプルなPOJOクラスとし\nて定義されます。ただし、２つのアノテーションが記述されています\nね。\n\n@Configuration\nこれは、クラス宣言の前に記述します。このアノテーションは、この\nクラスがBeanの設定を行うものであることを示します。Bean設定ク\nラスには常にこれをつけます。\n\n@Bean\nBeanを作成するメソッドの前に記述します。これを記述すると、その\nメソッドをBeanインスタンス作成のためのものと認識します。これを\nつけるメソッドは、必ずBeanインスタンスを返値として指定しておき\nます。\n\n今回は、SampleBeanInterfaceインスタンスをBeanとして生成する\nための設定クラスを定義していた、というわけですね。\npackage com.tuyano.libro;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SampleBeanConfig {\n\n    @Bean\n    public SampleBeanInterface sampleBean() {\n        return new SampleBean(&quot;設定クラスで作ったインスタンスです。&quot;);\n    }\n\n}\n<code>## 15.0 Appクラスを修正する</code>\n今回は、bean.xmlを利用した場合とはちょっと違ったやり方をして\nいます。簡単にまとめましょう。\n\nApplicationContextを取得する\nApplicationContext app = new \n    AnnotationConfigApplicationContext(SampleBeanConfig.class);\nまず、ApplicationContextインスタンスを作成します。これは同じ\nですが、よく見ると使っているクラスが違っていますね。今回は\n「AnnotationConfigApplicationContext」というクラスのインス\nタンスを作成しています。\n\nこれは、Bean設定クラスを利用してApplicationConfigを作成する\nためのものです。引数には、設定クラスのClass値を指定します。こ\nれで、その設定クラスからBeanを管理するApplicationContextが作\n成されます。\n\nBeanを取得する\nSampleBeanInterface bean1 = \n    (SampleBeanInterface)app.getBean(SampleBeanInterface.class);\n\n\nBeanの取得は、これまでとまったく同じです。「getBean」メソッド\nを使い、引数に取り出すBeanのClassを指定するだけです。これでそ\nのBeanのインスタンスが得られます。\n\n引数には、取得するBeanクラスのClass値を指定します。これで、指\n定クラスのBeanが得られます。\npackage com.tuyano.libro;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class App {\n\n    public static void main(String[] args) {\n        ApplicationContext app = new\n            AnnotationConfigApplicationContext(SampleBeanConfig.class);\n        SampleBeanInterface bean1 = \n            (SampleBeanInterface)app.getBean(SampleBeanInterface.class);\n        System.out.println(bean1);\n    }\n}\n<code>## 16.0 コンポーネントを作成しよう</code>\nアノテーションによるBean利用は、いろいろと応用ができます。基本\nがわかったら、続いてBeanを利用する「コンポーネント」を使ってみ\nましょう。\n\nSpring Frameworkでは、高度な機能を持ったクラスをコンポーネン\nトとして定義し、Beanと同じような感覚で利用できます。簡単なサン\nプルとして、「BeanHolder」というコンポーネントクラスを作って\nみましょう。\n\ncom.tuyano.libroパッケージに、BeanHolderクラスを作成し、下の\n掲載するようにソースコードを記述して下さい。\n\nこのBeanHolderは、ごくシンプルなコンポーネントです。このコン\nポーネント内では、先ほどのBean設定クラスで用意したBeanをフィ\nールドに保管しており、それを利用したメソッドが用意されていま\nす。ポイントを整理していきましょう。\n\n「@Component」アノテーション\nクラスの宣言の手前には、@Componentというアノテーションがつけ\nられています。これは、そのクラスがコンポーネントであることを示\nすためのものです。コンポーネントクラスには必ずこれを付けておき\nます。\n\n「@Autowired」アノテーション\nこのクラスには、SampleBeanInterfaceをフィールドに保管してい\nます。このフィールドには、@Autowiredというアノテーションがつ\nけられています。これは、Bean設定クラス（あるいはファイル）によ\nって自動生成されたBeanインスタンスを自動的にバインドするための\nものです。\n\nこれをつけることで、生成されたBean群の中から\nSampleBeanInterfaceインスタンスのものを探してこのbeanフィー\nルドに自動的に代入するのです。この@Autowairedは、コンポーネン\nトに限らず、さまざまなBean利用シーンで用いられます。\n\n<code>## 17.0 BeanHolder</code>\npackage com.tuyano.libro;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class BeanHolder {\n\n    @Autowired\n    private SampleBeanInterface bean;\n\n    public void showMessage() {\n        System.out.println(&quot;<em>print by BeanHolder</em>&quot;);\n        System.out.println(bean);\n        System.out.println(&quot;<em>end</em>&quot;);\n    }\n\n}\n<code>## 18.0 コンポーネントを利用する</code>\nコンポーネントを実際に利用しましょう。App.javaを開き、下のソ\nースコードのように書き換えてください。そして実行してみましょ\nう。\n\n「<em>print by BeanHolder</em>」という表示の下に、SampleBeanの出力\nがされます。BeanHolderが取得され、その中でSampleBeanを使って\n処理を実行しているのがよくわかりますね。\n\nここでは、AnnotationConfigApplicationContextインスタンスを\n作成した後、getBeanで「BeanHolder.class」を引数に指定して\nBeanHolderインスタンスを取得しています。BeanHolderは、Bean設\n定クラス（SampleBeanConfig）には記述されていません。が、ちゃ\nんとgetBeanで取り出せるのです。\n\nこれは、Bean設定ファイルの@ComponentScanにより、@Component\nを指定されたクラスが検索され、そのインスタンスが\nApplicationContextに登録されているからです。またその内部で\nは、@Autowiredにより、SampleBeanが自動的にフィールドに設定さ\nれていたので、その値がshowMessageで出力されていた、というわけ\nです。\n\nこのように、アノテーションを使うと、必要なBeanやコンポーネント\n類がすべて自動的に用意され使えるようになります。Spring \nFrameworkのBean利用の基本的な仕組みが、これでだいぶわかってき\nたのではないでしょうか。\n\nDIによるBeanの利用は、Spring Frameworkの中核をなす技術です。\nSpring Frameworkにはさまざまなライブラリが用意されています\nが、それらはすべて、このBean技術を使って必要な機能をBean化\nし、利用しています。Bean利用がわからないと、Spring Framework\nの基本的な使い方が理解できないのです。これらは「Spring \nFrameworkの基本中の基本」として、しっかり理解しておきましょ\nう。\npackage com.tuyano.libro;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class App {\n\n    public static void main(String[] args) {\n        ApplicationContext app = new\n            AnnotationConfigApplicationContext(SampleBeanConfig.class);\n        BeanHolder holder = app.getBean(BeanHolder.class);\n        holder.showMessage();\n    }\n}\n<code>## 19.0 AOPの利用</code>\nAOPは、「Aspect Oriented Programming（アスペクト指向プログ\nラミング）」の略です。アスペクトというのは、一般に「横断的関心\n事」と呼ばれるものです。\n\nオブジェクト指向では、プログラムは「クラス」を単位として作成さ\nれます。それぞれのクラスごとに、そのクラスに必要な機能をメソッ\nドとして実装してくわけですね。この手法は、考え方としてはよくで\nきていますが、逆に「クラスごとに完結している」ということが面倒\nになってしまうこともあります。\n\n例えば、プログラムの開発中、動作状況をチェックするために、あち\nこちにSystem.out.println文を書いて値を出力させている、なんて\n人はいませんか？　誰しもよくやる方法ですね。これ、考えてみると\nものすごく面倒くさいやり方です。多数のクラスがあったら、それぞ\nれのクラスのそれぞれのメソッドにprintlnを書いていかないといけ\nません。更に、そうやってプログラムが完成したら、すべての\nprintlnを削除しないといけないのです。\n\nこういう「多数のクラスにわたって共通して必要となる処理」が、横\n断的関心事です。もしも、さまざまなクラスの中にあるメソッドに、\nprintln文を自動的に挿入できる機能があったら、これはかなり便利\nじゃありませんか？　そして必要がなくなったらすべて自動的に削除\nできるとしたら？　これこそが、AOPの考え方なのです。\n\nDIが「依存性（値）の注入」なら、AOPは「処理の注入」といってよ\nいでしょう。外部から、クラス内の特定のところに、あらかじめ用意\nしておいた処理を挿入したり取り除いたりする。これがAOPで実現さ\nれることです。\n<code>## 20.0 pom.xmlの準備</code>\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aop</artifactId>\n    <version>4.1.7.RELEASE</version>\n</dependency>\n<code>## 21.0 AOPを利用するBeanクラスを用意する</code>\nAOPを利用してみましょう。AOPは、特定の処理を外部からクラス内に\n挿入する働きをします。これを実現するためには以下のようなものを\n用意する必要があります。\n\nAOPの対象となるクラス。ごく一般的なBeanクラスを用意してお\nく。\nAOPで挿入する処理を用意したクラス。ここに挿入する処理を用意す\nる\nAOPに関する設定情報。これはBean設定ファイルか、設定クラスを使\nって用意する。\n\nまずは、AOP対象となるクラスを用意しましょう。今回は、\ncom.tuyano.libro.aopというパッケージを用意して、この中に必要\nなクラス類をまとめることにします。「SampleAopBean」というクラ\nスを下のリストのように作成しておくことにしましょう。\n\nこれは、先に作ったSampleBeanとほとんど同じものです。メッセー\nジを保管するmessageプロパティと、コンストラクタ、そして\nprintMessageというメソッドを用意しておきました。このように、\n使用するBean自体は、ごくごくシンプルなPOJOクラスであるのが\nSpring Frameworkの特徴でしょう。\n<code>## 22.0 SampleAopBean</code>\npackage com.tuyano.libro.aop;\n\npublic class SampleAopBean {\n    private String message;\n\n    public SampleAopBean() {\n        super();\n    }\n    public SampleAopBean(String message) {\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public void printMessage() {\n        System.out.println(&quot;message:[&quot; + message + &quot;]&quot;);\n    }\n}\n<code>## 23.0 MethodBeforeAdviceクラスの作成</code>\nこのSampleAopBeanにAOPで挿入する処理を用意しましょう。これ\nも、もちろんJavaのクラスとして定義します。\n\ncom.tuyano.libro.aopパッケージ内に、「SampleMethodAdvice」\nという名前でクラスを作成しましょう。そして下のリスト欄のように\nコードを記述して下さい。\n\n今回作成したSampleMethodAdviceは、２つのインターフェイスを実\n装しています。このインターフェイスにより、処理の挿入に関するメ\nソッドを追加します。それぞれ簡単に整理しましょう。\n\n●MethodBeforeAdvice\nこれは、メソッドの実行前に処理を挿入するためのインターフェイス\nです。これは「before」というメソッドを１つ持っており、以下のよ\nうに定義されています。\npublic void before(Method method, Object[] args, Object target) \n    throws Throwable \n\nMethodは対象となるメソッド、argsはその引数、targetは対象とな\nるオブジェクト（インスタンス）がそれぞれ渡されます。これらの引\n数により、どのインスタンスのどのメソッドが呼び出される前にこの\n処理が実行されたかを知ることができます。\n\n●AfterReturningAdvice\nこれは、メソッドの実行が終わり、呼び出し元に戻される際に挿入す\nる処理のインターフェイスです。「AfterReturningAdvice」という\nメソッドが用意されています。これは以下のように定義されていま\nす。\npublic void afterReturning(Object returnValue, Method method, \n    Object[] args, Object target) throws Throwable\n\nメソッドの返値、メソッド、メソッドに渡された引数、ターゲットの\nインスタンスといったものが引数に渡されます。返値以外は上の\nbeforeと同じなので、ほぼ同じ感覚で扱うことができるでしょう。\n\n――ここでは、それぞれメソッドとターゲットをSystem.out.println[で出力しているだけです。AOPは、「処理を挿入する」といいました[が、どこでもいいから好き勝手に挿入するというわけではありませ[ん。「このタイミングで挿入する」ということがあらかじめいくつ[か用意されているのです。\n\nとりあえず、この２つのインターフェイスを覚えれば、「メソッドの[呼び出し前と呼び出し後」に処理を挿入できるようになります。AOP[の基本を覚えるには十分でしょう\n<code>## 24.0 SampleMethodAdvice</code>\npackage com.tuyano.libro.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.AfterReturningAdvice;\nimport org.springframework.aop.MethodBeforeAdvice;\n\npublic class SampleMethodAdvice \n        implements MethodBeforeAdvice, AfterReturningAdvice {\n\n    @Override\n    public void before(Method method, Object[] args, \n            Object target) throws Throwable {\n        System.out.println(&quot;<em>before: &quot; + method.getName() + &quot;[&quot; + target + &quot;]&quot;);\n    }\n\n    @Override\n    public void afterReturning(Object returnValue, Method method, \n            Object[] args, Object target) throws Throwable {\n        System.out.println(&quot;</em>after: &quot; + method.getName() + &quot;[&quot; + target + &quot;]&quot;);\n    }\n\n}\n<code>## 25.0 bean.xmlを作成する</code>\n\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n<beans\n    xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n    http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- aop bean... -->\n    <bean id=\"sampleAopBean\" class=\"com.tuyano.libro.aop.SampleAopBean\">\n        <property name=\"message\" value=\"this is AOP bean!\" />\n    </bean>\n    <bean id=\"sampleMethodAdvice\"\n        class=\"com.tuyano.libro.aop.SampleMethodAdvice\" />\n\n    <bean id=\"proxyFactoryBean\"\n            class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n        <property name=\"target\" ref=\"sampleAopBean\"></property>\n        <property name=\"interceptorNames\">\n            <list>\n                <value>sampleMethodAdvice</value>\n            </list>\n        </property>\n    </bean>\n\n</beans>\n<code>## 26.0 AOPを実行しよう</code>\npackage com.tuyano.libro.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n    public static void main(String[] args) {\n        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);\n\n        SampleAopBean bean1 = (SampleAopBean) app.getBean(&quot;sampleAopBean&quot;);\n        bean1.printMessage();\n\n        System.out.println(&quot;--------------------&quot;);\n\n        SampleAopBean bean2 = (SampleAopBean) app.getBean(&quot;proxyFactoryBean&quot;);\n        bean2.printMessage();\n    }\n\n}\n<code>## 27.0 アノテーションでAOP設定クラスを作る</code>\npackage com.tuyano.libro.aop;\n\nimport org.springframework.aop.framework.ProxyFactoryBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SampleAopConfig {\n    private SampleAopBean sampleAopBean = \n        new SampleAopBean(&quot;this is message bean.&quot;);\n    private SampleMethodAdvice sampleMethodAdvice = \n        new SampleMethodAdvice();\n\n    @Bean\n    SampleAopBean sampleAopBean() {\n        return sampleAopBean;\n    }\n\n    @Bean\n    SampleMethodAdvice sampleMethodAdvice() {\n        return sampleMethodAdvice;\n    }\n\n    @Bean\n    ProxyFactoryBean proxyFactoryBean() {\n        ProxyFactoryBean bean = new ProxyFactoryBean();\n        bean.setTarget(sampleAopBean);\n        bean.setInterceptorNames(&quot;sampleMethodAdvice&quot;);\n        return bean;\n    }\n\n\n}\n<code>## 28.0 AspectJを利用する</code>\nAOPについて調べてみると、おそらく「AspectJ」というソフトウェ\nアについてたくさん見つかることでしょう。AspectJは、JavaのAOP\nソフトウェアのデファクトスタンダードといっていいほどに広く使わ\nれているソフトです。\n\nSpring AOPでも、このAspectJを利用してAOPの実装をするための機\n能が用意されています。前回使ったSpring AOPとはまた違った形で\nAOPを実装できるので、こちらの使い方も覚えておきたいところで\nす。\n\nでは、まずAspectJを利用するための準備をしましょう。pom.xmlを\n開き、<dependencies>タグ内に下のリスト欄の内容を追記して下さ\nい（既に書いてあるspring-coreやspring-aopのタグは削除しない\nように！）。\n\n例によって、ここではSpring Framework 4.1.7に合わせてバージョ\nンを指定してますので、他のバージョンを使っている場合はそれにあ\nわせて<version>を調整して下さい。\n\nここでは２つのライブラリを追加しています。「AspectJ RT」は、\nAspectJのランタイムプログラムです。これが入っていれば、\nAspectJの機能を利用できるようになります。また「AspectJ \nWeaver」は、アスペクトの情報を元にアスペクトを組み込んだコード\nを生成するのに必要なユーティリティプログラムです。Spring AOP\nからAspectJを利用する際には、この２つをセットで用意して下さ\nい。\n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjrt</artifactId>\n    <version>1.8.6</version>\n</dependency>\n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjweaver</artifactId>\n    <version>1.8.6</version>\n</dependency>\n<code>## 29.0 アスペクト・クラスを作成する</code>\nアスペクトで挿入する処理となるクラスを作成しましょう。今回は、\nAspectJを利用するため、前回とは違った形になります。\n\n下のリストが、作成するサンプルです。com.tuyano.libro.aopパッ\nケージに、「SampleAspect」というクラス名で作成をしましょう。\n\n見ればわかるように、これはごく一般的なPOJOクラスです。何のイン\nターフェイスも実装していませんし、何のクラスも継承していませ\nん。違うのは、アノテーションが付けられていることだけです。\n\n@Aspect\nこれがアスペクト・クラスであることを示します。AspectJで利用す\nるためのクラスは、このアノテーションをつけておきます。\n\n@Before\nこれはメソッドの手前に付けます。メソッドの実行前に挿入される処\n理であることを示すアノテーションです。Spring AOPにあった\n「before」と同様のものと考えてよいでしょう。\n\n@After\nこれもメソッドの手前に付けます。こちらはメソッドの実行後に挿入\nされる処理であることを示すアノテーションです。Spring AOPにあ\nった「afterRunning」に相当するものと考えるとよいでしょう。\n\n\n――アノテーションそのものはシンプルです。わかりにくいのは、\n@Beforeと@Afterの後にある()内の記述でしょう。これは以下のよう\nに記述されています。\n(&quot;execution(……割り当てるメソッドの指定……)&quot;)\n\nexecutionの後の()に、どのメソッドにこのメソッド挿入を行うかを\n指定します。これはパッケージ名からきっちりと正確にメソッドを指\n定する必要があります。ただし、すべての名前を記述しなければいけ\nないわけではありません。\n\nここではワイルドカード（<em>）が利用できるので、それを利用して特\n定パッケージやクラス内のすべてのメソッドなどを指定できます。ま\nた指定するメソッドの引数にも、「..」という記号で不特定の引数を\n指定できます。\n\nここでの記述を見ると、以下のようになっていますね。\n</em> com.tuyano.libro.aop.SampleAopBean.<em>(..)\n\nわかりやすく、「不特定の値」を○○と記述すると、こんな具合に書か\nれていることがわかります。\n○○ com.tuyano.libro.aop.SampleAopBean.○○(○○)\n\n一番最初にある○○は、publicとかprivateといったものが指定された\n場合を考えてつけています。またSampleAopBeanの後の○○は、このク\nラス内にあるどんなメソッドも全て対象に指定するものです。また\n(○○)は、引数がどんな形であっても対象とするためのものです。\n\nこのexecutionの書き方がある程度わかれば、思い通りにAOP処理の\n対象となるメソッドを指定できるようになるでしょう。\n\n<code>## 30.0 SampleAspect</code>\npackage com.tuyano.libro.aop;\n\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\n\n@Aspect\npublic class SampleAspect {\n\n    @Before(&quot;execution(</em> com.tuyano.libro.aop.SampleAopBean.<em>(..))&quot;)\n    public void before() {\n        System.out.println(&quot;before:&quot;);\n    }\n\n    @After(&quot;execution(</em> com.tuyano.libro.aop.SampleAopBean.*(..))&quot;)\n    public void after() {\n        System.out.println(&quot;after:&quot;);\n    }\n}\n<code>## 31.0 aopbean.xmlの作成</code>\nBean設定ファイルを用意しましょう。今回は、「aopbean.xml」と\nいうファイルを新たに追加しておくことにします。\n\n「resources」フォルダ内に「aopbean.xml」ファイルを作成し、\n下のリスト欄のように内容を記述して下さい。\n\n今回は、これまで使ってきたbean.xmlに比べて、いろいろと記述が\n増えています。以下に整理しましょう。\n\n●<beans>タグの属性\nまず、<beans>タグの部分を見て下さい。以下の属性が追加されて\nいますね。\nxmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;\n\nそして、このスキーマロケーションを示す値が、\nxsi:schemaLocationの値に追加されています。具体的には以下の\n部分です。\nhttp://www.springframework.org/schema/aop \nhttp://www.springframework.org/schema/aop/spring-aop.xsd\n\nこれらは、リストで使われている&lt;aop:aspectj-autoproxy /&gt;を使\nえるようにするためのものです。多少長くなりますが、必ず追記し\nておいて下さい。\n\n●Beanの登録\n<bean id=\"sampleAspect\" class=\"com.tuyano.libro.aop.SampleAspect\" />\n<bean id=\"sampleAopBean\" class=\"com.tuyano.libro.aop.SampleAopBean\">\n    <property name=\"message\" value=\"this is AOP bean!\" />\n</bean>\nこれは、既に何度もやりましたね。Beanの登録用のタグです。SampleAspectクラスとSampleAopBeanクラスをそれぞれBeanとし\nて登録します。\n\n●AspectJオートプロキシー\n&lt;aop:aspectj-autoproxy /&gt;\nこれは、AspectJのためのタグです。これは、先にSpring AOPのと\nきに利用したProxyFactoryBeanに相当するものを自動生成するた\nめのタグです。これを記述することで、ProxyFactoryBeanで用意\nされた機能が自動的に組み込まれます。\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd \n    http://www.springframework.org/schema/aop \n    http://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n    <bean id=\"sampleAspect\" class=\"com.tuyano.libro.aop.SampleAspect\" />\n    <bean id=\"sampleAopBean\" class=\"com.tuyano.libro.aop.SampleAopBean\">\n        <property name=\"message\" value=\"this is AOP bean!\" />\n    </bean>\n\n    &lt;aop:aspectj-autoproxy /&gt;\n\n</beans>\n<code>## 32.0 プログラムを実行する</code>\npackage com.tuyano.libro.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n    public static void main(String[] args) {\n        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;aopbean.xml&quot;);\n\n        SampleAopBean bean = (SampleAopBean) app.getBean(&quot;sampleAopBean&quot;);\n        String msg = bean.getMessage();\n        bean.setMessage(&quot;&lt;&lt;&quot; + msg + &quot;&gt;&gt;&quot;);\n        bean.printMessage();\n    }\n\n}\n<code>## 33.0 Bean設定クラスを利用する</code>\nこれでAspectJの基本的な利用の仕方はわかりました。が、Spring \nFrameworkでは、Beanは設定ファイルでなく、クラスを使って定義\nすることもできましたね。AspectJでも、この「定義クラスを使っ\nた利用」を行ってみましょう。\n\ncom.tuyano.libro.aopパッケージ内に、\n「SampleAspectConfig」というクラスを作成して下さい。そして\n下のリスト欄のようにコードを記述しましょう。これがAspectJの\n設定クラスになります。記述したら、App.javaを開き、以下の一文\nを修正しましょう。\n\n※Appの修正\nApplicationContext app = \n    new ClassPathXmlApplicationContext(&quot;aopbean.xml&quot;);\n    ↓\nApplicationContext app = \n    new AnnotationConfigApplicationContext(SampleAspectConfig.class);\n\nこれで実行すれば、先程と同様にAspectJによるメソッドの挿入が\n行われ、メソッドの呼び出し前後に処理が実行されるようになりま\nす。このクラスでは、設定クラスであることを示す@Configuration\nの他に、\n@EnableAspectJAutoProxy\nこのようなアノテーションがクラスに追加されています。これは、\nBean定義ファイルに用意した&lt;aop:aspectj-autoproxy /&gt;タグに\n相当するものです。これを記述することで、AspectJのオートプロ\nキシー機能がONになり、自動的にアスペクト・クラスのメソッド挿\n入が行われるようになります。\n\nBeanの定義はこれまでと変わりはありません。ただ、\n@EnableAspectJAutoProxyを追加するだけでAspectJの機能がONに\nなるわけですね。設定クラスに変えても、AspectJ利用の簡単さは\n変わらないことがわかるでしょう\npackage com.tuyano.libro.aop;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\n\n@Configuration\n@EnableAspectJAutoProxy\npublic class SampleAspectConfig {\n\n    @Bean\n    SampleAopBean sampleAopBean() {\n        return new SampleAopBean(&quot;this is AspectJ bean.&quot;);\n    }\n\n    @Bean\n    SampleAspect sampleAspect() {\n        return new SampleAspect();\n    }\n\n}\n<code>## 34.0 Spring Data JPAの利用</code>\nデータベース関連は、各種のライブラリやフレームワークがもっと\nも多く用意されている分野でしょう。HibernateなどのORM\n（Object Relational Mapping）は、SQLなどを使うデータベース\nのアクセスと、JavaのObjectiveなコードとの整合性をとるための\n技術として広く使われています。\n\nそうしたORM関連の技術の中でも、Javaの純正技術として浸透して\nいるのが「JPA（Java Persistence API）」でしょう。まぁ、JPA\n自体は、ORMのための技術というより、SQLをJavaなりに使いやすく\nするものという感じですが、データベースとJavaオブジェクトの橋\n渡しをするための基本的な技術として多くのフレームワークでも使\nわれています。\n\nSpring Frameworkでも、JPAを利用してデータベースアクセスを行\nう「Spring Data JPA」というライブラリが用意されています。こ\nれは「Spring Data」と呼ばれるデータベースアクセス関連ライブ\nラリの一つです。この他に、非SQLであるMongoDBを利用する\n「Spring Data MongoDB」や、Hadoop利用のための「Spring \nData Hadoop」などといったものが用意されています。Spring \nData JPAは、一般的なSQLによるリレーショナルデータベース全般\nを利用するためのもので、Spring Dataの基本となるライブラリと\nいっていいでしょう。\n\nでは、このSpring Data JPAを利用してみることにしましょう。ま\nずは、pom.xmlへのライブラリの追加です。下のリスト欄のように\nソースコードを書き換えて下さい。例によって、Spring \nFramework 4.1.7に合わせたバージョン構成になっています。\n\n今回は、計３つの<dependency>タグを新たに追加してあります。そ\nれぞれ簡単に説明しておきましょう。\n\n●H2\nグループIDに「com.h2database」、アーティファクトIDに「h2」\nを指定してあります。H2は、JavaのSQLデータベースエンジンで\nす。直接データベースファイルにアクセスしてデータを保存できま\nす。データベースというとMySQLやPostgreSQLといったものが思い\n浮かぶでしょうが、Javaのライブラリとして実装されているH2のよ\nうなデータベースエンジンは、データベースサーバーのセットアッ\nプなど面倒なことをする必要がなく、気軽に利用できるので、学習\n用としては最適です。そこで今回は、H2をデータベースに利用して\nSpring Data JPAを使うことにします。\n\n●Hibernate EntityManager\nJPAでは、「エンティティ」と呼ばれる形でデータベースのデータを\nオブジェクト化します。このエンティティの管理を行うのが、エン\nティティマネージャです。これはさまざまなものが出回っていて、\n自分で使いやすいものを選んで組み込み利用できるようになってい\nます。今回は、Hibernateが作成しているエンティティマネージャ\nを使っています。グループID「org.hibernate」、アーティファク\nトID「hibernate-entitymanager」で指定します。\n\n●Spring Data JPA\nこれが、Spring Data JPAの本体ライブラリです。グループIDに\n「org.springframework.data」、アーティファクトIDに\n「spring-data-jpa」をそれぞれ指定します。\n\n\n――以上の３つのライブラリをpom.xmlに追記することで、Spring \nData JPAが使えるようになります。最初のH2は、他のデータベース\nサーバーを利用する場合はもちろん不要です。\n<project\n    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n    http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.springframework.samples</groupId>\n    <artifactId>MySpringApp</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n<pre><code>&lt;properties&gt;\n    &lt;java.version&gt;1.6&lt;/java.version&gt;\n    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n&lt;/properties&gt;\n\n&lt;dependencies&gt;\n\n    &lt;!-- Spring --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n        &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Database (H2) --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n        &lt;artifactId&gt;h2&lt;/artifactId&gt;\n        &lt;version&gt;1.4.187&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- JPA Provider (Hibernate) --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n        &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;\n        &lt;version&gt;4.3.10.Final&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Spring Data JPA --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;\n        &lt;version&gt;1.8.1.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n\n&lt;/dependencies&gt;\n</code></pre><p></project>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 プロジェクトとpom.xmlについて",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p>\n<persistence\n    xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence.xsd\">\n\n<pre><code>&lt;persistence-unit name=&quot;persistence-unit&quot;\n    transaction-type=&quot;RESOURCE_LOCAL&quot;&gt;\n    &lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;\n    &lt;properties&gt;\n        &lt;property name=&quot;hibernate.diarect&quot; value=&quot;${hibernate.dialect}&quot; /&gt;\n        &lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;${hibernate.hbm2ddl.auto}&quot; /&gt;\n        &lt;property name=&quot;javax.persistence.jdbc.driver&quot; value=&quot;${db.driver}&quot; /&gt;\n        &lt;property name=&quot;javax.persistence.jdbc.url&quot; value=&quot;${db.url}&quot; /&gt;\n        &lt;property name=&quot;javax.persistence.jdbc.user&quot; value=&quot;${db.user}&quot; /&gt;\n        &lt;property name=&quot;javax.persistence.jdbc.password&quot; value=&quot;${db.password}&quot; /&gt;\n    &lt;/properties&gt;\n&lt;/persistence-unit&gt;\n</code></pre><p></persistence>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "35.0 persistence.xmlを作成する",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "36.0 application.propertiesに追記する",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd \n        http://www.springframework.org/schema/jdbc \n        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  \n        http://www.springframework.org/schema/data/jpa \n        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd\">\n\n<pre><code>&lt;jdbc:embedded-database id=&quot;dataSource&quot; type=&quot;H2&quot; /&gt;\n\n&lt;bean id=&quot;entityManagerFactory&quot; class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;\n    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;\n    &lt;property name=&quot;jpaVendorAdapter&quot;&gt;\n        &lt;bean class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;&gt;\n            &lt;property name=&quot;generateDdl&quot; value=&quot;true&quot; /&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n</code></pre><p></beans>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "37.0 Bean設定ファイルを用意する",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;</p>\n<p>@Entity\npublic class SampleEntity {</p>\n<pre><code>@Id\n@Column\n@GeneratedValue(strategy=GenerationType.AUTO)\nprivate long id;\n\n@Column(length=50, nullable=false)\nprivate String name;\n\n@Column(length=100, nullable=true)\nprivate String mail;\n\npublic String getName() {\n    return name;\n}\n\npublic void setName(String name) {\n    this.name = name;\n}\n\npublic String getMail() {\n    return mail;\n}\n\npublic void setMail(String mail) {\n    this.mail = mail;\n}\n\npublic long getId() {\n    return id;\n}\n\npublic SampleEntity() {\n    super();\n}\n\npublic SampleEntity(String name, String mail) {\n    this();\n    this.name = name;\n    this.mail = mail;\n}\n\npublic String toString() {\n    return &quot;SampleEntity [id=&quot; + id + &quot;, name=&quot; + name + &quot;, mail=&quot; + mail + &quot;]&quot;;\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "38.0 エンティティクラスを作成する",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n実際にデータベースを利用してみることにしましょう。\ncom.tuyano.libro.dbパッケージに「App」クラスを作成し、下の\nリスト欄のようにソースコードを記述して下さい。</p>\n<p>完成したら、実際にAppクラスを実行してみましょう。すると、以下\nのようにテキストが出力されることがわかるでしょう。</p>\n<p>SampleEntity [id=1, name=tuyano, mail=syoda@tuyano.com]\nSampleEntity [id=2, name=hanako, mail=hanako@flower]\nSampleEntity [id=3, name=taro, mail=taro@yamada]\nSampleEntity [id=4, name=sachiko, mail=sachico@happy]\n...ok.</p>\n<p>これは、ダミーとして用意したエンティティをデータベースから取\n得し表示しているのです。ここでは、ダミーデータを作成するため\nのmakeDummyDataメソッドと、取得したリストの内容を出力する\nprintListメソッドを用意しておきました。では、簡単に整理しま\nしょう。</p>\n<ol>\n<li>ApplicationContextの作成\nApplicationContext app = \n new ClassPathXmlApplicationContext(&quot;dbbean.xml&quot;);\nまずは、いつものようにApplicationContextインスタンスを用意\nします。ここでは、dbbean.xmlをファイル指定しておきます。</li>\n</ol>\n<ol start=\"2\">\n<li>EntityManagerFactoryインスタンスの取得\nEntityManagerFactory factory = app.getBean(EntityManagerFactory.class);\nBean設定ファイルに用意しておいた、エンティティマネージャファ\nクトリーのBeanを取得します。これは、EntityManagerFactoryク\nラスのclass値として引数を指定しおきます。</li>\n</ol>\n<ol start=\"3\">\n<li>EntityManagerの作成\nEntityManager manager = factory.createEntityManager();\n用意したEntityManagerFactoryから、EntityManagerを取得しま\nす。これはcreateEntityManagerというメソッドを呼び出すだけで\nす。</li>\n</ol>\n<p>――これで、EntityManagerが用意できました。後は、これを使っ\nて、ダミーデータを保存したり、あるいは全エンティティをリスト\nとして取り出したりしています。</p>\n<p>とりあえず、今回は「データベース利用の基本」ということで、肝\n心のEntityManagerを取り出すところまでわかればOK、としましょ\nう。具体的なデータベースアクセスは次回に説明する予定です\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "39.0 データベースを利用してみる",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import java.util.List;</p>\n<p>import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.Query;</p>\n<p>import org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;</p>\n<p>public class App {</p>\n<pre><code>public static void main(String[] args) {\n    ApplicationContext app = new ClassPathXmlApplicationContext(&quot;dbbean.xml&quot;);\n\n    EntityManagerFactory factory = app.getBean(EntityManagerFactory.class);\n    EntityManager manager = factory.createEntityManager();\n\n    makeDummyData(manager);\n\n    // get list\n    Query query = manager.createQuery(&quot;from SampleEntity&quot;);\n    List list = query.getResultList();\n    printList(list);\n\n    System.out.println(&quot;...ok.&quot;);\n}\n\n// create dummy entity data.\npublic static void makeDummyData(EntityManager manager) {\n    EntityTransaction transaction = manager.getTransaction();\n    transaction.begin();\n    manager.persist(new SampleEntity(&quot;tuyano&quot;, &quot;syoda@tuyano.com&quot;));\n    manager.persist(new SampleEntity(&quot;hanako&quot;, &quot;hanako@flower&quot;));\n    manager.persist(new SampleEntity(&quot;taro&quot;, &quot;taro@yamada&quot;));\n    manager.persist(new SampleEntity(&quot;sachiko&quot;, &quot;sachico@happy&quot;));\n    manager.flush();\n    transaction.commit();\n}\n\n// print all entity.\npublic static void printList(List list) {\n    for (Object item : list) {\n        System.out.println(item);\n    }\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "40.0 App修正",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;</p>\n<p>import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</p>\n<p>@Configuration\nclass SampleEntityConfig {</p>\n<pre><code>@Bean\npublic DataSource dataSource() {\n    EmbeddedDatabaseBuilder builder = \n        new EmbeddedDatabaseBuilder();\n    return builder.setType(EmbeddedDatabaseType.H2).build();\n}\n\n@Bean\npublic EntityManagerFactory entityManagerFactory() {\n    HibernateJpaVendorAdapter vendorAdapter = \n        new HibernateJpaVendorAdapter();\n    vendorAdapter.setGenerateDdl(true);\n\n    LocalContainerEntityManagerFactoryBean factory = \n        new LocalContainerEntityManagerFactoryBean();\n    factory.setJpaVendorAdapter(vendorAdapter);\n    factory.setPackagesToScan(&quot;com.tuyano.libro.db&quot;);\n    factory.setDataSource(dataSource());\n    factory.afterPropertiesSet();\n    return factory.getObject();\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "41.0 Bean設定クラスを利用する",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import java.util.List;</p>\n<p>import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.Query;</p>\n<p>import org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;</p>\n<p>public class App {</p>\n<pre><code>public static void main(String[] args) {\n    ApplicationContext app = new\n        AnnotationConfigApplicationContext(SampleEntityConfig.class);\n\n    EntityManagerFactory factory = app.getBean(EntityManagerFactory.class);\n    EntityManager manager = factory.createEntityManager();\n\n    makeDummyData(manager);\n\n    // get list\n    Query query = manager.createQuery(&quot;from SampleEntity&quot;);\n    List list = query.getResultList();\n    printList(list);\n\n    System.out.println(&quot;...ok.&quot;);\n}\n\npublic static void makeDummyData(EntityManager manager) { 略 }\n\npublic static void printList(List list) { 略 }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "42.0 Queryによるデータの一覧取得",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import java.util.List;</p>\n<p>import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.Query;</p>\n<p>import org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;</p>\n<p>public class App {</p>\n<pre><code>public static void main(String[] args) {\n    ApplicationContext app = new\n        AnnotationConfigApplicationContext(SampleEntityConfig.class);\n\n    EntityManagerFactory factory = app.getBean(EntityManagerFactory.class);\n    EntityManager manager = factory.createEntityManager();\n\n    makeDummyData(manager);\n\n    // get list\n    Query query = manager.createQuery(&quot;from SampleEntity&quot;);\n    List list = query.getResultList();\n    printList(list);\n\n    System.out.println(&quot;...ok.&quot;);\n}\n\n// create dummy entity data.\npublic static void makeDummyData(EntityManager manager) {\n    EntityTransaction transaction = manager.getTransaction();\n    transaction.begin();\n    manager.persist(new SampleEntity(&quot;tuyano&quot;, &quot;syoda@tuyano.com&quot;));\n    manager.persist(new SampleEntity(&quot;hanako&quot;, &quot;hanako@flower&quot;));\n    manager.persist(new SampleEntity(&quot;taro&quot;, &quot;taro@yamada&quot;));\n    manager.persist(new SampleEntity(&quot;sachiko&quot;, &quot;sachico@happy&quot;));\n    manager.flush();\n    transaction.commit();\n}\n\npublic static void printList(List list) { 略 }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "43.0 新しいエンティティの保存",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import java.util.List;</p>\n<p>import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.Query;</p>\n<p>import org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;</p>\n<p>public class App {\n    private static EntityManager manager;</p>\n<pre><code>public static void main(String[] args) {\n    ApplicationContext app = new\n        AnnotationConfigApplicationContext(SampleEntityConfig.class);\n\n    EntityManagerFactory factory = app.getBean(EntityManagerFactory.class);\n    manager = factory.createEntityManager();\n\n    // make dummy\n    makeDummyData();\n\n    // update entity\n    updateEntity(1L);\n    updateEntity(3L);\n\n    // get list\n    Query query = manager.createQuery(&quot;from SampleEntity&quot;);\n    List list = query.getResultList();\n    printList(list);\n\n    System.out.println(&quot;...ok.&quot;);\n}\n\npublic static void makeDummyData() { 略 }\npublic static void printList(List list) { 略 }\n\n// update entity\npublic static void updateEntity(long id) {\n    SampleEntity entity = manager.find(SampleEntity.class, id);\n    entity.setName(&quot;**update name**&quot;);\n    entity.setMail(&quot;**update@mail**&quot;);\n    EntityTransaction transaction = manager.getTransaction();\n    transaction.begin();\n    manager.merge(entity);\n    manager.flush();\n    transaction.commit();\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "44.0 エンティティの更新",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import java.util.List;</p>\n<p>import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.Query;</p>\n<p>import org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;</p>\n<p>public class App {\n    private static EntityManager manager;</p>\n<pre><code>public static void main(String[] args) {\n    ApplicationContext app = new\n        AnnotationConfigApplicationContext(SampleEntityConfig.class);\n\n    EntityManagerFactory factory = app.getBean(EntityManagerFactory.class);\n    manager = factory.createEntityManager();\n\n    // make dummy\n    makeDummyData();\n\n    // delete entity\n    deleteEntity(1L);\n    deleteEntity(3L);\n\n    // get list\n    Query query = manager.createQuery(&quot;from SampleEntity&quot;);\n    List list = query.getResultList();\n    printList(list);\n\n    System.out.println(&quot;...ok.&quot;);\n}\n\npublic static void makeDummyData() { 略 }\npublic static void printList(List list) { 略 }\n\n// delete entity\npublic static void deleteEntity(long id) {\n    SampleEntity entity = manager.find(SampleEntity.class, id);\n    EntityTransaction transaction = manager.getTransaction();\n    transaction.begin();\n    manager.remove(entity);\n    manager.flush();\n    transaction.commit();\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "45.0 エンティティの削除",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nこれでCRUDの基本操作は行えるようになりました。が、ちょっと追\n記して置かなければいけないのは、基本中の基本である「Read」の\n部分でしょう。</p>\n<p>先ほどのサンプルでは、すべてのエンティティを取り出すサンプル\nを挙げておきました。が、実際の処理では、もっと条件を細かく指\n定してエンティティを検索する必要があるでしょう。</p>\n<p>エンティティの取得は、Queryというクラスを作成しました。これ\nは、インスタンスを作成する際に「from SampleEntity」といった\n文を引数に用意していました。この文は、SQLのクエリー文と同じ働\nきをするもので、「JPQL」と呼ばれます。ただしSQLとは若干書き\n方が違います。とりあえず、エンティティの検索の基本的な書き方\nだけでもここで説明しておきましょう。</p>\n<p>●JPQLの検索の基本\nfrom エンティティ where 条件式\nSQLでもおなじみのwhere節を使えば、基本的な検索はほぼ行うこと\nができます。条件となる式は、等号などの比較演算子（=&lt;&gt;）を使っ\nて記述します。</p>\n<p>・IDが１のエンティティを取得\nfrom SampleEntity where id = 1</p>\n<p>・IDが2より大きいエンティティを取得\nfrom SampleEntity where id &gt; 2</p>\n<p>また、テキストを検索する場合は、あいまい検索の「like」が使え\nます。%記号を使い、ワイルドカードの指定も行えます。</p>\n<p>・nameが「K」ではじまるエンティティを取得\nfrom SampleEntity where name like &#39;K%&#39;</p>\n<p>複数の条件式を設定したい場合は、「and」「or」が使えます。whereの後に、「式 and 式」といった具合に複数の式をand/orで\nつなげていきます。</p>\n<p>・idが10以上20以下のエンティティを取得\nfrom SampleEntity where id &gt;= 10 and id &lt;= 20</p>\n<p>――とりあえず、こうした基本的な検索の仕方がわかれば、初歩的な\nデータ検索の処理はだいたいできるようになるでしょう。実際に\nJPQLのクエリー文を書いて動かしてみると面白いですよ\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "46.0 JPQLによるクエリー文の基本",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n前回、データベースアクセスの基本についてざっと説明をしまし\nた。このとき、データの検索については「JPQL」と呼ばれるクエリ\nー文を使って行う、ということを説明たのを覚えているでしょうか。</p>\n<p>この説明を読んで、「え゛～～～」と思わず唸った人もきっと大勢\nいたことでしょう。SQLなんてものを見たくないがためにフレームワ\nークを使おうと思ったのに、まさかのSQLモドキが待ち構えていたと\nは……。</p>\n<p>が、しかし安心して下さい。Spring Frameworkには、もっとスマ\nートにデータ検索を行うための仕組みがちゃんと用意されていま\nす。それは「JpaRepository」と呼ばれるものです。</p>\n<p>JpaRepositoryは、インターフェイスです。インターフェイスに、\nあらかじめ検索メソッドを定義しておくことで、メソッドを呼び出\nすだけでスマートにデータ検索が行えるようになるのです。「で\nも、そのメソッドの中では、JPQLを使って検索処理を書くんでしょ\n……」と思った人、まぁちょっとだけ我慢して下さい。決して損には\nなりませんから。</p>\n<p>まずは、JpsRepositoryのインターフェイスを作ってしまいましょ\nう。com.tuyano.libro.dbパッケージ内に、\n「SampleEntityRepository.java」というファイル名でソースコ\nードファイルを作成して下さい。そして、下のリスト欄のようにイ\nンターフェイスを記述しましょう。</p>\n<p>JpaRepositoryインターフェイスは、org.springframework.data.jpa.repositoryパッケージの\n「JpaRepository」というインターフェイスを継承して作成しま\nす。このインターフェイスは、総称型に対応しています。コードを\n見ると、こんな形で書かれていることがわかるでしょう。\npublic interface 名前 extends JpaRepository &lt;エンティテ\nィ , IDタイプ&gt;\n&lt;&gt;内には、エンティティのクラス名と、IDフィールドのタイプが指\n定されます。注意したいのは、「基本型の場合は、ラッパークラス\nを指定する」という点です。サンプルのSampleEntityクラスでは\nlong型をIDに指定していますので、ここでは&lt;SampleEntity, \nLong&gt;としてあるわけですね。</p>\n<p>もう１つ、注意しておきたいのは、アノテーションです。クラスの\n宣言前に、「@Repository」というアノテーションがつけられてい\nますね。これにより、このインターフェイスがJpaRepositoryであ\nることを示します。これは必ず付けておくようにしましょう。\npackage com.tuyano.libro.db;</p>\n<p>import org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;</p>\n<p>@Repository\npublic interface SampleEntityRepository\n    extends JpaRepository &lt;SampleEntity, Long&gt; {\n}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "47.0 JpaRepositoryを利用する",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd \n        http://www.springframework.org/schema/jdbc \n        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  \n        http://www.springframework.org/schema/data/jpa \n        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd\">\n\n<pre><code>&lt;jdbc:embedded-database id=&quot;dataSource&quot; type=&quot;H2&quot; /&gt;\n\n&lt;bean id=&quot;entityManagerFactory&quot;\n    class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;\n    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;\n    &lt;property name=&quot;jpaVendorAdapter&quot;&gt;\n        &lt;bean class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;&gt;\n            &lt;property name=&quot;generateDdl&quot; value=&quot;true&quot; /&gt;\n        &lt;/bean&gt;\n    &lt;/property&gt;\n&lt;/bean&gt;\n\n&lt;jpa:repositories base-package=&quot;com.tuyano.libro.db&quot; /&gt;\n\n&lt;bean id=&quot;transactionManager&quot;\n    class=&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;&gt;\n    &lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory&quot; /&gt;\n&lt;/bean&gt;\n</code></pre><p></beans>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "48.0 Bean設定ファイルを用意する",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import java.util.List;</p>\n<p>import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;</p>\n<p>import org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;</p>\n<p>public class App {\n    private static EntityManager manager;</p>\n<pre><code>public static void main(String[] args) {\n    ApplicationContext app = new ClassPathXmlApplicationContext(&quot;dbbean.xml&quot;);\n\n    EntityManagerFactory factory = app.getBean(EntityManagerFactory.class);\n    manager = factory.createEntityManager();\n\n    SampleEntityRepository repository = app.getBean(SampleEntityRepository.class);\n\n    // make dummy\n    makeDummyData();\n\n    // get list\n    List list = repository.findAll();\n    printList(list);\n\n    System.out.println(&quot;...ok.&quot;);\n}\n\n// create dummy entity data.\npublic static void makeDummyData() {\n    EntityTransaction transaction = manager.getTransaction();\n    transaction.begin();\n    manager.persist(new SampleEntity(&quot;tuyano&quot;, &quot;syoda@tuyano.com&quot;));\n    manager.persist(new SampleEntity(&quot;hanako&quot;, &quot;hanako@flower&quot;));\n    manager.persist(new SampleEntity(&quot;taro&quot;, &quot;taro@yamada&quot;));\n    manager.persist(new SampleEntity(&quot;sachiko&quot;, &quot;sachico@happy&quot;));\n    manager.flush();\n    transaction.commit();\n}\n\n// print all entity.\npublic static void printList(List list) {\n    for (Object item : list) {\n        System.out.println(item);\n    }\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "49.0 アプリケーションでJpaReposioryを利用する",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\npackage com.tuyano.libro.db;</p>\n<p>import javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\nimport javax.transaction.TransactionManager;</p>\n<p>import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;\nimport org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;</p>\n<p>@Configuration\n@EnableJpaRepositories(&quot;com.tuyano.libro.db&quot;)\n@EnableTransactionManagement\nclass SampleEntityConfig {</p>\n<pre><code>@Bean\npublic DataSource dataSource() {\n    EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();\n    return builder.setType(EmbeddedDatabaseType.H2).build();\n}\n\n@Bean\npublic EntityManagerFactory entityManagerFactory() {\n    HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n    vendorAdapter.setGenerateDdl(true);\n\n    LocalContainerEntityManagerFactoryBean factory = new\n        LocalContainerEntityManagerFactoryBean();\n    factory.setJpaVendorAdapter(vendorAdapter);\n    factory.setPackagesToScan(&quot;com.tuyano.libro.db&quot;);\n    factory.setDataSource(dataSource());\n    factory.afterPropertiesSet();\n\n    return factory.getObject();\n}\n\n@Bean\nprotected JpaTransactionManager transactionManager\n        (EntityManagerFactory entityManagerFactory) {\n    return new JpaTransactionManager(entityManagerFactory);\n}\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "50.0 Bean設定クラスを利用する",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nここではSampleEntityRepositoryインターフェイスを用意しまし\nたが、これの中身は空っぽのままでした。それでも、findAllとい\nうメソッドを呼び出して、全エンティティを取り出すことができま\nした。</p>\n<p>継承元であるJpaRepositoryには、標準でいくつものメソッドが定\n義されています。とりあえず、それらを使うことで、データベース\nの基本的な操作が行えます。ここで、主なメソッドについて簡単に\nまとめておきましょう。\nfindAll()\n既に登場しました。全エンティティをまとめたListを返します。\ngetOne(《ID》)\nIDを指定してエンティティを１つだけ取り出します。引数には、そ\nのエンティティのIDに指定された型の値が入ります。\nsaveAndFlush( エンティティ )\n引数に指定したエンティティをデータベースに保存します。\ndelete(《ID》)\n引数に指定したIDのエンティティをデータベースから削除します。\ncount()\nエンティティの数をint値で返します。</p>\n<p>――検索についてはfindAllだけですが、エンティティの保存や削除\nなどのメソッドも揃っています。これらは、いちち「トランザクシ\nョン処理を開始して……」なんて面倒なことをする必要もありませ\nん。ただメソッドを呼び出すだけで簡単に保存や削除が行えます。</p>\n<pcode>`</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "51.0 JpaRepositoryの標準メソッドについて",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// <strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>\n// ※SampleEntityRepository.java\n// <strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></p>\n<p>package com.tuyano.libro.db;</p>\n<p>import java.util.List;</p>\n<p>import org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;</p>\n<p>@Repository\npublic interface SampleEntityRepository\n        extends JpaRepository &lt;SampleEntity, Long&gt; {</p>\n<pre><code>public List&lt;SampleEntity&gt; findByNameLike(String name);\npublic List&lt;SampleEntity&gt; findByMailEndingWith(String mail);\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "52.0 リポジトリにメソッドを追加する",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n// <strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>\n// ※App.java\n// <strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></p>\n<p>package com.tuyano.libro.db;</p>\n<p>import java.util.List;</p>\n<p>import javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;</p>\n<p>import org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;</p>\n<p>public class App {\n    private static EntityManager manager;</p>\n<pre><code>public static void main(String[] args) {\n    //ApplicationContext app = new \n        AnnotationConfigApplicationContext(SampleEntityConfig.class);\n    ApplicationContext app = new ClassPathXmlApplicationContext(&quot;dbbean.xml&quot;);\n\n    EntityManagerFactory factory = app.getBean(EntityManagerFactory.class);\n    manager = factory.createEntityManager();\n    makeDummyData();\n\n    // get repository\n    SampleEntityRepository repository = app.getBean(SampleEntityRepository.class);\n\n    // get list\n    List list1 = repository.findByNameLike(&quot;%ko&quot;);\n    System.out.println(&quot;*Find By Name*&quot;);\n    printList(list1);\n    List list2 = repository.findByMailEndingWith(&quot;.com&quot;);\n    System.out.println(&quot;*Find By Mail*&quot;);\n    printList(list2);\n\n    System.out.println(&quot;...ok.&quot;);\n}\n\n// create dummy entity data.\npublic static void makeDummyData() {\n    EntityTransaction transaction = manager.getTransaction();\n    transaction.begin();\n    manager.persist(new SampleEntity(&quot;tuyano&quot;, &quot;syoda@tuyano.com&quot;));\n    manager.persist(new SampleEntity(&quot;hanako&quot;, &quot;hanako@flower.uk&quot;));\n    manager.persist(new SampleEntity(&quot;taro&quot;, &quot;taro@yamada.jp&quot;));\n    manager.persist(new SampleEntity(&quot;sachiko&quot;, &quot;sachico@happy.com&quot;));\n    manager.flush();\n    transaction.commit();\n}\n\n// print all entity.\npublic static void printList(List list) { 略 }\n</code></pre><p>}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "53.0 リポジトリのメソッドを利用する",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nJpaRepositoryでは、メソッド名の名づけ方さえわかれば、必要な\nメソッドをささっと書いて追加できてしまいます。処理は一切必要\nなし。ただメソッドの宣言文を書くだけです。ただし、「あらかじ\nめ決められたルールに従ってきちんとメソッド名をつけてあれば」\nです。適当に名づけただけでは、メソッドは自動生成されないので\nす。</p>\n<p>では、どのような形でメソッド名をつければいいのでしょうか。こ\nこでその命名規則について簡単に整理しておきましょう。</p>\n<p>●findBy○○\n基本は、これです。「findBy」の後にエンティティのプロパティ名\nを続けて記します。このプロパティ名は、最初の１文字目は大文字\nにします。例えば、nameから検索するなら「findByName」ですし、\nmailから探すなら「findByMail」となるわけです。</p>\n<p>これ以降は、この基本形である「findBy○○」の後に続けて書くもの\nになります。</p>\n<p>●Like/NotLike\n「あいまい検索」に関するものです。Likeをつければ、引数に指定\nしたテキストを含むものを検索します。またNotLikeをつけると、\n引数のテキストを含まないものを検索します。「findByNameLike」\nなら、nameから引数のテキストをあいまい検索する、というわけで\nす。</p>\n<p>●StartingWith/EndingWith\nテキストの値で、引数に指定したテキストで始まるもの、あるいは\n終わるものを検索するためのものです。「findByNameStartingWith(&quot;A&quot;)」\nなら、nameの値が&quot;A&quot;で始まる\nものを検索します。</p>\n<p>●IsNull/IsNotNull\n値がnullのもの、あるいはnullでないものを検索します。引数は不\n要です。「findByNameIsNull()」なら、nameの値がnullのものだ\nけを検索します。</p>\n<p>●True/False\n真偽値の値で、trueのもの、あるいはfalseのものを検索します。\n引数は不要。「findByCheckTrue()」なら、checkという項目が\ntrueのものだけを検索します。</p>\n<p>●Before/After\n日時の値で使うものです。引数に指定した値より前のもの、あるい\nは後のものを検索します。「findByCreateBefore(new Date())」\nとすれば、createという項目の値が現在より前のものだけを検索し\nます（createがDateだった場合）。</p>\n<p>●LessThan/GreaterThan\n数値の値で使います。その項目の値が引数より小さい、あるいは大\nきいものを検索します。「findByAgeLessThan(20)」なら、ageの\n値が20より小さいものを検索します。</p>\n<p>●Between\n２つの値を引数に持ち、その２つの値の間のものを検索します。例\nえば、「findByAgeBetween(10,20)」とすれば、ageの値が10以上\n20以下のものを検索します。数値に限らず、日時の項目などでも使\nえます。</p>\n<p>――この他にもまだありますが、とりあえずこれらが使えれば、基本\n的な検索はだいたいできるようになるでしょう。JpaRepositoryを\n使いこなせるようになれば、ほとんどノンコーディングでさまざま\nなデータ検索ができるようになります。非常に簡単ですので、サン\nプルをベースにいろいろと試してみてください\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "54.0 JpaRepositoryのメソッド命名規則について",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLv2K4G35jI5thkNgR",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "55.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLvKb6JZ4xEuew0npf" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多\n台机器上需要进行大量的环境配置操作。</p>\n<p>Docker 主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离\n的进程独立于宿主操作系统和其它隔离的进程。使用 Docker 可以不修改应用程序\n代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其\n它机器上。</p>\n<p><div align=\"center\"> <img src=\"pics/011f3ef6-d824-4d43-8b2c-36dab8eaaa72-1.png\" width=\"400px\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 解决的问题",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n虚拟机也是一种虚拟化技术，它与 Docker 最大的区别在于它是通过模拟硬件，并\n在硬件上安装操作系统来实现。</p>\n<p><div align=\"center\"> <img src=\"pics/be608a77-7b7f-4f8e-87cc-f2237270bf69.png\" width=\"500\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 与虚拟机的比较",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n启动虚拟机需要先启动虚拟机的操作系统，再启动应用，这个过程非常慢；</p>\n<p>而启动 Docker 相当于启动宿主操作系统上的一个进程。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 启动速度",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和 CPU 资源，一台机器\n只能开启几十个的虚拟机。</p>\n<p>而 Docker 只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少\n的资源，一台机器可以开启成千上万个 Docker。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 占用资源",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>提供一致性的运行环境。已经打包好的应用可以在不同的机器上进行迁移，而不用\n担心环境变化导致无法运行。</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 更容易迁移",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>使用分层技术和镜像，使得应用可以更容易复用重复的部分。复用程度越高，维护\n工作也越容易。</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 更容易扩展",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>可以使用基础镜像进一步扩展得到新的镜像，并且官方和开源社区提供了大量的镜\n像，通过扩展这些镜像可以非常容易得到我们想要的镜像。</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 持续集成",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n持续集成指的是频繁地将代码集成到主干上，这样能够更快地发现错误。</p>\n<p>Docker 具有轻量级以及隔离性的特点，在将代码集成到一个 Docker 中不会对其\n它 Docker 产生影响。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 提供可伸缩的云服务",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>根据应用的负载情况，可以很容易地增加或者减少 Docker。</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 搭建微服务架构",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Docker 轻量级的特点使得它很适合用于部署、维护、组合微服务。</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 镜像与容器",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLvKb6JZ4xEuew0npf",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLvzsimpPWmPNFJwdO" : {
        "contents" : {
          "-LfR-PYJVrIx7jdltM1t" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "Test",
              "type" : "Html"
            },
            "id" : "-LfR-PYJVrIx7jdltM1t",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "1",
            "time" : 1558469257878,
            "title" : "Test",
            "update_at" : 1558469293851
          },
          "-LfR51DfewzV-j29eL2w" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "advertismentPath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLvzsimpPWmPNFJwdO-LfR51DfewzV-j29eL2w?alt=media&token=18694dfe-9cc5-485b-a531-55537edad6ef",
              "link" : "http://jp.highwayns.com",
              "type" : "Advertisment"
            },
            "id" : "-LfR51DfewzV-j29eL2w",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "2",
            "time" : 1558470730962,
            "title" : "广告",
            "update_at" : 1558472715481
          },
          "-LfRHiVOD9-g9R2spLp4" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "type" : "Youtube",
              "youtubePath" : "lqywEafvq_Q"
            },
            "id" : "-LfRHiVOD9-g9R2spLp4",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "3",
            "time" : 1558474057987,
            "title" : "youtubeテスト"
          },
          "-LfRR7Tl3O5h4qf_5yqZ" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "type" : "Youtube",
              "youtubePath" : "ffAN0f5s48M"
            },
            "id" : "-LfRR7Tl3O5h4qf_5yqZ",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "4",
            "time" : 1558476523672,
            "title" : "youtubeテスト"
          },
          "-LfRS8XC1TSgokbUSFVu" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "audioPath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLvzsimpPWmPNFJwdO-LfRS8XC1TSgokbUSFVu?alt=media&token=c0acf19c-9df7-4316-8ee1-0d6c6d0602ee",
              "type" : "Audio"
            },
            "id" : "-LfRS8XC1TSgokbUSFVu",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "5",
            "time" : 1558476792577,
            "title" : "音声テスト"
          },
          "-LfU3cSSJlv7kJgwJ0ww" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "picturePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLvzsimpPWmPNFJwdO-LfU3cSSJlv7kJgwJ0ww?alt=media&token=dce780cf-a91a-4bdc-8d7e-1291bddb31f6",
              "type" : "Picture"
            },
            "id" : "-LfU3cSSJlv7kJgwJ0ww",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "6",
            "time" : 1558520694962,
            "title" : "图片测试"
          },
          "-LfU4aGWgRdGkk254YxH" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "answer" : "a,b,d",
              "options" : {
                "a" : "由单选到多选控件改变",
                "b" : "结果判断变复杂",
                "c" : "原来页面可以直接使用",
                "d" : "答案用逗号分隔"
              },
              "title" : "多项选择和单项选择有哪些改变？",
              "type" : "MultiSelect"
            },
            "id" : "-LfU4aGWgRdGkk254YxH",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "7",
            "time" : 1558520948068,
            "title" : "多项选择测试"
          },
          "-LfU4t0aquIoZi2tAzfb" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "flashPath" : "https://www.flashppt.com/files/tangramone.swf",
              "source0src" : "",
              "source0type" : "",
              "source1src" : "",
              "source1type" : "",
              "type" : "Flash"
            },
            "id" : "-LfU4t0aquIoZi2tAzfb",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "8",
            "time" : 1558521025037,
            "title" : "Flash测试"
          },
          "-LfU5FS9Mum8mhsp6AC3" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLvzsimpPWmPNFJwdO-LfU5FS9Mum8mhsp6AC3?alt=media&token=47a14dcf-6cfa-43b8-83a8-31797c233810",
              "type" : "Certificate"
            },
            "id" : "-LfU5FS9Mum8mhsp6AC3",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "tei952",
            "ord" : "9",
            "time" : 1558521120965,
            "title" : "ご修了ありがとうございます。"
          }
        }
      },
      "-LdLwITanyNoAGvVvlCh" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>Tab：命令和文件名补全；\nCtrl+C：中断正在运行的程序；\nCtrl+D：结束键盘输入（End Of File，EOF）</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 快捷键",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n--help</p>\n<p>指令的基本用法与选项介绍。</p>\n<p>man</p>\n<p>man 是 manual 的缩写，将指令的具体信息显示出来。</p>\n<p>当执行 &#39;man date&#39; 时，有 DATE(1) 出现，其中的数字代表指令的类型，\n常用的数字及其类型如下：</p>\n<p>| 代号 | 类型 |\n| :--: | -- |\n| 1 | 用户在 shell 环境中可以操作的指令或者可执行文件 |\n| 5 | 配置文件 |\n| 8 | 系统管理员可以使用的管理指令 |</p>\n<p>info</p>\n<p>info 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以进行\n跳转。</p>\n<p>doc</p>\n<p>/usr/share/doc 存放着软件的一整套说明文件。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 求助",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nwho</p>\n<p>在关机前需要先使用 who 命令查看有没有其它用户在线。</p>\n<p>sync</p>\n<p>为了加快对磁盘文件的读写速度，位于内存中的文件数据不会立即同步到磁盘上，\n因此关机之前需要先进行 sync 同步操作。</p>\n<p>shutdown</p>\n<p>html</p>\n<h1 id=\"shutdown-krhc-\">shutdown [-krhc] 时间 [信息]</h1>\n<p>-k ： 不会关机，只是发送警告信息，通知所有在线的用户\n-r ： 将系统的服务停掉后就重新启动\n-h ： 将系统的服务停掉后就立即关机\n-c ： 取消已经在进行的 shutdown 指令内容\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 关机",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n可以在环境变量 PATH 中声明可执行文件的路径，路径之间用 : 分隔。</p>\n<p>/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 PATH",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>sudo 允许一般用户使用 root 可执行的命令，不过只有在 /etc/sudoers 配置\n文件中添加的用户才能使用该指令。</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 sudo",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nRPM 和 DPKG 为最常见的两类软件包管理工具：</p>\n<p>RPM 全称为 Redhat Package Manager，最早由 Red Hat 公司制定实施，随\n后被 GNU 开源操作系统接受并成为很多 Linux 系统 (RHEL) 的既定软件标准。\n与 RPM 竞争的是基于 Debian 操作系统 (Ubuntu) 的 DEB 软件包管理工具 \nDPKG，全称为 Debian Package，功能方面与 RPM 相似。</p>\n<p>YUM 基于 RPM，具有依赖管理和软件升级功能。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 包管理工具",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nLinux 发行版是 Linux 内核及各种应用软件的集成版本。</p>\n<p>| 基于的包管理工具 | 商业发行版 | 社区发行版 |\n| :--: | :--: | :--: |\n| RPM | Red Hat | Fedora / CentOS |\n| DPKG | Ubuntu | Debian |\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 发行版",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n一般指令模式（Command mode）：VIM 的默认模式，可以用于移动游标查看内\n容；\n编辑模式（Insert mode）：按下 &quot;i&quot; 等按键之后进入，可以对文本进行编辑；\n指令列模式（Bottom-line mode）：按下 &quot;:&quot; 按键之后进入，用于保存退出\n等操作。</p>\n<p><div align=\"center\"> <img src=\"pics/5942debd-fc00-477a-b390-7c5692cc8070.jpg\" width=\"400\"/> </div><br></p>\n<p>在指令列模式下，有以下命令用于离开或者保存文件。</p>\n<p>| 命令 | 作用 |\n| :--: | :--: |\n| :w | 写入磁盘|\n| :w! | 当文件为只读时，强制写入磁盘。到底能不能写入，与用户对该文件的权限有关 |\n| :q | 离开 |\n| :q! | 强制离开不保存 |\n| :wq | 写入磁盘后离开 |\n| :wq!| 强制写入磁盘后离开 |\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.0 VIM 三个模式",
            "update_at" : 1556488166377
          },
          "x09" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nGNU 计划，译为革奴计划，它的目标是创建一套完全自由的操作系统，称为 GNU，\n其内容软件完全以 GPL 方式发布。其中 GPL 全称为 GNU 通用公共许可协\n议，包含了以下内容：</p>\n<p>以任何目的运行此程序的自由；\n再复制的自由；\n改进此程序，并公开发布改进的自由。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x09",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "09",
            "time" : 1555228371611,
            "title" : "9.0 GNU",
            "update_at" : 1556488166377
          },
          "x10" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>[Choose an open source license](https://choosealicense.com/)\n[如何选择开源许可证？](http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html)</code></pre>",
              "type" : "Html"
            },
            "id" : "x10",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "10",
            "time" : 1555228371611,
            "title" : "10.0 开源协议",
            "update_at" : 1556488166377
          },
          "x11" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nIDE</p>\n<p>IDE（ATA）全称 Advanced Technology Attachment，接口速度最大为 133MB/s，因为并口线的抗干扰性太差，且排线占用空间较大，不利电脑内部散热，已逐\n渐被 SATA 所取代。</p>\n<p><div align=\"center\"> <img src=\"pics/924914c0-660c-4e4a-bbc0-1df1146e7516.jpg\" width=\"400\"/> </div><br></p>\n<p>SATA</p>\n<p>SATA 全称 Serial ATA，也就是使用串口的 ATA 接口，抗干扰性强，且对数据\n线的长度要求比 ATA 低很多，支持热插拔等功能。SATA-II 的接口速度为 \n300MiB/s，而新的 SATA-III 标准可达到 600MiB/s 的传输速度。SATA 的数据\n线也比 ATA 的细得多，有利于机箱内的空气流通，整理线材也比较方便。</p>\n<p><div align=\"center\"> <img src=\"pics/f9f2a16b-4843-44d1-9759-c745772e9bcf.jpg\" width=\"\"/> </div><br></p>\n<p>SCSI</p>\n<p>SCSI 全称是 Small Computer System Interface（小型机系统接口），经历\n多代的发展，从早期的 SCSI-II 到目前的 Ultra320 SCSI 以及 \nFiber-Channel（光纤通道），接口型式也多种多样。SCSI 硬盘广为工作站以及\n个人电脑以及服务器所使用，因此会使用较为先进的技术，如碟片转速 \n15000rpm 的高转速，且传输时 CPU 占用率较低，但是单价也比相同容量的 \nATA 及 SATA 硬盘更加昂贵。</p>\n<p><div align=\"center\"> <img src=\"pics/f0574025-c514-49f5-a591-6d6a71f271f7.jpg\" width=\"\"/> </div><br></p>\n<p>SAS</p>\n<p>SAS（Serial Attached SCSI）是新一代的 SCSI 技术，和 SATA 硬盘相同，都\n是采取序列式技术以获得更高的传输速度，可达到 6Gb/s。此外也通过缩小连接\n线改善系统内部空间等。</p>\n<p><div align=\"center\"> <img src=\"pics/6729baa0-57d7-4817-b3aa-518cbccf824c.jpg\" width=\"\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x11",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "11",
            "time" : 1555228371611,
            "title" : "11.0 磁盘接口",
            "update_at" : 1556488166377
          },
          "x12" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nLinux 中每个硬件都被当做一个文件，包括磁盘。磁盘以磁盘接口类型进行命名，\n常见磁盘的文件名如下：</p>\n<p>IDE 磁盘：/dev/hd[a-d]\nSATA/SCSI/SAS 磁盘：/dev/sd[a-p]</p>\n<p>其中文件名后面的序号的确定与系统检测到磁盘的顺序有关，而与磁盘所插入的\n插槽位置无关。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x12",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "12",
            "time" : 1555228371611,
            "title" : "12.0 磁盘的文件名",
            "update_at" : 1556488166377
          },
          "x13" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n磁盘分区表主要有两种格式，一种是限制较多的 MBR 分区表，一种是较新且限\n制较少的 GPT 分区表。</p>\n<p>MBR</p>\n<p>MBR 中，第一个扇区最重要，里面有主要开机记录（Master boot record, \nMBR）及分区表（partition table），其中主要开机记录占 446 bytes，分\n区表占 64 bytes。</p>\n<p>分区表只有 64 bytes，最多只能存储 4 个分区，这 4 个分区为主分区\n（Primary）和扩展分区（Extended）。其中扩展分区只有一个，它使用其它扇\n区来记录额外的分区表，因此通过扩展分区可以分出更多分区，这些分区称为逻\n辑分区。</p>\n<p>Linux 也把分区当成文件，分区文件的命名方式为：磁盘文件名 + 编号，例如 \n/dev/sda1。注意，逻辑分区的编号从 5 开始。</p>\n<p>GPT</p>\n<p>不同的磁盘有不同的扇区大小，例如 512 bytes 和最新磁盘的 4 k。GPT 为了\n兼容所有磁盘，在定义扇区上使用逻辑区块地址（Logical Block Address, LBA）\n，LBA 默认大小为 512 bytes。</p>\n<p>GPT 第 1 个区块记录了主要开机记录（MBR），紧接着是 33 个区块记录分区信\n息，并把最后的 33 个区块用于对分区信息进行备份。这 33 个区块第一个为 \nGPT 表头纪录，这个部份纪录了分区表本身的位置与大小和备份分区的位置，同时\n放置了分区表的校验码 (CRC32)，操作系统可以根据这个校验码来判断 GPT 是否\n正确。若有错误，可以使用备份分区进行恢复。</p>\n<p>GPT 没有扩展分区概念，都是主分区，每个 LBA 可以分 4 个分区，因此总共可\n以分 4 * 32 = 128 个分区。</p>\n<p>MBR 不支持 2.2 TB 以上的硬盘，GPT 则最多支持到 2<sup>33</sup> TB = 8 ZB。</p>\n<p><div align=\"center\"> <img src=\"pics/GUID_Partition_Table_Scheme.svg.png\" width=\"400\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x13",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "13",
            "time" : 1555228371611,
            "title" : "13.0 分区表",
            "update_at" : 1556488166377
          },
          "x14" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nBIOS</p>\n<p>BIOS（Basic Input/Output System，基本输入输出系统），它是一个固件（嵌\n入在硬件中的软件），BIOS 程序存放在断电后内容不会丢失的只读内存中。</p>\n<p><div align=\"center\"> <img src=\"pics/50831a6f-2777-46ea-a571-29f23c85cc21.jpg\"/> </div><br></p>\n<p>BIOS 是开机的时候计算机执行的第一个程序，这个程序知道可以开机的磁盘，并\n读取磁盘第一个扇区的主要开机记录（MBR），由主要开机记录（MBR）执行其中\n的开机管理程序，这个开机管理程序会加载操作系统的核心文件。</p>\n<p>主要开机记录（MBR）中的开机管理程序提供以下功能：选单、载入核心文件以及\n转交其它开机管理程序。转交这个功能可以用来实现多重引导，只需要将另一个操\n作系统的开机管理程序安装在其它分区的启动扇区上，在启动开机管理程序时，就\n可以通过选单选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一\n个操作系统。</p>\n<p>下图中，第一扇区的主要开机记录（MBR）中的开机管理程序提供了两个选单：\nM1、M2，M1 指向了 Windows 操作系统，而 M2 指向其它分区的启动扇区，里面\n包含了另外一个开机管理程序，提供了一个指向 Linux 的选单。</p>\n<p><div align=\"center\"> <img src=\"pics/f900f266-a323-42b2-bc43-218fdb8811a8.jpg\" width=\"600\"/> </div><br></p>\n<p>安装多重引导，最好先安装 Windows 再安装 Linux。因为安装 Windows 时会覆\n盖掉主要开机记录（MBR），而 Linux 可以选择将开机管理程序安装在主要开机\n记录（MBR）或者其它分区的启动扇区，并且可以设置开机管理程序的选单。</p>\n<p>UEFI</p>\n<p>BIOS 不可以读取 GPT 分区表，而 UEFI 可以。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x14",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "14",
            "time" : 1555228371611,
            "title" : "14.0 开机检测程序",
            "update_at" : 1556488166377
          },
          "x15" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>对分区进行格式化是为了在分区上建立文件系统。一个分区通常只能格式化为一个\n文件系统，但是磁盘阵列等技术可以将一个分区格式化为多个文件系统。</code></pre>",
              "type" : "Html"
            },
            "id" : "x15",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "15",
            "time" : 1555228371611,
            "title" : "15.0 分区与文件系统",
            "update_at" : 1556488166377
          },
          "x16" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n最主要的几个组成部分如下：</p>\n<p>inode：一个文件占用一个 inode，记录文件的属性，同时记录此文件的内容所\n在的 block 编号；\nblock：记录文件的内容，文件太大时，会占用多个 block。</p>\n<p>除此之外还包括：</p>\n<p>superblock：记录文件系统的整体信息，包括 inode 和 block 的总量、使\n用量、剩余量，以及文件系统的格式与相关信息等；\nblock bitmap：记录 block 是否被使用的位域。</p>\n<p><div align=\"center\"> <img src=\"pics/BSD_disk.png\" width=\"800\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x16",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "16",
            "time" : 1555228371611,
            "title" : "16.0 组成",
            "update_at" : 1556488166377
          },
          "x17" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n对于 Ext2 文件系统，当要读取一个文件的内容时，先在 inode 中去查找文件\n内容所在的所有 block，然后把所有 block 的内容读出来。</p>\n<p><div align=\"center\"> <img src=\"pics/2f683fe8-bee8-46a9-86a7-685c8981555856191616.png\"/> </div><br></p>\n<p>而对于 FAT 文件系统，它没有 inode，每个 block 中存储着下一个 block \n的编号。</p>\n<p><div align=\"center\"> <img src=\"pics/f3131e98-8d20-4ff9-b14b-d6803691555844133783.png\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x17",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "17",
            "time" : 1555228371611,
            "title" : "17.0 文件读取",
            "update_at" : 1556488166377
          },
          "x18" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>指一个文件内容所在的 block 过于分散，导致磁盘磁头移动距离过大，从而降\n低磁盘读写性能。</code></pre>",
              "type" : "Html"
            },
            "id" : "x18",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "18",
            "time" : 1555228371611,
            "title" : "18.0 磁盘碎片",
            "update_at" : 1556488166377
          },
          "x19" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在 Ext2 文件系统中所支持的 block 大小有 1K，2K 及 4K 三种，不同的大\n小限制了单个文件和文件系统的最大大小。</p>\n<p>| 大小 | 1KB | 2KB | 4KB |\n| :---: | :---: | :---: | :---: |\n| 最大单一文件 | 16GB | 256GB | 2TB |\n| 最大文件系统 | 2TB | 8TB | 16TB |</p>\n<p>一个 block 只能被一个文件所使用，未使用的部分直接浪费了。因此如果需要\n存储大量的小文件，那么最好选用比较小的 block。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x19",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "19",
            "time" : 1555228371611,
            "title" : "19.0 block",
            "update_at" : 1556488166377
          },
          "x20" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ninode 具体包含以下信息：</p>\n<p>权限 (read/write/excute)；\n拥有者与群组 (owner/group)；\n容量；\n建立或状态改变的时间 (ctime)；\n最近一次的读取时间 (atime)；\n最近修改的时间 (mtime)；\n定义文件特性的旗标 (flag)，如 SetUID...；\n该文件真正内容的指向 (pointer)。</p>\n<p>inode 具有以下特点：</p>\n<p>每个 inode 大小均固定为 128 bytes (新的 ext4 与 xfs 可设定到\n 256 bytes)；\n每个文件都仅会占用一个 inode。</p>\n<p>inode 中记录了文件内容所在的 block 编号，但是每个 block 非常小，一个\n大文件随便都需要几十万的 block。而一个 inode 大小有限，无法直接引用这么\n多 block 编号。因此引入了间接、双间接、三间接引用。间接引用是指，让 \ninode 记录的引用 block 块记录引用信息。</p>\n<p><div align=\"center\"> <img src=\"pics/inode_with_signatures.jpg\"\n width=\"600\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x20",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "20",
            "time" : 1555228371611,
            "title" : "20.0 inode",
            "update_at" : 1556488166377
          },
          "x21" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n建立一个目录时，会分配一个 inode 与至少一个 block。block 记录的内容是\n目录下所有文件的 inode 编号以及文件名。</p>\n<p>可以看出文件的 inode 本身不记录文件名，文件名记录在目录中，因此新增文\n件、删除文件、更改文件名这些操作与目录的 w 权限有关。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x21",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "21",
            "time" : 1555228371611,
            "title" : "21.0 目录",
            "update_at" : 1556488166377
          },
          "x22" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n如果突然断电，那么文件系统会发生错误，例如断电前只修改了 block bitmap，\n而还没有将数据真正写入 block 中。</p>\n<p>ext3/ext4 文件系统引入了日志功能，可以利用日志来修复文件系统。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x22",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "22",
            "time" : 1555228371611,
            "title" : "22.0 日志",
            "update_at" : 1556488166377
          },
          "x23" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>挂载利用目录作为文件系统的进入点，也就是说，进入目录之后就可以读取文件系\n统的数据。</code></pre>",
              "type" : "Html"
            },
            "id" : "x23",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "23",
            "time" : 1555228371611,
            "title" : "23.0 挂载",
            "update_at" : 1556488166377
          },
          "x24" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n为了使不同 Linux 发行版本的目录结构保持一致性，Filesystem Hierarchy \nStandard (FHS) 规定了 Linux 的目录结构。最基础的三个目录如下：</p>\n<p>/ (root, 根目录)\n/usr (unix software resource)：所有系统默认软件都会安装到这个目录；\n/var (variable)：存放系统或程序运行过程中的数据文件。</p>\n<p><div align=\"center\"> <img src=\"pics/linux-filesystem.png\" width=\"\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x24",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "24",
            "time" : 1555228371611,
            "title" : "24.0 目录配置",
            "update_at" : 1556488166377
          },
          "x25" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n用户分为三种：文件拥有者、群组以及其它人，对不同的用户有不同的文件权限。</p>\n<p>使用 ls 查看一个文件时，会显示一个文件的信息，\n例如 &#39;drwxr-xr-x 3 root root 17 May 6 00:14 .config&#39;，\n对这个信息的解释如下：</p>\n<p>drwxr-xr-x：文件类型以及权限，第 1 位为文件类型字段，后 9 位为文件权\n限字段\n3：链接数\nroot：文件拥有者\nroot：所属群组\n17：文件大小\nMay 6 00:14：文件最后被修改的时间\n.config：文件名</p>\n<p>常见的文件类型及其含义有：</p>\n<p>d：目录\n-：文件\nl：链接文件</p>\n<p>9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有\n者、所属群组以及其它人的文件权限。一组权限中的 3 位分别为 r、w、x 权\n限，表示可读、可写、可执行。</p>\n<p>文件时间有以下三种：</p>\n<p>modification time (mtime)：文件的内容更新就会更新；\nstatus time (ctime)：文件的状态（权限、属性）更新就会更新；\naccess time (atime)：读取文件时就会更新。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x25",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "25",
            "time" : 1555228371611,
            "title" : "25.0 文件属性",
            "update_at" : 1556488166377
          },
          "x26" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nls</p>\n<p>列出文件或者目录的信息，目录的信息就是其中包含的文件。</p>\n<p>html\nls [-aAdfFhilnrRSt] file|dir\n-a ：列出全部的文件\n-d ：仅列出目录本身\n-l ：以长数据串行列出，包含文件的属性与权限等等数据</p>\n<p>cd</p>\n<p>更换当前目录。</p>\n<p>cd [相对路径或绝对路径]</p>\n<p>mkdir</p>\n<p>创建目录。</p>\n<p>mkdir [-mp] 目录名称\n-m ：配置目录权限\n-p ：递归创建目录</p>\n<p>rmdir</p>\n<p>删除目录，目录必须为空。</p>\n<p>html\nrmdir [-p] 目录名称\n-p ：递归删除目录</p>\n<p>touch</p>\n<p>更新文件时间或者建立新文件。</p>\n<p>html\ntouch [-acdmt] filename\n-a ： 更新 atime\n-c ： 更新 ctime，若该文件不存在则不建立新文件\n-m ： 更新 mtime\n-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=&quot;日期或时\n间&quot;\n-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]</p>\n<p>cp</p>\n<p>复制文件。</p>\n<p>如果源文件有两个以上，则目的文件一定要是目录才行。</p>\n<p>html\ncp [-adfilprsu] source destination\n-a ：相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明\n-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身\n-i ：若目标文件已经存在时，在覆盖前会先询问\n-p ：连同文件的属性一起复制过去\n-r ：递归持续复制\n-u ：destination 比 source 旧才更新 destination，或 destination \n不存在的情况下才复制\n--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, \nlinks, xattr 等也复制了</p>\n<p>rm</p>\n<p>删除文件。</p>\n<p>html\nrm [-fir] 文件或目录\n-r ：递归删除</p>\n<p>mv</p>\n<p>移动文件。</p>\n<p>html\nmv [-fiu] source destination\nmv [options] source1 source2 source3 .... directory\n-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x26",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "26",
            "time" : 1555228371611,
            "title" : "26.0 文件与目录的基本操作",
            "update_at" : 1556488166377
          },
          "x27" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n可以将一组权限用数字来表示，此时一组权限的 3 个位当做二进制数字的位，\n从左到右每个位的权值为 4、2、1，即每个权限对应的数字权值为 r : 4、w \n: 2、x : 1。</p>\n<p>html\nchmod [-R] xyz dirname/filename</p>\n<p>示例：将 .bashrc 文件的权限修改为 -rwxr-xr--。</p>\n<p>html\nchmod 754 .bashrc</p>\n<p>也可以使用符号来设定权限。</p>\n<p>html\nchmod [ugoa]  [+-=] [rwx] dirname/filename\nu：拥有者\ng：所属群组\no：其他人\na：所有人\n+：添加权限\n-：移除权限\n=：设定权限</p>\n<p>示例：为 .bashrc 文件的所有用户添加写权限。</p>\n<p>html\nchmod a+w .bashrc\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x27",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "27",
            "time" : 1555228371611,
            "title" : "27.0 修改权限",
            "update_at" : 1556488166377
          },
          "x28" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n文件默认权限：文件默认没有可执行权限，因此为 666，也就是 \n-rw-rw-rw- 。\n目录默认权限：目录必须要能够进入，也就是必须拥有可执行权限，因此为 \n777 ，也就是 drwxrwxrwx。</p>\n<p>可以通过 umask 设置或者查看文件的默认权限，通常以掩码的形式来表示，例\n如 002 表示其它用户的权限去除了一个 2 的权限，也就是写权限，因此建立新\n文件时默认的权限为 -rw-rw-r--。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x28",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "28",
            "time" : 1555228371611,
            "title" : "28.0 文件默认权限",
            "update_at" : 1556488166377
          },
          "x29" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n文件名不是存储在一个文件的内容中，而是存储在一个文件所在的目录中。因此，\n拥有文件的 w 权限并不能对文件名进行修改。</p>\n<p>目录存储文件列表，一个目录的权限也就是对其文件列表的权限。因此，目录的 \nr 权限表示可以读取文件列表；w 权限表示可以修改文件列表，具体来说，就是\n添加删除文件，对文件名进行修改；x 权限可以让该目录成为工作目录，x 权限\n是 r 和 w 权限的基础，如果不能使一个目录成为工作目录，也就没办法读取文\n件列表以及对文件列表进行修改了。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x29",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "29",
            "time" : 1555228371611,
            "title" : "29.0 目录的权限",
            "update_at" : 1556488166377
          },
          "x30" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nhtml\nln [-sf] source_filename dist_filename\n-s ：默认是 hard link，加 -s 为 symbolic link\n-f ：如果目标文件存在时，先删除目标文件</p>\n<p><div align=\"center\"> <img src=\"pics/b8081c84-62c4-4019-b3ee-4bd0e443d647.jpg\" width=\"400px\"> </div><br></p>\n<p>实体链接</p>\n<p>在目录下创建一个条目，记录着文件名与 inode 编号，这个 inode 就是源文件\n的 inode。</p>\n<p>删除任意一个条目，文件还是存在，只要引用数量不为 0。</p>\n<p>有以下限制：不能跨越文件系统、不能对目录进行链接。</p>\n<p>html</p>\n<h1 id=\"ln-etc-crontab-\">ln /etc/crontab .</h1>\n<h1 id=\"ll-i-etc-crontab-crontab\">ll -i /etc/crontab crontab</h1>\n<p>34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 crontab\n34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab</p>\n<p>符号链接</p>\n<p>符号链接文件保存着源文件所在的绝对路径，在读取时会定位到源文件上，可以\n理解为 Windows 的快捷方式。</p>\n<p>当源文件被删除了，链接文件就打不开了。</p>\n<p>可以为目录建立链接。</p>\n<p>html</p>\n<h1 id=\"ll-i-etc-crontab-root-crontab2\">ll -i /etc/crontab /root/crontab2</h1>\n<p>34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab\n53745909 lrwxrwxrwx. 1 root root 12 Jun 23 22:31 /root/crontab2 -&gt; /etc/crontab\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x30",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "30",
            "time" : 1555228371611,
            "title" : "30.0 链接",
            "update_at" : 1556488166377
          },
          "x31" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ncat</p>\n<p>取得文件内容。</p>\n<p>html\ncat [-AbEnTv] filename\n-n ：打印出行号，连同空白行也会有行号，-b 不会</p>\n<p>tac</p>\n<p>是 cat 的反向操作，从最后一行开始打印。</p>\n<p>more</p>\n<p>和 cat 不同的是它可以一页一页查看文件内容，比较适合大文件的查看。</p>\n<p>less</p>\n<p>和 more 类似，但是多了一个向前翻页的功能。</p>\n<p>head</p>\n<p>取得文件前几行。</p>\n<p>html\nhead [-n number] filename\n-n ：后面接数字，代表显示几行的意思</p>\n<p>tail</p>\n<p>是 head 的反向操作，只是取得是后几行。</p>\n<p>od</p>\n<p>以字符或者十六进制的形式显示二进制文件。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x31",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "31",
            "time" : 1555228371611,
            "title" : "31.0 获取文件内容",
            "update_at" : 1556488166377
          },
          "x32" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nwhich</p>\n<p>指令搜索。</p>\n<p>html\nwhich [-a] command\n-a ：将所有指令列出，而不是只列第一个</p>\n<p>whereis</p>\n<p>文件搜索。速度比较快，因为它只搜索几个特定的目录。</p>\n<p>html\nwhereis [-bmsu] dirname/filename</p>\n<p>locate</p>\n<p>文件搜索。可以用关键字或者正则表达式进行搜索。</p>\n<p>locate 使用 /var/lib/mlocate/ 这个数据库来进行搜索，它存储在内存中，\n并且每天更新一次，所以无法用 locate 搜索新建的文件。可以使用 updatedb\n 来立即更新数据库。</p>\n<p>html\nlocate [-ir] keyword\n-r：正则表达式</p>\n<p>find</p>\n<p>文件搜索。可以使用文件的属性和权限进行搜索。</p>\n<p>html\nfind [basedir] [option]\nexample: find . -name &quot;shadow*&quot;</p>\n<p>① 与时间有关的选项** </p>\n<p>html\n-mtime  n ：列出在 n 天前的那一天修改过内容的文件\n-mtime +n ：列出在 n 天之前 (不含 n 天本身) 修改过内容的文件\n-mtime -n ：列出在 n 天之内 (含 n 天本身) 修改过内容的文件\n-newer file ： 列出比 file 更新的文件</p>\n<p>+4、4 和 -4 的指示的时间范围如下：</p>\n<p><div align=\"center\"> <img src=\"pics/658fc5e7-79c0-4247-9445-d69bf194c539.png\" width=\"\"/> </div><br></p>\n<p>② 与文件拥有者和所属群组有关的选项** </p>\n<p>html\n-uid n\n-gid n\n-user name\n-group name\n-nouser ：搜索拥有者不存在 /etc/passwd 的文件\n-nogroup：搜索所属群组不存在于 /etc/group 的文件</p>\n<p>③ 与文件权限和名称有关的选项** </p>\n<p>html\n-name filename\n-size [+-]SIZE：搜寻比 SIZE 还要大 (+) 或小 (-) 的文件。这个 SIZE \n的规格有：c: 代表 byte，k: 代表 1024bytes。所以，要找比 50KB 还要大\n的文件，就是 -size +50k\n-type TYPE\n-perm mode  ：搜索权限等于 mode 的文件\n-perm -mode ：搜索权限包含 mode 的文件\n-perm /mode ：搜索权限包含任一 mode 的文件\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x32",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "32",
            "time" : 1555228371611,
            "title" : "32.0 指令与文件搜索",
            "update_at" : 1556488166377
          },
          "x33" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nLinux 底下有很多压缩文件名，常见的如下：</p>\n<p>| 扩展名 | 压缩程序 |\n| -- | -- |\n| *.Z | compress |\n|*.zip |  zip |\n|*.gz  | gzip|\n|*.bz2 |  bzip2 |\n|*.xz  | xz |\n|*.tar |  tar 程序打包的数据，没有经过压缩 |\n|*.tar.gz | tar 程序打包的文件，经过 gzip 的压缩 |\n|*.tar.bz2 | tar 程序打包的文件，经过 bzip2 的压缩 |\n|*.tar.xz | tar 程序打包的文件，经过 xz 的压缩 |\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x33",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "33",
            "time" : 1555228371611,
            "title" : "33.0 压缩文件名",
            "update_at" : 1556488166377
          },
          "x34" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ngzip</p>\n<p>gzip 是 Linux 使用最广的压缩指令，可以解开 compress、zip 与 gzip \n所压缩的文件。</p>\n<p>经过 gzip 压缩过，源文件就不存在了。</p>\n<p>有 9 个不同的压缩等级可以使用。</p>\n<p>可以使用 zcat、zmore、zless 来读取压缩文件的内容。</p>\n<p>html\n$ gzip [-cdtv#] filename\n-c ：将压缩的数据输出到屏幕上\n-d ：解压缩\n-t ：检验压缩文件是否出错\n-v ：显示压缩比等信息\n-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6</p>\n<p>bzip2</p>\n<p>提供比 gzip 更高的压缩比。</p>\n<p>查看命令：bzcat、bzmore、bzless、bzgrep。</p>\n<p>html\n$ bzip2 [-cdkzv#] filename\n-k ：保留源文件</p>\n<p>xz</p>\n<p>提供比 bzip2 更佳的压缩比。</p>\n<p>可以看到，gzip、bzip2、xz 的压缩比不断优化。不过要注意的是，压缩比\n越高，压缩的时间也越长。</p>\n<p>查看命令：xzcat、xzmore、xzless、xzgrep。</p>\n<p>html\n$ xz [-dtlkc#] filename\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x34",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "34",
            "time" : 1555228371611,
            "title" : "34.0 压缩指令",
            "update_at" : 1556488166377
          },
          "x35" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n压缩指令只能对一个文件进行压缩，而打包能够将多个文件打包成一个大文件。\ntar 不仅可以用于打包，也可以使用 gzip、bzip2、xz 将打包文件进行压缩。</p>\n<p>html\n$ tar [-z|-j|-J] [cv] [-f 新建的 tar 文件] filename...  ==打包压缩\n$ tar [-z|-j|-J] [tv] [-f 已有的 tar 文件]              ==查看\n$ tar [-z|-j|-J] [xv] [-f 已有的 tar 文件] [-C 目录]    ==解压缩\n-z ：使用 zip；\n-j ：使用 bzip2；\n-J ：使用 xz；\n-c ：新建打包文件；\n-t ：查看打包文件里面有哪些文件；\n-x ：解打包或解压缩的功能；\n-v ：在压缩/解压缩的过程中，显示正在处理的文件名；\n-f : filename：要处理的文件；\n-C 目录 ： 在特定目录解压缩。</p>\n<p>| 使用方式 | 命令 |\n| :---: | --- |\n| 打包压缩 | tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称 |\n| 查 看 | tar -jtv -f filename.tar.bz2 |\n| 解压缩 | tar -jxv -f filename.tar.bz2 -C 要解压缩的目录 |\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x35",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "35",
            "time" : 1555228371611,
            "title" : "35.0 打包",
            "update_at" : 1556488166377
          },
          "x36" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n可以通过 Shell 请求内核提供服务，Bash 正是 Shell 的一种。</p>\n<p>特性</p>\n<p>命令历史：记录使用过的命令\n命令与文件补全：快捷键：tab\n命名别名：例如 lm 是 ls -al 的别名\nshell scripts\n通配符：例如 ls -l /usr/bin/X* 列出 /usr/bin 下面所有以 X 开头的文件</p>\n<p>变量操作</p>\n<p>对一个变量赋值直接使用 =。</p>\n<p>对变量取用需要在变量前加上 \\$ ，也可以用 \\${} 的形式；</p>\n<p>输出变量使用 echo 命令。</p>\n<p>bash\n$ x=abc\n$ echo $x\n$ echo ${x}</p>\n<p>变量内容如果有空格，必须使用双引号或者单引号。</p>\n<p>双引号内的特殊字符可以保留原本特性，例如 x=&quot;lang is \\$LANG&quot;，则 \nx 的值为 lang is zh_TW.UTF-8；\n单引号内的特殊字符就是特殊字符本身，例如 x=&#39;lang is \\$LANG&#39;，则\n x 的值为 lang is \\$LANG。</p>\n<p>可以使用 \\&#39;指令\\&#39; 或者 \\$(指令) 的方式将指令的执行结果赋值给变量。\n例如 version=\\$(uname -r)，则 version 的值为 4.15.0-22-generic。</p>\n<p>可以使用 export 命令将自定义变量转成环境变量，环境变量可以在子程序中使\n用，所谓子程序就是由当前 Bash 而产生的子 Bash。</p>\n<p>Bash 的变量可以声明为数组和整数数字。注意数字类型没有浮点数。如果不进\n行声明，默认是字符串类型。变量的声明使用 declare 命令：</p>\n<p>html\n$ declare [-aixr] variable\n-a ： 定义为数组类型\n-i ： 定义为整数类型\n-x ： 定义为环境变量\n-r ： 定义为 readonly 类型</p>\n<p>使用 [ ] 来对数组进行索引操作：</p>\n<p>bash\n$ array[1]=a\n$ array[2]=b\n$ echo ${array[1]}\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x36",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "36",
            "time" : 1555228371611,
            "title" : "36.0 Bash",
            "update_at" : 1556488166377
          },
          "x37" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>以绝对或相对路径来执行指令，例如 /bin/ls 或者 ./ls ；\n由别名找到该指令来执行；\n由 Bash 内置的指令来执行；\n按 \\$PATH 变量指定的搜索路径的顺序找到第一个指令来执行。</code></pre>",
              "type" : "Html"
            },
            "id" : "x37",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "37",
            "time" : 1555228371611,
            "title" : "37.0 指令搜索顺序",
            "update_at" : 1556488166377
          },
          "x38" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n重定向指的是使用文件代替标准输入、标准输出和标准错误输出。</p>\n<p>| 1 | 代码 | 运算符 |\n| :---: | :---: | :---:|\n| 标准输入 (stdin)  | 0 | &lt; 或 &lt;&lt; |\n| 标准输出 (stdout) | 1 | &gt; 或 &gt;&gt; |\n| 标准错误输出 (stderr) | 2 | 2&gt; 或 2&gt;&gt; |</p>\n<p>其中，有一个箭头的表示以覆盖的方式重定向，而有两个箭头的表示以追加的方\n式重定向。</p>\n<p>可以将不需要的标准输出以及标准错误输出重定向到 /dev/null，相当于扔进\n垃圾箱。</p>\n<p>如果需要将标准输出以及标准错误输出同时重定向到一个文件，需要将某个输出\n转换为另一个输出，例如 2&gt;&amp;1 表示将标准错误输出转换为标准输出。</p>\n<p>bash\n$ find /home -name .bashrc &gt; list 2&gt;&amp;1\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x38",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "38",
            "time" : 1555228371611,
            "title" : "38.0 数据流重定向",
            "update_at" : 1556488166377
          },
          "x39" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n管道是将一个命令的标准输出作为另一个命令的标准输入，在数据需要经过多个\n步骤的处理之后才能得到我们想要的内容时就可以使用管道。</p>\n<p>在命令之间使用 | 分隔各个管道命令。</p>\n<p>bash\n$ ls -al /etc | less\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x39",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "39",
            "time" : 1555228371611,
            "title" : "39.0 管道指令",
            "update_at" : 1556488166377
          },
          "x40" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ncut 对数据进行切分，取出想要的部分。</p>\n<p>切分过程一行一行地进行。</p>\n<p>html\n$ cut\n-d ：分隔符\n-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间\n-c ：以字符为单位取出区间</p>\n<p>示例 1：last 显示登入者的信息，取出用户名。</p>\n<p>html\n$ last\nroot pts/1 192.168.201.101 Sat Feb 7 12:35 still logged in\nroot pts/1 192.168.201.101 Fri Feb 6 12:13 - 18:46 (06:33)\nroot pts/1 192.168.201.254 Thu Feb 5 22:37 - 23:53 (01:16)</p>\n<p>$ last | cut -d &#39; &#39; -f 1</p>\n<p>示例 2：将 export 输出的信息，取出第 12 字符以后的所有字符串。</p>\n<p>html\n$ export\ndeclare -x HISTCONTROL=&quot;ignoredups&quot;\ndeclare -x HISTSIZE=&quot;1000&quot;\ndeclare -x HOME=&quot;/home/dmtsai&quot;\ndeclare -x HOSTNAME=&quot;study.centos.vbird&quot;\n.....(其他省略).....</p>\n<p>$ export | cut -c 12-\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x40",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "40",
            "time" : 1555228371611,
            "title" : "40.0 提取指令",
            "update_at" : 1556488166377
          },
          "x41" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsort**  用于排序。</p>\n<p>html\n$ sort [-fbMnrtuk] [file or stdin]\n-f ：忽略大小写\n-b ：忽略最前面的空格\n-M ：以月份的名字来排序，例如 JAN，DEC\n-n ：使用数字\n-r ：反向排序\n-u ：相当于 unique，重复的内容只出现一次\n-t ：分隔符，默认为 tab\n-k ：指定排序的区间</p>\n<p>示例：/etc/passwd 文件内容以 : 来分隔，要求以第三列进行排序。</p>\n<p>html\n$ cat /etc/passwd | sort -t &#39;:&#39; -k 3\nroot:x:0:0:root:/root:/bin/bash\ndmtsai:x:1000:1000:dmtsai:/home/dmtsai:/bin/bash\nalex:x:1001:1002::/home/alex:/bin/bash\narod:x:1002:1003::/home/arod:/bin/bash</p>\n<p>uniq**  可以将重复的数据只取一个。</p>\n<p>html\n$ uniq [-ic]\n-i ：忽略大小写\n-c ：进行计数</p>\n<p>示例：取得每个人的登录总次数</p>\n<p>html\n$ last | cut -d &#39; &#39; -f 1 | sort | uniq -c\n1\n6 (unknown\n47 dmtsai\n4 reboot\n7 root\n1 wtmp\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x41",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "41",
            "time" : 1555228371611,
            "title" : "41.0 排序指令",
            "update_at" : 1556488166377
          },
          "x42" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n输出重定向会将输出内容重定向到文件中，而  <strong>tee</strong>  不仅能够完成这个功\n能，还能保留屏幕上的输出。也就是说，使用 tee 指令，一个输出会同时传送\n到文件和屏幕上。</p>\n<p>html\n$ tee [-a] file\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x42",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "42",
            "time" : 1555228371611,
            "title" : "42.0 双向输出重定向",
            "update_at" : 1556488166377
          },
          "x43" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ntr**  用来删除一行中的字符，或者对字符进行替换。</p>\n<p>html\n$ tr [-ds] SET1 ...\n-d ： 删除行中 SET1 这个字符串</p>\n<p>示例，将 last 输出的信息所有小写转换为大写。</p>\n<p>html\n$ last | tr &#39;[a-z]&#39; &#39;[A-Z]&#39;</p>\n<p>  <strong>col</strong>  将 tab 字符转为空格字符。</p>\n<p>html\n$ col [-xb]\n-x ： 将 tab 键转换成对等的空格键</p>\n<p>expand**  将 tab 转换一定数量的空格，默认是 8 个。</p>\n<p>html\n$ expand [-t] file\n-t ：tab 转为空格的数量</p>\n<p>join**  将有相同数据的那一行合并在一起。</p>\n<p>html\n$ join [-ti12] file1 file2\n-t ：分隔符，默认为空格\n-i ：忽略大小写的差异\n-1 ：第一个文件所用的比较字段\n-2 ：第二个文件所用的比较字段</p>\n<p>paste**  直接将两行粘贴在一起。</p>\n<p>html\n$ paste [-d] file1 file2\n-d ：分隔符，默认为 tab\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x43",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "43",
            "time" : 1555228371611,
            "title" : "43.0 字符转换指令",
            "update_at" : 1556488166377
          },
          "x44" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nsplit**  将一个文件划分成多个文件。</p>\n<p>html\n$ split [-bl] file PREFIX\n-b ：以大小来进行分区，可加单位，例如 b, k, m 等\n-l ：以行数来进行分区。\nPREFIX ：分区文件的前导名称\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x44",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "44",
            "time" : 1555228371611,
            "title" : "44.0 分区指令",
            "update_at" : 1556488166377
          },
          "x45" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\ng/re/p（globally search a regular expression and print)，使用正则\n表示式进行全局查找并打印。</p>\n<p>html\n$ grep [-acinv] [--color=auto] 搜寻字符串 filename\n-c ： 统计个数\n-i ： 忽略大小写\n-n ： 输出行号\n-v ： 反向选择，也就是显示出没有 搜寻字符串 内容的那一行\n--color=auto ：找到的关键字加颜色显示</p>\n<p>示例：把含有 the 字符串的行提取出来（注意默认会有 --color=auto 选项，\n因此以下内容在 Linux 中有颜色显示 the 字符串）</p>\n<p>html\n$ grep -n &#39;the&#39; regular_express.txt\n8:I can&#39;t finish the test.\n12:the symbol &#39;*&#39; is represented as start.\n15:You are the best is mean you are the no. 1.\n16:The world Happy is the same with &quot;glad&quot;.\n18:google is the best tools for search keyword</p>\n<p>因为 { 和 } 在 shell 是有特殊意义的，因此必须要使用转义字符进行转义。</p>\n<p>html\n$ grep -n &#39;go{2,5}g&#39; regular_express.txt\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x45",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "45",
            "time" : 1555228371611,
            "title" : "45.0 grep",
            "update_at" : 1556488166377
          },
          "x46" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n用于格式化输出。它不属于管道命令，在给 printf 传数据时需要使用 $( )\n 形式。</p>\n<p>html\n$ printf &#39;%10s %5i %5i %5i %8.2f \\n&#39; $(cat printf.txt)\n    DmTsai    80    60    92    77.33\n     VBird    75    55    80    70.00\n       Ken    60    90    70    73.33\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x46",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "46",
            "time" : 1555228371611,
            "title" : "46.0 printf",
            "update_at" : 1556488166377
          },
          "x47" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n是由 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 创造，awk \n这个名字就是这三个创始人名字的首字母。</p>\n<p>awk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：\\$n，n\n 为字段号，从 1 开始，\\$0 表示一整行。</p>\n<p>示例：取出最近五个登录用户的用户名和 IP</p>\n<p>html\n$ last -n 5\ndmtsai pts/0 192.168.1.100 Tue Jul 14 17:32 still logged in\ndmtsai pts/0 192.168.1.100 Thu Jul 9 23:36 - 02:58 (03:22)\ndmtsai pts/0 192.168.1.100 Thu Jul 9 17:23 - 23:36 (06:12)\ndmtsai pts/0 192.168.1.100 Thu Jul 9 08:02 - 08:17 (00:14)\ndmtsai tty1 Fri May 29 11:55 - 12:11 (00:15)</p>\n<p>html\n$ last -n 5 | awk &#39;{print $1 &quot;\\t&quot; $3}&#39;</p>\n<p>可以根据字段的某些条件进行匹配，例如匹配字段小于某个值的那一行数据。</p>\n<p>html\n$ awk &#39;条件类型 1 {动作 1} 条件类型 2 {动作 2} ...&#39; filename</p>\n<p>示例：/etc/passwd 文件第三个字段为 UID，对 UID 小于 10 的数据进行\n处理。</p>\n<p>text\n$ cat /etc/passwd | awk &#39;BEGIN {FS=&quot;:&quot;} $3 &lt; 10 {print $1 &quot;\\t &quot; $3}&#39;\nroot 0\nbin 1\ndaemon 2</p>\n<p>awk 变量：</p>\n<p>| 变量名称 | 代表意义 |\n| :--: | -- |\n| NF | 每一行拥有的字段总数 |\n| NR | 目前所处理的是第几行数据 |\n| FS | 目前的分隔字符，默认是空格键 |</p>\n<p>示例：显示正在处理的行号以及每一行有多少字段</p>\n<p>html\n$ last -n 5 | awk &#39;{print $1 &quot;\\t lines: &quot; NR &quot;\\t columns: &quot; NF}&#39;\ndmtsai lines: 1 columns: 10\ndmtsai lines: 2 columns: 10\ndmtsai lines: 3 columns: 10\ndmtsai lines: 4 columns: 10\ndmtsai lines: 5 columns: 9\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x47",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "47",
            "time" : 1555228371611,
            "title" : "47.0 awk",
            "update_at" : 1556488166377
          },
          "x48" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nps</p>\n<p>查看某个时间点的进程信息</p>\n<p>示例一：查看自己的进程</p>\n<p>sh\nps -l</p>\n<p>示例二：查看系统所有进程</p>\n<p>sh</p>\n<h1 id=\"ps-aux\">ps aux</h1>\n<p>示例三：查看特定的进程</p>\n<p>sh\nps aux | grep threadx</p>\n<p>pstree</p>\n<p>查看进程树</p>\n<p>示例：查看所有进程树</p>\n<p>sh\npstree -A</p>\n<p>top</p>\n<p>实时显示进程信息</p>\n<p>示例：两秒钟刷新一次</p>\n<p>sh\ntop -d 2</p>\n<p>netstat</p>\n<p>查看占用端口的进程</p>\n<p>示例：查看特定端口的进程</p>\n<p>sh\nnetstat -anp | grep port\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x48",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "48",
            "time" : 1555228371611,
            "title" : "48.0 查看进程",
            "update_at" : 1556488166377
          },
          "x49" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n| 状态 | 说明 |\n| :---: | --|\n| R | running or runnable (on run queue) |\n| D | uninterruptible sleep (usually I/O) |\n| S | interruptible sleep (waiting for an event to complete) |\n| Z | zombie (terminated but not reaped by its parent) |\n| T | stopped (either by a job control signal or because it is being traced) |\n<br></p>\n<p><div align=\"center\"> <img src=\"pics/76a49594323247f21c9b3a69945445ee.png\" width=\"\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x49",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "49",
            "time" : 1555228371611,
            "title" : "49.0 进程状态",
            "update_at" : 1556488166377
          },
          "x50" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n当一个子进程改变了它的状态时（停止运行，继续运行或者退出），有两件事会\n发生在父进程中：</p>\n<p>得到 SIGCHLD 信号；\nwaitpid() 或者 wait() 调用会返回。</p>\n<p>其中子进程发送的 SIGCHLD 信号包含了子进程的信息，比如进程 ID、进程状\n态、进程使用 CPU 的时间等。</p>\n<p>在子进程退出时，它的进程描述符不会立即释放，这是为了让父进程得到子进程\n信息，父进程通过 wait() 和 waitpid() 来获得一个已经退出的子进程的信息。</p>\n<p><div align=\"center\"> <img src=\"pics/flow.png\" width=\"\"/> </div><br>\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x50",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "50",
            "time" : 1555228371611,
            "title" : "50.0 SIGCHLD",
            "update_at" : 1556488166377
          },
          "x51" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nc\npid_t wait(int *status)</p>\n<p>父进程调用 wait() 会一直阻塞，直到收到一个子进程退出的 SIGCHLD 信号，\n之后 wait() 函数会销毁子进程并返回。</p>\n<p>如果成功，返回被收集的子进程的进程 ID；如果调用进程没有子进程，调用就会\n失败，此时返回 -1，同时 errno 被置为 ECHILD。</p>\n<p>参数 status 用来保存被收集的子进程退出时的一些状态，如果对这个子进程是\n如何死掉的毫不在意，只想把这个子进程消灭掉，可以设置这个参数为 NULL。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x51",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "51",
            "time" : 1555228371611,
            "title" : "51.0 wait()",
            "update_at" : 1556488166377
          },
          "x52" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nc\npid_t waitpid(pid_t pid, int *status, int options)</p>\n<p>作用和 wait() 完全相同，但是多了两个可由用户控制的参数 pid 和 \noptions。</p>\n<p>pid 参数指示一个子进程的 ID，表示只关心这个子进程退出的 SIGCHLD 信号。\n如果 pid=-1 时，那么和 wait() 作用相同，都是关心所有子进程退出的 SIGCHLD\n 信号。</p>\n<p>options 参数主要有 WNOHANG 和 WUNTRACED 两个选项，WNOHANG 可以使 \nwaitpid() 调用变成非阻塞的，也就是说它会立即返回，父进程可以继续执行\n其它任务。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x52",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "52",
            "time" : 1555228371611,
            "title" : "52.0 waitpid()",
            "update_at" : 1556488166377
          },
          "x53" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n一个父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤\n儿进程。</p>\n<p>孤儿进程将被 init 进程（进程号为 1）所收养，并由 init 进程对它们完成\n状态收集工作。</p>\n<p>由于孤儿进程会被 init 进程收养，所以孤儿进程不会对系统造成危害。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x53",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "53",
            "time" : 1555228371611,
            "title" : "53.0 孤儿进程",
            "update_at" : 1556488166377
          },
          "x54" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait()\n 或 waitpid() 获取了子进程信息后才会释放。如果子进程退出，而父进程并没\n 有调用 wait() 或 waitpid()，那么子进程的进程描述符仍然保存在系统中，\n 这种进程称之为僵尸进程。</p>\n<p>僵尸进程通过 ps 命令显示出来的状态为 Z（zombie）。</p>\n<p>系统所能使用的进程号是有限的，如果产生大量僵尸进程，将因为没有可用的进程\n号而导致系统不能产生新的进程。</p>\n<p>要消灭系统中大量的僵尸进程，只需要将其父进程杀死，此时僵尸进程就会变成孤\n儿进程，从而被 init 进程所收养，这样 init 进程就会释放所有的僵尸进程所\n占有的资源，从而结束僵尸进程。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x54",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "54",
            "time" : 1555228371611,
            "title" : "54.0 僵尸进程",
            "update_at" : 1556488166377
          },
          "x55" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x55",
            "knowledgeid" : "-LdLwITanyNoAGvVvlCh",
            "name" : "tei952",
            "ord" : "55",
            "time" : 1555228371611,
            "title" : "55.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LdLwZEoLZc4i2v8T5QR" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n在工作中我们时常会花很多时间去 debug，但是你是否发现很多问题最终只是\n你基础不扎实或者文档没有仔细看。</p>\n<p>基础是你技术的基石，一定要花时间打好基础，而不是追各种新的技术。一旦你\n的基础扎实，学习各种新的技术也肯定不在话下，因为新的技术，究其根本都是\n相通的。</p>\n<p>文档同样也是一门技术的基础。一个优秀的库，开发人员肯定已经把如何使用这\n个库都写在文档中了，仔细阅读文档一定会是少写 bug 的最省事路子。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 花时间补基础，读文档",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>如果你还在使用百度搜索编程问题，请尽快抛弃这个垃圾搜索引擎。同样一个关键\n字，使用百度和谷歌，谷歌基本完胜的。即使你使用中文在谷歌中搜索，得到的结\n果也往往是谷歌占优，所以如果你想迅速的通过搜索引擎来解决问题，那一定是谷\n歌。</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 学会搜索",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n说到英语，一定是大家所最不想听的。其实我一直认为程序员学习英语是简单的，\n因为我们工作中是一直接触着英语，并且看懂技术文章，文档所需要的单词量是极\n少的。我时常在群里看到大家发出一个问题的截图问什么原因，其实在截图中英语\n已经很明白的说明了问题的所在，如果你的英语过关，完全不需要浪费时间来提问\n和搜索。所以我认为学点英语也是节省时间中很重要的一点。</p>\n<p>那么如何去学习呢，chrome 装个翻译插件，直接拿英文文档或文章读，不会的就\n直接划词翻译，然后记录下这个单词并背诵。每天花半小时看点英文文档和文章，\n坚持两个月，你的英语水平不说别的，看文档和文章绝对不会有难题了。这一定是\n一个很划算的个人时间投资，花点时间学习英语，能为你将来的技术之路铺平很多\n坎。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 学点英语",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n你是否遇到过这种问题，需求一下来，看一眼，然后马上就按照设计稿开始做了，\n可能中间出个问题导致你需要返工。</p>\n<p>如果你存在这样的问题，我很推荐在看到设计稿和需求的时候花点时间想一想，画\n一画。考虑一下设计稿中是否可以找到可以拆分出来的复用组件，是否存在之前写\n过的组件。该如何组织这个界面，数据的流转是怎么样的。然后画一下这个页面的\n需求，最后再动手做。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 画个图，想一想再做",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\n说到下班时间，那可能就有人说了公司很迟下班，这其实是国内很普遍的情况。但\n是我认为正常的加班是可以的，但是强制的加班就是在损耗你的身体和前途。</p>\n<p>可以这么说，大部分的 996 公司，加班的这些时间并不会增加你的技术，无非就是\n在写一些重复的业务逻辑。也许你可以拿到更多的钱，但是代价是身体还有前途。程\n序员是靠技术吃饭的，如果你长久呆在一个长时间加班的公司，不能增长你的技\n术还要吞噬你的下班学习时间，那么你一定会废掉的。如果你遇到了这种情况，只\n能推荐尽快跳槽到非 996 的公司。</p>\n<p>那么如果你有足够的下班时间，一定要花上 1， 2 小时去学习，上班大家基本都一\n样，技术的精进就是看下班以后的那几个小时了。如果你能利用好下班时间来学\n习，坚持下去，时间一定会给你很好的答复。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x05",
            "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.0 利用好下班时间学习",
            "update_at" : 1556488166377
          },
          "x06" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>我喜欢规划好一段时间内要做的事情，并且要把事情拆分为小点。给 ToDo 列好优\n先级，紧急的优先级最高。相同优先级的我喜欢先做简单的，因为这样一旦完成就\n能划掉一个，提高成就感。</code></pre>",
              "type" : "Html"
            },
            "id" : "x06",
            "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
            "name" : "tei952",
            "ord" : "06",
            "time" : 1555228371611,
            "title" : "6.0 列好 ToDo",
            "update_at" : 1556488166377
          },
          "x07" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>每周末都会花上点时间整理下本周记录的笔记和看到的不错文章。然后考虑下本周\n完成的工作和下周准备要完成的工作。</code></pre>",
              "type" : "Html"
            },
            "id" : "x07",
            "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
            "name" : "tei952",
            "ord" : "07",
            "time" : 1555228371611,
            "title" : "7.0 反思和整理",
            "update_at" : 1556488166377
          },
          "x08" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x08",
            "knowledgeid" : "-LdLwZEoLZc4i2v8T5QR",
            "name" : "tei952",
            "ord" : "08",
            "time" : 1555228371611,
            "title" : "8.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      },
      "-LedXZi8fzaKO45rL-Kv" : {
        "contents" : {
          "x01" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>LOH教材制作基础是Markdown文件转换成为JSON格式。\n同时也支持将Markdown转化为HTML和PDF\nMarkDown文件格式要求请参照目录下的js.md</code></pre>",
              "type" : "Html"
            },
            "id" : "x01",
            "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
            "name" : "tei952",
            "ord" : "01",
            "time" : 1555228371611,
            "title" : "1.0 LOH教材制作基础",
            "update_at" : 1556488166377
          },
          "x02" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>\nNOTE: 命令都是在终端里进行的。</p>\n<p>在开始之前，请确认你已经安装node.js</p>\n<p>1 下载并解压或者clone到本地\n2 进入LOHMD2N 目录，\n3 执行命令：<code>npm install</code>\n4 然后把需要批量转换的Markdown 文件放到 <code>./Markdowns</code> 目录下。\n5 执行命令: <code>gulp</code>\n6 工具会自动把Markdown 文件批量转换成相应的文件。\n</code></pre>",
              "type" : "Html"
            },
            "id" : "x02",
            "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
            "name" : "tei952",
            "ord" : "02",
            "time" : 1555228371611,
            "title" : "2.0 使用方法",
            "update_at" : 1556488166377
          },
          "x03" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>任务|命令| 说明\n----|----|-----\nMD2HTML | gulp MD2HTML | 把 markdown 转换成 HTML 文件。\nMD2PDF | gulp MD2PDF | 把 markdown 转换成 PDF 文件。\nMD2JSON| gulp MD2JSON| 把 markdown 转换成 JSON 文件。\nwatching | gulp watching| 监视 Markdowns 文件夹，一旦 markdown \n文件被更改(新建、修改、删除)时自动进行转换。\ndefault | gulp 或者 gulp default | 一次批量把markdown 文件转换成\n相应的HTML/JSON/PDF文件。</code></pre>",
              "type" : "Html"
            },
            "id" : "x03",
            "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
            "name" : "tei952",
            "ord" : "03",
            "time" : 1555228371611,
            "title" : "3.0 Task (任务说明-命令说明)",
            "update_at" : 1556488166377
          },
          "x04" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "data" : "<pre><code>knowledgeid 知识编号\nauthor: 作者名称\nauthorid: 作者编号\n以上三项由LOH系统提供\n课件每页类型如下\n0 html\n1 select\n2 input\n3 youtube\n4 picture\n5 audio\n6 multiselect\n7 advertisment\n8 flash</code></pre>",
              "type" : "Html"
            },
            "id" : "x04",
            "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
            "name" : "tei952",
            "ord" : "04",
            "time" : 1555228371611,
            "title" : "4.0 MD文件说明",
            "update_at" : 1556488166377
          },
          "x05" : {
            "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "comment_count" : 0,
            "content" : {
              "certificatePath" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
              "type" : "Certificate"
            },
            "id" : "x05",
            "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
            "name" : "tei952",
            "ord" : "05",
            "time" : 1555228371611,
            "title" : "5.9 御修了ありがとうございました。",
            "update_at" : 1556488166377
          }
        }
      }
    }
  },
  "knowledgelikes" : {
    "data" : {
      "-LbW07Cj8C37LDyZeKHF" : {
        "likes" : {
          "-Ld3sLqhvbJJvSgZmxCQ" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "id" : "-Ld3sLqhvbJJvSgZmxCQ",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "time" : 1555933785875
          },
          "-Ld6RsR6U0Nh6__e94gV" : {
            "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
            "id" : "-Ld6RsR6U0Nh6__e94gV",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test2",
            "time" : 1555976914980
          },
          "-Ld7JTZref-l0VHV0ezB" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "id" : "-Ld7JTZref-l0VHV0ezB",
            "knowledgeid" : "-LbW07Cj8C37LDyZeKHF",
            "name" : "test1",
            "time" : 1555991488967
          }
        }
      },
      "-LbYZZXvYQxtpo2AWpzL" : {
        "likes" : {
          "-LdBSqN2qD5za07MH9KQ" : {
            "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
            "id" : "-LdBSqN2qD5za07MH9KQ",
            "knowledgeid" : "-LbYZZXvYQxtpo2AWpzL",
            "name" : "test2",
            "time" : 1556061054857
          }
        }
      },
      "-Ld495mtWIyObJzEEK7s" : {
        "likes" : {
          "-Ld49xIGcvb6y2V3Jwki" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "id" : "-Ld49xIGcvb6y2V3Jwki",
            "knowledgeid" : "-Ld495mtWIyObJzEEK7s",
            "name" : "test1",
            "time" : 1555938661815
          }
        }
      },
      "-LdLtODpcc-J83q1aU5f" : {
        "likes" : {
          "-LfMS-dItcRgF244SeMv" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "id" : "-LfMS-dItcRgF244SeMv",
            "knowledgeid" : "-LdLtODpcc-J83q1aU5f",
            "name" : "test1",
            "time" : 1558392867651
          }
        }
      },
      "-LdLuLklhwL7keqLFNmD" : {
        "likes" : {
          "-LezO67cMTwl2mqIo2bv" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "id" : "-LezO67cMTwl2mqIo2bv",
            "knowledgeid" : "-LdLuLklhwL7keqLFNmD",
            "name" : "test1",
            "time" : 1557989192438
          }
        }
      },
      "-LdLuU-AHWwvMHDT-QpQ" : {
        "likes" : {
          "-LfMSEGe3PghlfNAwRf2" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "id" : "-LfMSEGe3PghlfNAwRf2",
            "knowledgeid" : "-LdLuU-AHWwvMHDT-QpQ",
            "name" : "test1",
            "time" : 1558392927571
          }
        }
      },
      "-LdLubY6J4gW1t94t63x" : {
        "likes" : {
          "-LfMSKDs_kRn6wjPPolW" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "id" : "-LfMSKDs_kRn6wjPPolW",
            "knowledgeid" : "-LdLubY6J4gW1t94t63x",
            "name" : "test1",
            "time" : 1558392952015
          }
        }
      },
      "-LdLvzsimpPWmPNFJwdO" : {
        "likes" : {
          "-Lfm8sLxjNM7qmf7p-0a" : {
            "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "id" : "-Lfm8sLxjNM7qmf7p-0a",
            "knowledgeid" : "-LdLvzsimpPWmPNFJwdO",
            "name" : "test1",
            "time" : 1558840837740
          }
        }
      },
      "-LedXZi8fzaKO45rL-Kv" : {
        "likes" : {
          "-LetXZVLfeQLk28jm8F_" : {
            "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
            "id" : "-LetXZVLfeQLk28jm8F_",
            "knowledgeid" : "-LedXZi8fzaKO45rL-Kv",
            "name" : "test2",
            "time" : 1557891008734
          }
        }
      }
    }
  },
  "knowledges" : {
    "data" : {
      "-LbW07Cj8C37LDyZeKHF" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 7,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "certificate_count" : 21,
        "content_count" : 80,
        "created_at" : 1554258363397,
        "id" : "-LbW07Cj8C37LDyZeKHF",
        "industry" : "2",
        "introduce" : "Angularシステム開発入門",
        "knowledgetype" : "1",
        "like_count" : 2,
        "name" : "Angularシステム開発入門",
        "nickname" : "test1",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF?alt=media&token=3a5ec08e-8327-4d5f-b655-68465a6af485",
        "update_at" : 1555936196190
      },
      "-LbYZZXvYQxtpo2AWpzL" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com/",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀４－１０－１甲東ビル６０４号室",
        "application_count" : 4,
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "certificate_count" : 1,
        "content_count" : 20,
        "created_at" : 1554301210432,
        "id" : "-LbYZZXvYQxtpo2AWpzL",
        "industry" : "1",
        "introduce" : "海威コンサルティング株式会社のC#入門課程",
        "knowledgetype" : "1",
        "like_count" : 2,
        "name" : "C#入門",
        "nickname" : "test1",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbYZZXvYQxtpo2AWpzL?alt=media&token=5256a327-3e54-43f4-9854-ec573ced9c58",
        "update_at" : 1557833551776
      },
      "-Ld495mtWIyObJzEEK7s" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com/",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀４－１０－１　甲東ビル６０４号室",
        "application_count" : 3,
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "certificate_count" : 1,
        "content_count" : 25,
        "created_at" : 1555938439185,
        "id" : "-Ld495mtWIyObJzEEK7s",
        "industry" : "1",
        "introduce" : "ハイブリッド応用システム開発の基礎知識、本システム開発の全般知識を含む",
        "knowledgetype" : "1",
        "like_count" : 1,
        "name" : "ハイブリッド応用システム開発",
        "nickname" : "test1",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-Ld495mtWIyObJzEEK7s?alt=media&token=ef80e837-65fa-43a2-9413-d1f57994e4a3",
        "update_at" : 1557833625588
      },
      "-LdLtODpcc-J83q1aU5f" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 3,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 66,
        "created_at" : 1556236050753,
        "id" : "-LdLtODpcc-J83q1aU5f",
        "introduce" : "Springbootウェブ開発入門です、Springbootで素晴らしいウェブシステムを開発しましょう。",
        "knowledgetype" : "2",
        "like_count" : 1,
        "name" : "Springboot",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtODpcc-J83q1aU5f?alt=media&token=2de1184f-a1af-48fa-abd0-7ddc24a7cf04"
      },
      "-LdLtaiBADqiIat-6k_3" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 36,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_3",
        "introduce" : "Framework7入門、ウェブデザイ新方法を勉強しましょう",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "Framework7入門",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_3?alt=media&token=714c3241-3b3a-4b03-bebb-e623164b96f0"
      },
      "-LdLtaiBADqiIat-6k_31" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 14,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_31",
        "introduce" : "集群",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "集群",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_31?alt=media&token=bb29b89c-fcd7-4c64-aa78-164a0afe26de"
      },
      "-LdLtaiBADqiIat-6k_32" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 14,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_32",
        "introduce" : "数据库原理",
        "knowledgetype" : "2",
        "like_count" : 0,
        "name" : "数据库原理",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_32?alt=media&token=bdc8a88c-821c-4117-938f-a0fcee1fefc0"
      },
      "-LdLtaiBADqiIat-6k_33" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 32,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_33",
        "introduce" : "设计模式",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "设计模式",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_33?alt=media&token=06ffaa58-8a7f-4239-9b90-c4524dee3ae4"
      },
      "-LdLtaiBADqiIat-6k_34" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 13,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_34",
        "introduce" : "分布式计算",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "分布式计算",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_34?alt=media&token=60a99db4-051b-4081-936f-0f5f8b582520"
      },
      "-LdLtaiBADqiIat-6k_35" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 6,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_35",
        "introduce" : "构建工具",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "构建工具",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_35?alt=media&token=4d042447-3083-4f37-8830-d3b64ca32edc"
      },
      "-LdLtaiBADqiIat-6k_37" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 10,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_37",
        "introduce" : "面向对象",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "面向对象",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_37?alt=media&token=ab362652-7f38-4d0a-a58e-8197b45f36c7"
      },
      "-LdLtaiBADqiIat-6k_38" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 5,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_38",
        "introduce" : "队列",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "队列",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_38?alt=media&token=3a18f65d-2aca-414f-8113-7c912234b93c"
      },
      "-LdLtaiBADqiIat-6k_39" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 21,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_39",
        "introduce" : "Redis",
        "knowledgetype" : "2",
        "like_count" : 0,
        "name" : "Redis",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_39?alt=media&token=0da72ed9-c276-4694-9af4-7aa6b1fe96b8"
      },
      "-LdLtaiBADqiIat-6k_3a" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 14,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_3a",
        "introduce" : "正则表达式",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "正则表达式",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_3a?alt=media&token=f78db201-be42-4246-a075-b8bb06f0a896"
      },
      "-LdLtaiBADqiIat-6k_3b" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 17,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_3b",
        "introduce" : "Socket",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "Socket",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_3b?alt=media&token=53b5b9cb-3a1a-4897-a532-0784b8c43170"
      },
      "-LdLtaiBADqiIat-6k_3c" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 17,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_3c",
        "introduce" : "SQL",
        "knowledgetype" : "2",
        "like_count" : 0,
        "name" : "SQL",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_3c?alt=media&token=be0d2389-a529-4b51-bb38-3efc181ea864"
      },
      "-LdLtaiBADqiIat-6k_3d" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 7,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_3d",
        "introduce" : "系统设计",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "系统设计",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_3d?alt=media&token=862f48b5-3aad-4da1-b6fd-880ebcef36a7"
      },
      "-LdLtaiBADqiIat-6k_4" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 10,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_4",
        "introduce" : "ここからVUEの高級技術を勉強しましょう",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "Vue-Infinite-Loading入門",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_4?alt=media&token=9bb87d02-2adb-4295-ab5d-f09b98f9cfcc"
      },
      "-LdLtaiBADqiIat-6k_5" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 20,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_5",
        "introduce" : "MySql数据库从入门到精通",
        "knowledgetype" : "2",
        "like_count" : 0,
        "name" : "MySql数据库",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_5?alt=media&token=b9bf9846-515e-468e-8eb1-4a38ecf068f3"
      },
      "-LdLtaiBADqiIat-6k_6" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 20,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_6",
        "introduce" : "ML Kit入門、人工知能の勉強はここからしましょう",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "ML Kit入門",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_6?alt=media&token=f1eae4cf-30de-4f76-9ac0-cc5af9baf402"
      },
      "-LdLtaiBADqiIat-6k_7" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 12,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_7",
        "introduce" : "Tensorflow.js入門、ウェブで人工知能を応用しましょう",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "Tensorflow.js入門",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_7?alt=media&token=f1c88664-9ec9-4602-9852-06ca41e529ed"
      },
      "-LdLtaiBADqiIat-6k_8" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 2,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 45,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_8",
        "introduce" : "Oracle数据库从入门到精通",
        "knowledgetype" : "2",
        "like_count" : 0,
        "name" : "Oracle数据库",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_8?alt=media&token=27c0fe97-1df7-49df-80d3-8cee500418c7",
        "update_at" : 1558751996178
      },
      "-LdLtaiBADqiIat-6k_9" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 36,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_9",
        "introduce" : "JAVA从入门到精通",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "JAVA入門",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_9?alt=media&token=e107d6ce-a442-406c-a351-ef1f85de9101",
        "update_at" : 1558752037819
      },
      "-LdLtaiBADqiIat-6k_a" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 45,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_a",
        "introduce" : "微信小程序从入门到精通",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "微信小程序",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_a?alt=media&token=da475978-3ffc-4551-975a-7c7e30faf0de",
        "update_at" : 1558752037819
      },
      "-LdLtaiBADqiIat-6k_b" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 23,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_b",
        "introduce" : "网络基础",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "网络基础",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_b?alt=media&token=a48399c9-5eb6-4ea4-a17a-a3e315a87725",
        "update_at" : 1558752037819
      },
      "-LdLtaiBADqiIat-6k_c" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 15,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_c",
        "introduce" : "程序和系统性能调整基础",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "性能调整",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_c?alt=media&token=06b3a68b-0ede-44ac-b8b3-60d7221817db",
        "update_at" : 1558752037819
      },
      "-LdLtaiBADqiIat-6k_d" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 20,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_d",
        "introduce" : "浏览器程序设计基础",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "浏览器程序设计",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_d?alt=media&token=7764feb8-f1c6-42d9-a898-9f7a0ebebc13",
        "update_at" : 1558752037819
      },
      "-LdLtaiBADqiIat-6k_e" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 20,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_e",
        "introduce" : "数据结构基础",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "数据结构",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_e?alt=media&token=7f76a311-c5cc-4f45-ad84-94df48594aac",
        "update_at" : 1558752037819
      },
      "-LdLtaiBADqiIat-6k_f" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 14,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_f",
        "introduce" : "框架设计基础",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "框架设计",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_f?alt=media&token=ffe77c5a-ff17-4bcd-a502-36bd1a5a55e2",
        "update_at" : 1558752037819
      },
      "-LdLtaiBADqiIat-6k_g" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 5,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_g",
        "introduce" : "Git高级应用",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "Git高级应用",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_g?alt=media&token=16321fa6-66a2-4e61-86f4-26817e1c691c",
        "update_at" : 1558752037819
      },
      "-LdLtaiBADqiIat-6k_h" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 12,
        "created_at" : 1556236102724,
        "id" : "-LdLtaiBADqiIat-6k_h",
        "introduce" : "Git应用入门",
        "knowledgetype" : "1",
        "like_count" : 0,
        "name" : "Git应用入门",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLtaiBADqiIat-6k_h?alt=media&token=cbbab1ea-faff-4a8b-b441-754a0356f347",
        "update_at" : 1558752037819
      },
      "-LdLuLklhwL7keqLFNmD" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 3,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 25,
        "created_at" : 1556236299544,
        "id" : "-LdLuLklhwL7keqLFNmD",
        "introduce" : "nodejs从入门到精通",
        "knowledgetype" : "3",
        "like_count" : 1,
        "name" : "nodejs入门",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLuLklhwL7keqLFNmD?alt=media&token=ee8e1be1-86a1-4ab9-9b4d-d5401091434e"
      },
      "-LdLuU-AHWwvMHDT-QpQ" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 5,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 31,
        "created_at" : 1556236333406,
        "id" : "-LdLuU-AHWwvMHDT-QpQ",
        "industry" : "1",
        "introduce" : "vue入门助你成为VUE前端工程师",
        "knowledgetype" : "3",
        "like_count" : 1,
        "name" : "vue从入门",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLuU-AHWwvMHDT-QpQ?alt=media&token=43afbf8b-b726-43d8-8350-ceafda9b8393",
        "update_at" : 1557833355947
      },
      "-LdLubY6J4gW1t94t63x" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 2,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 69,
        "created_at" : 1556236368285,
        "id" : "-LdLubY6J4gW1t94t63x",
        "introduce" : "Python入門,Python基本知識を勉強しましょう。",
        "knowledgetype" : "3",
        "like_count" : 1,
        "name" : "Python入門",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLubY6J4gW1t94t63x?alt=media&token=0ca38135-5abe-49fa-b5b7-e9e37dc59642",
        "update_at" : 1558521228934
      },
      "-LdLv2K4G35jI5thkNgR" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 24,
        "created_at" : 1556236482059,
        "id" : "-LdLv2K4G35jI5thkNgR",
        "introduce" : "Spring框架从入门到精通",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "Spring框架",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLv2K4G35jI5thkNgR?alt=media&token=1c859e80-1dd0-41cb-8caa-644ef144f54e"
      },
      "-LdLvCzZr_W7DeKwDw9w" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 0,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 0,
        "created_at" : 1556236525757,
        "id" : "-LdLvCzZr_W7DeKwDw9w",
        "introduce" : "gpu从入门到精通",
        "knowledgetype" : "7",
        "like_count" : 0,
        "name" : "gpu入门",
        "nickname" : "tei952"
      },
      "-LdLvKb6JZ4xEuew0npf" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 0,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 12,
        "created_at" : 1556236556983,
        "id" : "-LdLvKb6JZ4xEuew0npf",
        "introduce" : "docker从入门到精通",
        "knowledgetype" : "8",
        "like_count" : 0,
        "name" : "docker入门",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLvKb6JZ4xEuew0npf?alt=media&token=58be3a9a-50f9-4771-8223-d97c6ba03a68"
      },
      "-LdLvYhoIN8mERmK7vQo" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 2,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 0,
        "created_at" : 1556236616193,
        "id" : "-LdLvYhoIN8mERmK7vQo",
        "introduce" : "kubernetes从入门到精通",
        "knowledgetype" : "8",
        "like_count" : 0,
        "name" : "kubernetes入门",
        "nickname" : "tei952",
        "photo" : ""
      },
      "-LdLvjsjW3CGLyxi3Qb2" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 0,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 0,
        "created_at" : 1556236664578,
        "id" : "-LdLvjsjW3CGLyxi3Qb2",
        "introduce" : "openshift从入门到精通",
        "knowledgetype" : "8",
        "like_count" : 0,
        "name" : "openshift入门",
        "nickname" : "tei952"
      },
      "-LdLvzsimpPWmPNFJwdO" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 34,
        "content_count" : 9,
        "created_at" : 1556236730161,
        "id" : "-LdLvzsimpPWmPNFJwdO",
        "introduce" : "人工智能数学基础教育",
        "knowledgetype" : "4",
        "like_count" : 1,
        "name" : "人工智能数学基础",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLvzsimpPWmPNFJwdO?alt=media&token=4aaeeaec-4923-4909-ba1f-8118eb492014"
      },
      "-LdLwA6JjJepFe9MTwD2" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 0,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 0,
        "created_at" : 1556236776080,
        "id" : "-LdLwA6JjJepFe9MTwD2",
        "introduce" : "windows基础知识",
        "knowledgetype" : "6",
        "like_count" : 0,
        "name" : "windows入门",
        "nickname" : "tei952"
      },
      "-LdLwITanyNoAGvVvlCh" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 1,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 55,
        "created_at" : 1556236810433,
        "id" : "-LdLwITanyNoAGvVvlCh",
        "introduce" : "linux基础教程",
        "knowledgetype" : "5",
        "like_count" : 0,
        "name" : "linux入门",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLwITanyNoAGvVvlCh?alt=media&token=1272e895-5d1e-4b29-b141-1b0439c2cdd9"
      },
      "-LdLwZEoLZc4i2v8T5QR" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 0,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 8,
        "created_at" : 1556236879200,
        "id" : "-LdLwZEoLZc4i2v8T5QR",
        "introduce" : "pmp项目管理基础知识",
        "knowledgetype" : "10",
        "like_count" : 0,
        "name" : "pmp项目管理基础",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LdLwZEoLZc4i2v8T5QR?alt=media&token=7884b3b7-5ae2-4e28-ae16-f8dd07a60478"
      },
      "-LedXZi8fzaKO45rL-Kv" : {
        "Fax" : "03-3532-6513",
        "HP" : "http://jp.highwayns.com",
        "Manager" : "鄭軍",
        "Tel" : "03-5244-9853",
        "address" : "東京都中央区八丁堀4-10-1-604",
        "application_count" : 2,
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "certificate_count" : 0,
        "content_count" : 5,
        "created_at" : 1557622574206,
        "id" : "-LedXZi8fzaKO45rL-Kv",
        "introduce" : "LOH是海威咨询出品的免费在线教学和APP教学系统，具有随时随地免费学习，边学边测，教师实时答疑等优点。本课件是学习内容制作教程，欢迎大家学习和使用。",
        "knowledgetype" : "10",
        "like_count" : 1,
        "name" : "LOH教材制作",
        "nickname" : "tei952",
        "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F-LedXZi8fzaKO45rL-Kv?alt=media&token=2a738082-a270-425a-83e5-e10d884903c8"
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "likes" : {
    "data" : {
      "0" : {
        "avatar" : "1",
        "name" : "Cory Bergman",
        "postid" : "11",
        "time" : "1404705240"
      },
      "1" : {
        "avatar" : "2",
        "name" : "Nathan Lawson",
        "postid" : "12",
        "time" : "1404705260"
      },
      "2" : {
        "avatar" : "3",
        "name" : "Nathan Lawson",
        "postid" : "13",
        "time" : "1404705300"
      },
      "3" : {
        "avatar" : "4",
        "name" : "Vaughn",
        "postid" : "14",
        "time" : "1404705400"
      },
      "-LbRHgPyDAMcmJnsf_nF" : {
        "-LcRJl3HboJ_Wdy9OGmR" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRJl3HboJ_Wdy9OGmR",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "time" : 1555253367296
        },
        "-LcRKaog4rXNw24T_s5x" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRKaog4rXNw24T_s5x",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "time" : 1555253587466
        },
        "-LcRNB3lUczQABiJS-a1" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LcRNB3lUczQABiJS-a1",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "time" : 1555254265276
        },
        "-Ld4JLmSAlBpV0R3yigs" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-Ld4JLmSAlBpV0R3yigs",
          "name" : "test1",
          "postid" : "-LbRHgPyDAMcmJnsf_nF",
          "time" : 1555941125500
        }
      },
      "-LdLmvv2SvIuEAO7e-ch" : {
        "-LdkisnbIV5pE9F4cVsm" : {
          "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "id" : "-LdkisnbIV5pE9F4cVsm",
          "name" : "tei952",
          "postid" : "-LdLmvv2SvIuEAO7e-ch",
          "time" : 1556669500985
        }
      },
      "-LfZGCRl_H1esihYFGoj" : {
        "-LfZORiXBLpTyDq2grHr" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-LfZORiXBLpTyDq2grHr",
          "name" : "test1",
          "postid" : "-LfZGCRl_H1esihYFGoj",
          "time" : 1558610037809
        }
      },
      "-LfZWAt-DZbrjG0uxqlh" : {
        "-Lf_F9vc8Yp6g9yblOUQ" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-Lf_F9vc8Yp6g9yblOUQ",
          "name" : "test1",
          "postid" : "-LfZWAt-DZbrjG0uxqlh",
          "time" : 1558624383226
        },
        "-Lf_FJ6ZTw-eoubGI9BD" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-Lf_FJ6ZTw-eoubGI9BD",
          "name" : "test1",
          "postid" : "-LfZWAt-DZbrjG0uxqlh",
          "time" : 1558624420856
        }
      },
      "-LfhIXhbHPm7sHkhVepD" : {
        "-Lg1NMgXSwF5prw3wHvD" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-Lg1NMgXSwF5prw3wHvD",
          "name" : "test1",
          "postid" : "-LfhIXhbHPm7sHkhVepD",
          "time" : 1559113071534
        }
      },
      "-LfhosjO-d86Tvx6AAUa" : {
        "-Lg1N3ZbGeektVaAKloV" : {
          "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "id" : "-Lg1N3ZbGeektVaAKloV",
          "name" : "test1",
          "postid" : "-LfhosjO-d86Tvx6AAUa",
          "time" : 1559112993196
        }
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "more_timeline" : {
    "data" : [ {
      "avatar" : "9",
      "comment_count" : 0,
      "created_at" : "1504700591",
      "id" : "29",
      "like_count" : 1,
      "nickname" : "Jean Paul Sartre",
      "original_pic" : "https://loremflickr.com/1000/700/nature?lock=1",
      "text" : "If you're lonely when you're alone, you're in bad company."
    }, {
      "avatar" : "08",
      "comment_count" : 0,
      "created_at" : "1504698995",
      "id" : "28",
      "like_count" : 0,
      "nickname" : "Zig Ziglar",
      "original_pic" : "",
      "text" : "Your attitude, not your aptitude, will determine your altitude."
    }, {
      "avatar" : "1",
      "comment_count" : 0,
      "created_at" : "1504698321",
      "id" : "27",
      "like_count" : 2,
      "nickname" : "Winston Churchill",
      "original_pic" : "https://loremflickr.com/1000/700/nature?lock=8",
      "text" : "Success is not final, failure is not fatal: it is the courage to continue that counts."
    }, {
      "avatar" : "4",
      "comment_count" : 2,
      "created_at" : "1504697858",
      "id" : "26",
      "like_count" : 0,
      "nickname" : "Nishan Panwar",
      "original_pic" : "",
      "text" : "When life gets hard and you want to give up, remember that life is full of ups and downs, and without the downs, the ups would mean nothing."
    }, {
      "avatar" : "2",
      "comment_count" : 0,
      "created_at" : "1504693147",
      "id" : "25",
      "like_count" : 0,
      "nickname" : "Paulo Coelho",
      "original_pic" : "https://loremflickr.com/1000/700/nature?lock=7",
      "text" : "There is only one thing that makes a dream impossible to achieve: the fear of failure."
    }, {
      "avatar" : "9",
      "comment_count" : 0,
      "created_at" : "1504692969",
      "id" : "24",
      "like_count" : 0,
      "nickname" : "Helen Keller",
      "original_pic" : "",
      "text" : "When one door of happiness closes, another opens; but often we look so long at the closed door that we do not see the one which has been opened for us."
    } ],
    "err_code" : 0,
    "err_msg" : "success"
  },
  "orders" : {
    "data" : [ {
      "bankaccount" : "みずほ銀行○○支店12345678",
      "comment" : "特になし",
      "companyId" : "2",
      "content" : "システム開発",
      "detail" : [ {
        "Unit" : "円",
        "name" : "a",
        "price" : 550000,
        "time" : "1人月"
      }, {
        "Unit" : "円",
        "name" : "b",
        "price" : 450000,
        "time" : "1人月"
      } ],
      "endDate" : "2018/10/31",
      "invoiceId" : "201810",
      "location" : "品川",
      "startDate" : "2018/10/01",
      "tax" : 0.08,
      "totalAmount" : 1080000,
      "userid" : "1"
    }, {
      "comment" : "特になし",
      "companyId" : "3",
      "content" : "システム開発",
      "detail" : [ {
        "Unit" : "円",
        "name" : "a",
        "price" : 550000,
        "worktime" : "1人月"
      }, {
        "Unit" : "円",
        "name" : "b",
        "price" : 450000,
        "worktime" : "1人月"
      } ],
      "endDate" : "2018/10/31",
      "invoiceId" : "201810",
      "location" : "品川",
      "startDate" : "2018/10/01",
      "tax" : 0.08,
      "totalAmount" : 1080000,
      "userid" : "1"
    } ],
    "err_code" : 0,
    "err_msg" : "success"
  },
  "posts" : {
    "data" : {
      "-LfZGCRl_H1esihYFGoj" : {
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "comment_count" : 0,
        "created_at" : 1558607878090,
        "id" : "-LfZGCRl_H1esihYFGoj",
        "like_count" : 1,
        "nickname" : "test1",
        "original_pic" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/posts%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F16f2be9b7c244e5ab0b461b0a84eebea?alt=media&token=5f38666c-b04d-4a02-8e1a-c46472f2f81b",
        "text" : "本システム内部テスト開始しました。よろしくお願いいたします。"
      },
      "-LfZOGqkSvISSrYGyCNG" : {
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "comment_count" : 0,
        "created_at" : 1558609993280,
        "id" : "-LfZOGqkSvISSrYGyCNG",
        "like_count" : 0,
        "nickname" : "test1",
        "original_pic" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/posts%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F67ee99a2f0a944288f5d3ebf275d69b5?alt=media&token=bed77d99-67af-492d-87bc-3f781fe8a59c",
        "text" : "请大家多多关注"
      },
      "-LfZPZQhjOs_fGfdtCZ6" : {
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "comment_count" : 0,
        "created_at" : 1558610331520,
        "id" : "-LfZPZQhjOs_fGfdtCZ6",
        "like_count" : 0,
        "nickname" : "test1",
        "original_pic" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/posts%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F238ab098cd7647f58ffa04162f098c88?alt=media&token=9eb9c01b-ba91-4e69-9fa7-c6918dcf91f3",
        "text" : "现在测试一下"
      },
      "-LfZRtYjQcqkTkg6eNO8" : {
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "comment_count" : 0,
        "created_at" : 1558610942405,
        "id" : "-LfZRtYjQcqkTkg6eNO8",
        "like_count" : 0,
        "nickname" : "test1",
        "original_pic" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/posts%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2Fc48dcf1fb050424ba7583f9fbdf48308?alt=media&token=6c550614-4287-455d-9a56-e2ea47b3c52c",
        "text" : "为人工智能做个广告"
      },
      "-LfZWAt-DZbrjG0uxqlh" : {
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "comment_count" : 0,
        "created_at" : 1558612066142,
        "id" : "-LfZWAt-DZbrjG0uxqlh",
        "like_count" : 2,
        "nickname" : "test1",
        "original_pic" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/posts%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F722f793c94d34736b73a92af5b9c38b2?alt=media&token=390ce3b1-3424-42c1-b4fa-6e9b80c3e49b",
        "text" : "刚改好新闻，可以发图片了"
      },
      "-LfhIXhbHPm7sHkhVepD" : {
        "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
        "comment_count" : 0,
        "created_at" : 1558759484424,
        "id" : "-LfhIXhbHPm7sHkhVepD",
        "like_count" : 1,
        "nickname" : "test1",
        "original_pic" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/posts%2FiHmcxnnRDWPOJAE38On1nCdq0ir2%2F4b66c6a6cfae4c4d9e1f32d35d1a5120?alt=media&token=f955e134-f87f-4513-93b4-4f51d4deac48",
        "text" : "测试"
      },
      "-LfhosjO-d86Tvx6AAUa" : {
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "comment_count" : 0,
        "created_at" : 1558768225383,
        "id" : "-LfhosjO-d86Tvx6AAUa",
        "like_count" : 1,
        "nickname" : "test1",
        "original_pic" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/posts%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F46c21bc7a5fe4a32af5723eef634b933?alt=media&token=4974c742-aa2a-4fa6-9032-54fea9edb12a",
        "text" : "欢迎大家参与我们的C#学习课程"
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "projects" : {
    "data" : {
      "-LbW06MHXWWiH_5qTsNa" : {
        "Fax" : "1",
        "HP" : "1",
        "Manager" : "1",
        "Tel" : "1",
        "address" : "11",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554258359951,
        "id" : "-LbW06MHXWWiH_5qTsNa",
        "industry" : "1",
        "like_count" : 0,
        "name" : "test project2",
        "nickname" : "test1",
        "photo" : "",
        "projecttype" : "1",
        "update_at" : 1554258360368
      },
      "-LbYX_su44sUSukdzHMZ" : {
        "Fax" : "sss",
        "HP" : "sss",
        "Manager" : "asss",
        "Tel" : "sss",
        "address" : "sss",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554300691482,
        "id" : "-LbYX_su44sUSukdzHMZ",
        "industry" : "2",
        "like_count" : 0,
        "name" : "sss",
        "nickname" : "test1",
        "projecttype" : "2"
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "quatations" : {
    "data" : [ {
      "bankaccount" : "みずほ銀行○○支店12345678",
      "comment" : "特になし",
      "companyId" : "2",
      "content" : "システム開発",
      "detail" : [ {
        "Unit" : "円",
        "name" : "a",
        "price" : 550000,
        "worktime" : "1人月"
      }, {
        "Unit" : "円",
        "name" : "b",
        "price" : 450000,
        "worktime" : "1人月"
      } ],
      "endDate" : "2018/10/31",
      "invoiceId" : "201810",
      "location" : "品川",
      "startDate" : "2018/10/01",
      "tax" : 0.08,
      "totalAmount" : 1080000,
      "userid" : "1"
    }, {
      "comment" : "特になし",
      "companyId" : "3",
      "content" : "システム開発",
      "detail" : [ {
        "Unit" : "円",
        "name" : "a",
        "price" : 550000,
        "time" : "1人月"
      }, {
        "Unit" : "円",
        "name" : "b",
        "price" : 450000,
        "time" : "1人月"
      } ],
      "endDate" : "2018/10/31",
      "invoiceId" : "201810",
      "location" : "品川",
      "startDate" : "2018/10/01",
      "tax" : 0.08,
      "totalAmount" : 1080000,
      "userid" : "1"
    } ],
    "err_code" : 0,
    "err_msg" : "success"
  },
  "refresh_timeline" : {
    "data" : [ {
      "avatar" : "5",
      "comment_count" : 0,
      "created_at" : "1504784104",
      "id" : "48",
      "like_count" : 0,
      "nickname" : "Nicole Sobon",
      "original_pic" : "",
      "text" : "Sometimes the hardest part isn't letting go, but rather, learning to start over."
    }, {
      "avatar" : "2",
      "comment_count" : 0,
      "created_at" : "1504783664",
      "id" : "47",
      "like_count" : 0,
      "nickname" : "Indira Gandhi",
      "original_pic" : "https://loremflickr.com/1000/700/nature?lock=1",
      "text" : "Opportunities are not offered. They must be wrested and worked for. And this calls for perseverance and courage."
    }, {
      "avatar" : "1",
      "comment_count" : 2,
      "created_at" : "1504781208",
      "id" : "46",
      "like_count" : 1,
      "nickname" : "Sally Nicholls",
      "original_pic" : "",
      "text" : "There's no point having wishes if you don't at least try to do them.https://twitter.com"
    }, {
      "avatar" : "7",
      "comment_count" : 0,
      "created_at" : "1504781124",
      "id" : "45",
      "like_count" : 0,
      "nickname" : "Dale Carnegie",
      "original_pic" : "https://loremflickr.com/1000/700/nature?lock=3",
      "text" : "Remember, happiness doesn't depend upon who you are or what you have; it depends solely upon what you think."
    }, {
      "avatar" : "3",
      "comment_count" : 0,
      "created_at" : "1504780946",
      "id" : "44",
      "like_count" : 0,
      "nickname" : "Ted Mosby",
      "original_pic" : "",
      "text" : "Sometimes things have to fall apart to make way for better things."
    }, {
      "avatar" : "5",
      "comment_count" : 0,
      "created_at" : "1504779710",
      "id" : "43",
      "like_count" : 0,
      "nickname" : "Tim Howard",
      "original_pic" : "https://loremflickr.com/70/70/nature?lock=5",
      "text" : "It's not about making the amazing saves. It's the little things and small things that made great gatekeepers great."
    }, {
      "avatar" : "7",
      "comment_count" : 0,
      "created_at" : "1504779092",
      "id" : "42",
      "like_count" : 0,
      "nickname" : "Max Lerner",
      "original_pic" : "",
      "text" : "The turning point in the process of growing up is when you discover the core of strength within you that survives all hurt."
    } ],
    "err_code" : 0,
    "err_msg" : "success"
  },
  "reports" : {
    "data" : [ {
      "companyId" : "1",
      "dateMonth" : "2018/10",
      "total" : 172,
      "userid" : "1",
      "workdetail" : [ {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/01",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/02",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/03",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/04",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/05",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "",
        "content" : "",
        "date" : "2018/10/06",
        "endTime" : "",
        "startTime" : ""
      }, {
        "break" : "",
        "content" : "",
        "date" : "2018/10/07",
        "endTime" : "",
        "startTime" : ""
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/08",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/09",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/10",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/11",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/12",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "",
        "content" : "",
        "date" : "2018/10/13",
        "endTime" : "",
        "startTime" : ""
      }, {
        "break" : "",
        "content" : "",
        "date" : "2018/10/14",
        "endTime" : "",
        "startTime" : ""
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/15",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/16",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/17",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/18",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/19",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "",
        "content" : "",
        "date" : "2018/10/20",
        "endTime" : "",
        "startTime" : ""
      }, {
        "break" : "",
        "content" : "",
        "date" : "2018/10/21",
        "endTime" : "",
        "startTime" : ""
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/22",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/23",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/24",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/25",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/26",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "",
        "content" : "",
        "date" : "2018/10/27",
        "endTime" : "",
        "startTime" : ""
      }, {
        "break" : "",
        "content" : "",
        "date" : "2018/10/28",
        "endTime" : "",
        "startTime" : ""
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/29",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/30",
        "endTime" : "19:00",
        "startTime" : "9:00"
      }, {
        "break" : "1:00",
        "content" : "システム開発",
        "date" : "2018/10/31",
        "endTime" : "19:00",
        "startTime" : "9:00"
      } ]
    } ],
    "err_code" : 0,
    "err_msg" : "success"
  },
  "room-messages" : {
    "-LbpDP3nLIekOaNV6i9R" : {
      "-Lbz6BqsfiRMQSNY5FlI" : {
        ".priority" : 1.554763271916E12,
        "message" : "test message",
        "name" : "test1",
        "timestamp" : 1554763271916,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-qutezZa6KGRSqV2a" : {
        ".priority" : 1.554792558355E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554792558355,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-rGEhSY3vQ58qgjWG" : {
        ".priority" : 1.554792650678E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554792650678,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-rl_isGtyeGz7luC-" : {
        ".priority" : 1.554792782327E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554792782327,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-uITy9CACDfU3ghdy" : {
        ".priority" : 1.554793445449E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554793445449,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-uaMGwSf_PTcocZ_B" : {
        ".priority" : 1.55479352278E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554793522780,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-uiUWuuNIBLbgRIgH" : {
        ".priority" : 1.554793556074E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554793556074,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-v34zBASISWQsJhKu" : {
        ".priority" : 1.554793644552E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554793644552,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-vOdYE-xrd0W1exe1" : {
        ".priority" : 1.554793732878E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554793732878,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-vlR74jnOpP05UdxP" : {
        ".priority" : 1.554793830324E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554793830324,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-vvv5h90HWvVgcDIS" : {
        ".priority" : 1.554793873229E12,
        "message" : "this.text",
        "name" : "test1",
        "timestamp" : 1554793873229,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc-whV-cdlmrlzCXRlL" : {
        ".priority" : 1.554794076296E12,
        "message" : "ffff",
        "name" : "test1",
        "timestamp" : 1554794076296,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc03SgBAbIUN9UJVwzv" : {
        ".priority" : 1.554796108693E12,
        "message" : "123",
        "name" : "test1",
        "timestamp" : 1554796108693,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc03VTZbY8BJ6CbFDTJ" : {
        ".priority" : 1.554796120114E12,
        "message" : "333",
        "name" : "test1",
        "timestamp" : 1554796120114,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1Ii9yP0Amiu_np5EO" : {
        ".priority" : 1.554816885686E12,
        "message" : "sss",
        "name" : "test1",
        "timestamp" : 1554816885686,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1PnQ4ElEATAntoR2n" : {
        ".priority" : 1.554818742246E12,
        "message" : "sss",
        "name" : "test1",
        "timestamp" : 1554818742246,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1Qt3QT4IThIzPl7e4" : {
        ".priority" : 1.554819027686E12,
        "message" : "test",
        "name" : "test1",
        "timestamp" : 1554819027686,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1REfFh2CxCnr7bsnu" : {
        ".priority" : 1.554819120296E12,
        "message" : "window",
        "name" : "test1",
        "timestamp" : 1554819120296,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1RUwSymUWT55LAfp_" : {
        ".priority" : 1.554819186726E12,
        "message" : "sss",
        "name" : "test1",
        "timestamp" : 1554819186726,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1UkrPXGWMfcU-dFIo" : {
        ".priority" : 1.554820042445E12,
        "message" : "xxx",
        "name" : "test1",
        "timestamp" : 1554820042445,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1Uw4O9tjaOTgrPqB4" : {
        ".priority" : 1.554820088526E12,
        "message" : "vvv",
        "name" : "test1",
        "timestamp" : 1554820088526,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1Wurv-2TLvkB1NCm1" : {
        ".priority" : 1.554820607726E12,
        "message" : "www",
        "name" : "test1",
        "timestamp" : 1554820607726,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1X-71vWTyw31ijZuE" : {
        ".priority" : 1.554820629235E12,
        "message" : "wwww",
        "name" : "test1",
        "timestamp" : 1554820629235,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1XHMFH6t7gUMIM2O1" : {
        ".priority" : 1.554820703935E12,
        "message" : "sss",
        "name" : "test1",
        "timestamp" : 1554820703935,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc1XNRv9g2lUYPTbJkf" : {
        ".priority" : 1.554820728946E12,
        "message" : "www",
        "name" : "test1",
        "timestamp" : 1554820728946,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc348s0Qg7e6caMSrd9" : {
        ".priority" : 1.554846621411E12,
        "message" : "sss",
        "name" : "test1",
        "timestamp" : 1554846621411,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc34gu98khx6dIKwolr" : {
        ".priority" : 1.554846764912E12,
        "message" : "eee",
        "name" : "test1",
        "timestamp" : 1554846764912,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc35a7aubU08uhzhdJu" : {
        ".priority" : 1.554846999311E12,
        "message" : "life",
        "name" : "test2",
        "timestamp" : 1554846999311,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc37Y0lHmFX1wjZGOrw" : {
        ".priority" : 1.554847510872E12,
        "message" : "sss",
        "name" : "test2",
        "timestamp" : 1554847510872,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc37nTIUxaqkkN0ei-K" : {
        ".priority" : 1.554847578391E12,
        "message" : "zzz",
        "name" : "test2",
        "timestamp" : 1554847578391,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc3BAcN0nlPltZkdgCz" : {
        ".priority" : 1.554848463771E12,
        "message" : "www",
        "name" : "test2",
        "timestamp" : 1554848463771,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc3BENo17qULUs8HOL6" : {
        ".priority" : 1.554848479151E12,
        "message" : "rrr",
        "name" : "test2",
        "timestamp" : 1554848479151,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc3BKuYu01OczPj7lwx" : {
        ".priority" : 1.554848505891E12,
        "message" : "33333",
        "name" : "test2",
        "timestamp" : 1554848505891,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc3BQnbzQ6W27mYg8aA" : {
        ".priority" : 1.554848530031E12,
        "message" : "444",
        "name" : "test2",
        "timestamp" : 1554848530031,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc3Fdy2vCSVkh_ikR8L" : {
        ".priority" : 1.554849636641E12,
        "message" : "www",
        "name" : "test2",
        "timestamp" : 1554849636641,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc3Fltrtq41wvbuz8Lw" : {
        ".priority" : 1.554849669142E12,
        "message" : "33",
        "name" : "test2",
        "timestamp" : 1554849669142,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc4UTpPAEYSEprdc1Y8" : {
        ".priority" : 1.554870300132E12,
        "message" : "sss",
        "name" : "test2",
        "timestamp" : 1554870300132,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc4UWMjcd9ZHUEGpn08" : {
        ".priority" : 1.55487031053E12,
        "message" : "www",
        "name" : "test2",
        "timestamp" : 1554870310530,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc4Udk2BZTwL6wqeTca" : {
        ".priority" : 1.554870344847E12,
        "message" : "hello",
        "name" : "test2",
        "timestamp" : 1554870344847,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc4UrQ-1sT_sK6I_ddB" : {
        ".priority" : 1.554870400925E12,
        "message" : "wwww",
        "name" : "test1",
        "timestamp" : 1554870400925,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc4UuSebj4CshWNXvvV" : {
        ".priority" : 1.55487041351E12,
        "message" : "kkk",
        "name" : "test1",
        "timestamp" : 1554870413510,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc4Uz-smpDmqFzzOWPn" : {
        ".priority" : 1.554870431956E12,
        "message" : "www",
        "name" : "test1",
        "timestamp" : 1554870431956,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc4V-IDez8dzpZe0v6i" : {
        ".priority" : 1.554870437242E12,
        "message" : "eee",
        "name" : "test1",
        "timestamp" : 1554870437242,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc4VS3hh_tUo8eNqGwp" : {
        ".priority" : 1.554870555065E12,
        "message" : "www",
        "name" : "test1",
        "timestamp" : 1554870555065,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc4ywIMwD5xc8tFUnvY" : {
        ".priority" : 1.5548785473E12,
        "message" : "在 下雨",
        "name" : "test1",
        "timestamp" : 1554878547300,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc4z55iOhyYmJc6bTKa" : {
        ".priority" : 1.554878587449E12,
        "message" : "是的",
        "name" : "test2",
        "timestamp" : 1554878587449,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc4z7jSc2zx8SXGvuON" : {
        ".priority" : 1.554878598248E12,
        "message" : "OK",
        "name" : "test2",
        "timestamp" : 1554878598248,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc4z8t9Dgc5sSqTlZbO" : {
        ".priority" : 1.554878602962E12,
        "message" : "あなた",
        "name" : "test1",
        "timestamp" : 1554878602962,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc4zFYGxLM8ditcxiGR" : {
        ".priority" : 1.554878630899E12,
        "message" : "牛了",
        "name" : "test2",
        "timestamp" : 1554878630899,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc4zPZLEOVCdtTL8Dcd" : {
        ".priority" : 1.554878671262E12,
        "message" : "what 是那么ものだ",
        "name" : "test1",
        "timestamp" : 1554878671262,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc4zyYfffBIlfqKzU3F" : {
        ".priority" : 1.554878818685E12,
        "message" : "是大大",
        "name" : "test2",
        "timestamp" : 1554878818685,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc5-2sgpsOsdi3-f9WC" : {
        ".priority" : 1.554878840489E12,
        "message" : "压顶  顶替 枯无可奈何花落去枯无可奈何地",
        "name" : "test2",
        "timestamp" : 1554878840489,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc5-4pEiv6j9qLuECGf" : {
        ".priority" : 1.554878848767E12,
        "message" : "324234234",
        "name" : "test2",
        "timestamp" : 1554878848767,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc5-Qmgimm3mSDytTHk" : {
        ".priority" : 1.554878938422E12,
        "message" : "he",
        "name" : "test1",
        "timestamp" : 1554878938422,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc50Uj0pSTroAtb0PcW" : {
        ".priority" : 1.554879216688E12,
        "message" : "554456456",
        "name" : "test2",
        "timestamp" : 1554879216688,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-Lc52taT3Cx7SWTbrqIu" : {
        ".priority" : 1.554879846955E12,
        "message" : "哒哒哒vwダミーいい",
        "name" : "test1",
        "timestamp" : 1554879846955,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc9e6vZ5MGnqHn5k4ab" : {
        ".priority" : 1.554956976121E12,
        "message" : "大家好！欢迎👏大家使用本系统",
        "name" : "test1",
        "timestamp" : 1554956976121,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lc9eJWD8lqt1QlfHsWE" : {
        ".priority" : 1.554957027665E12,
        "message" : "本系统还有一些问题，请大家多多包涵！",
        "name" : "test1",
        "timestamp" : 1554957027665,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LcJbU6Fn6LWU0tsBfv_" : {
        ".priority" : 1.555124056662E12,
        "message" : "test",
        "name" : "test1",
        "timestamp" : 1555124056662,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LcJboA8Wuy5GPFr3Fn9" : {
        ".priority" : 1.555124142961E12,
        "message" : "Hello",
        "name" : "test2",
        "timestamp" : 1555124142961,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-LcJbx3Am8Pi2HUhjo5V" : {
        ".priority" : 1.555124179388E12,
        "message" : "What are you dining",
        "name" : "test2",
        "timestamp" : 1555124179388,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-LcJh-4WK-igvbPcTj0u" : {
        ".priority" : 1.555125502632E12,
        "message" : "hi",
        "name" : "test1",
        "timestamp" : 1555125502632,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LcJh0gGMAOx99C4ifJ-" : {
        ".priority" : 1.555125509101E12,
        "message" : "Hello",
        "name" : "test2",
        "timestamp" : 1555125509101,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-LcJh6B6d9KDqQqBeloU" : {
        ".priority" : 1.555125531727E12,
        "message" : "🐸",
        "name" : "test1",
        "timestamp" : 1555125531727,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LcJh87c5vbWHx1JiM8M" : {
        ".priority" : 1.555125539581E12,
        "message" : "🌹",
        "name" : "test2",
        "timestamp" : 1555125539581,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-LcJhFcmXgexgdvG6zNS" : {
        ".priority" : 1.555125570442E12,
        "message" : "😊",
        "name" : "test1",
        "timestamp" : 1555125570442,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LcsQX8AW6XVfGbtosY2" : {
        ".priority" : 1.555724903417E12,
        "message" : "你好",
        "name" : "test2",
        "timestamp" : 1555724903417,
        "type" : "messageType",
        "userId" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
      },
      "-LdLm-WhFaIqh3ms7VOB" : {
        ".priority" : 1.5562341113E12,
        "message" : "大家好！本系统开发将优先发布海威学习模块，该模块即将进入测试阶段。明天学习会详细和大家讲解！",
        "name" : "test1",
        "timestamp" : 1556234111300,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LdO9NQDGw8l5w8xfWA8" : {
        ".priority" : 1.556274055005E12,
        "message" : "wqeqeqwe",
        "name" : "test1",
        "timestamp" : 1556274055005,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LdO9Of7XCqP8siD8cVk" : {
        ".priority" : 1.556274060117E12,
        "message" : "qweqweqwe",
        "name" : "test1",
        "timestamp" : 1556274060117,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LdPIWGx0DTubHil8OQK" : {
        ".priority" : 1.556293227965E12,
        "message" : "行",
        "name" : "tei952",
        "timestamp" : 1556293227965,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LdSWuiIhfkW7WGoX3ov" : {
        ".priority" : 1.556347333633E12,
        "message" : "qweqweqw",
        "name" : "test1",
        "timestamp" : 1556347333633,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LdSqjSwKYGsGkwjq0AU" : {
        ".priority" : 1.556352792746E12,
        "message" : "l",
        "name" : "hally601",
        "timestamp" : 1556352792746,
        "type" : "messageType",
        "userId" : "icC70eXYlkOrVQayAOrPo0Os7is2"
      },
      "-LdYe6BVznurbL64NKzk" : {
        ".priority" : 1.556450145422E12,
        "message" : "测试",
        "name" : "test1",
        "timestamp" : 1556450145422,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LdsVbCINPZJVMJfSyRv" : {
        ".priority" : 1.556799976476E12,
        "message" : "１１１",
        "name" : "test1",
        "timestamp" : 1556799976476,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      }
    },
    "-LdZLabGR1N_h0cosQNI" : {
      "-LdZLkytk_-RSEtTN9VV" : {
        ".priority" : 1.556461850756E12,
        "message" : "hello",
        "name" : "test1",
        "timestamp" : 1556461850756,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LdZLz8oeDXMPIu_EwtM" : {
        ".priority" : 1.556461908796E12,
        "message" : "Thank you",
        "name" : "tei952",
        "timestamp" : 1556461908796,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LdZRdfWX9k-arAZ6_-b" : {
        ".priority" : 1.556463394656E12,
        "message" : "测试在评论时发消息通知",
        "name" : "tei952",
        "timestamp" : 1556463394656,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LdZV1VF2pc5BGxMv-Lt" : {
        ".priority" : 1.55646428235E12,
        "message" : "ありがとうございました。",
        "name" : "tei952",
        "timestamp" : 1556464282350,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-Ldpr7BnNFjy3FITXJue" : {
        ".priority" : 1.556755547145E12,
        "message" : "请告诉我答案",
        "name" : "tei952",
        "timestamp" : 1556755547145,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LdsVgc6cM3G4uiM4efI" : {
        ".priority" : 1.556799998686E12,
        "message" : "HELLO",
        "name" : "test1",
        "timestamp" : 1556799998686,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Ldv9-Sdub6cT9i9tDET" : {
        ".priority" : 1.556844382269E12,
        "message" : "",
        "name" : "tei952",
        "timestamp" : 1556844382269,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-Ldv9JgQkZroRermQQ9j" : {
        ".priority" : 1.55684446513E12,
        "message" : "你好！",
        "name" : "tei952",
        "timestamp" : 1556844465130,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LefQundB1mWKDyStMSA" : {
        ".priority" : 1.557654384118E12,
        "message" : "大家好！目前在陆续进行课程登录测试",
        "name" : "tei952",
        "timestamp" : 1557654384118,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LefRAhkbRz-Bp6w4dVh" : {
        ".priority" : 1.55765445338E12,
        "message" : "有问题大家请即时报告",
        "name" : "tei952",
        "timestamp" : 1557654453380,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqG8bxClzQcpT_NCoz" : {
        ".priority" : 1.557836110522E12,
        "message" : "测试20190514",
        "name" : "tei952",
        "timestamp" : 1557836110522,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqGQ3fec1aTA4Q6HY1" : {
        ".priority" : 1.557836182011E12,
        "message" : "这个问题能否解决？",
        "name" : "tei952",
        "timestamp" : 1557836182011,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqHQJbMp14-a23IV_O" : {
        ".priority" : 1.557836445478E12,
        "message" : "1.图片背景透明处理，2、按钮大小统一，3、学习提问指名课程名称和编号，4、学习时未选默认第一节，5、用户登录画面完善",
        "name" : "tei952",
        "timestamp" : 1557836445478,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqHaIUyRp7bezEO2-T" : {
        ".priority" : 1.55783649029E12,
        "message" : "6、聊天问题改进",
        "name" : "tei952",
        "timestamp" : 1557836490290,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqHhGlAmH76GTfXO2m" : {
        ".priority" : 1.557836518913E12,
        "message" : "7、新闻图片发布问题",
        "name" : "tei952",
        "timestamp" : 1557836518913,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqHqvsaleUOob2XI2F" : {
        ".priority" : 1.557836558282E12,
        "message" : "8、证书发行功能完成",
        "name" : "tei952",
        "timestamp" : 1557836558282,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqI1om6OMlnzhkk9uQ" : {
        ".priority" : 1.557836607003E12,
        "message" : "9、课程导入和测试",
        "name" : "tei952",
        "timestamp" : 1557836607003,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqIDVRp4K3nqBU3PGI" : {
        ".priority" : 1.557836654841E12,
        "message" : "10、测试期间去掉确认环节",
        "name" : "tei952",
        "timestamp" : 1557836654841,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqIbmZkucFKdMl8ZmV" : {
        ".priority" : 1.557836758394E12,
        "message" : "这是目前10大问题，期待能早日解决",
        "name" : "tei952",
        "timestamp" : 1557836758394,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqIu4wfns55CdczdNq" : {
        ".priority" : 1.557836833517E12,
        "message" : "本系统6月开始内部测试，7月以后进入外部测试",
        "name" : "tei952",
        "timestamp" : 1557836833517,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqJ5Y_iQrRZ9aPluQx" : {
        ".priority" : 1.557836884575E12,
        "message" : "11.返回按钮功能不正",
        "name" : "tei952",
        "timestamp" : 1557836884575,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqJD9c0urNiXbqQmUR" : {
        ".priority" : 1.557836915725E12,
        "message" : "12.学习到最后一页无法记录",
        "name" : "tei952",
        "timestamp" : 1557836915725,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqJOGPoVm7rzxt83Gs" : {
        ".priority" : 1.55783696107E12,
        "message" : "13、youtube、flash、audio等功能未实现",
        "name" : "tei952",
        "timestamp" : 1557836961070,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqJbFk0Og_1SYGJDNf" : {
        ".priority" : 1.55783701836E12,
        "message" : "14、首页加入热门课程",
        "name" : "tei952",
        "timestamp" : 1557837018360,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqJiu4aML-2jst7WQL" : {
        ".priority" : 1.557837049828E12,
        "message" : "15、首页加入用户使用说明",
        "name" : "tei952",
        "timestamp" : 1557837049828,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqJtT2UNzexUUXQS77" : {
        ".priority" : 1.557837092935E12,
        "message" : "16、登录页面加上系统名称和语言选择",
        "name" : "tei952",
        "timestamp" : 1557837092935,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqYCkOpCwKwJwJtjTi" : {
        ".priority" : 1.557840846182E12,
        "message" : "Angularシステム開発入門\\2.0 Node.js\\评论测试20190514",
        "name" : "tei952",
        "timestamp" : 1557840846182,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LeqYTBS_Mr3cwDaqnDe" : {
        ".priority" : 1.557840913517E12,
        "message" : "看不见最后的记录",
        "name" : "tei952",
        "timestamp" : 1557840913517,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LevZUY0LCAGIu9npCPY" : {
        ".priority" : 1.557925067141E12,
        "message" : "1-4已经解决，13部分解决，需进一步测试",
        "name" : "test1",
        "timestamp" : 1557925067141,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LevZkWa10CC0MrZJZgk" : {
        ".priority" : 1.557925136789E12,
        "message" : "目前老师无法进入学习界面，回答学生问题",
        "name" : "test1",
        "timestamp" : 1557925136789,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lev_JIIbfyuwz3JDflF" : {
        ".priority" : 1.557925283374E12,
        "message" : "目前每天增加一门课程，欢迎参与测试的朋友学习体验",
        "name" : "test1",
        "timestamp" : 1557925283374,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lext71lQzaKqPAzQvLv" : {
        ".priority" : 1.557964030361E12,
        "message" : "课程申请处写的是老师的名称",
        "name" : "tei952",
        "timestamp" : 1557964030361,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-Lf-npX5hvwhzZD8PIm2" : {
        ".priority" : 1.558012975544E12,
        "message" : "今天增加了springframework和springboot相关课程。python课程只能显示第一页。springboot中XML文件无法正常显示。",
        "name" : "test1",
        "timestamp" : 1558012975544,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lf1sXWy8SVcELZoueYm" : {
        ".priority" : 1.558047762785E12,
        "message" : "python课程已经可以学习了",
        "name" : "test1",
        "timestamp" : 1558047762785,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LfMVO3tCJo-PMhjiZOL" : {
        ".priority" : 1.558393754262E12,
        "message" : "人工智能方面增加了Mikit课程和tensorflow.js课程，欢迎大家学习参考",
        "name" : "test1",
        "timestamp" : 1558393754262,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LfRcCobSOvZCUbXxpe3" : {
        ".priority" : 1.558479691266E12,
        "message" : "广告，YouTube的功能基本实现，聊天不连续问题已经解决，另外画面导航问题也以解决",
        "name" : "tei952",
        "timestamp" : 1558479691266,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LfRcOD4d9-W1ZnxxvTa" : {
        ".priority" : 1.558479737938E12,
        "message" : "Angularシステム開発入門\\4.0 Angular CLI\\测试",
        "name" : "tei952",
        "timestamp" : 1558479737938,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LfRdZGILuflw4lDmUDa" : {
        ".priority" : 1.558480045537E12,
        "message" : "申请确认要建聊天室，这个问题需要测试和确认，另外7、8两项问题后期重点解决",
        "name" : "tei952",
        "timestamp" : 1558480045537,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LfU5sMRclNVa1vrB8JH" : {
        ".priority" : 1.558521284288E12,
        "message" : "更新知识的时候显示增加",
        "name" : "tei952",
        "timestamp" : 1558521284288,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LfU63DeRNm3Y2zkqcA3" : {
        ".priority" : 1.558521332906E12,
        "message" : "flash页面增加是显示图片上传",
        "name" : "tei952",
        "timestamp" : 1558521332906,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      },
      "-LfWp4X2jKiERFjoYc8c" : {
        ".priority" : 1.558566951412E12,
        "message" : "音频，图片，广告，多项选择已经测试完成，大家可以创建这些类型学习内容了",
        "name" : "test1",
        "timestamp" : 1558566951412,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-LfZWJXA1QiSiY2tVy-G" : {
        ".priority" : 1.558612101652E12,
        "message" : "刚改好新闻，可以发图片了",
        "name" : "test1",
        "timestamp" : 1558612101652,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      },
      "-Lfhoa1ApQWAzTpsFlfO" : {
        ".priority" : 1.558768148761E12,
        "message" : "ｓｓｓ",
        "name" : "test1",
        "timestamp" : 1558768148761,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      }
    },
    "-LflYUB34LC-UmMllL-N" : {
      "-LflYgTX6MWluIJNVg-8" : {
        ".priority" : 1.558830827657E12,
        "message" : "hello ,問題対応完了しました。",
        "name" : "test1",
        "timestamp" : 1558830827657,
        "type" : "messageType",
        "userId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1"
      }
    },
    "-Lg-sWfwAz0Y28V8Q-dy" : {
      "-Lg-sq0aIjqXfdT8WBOn" : {
        ".priority" : 1.559088030006E12,
        "message" : "你好",
        "name" : "tei952",
        "timestamp" : 1559088030006,
        "type" : "messageType",
        "userId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2"
      }
    }
  },
  "room-metadata" : {
    "-LbpDP3nLIekOaNV6i9R" : {
      "authorizedUsers" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : true
      },
      "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
      "createdAt" : 1554597388817,
      "createdByUserId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
      "createdByUserName" : "test1",
      "header" : "A",
      "id" : "-LbpDP3nLIekOaNV6i9R",
      "location" : "Tokyo",
      "name" : "test2",
      "type" : "private"
    },
    "-LdZLabGR1N_h0cosQNI" : {
      "authorizedUsers" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : true
      },
      "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
      "createdAt" : 1556461808316,
      "createdByUserId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
      "createdByUserName" : "test1",
      "header" : "A",
      "id" : "-LdZLabGR1N_h0cosQNI",
      "location" : "Tokyo",
      "name" : "tei952",
      "type" : "private"
    },
    "-LflYUB34LC-UmMllL-N" : {
      "authorizedUsers" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : true
      },
      "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
      "createdAt" : 1558830773237,
      "createdByUserId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
      "createdByUserName" : "test1",
      "header" : "M",
      "id" : "-LflYUB34LC-UmMllL-N",
      "location" : "Knowledge",
      "name" : "Meiyou",
      "type" : "private"
    },
    "-LfltqWWYNQNsblL4ET1" : {
      "authorizedUsers" : {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1" : true
      },
      "avatar" : "SltouNWndEXkvLg3nCWCiHXdmnx1",
      "createdAt" : 1558836635958,
      "createdByUserId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
      "createdByUserName" : "test1",
      "header" : "T",
      "id" : "-LfltqWWYNQNsblL4ET1",
      "location" : "Knowledge",
      "name" : "test3",
      "type" : "private"
    },
    "-Lg-sWfwAz0Y28V8Q-dy" : {
      "authorizedUsers" : {
        "iHmcxnnRDWPOJAE38On1nCdq0ir2" : true
      },
      "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
      "createdAt" : 1559087947246,
      "createdByUserId" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
      "createdByUserName" : "tei952",
      "header" : "M",
      "id" : "-Lg-sWfwAz0Y28V8Q-dy",
      "location" : "Knowledge",
      "name" : "Meiyou",
      "type" : "private"
    }
  },
  "room-users" : {
    "-LbpDP3nLIekOaNV6i9R" : {
      "iHmcxnnRDWPOJAE38On1nCdq0ir2" : {
        "-Lfdxs9pvVtcE4i4bkfi" : {
          "id" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "name" : "tei952"
        }
      }
    },
    "-LdZLabGR1N_h0cosQNI" : {
      "iHmcxnnRDWPOJAE38On1nCdq0ir2" : {
        "-Lfdxs9pvVtcE4i4bkfi" : {
          "id" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "name" : "tei952"
        }
      }
    }
  },
  "talents" : {
    "data" : {
      "-LbW06_C0f7YZbS0UVec" : {
        "Fax" : "1",
        "HP" : "1",
        "Manager" : "1",
        "Tel" : "1",
        "address" : "11",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554258360796,
        "id" : "-LbW06_C0f7YZbS0UVec",
        "industry" : "1",
        "like_count" : 0,
        "name" : "test talent2",
        "nickname" : "test1",
        "photo" : "",
        "talenttype" : "1",
        "update_at" : 1554258361238
      },
      "-LbYXsmSycY_ip8MMMCF" : {
        "Fax" : "ddd",
        "HP" : "sss",
        "Manager" : "sss",
        "Tel" : "ddd",
        "address" : "dsdd",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554300768882,
        "id" : "-LbYXsmSycY_ip8MMMCF",
        "industry" : "2",
        "like_count" : 0,
        "name" : "sss",
        "nickname" : "test1",
        "talenttype" : "1"
      },
      "-LbloZda0z9U_gs11lT9" : {
        "Fax" : "dsdsds",
        "HP" : "ssss",
        "Manager" : "sss",
        "Tel" : "sdss",
        "address" : "sss",
        "application_count" : 0,
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554540284663,
        "id" : "-LbloZda0z9U_gs11lT9",
        "like_count" : 0,
        "name" : "ssss",
        "nickname" : "test1",
        "talenttype" : "1"
      }
    }
  },
  "timeline" : {
    "data" : [ {
      "avatar" : "1",
      "comment_count" : 2,
      "created_at" : "1504709434",
      "id" : "41",
      "like_count" : 1,
      "nickname" : "Bob Brown",
      "original_pic" : "",
      "text" : "Behind every successful man there's a lot u unsuccessful years. https://www.google.com/"
    }, {
      "avatar" : "7",
      "comment_count" : 0,
      "created_at" : "1504708544",
      "id" : "40",
      "like_count" : 0,
      "nickname" : "Jean Kerr",
      "original_pic" : "",
      "text" : "I think success has no rules, but you can learn a lot from failure. "
    }, {
      "avatar" : "3",
      "comment_count" : 2,
      "created_at" : "1504708455",
      "id" : "39",
      "like_count" : 0,
      "nickname" : "Colin L. Powell",
      "original_pic" : "",
      "text" : "There are no secrets to success. It is the result of preparation, hard work, and learning from failure. www.youtube.com "
    }, {
      "avatar" : "5",
      "comment_count" : 0,
      "created_at" : "1504707590",
      "id" : "38",
      "like_count" : 2,
      "nickname" : "Balzac",
      "original_pic" : "https://loremflickr.com/1000/700/nature?lock=5",
      "text" : "There is no such thing as a great talent without great will - power."
    }, {
      "avatar" : "7",
      "comment_count" : 0,
      "created_at" : "1504707580",
      "id" : "37",
      "like_count" : 0,
      "nickname" : "Charles Chaplin",
      "original_pic" : "",
      "text" : "You have to believe in yourself. That's the secret of success."
    }, {
      "avatar" : "4",
      "comment_count" : 1,
      "created_at" : "1504707197",
      "id" : "36",
      "like_count" : 0,
      "nickname" : "R.M. Nixon",
      "original_pic" : "",
      "text" : "Our destiny offers not the cup of despair, but the chalice of opportunity. So let us seize it, not in fear, but in gladness."
    }, {
      "avatar" : "8",
      "comment_count" : 0,
      "created_at" : "1504706070",
      "id" : "35",
      "like_count" : 1,
      "nickname" : "Erasmus",
      "original_pic" : "https://loremflickr.com/1000/700/nature?lock=3",
      "text" : "None is of freedom or of life deserving unless he daily conquers it anew."
    }, {
      "avatar" : "3",
      "comment_count" : 0,
      "created_at" : "1504706060",
      "id" : "34",
      "like_count" : 0,
      "nickname" : "John Ruskin",
      "original_pic" : "",
      "text" : "Living without an aim is like sailing without a compass."
    }, {
      "avatar" : "6",
      "comment_count" : 0,
      "created_at" : "1504705260",
      "id" : "33",
      "like_count" : 0,
      "nickname" : "George Eliot",
      "original_pic" : "https://loremflickr.com/1000/700/nature?lock=7",
      "text" : "What makes life dreary is the want of motive."
    }, {
      "avatar" : "6",
      "comment_count" : 1,
      "created_at" : "1504705240",
      "id" : "32",
      "like_count" : 1,
      "nickname" : "Lincoln",
      "original_pic" : "",
      "text" : "Towering genius disdains a beaten path. It seeks regions hitherto unexplored."
    }, {
      "avatar" : "10",
      "comment_count" : 1,
      "created_at" : "1504705133",
      "id" : "31",
      "like_count" : 2,
      "nickname" : "Erasmus",
      "original_pic" : "",
      "text" : "None is of freedom or of life deserving unless he daily conquers it anew. "
    }, {
      "avatar" : "8",
      "comment_count" : 0,
      "created_at" : "1504704742",
      "id" : "30",
      "like_count" : 0,
      "nickname" : "Thomas Addison",
      "original_pic" : "",
      "text" : "A strong man will struggle with the storms of fate."
    } ],
    "err_code" : 0,
    "err_msg" : "success"
  },
  "tools" : {
    "data" : {
      "-LbW07QDVIQO5CWJ6-Xy" : {
        "Fax" : "1",
        "HP" : "1",
        "Manager" : "1",
        "Tel" : "1",
        "address" : "11",
        "application_count" : 1,
        "applications" : {
          "-LbfMRTfKye_3sxDm8Mp" : {
            "id" : "-LbfMRTfKye_3sxDm8Mp",
            "text" : "xss",
            "time" : 1554431985720,
            "toolid" : "-LbW07QDVIQO5CWJ6-Xy"
          }
        },
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554258364254,
        "id" : "-LbW07QDVIQO5CWJ6-Xy",
        "industry" : "1",
        "like_count" : 1,
        "likes" : {
          "-LckQx7fB4yet8qrIZz9" : {
            "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
            "id" : "-LckQx7fB4yet8qrIZz9",
            "name" : "test2",
            "time" : 1555590796040,
            "toolid" : "-LbW07QDVIQO5CWJ6-Xy"
          }
        },
        "name" : "test tool2",
        "nickname" : "test1",
        "photo" : "",
        "tooltype" : "1",
        "update_at" : 1554258364678
      },
      "-LbYZjcGci7H_jDGoD-F" : {
        "Fax" : "sss",
        "HP" : "sss",
        "Manager" : "sss",
        "Tel" : "sss",
        "address" : "sss",
        "application_count" : 0,
        "area" : "1",
        "avatar" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
        "created_at" : 1554301255816,
        "id" : "-LbYZjcGci7H_jDGoD-F",
        "industry" : "2",
        "like_count" : 1,
        "likes" : {
          "-LckQynkxnRgHHZeqDf3" : {
            "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
            "id" : "-LckQynkxnRgHHZeqDf3",
            "name" : "test2",
            "time" : 1555590802881,
            "toolid" : "-LbYZjcGci7H_jDGoD-F"
          }
        },
        "name" : "sss",
        "nickname" : "test1",
        "tooltype" : "1"
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "user_login" : {
    "data" : {
      "sid" : "e651771fe37dc17c17421331a87721",
      "user" : {
        "avatar_url" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/android-icon-xxhdpi-144x144.png?alt=media&token=d6e43d58-52c6-4ed6-ac2d-d68072d5a12a",
        "gender" : "m",
        "id" : 10001,
        "location" : "Tokyo",
        "login_name" : "wohapp@highwayns.com",
        "nick_name" : "wohApp",
        "points" : 267
      }
    },
    "err_code" : 0,
    "err_msg" : "success"
  },
  "users" : {
    "4MHc583pZYafkhamCo7Pvh4q6JN2" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
      "location" : "",
      "login_name" : "tangzitong@163.com",
      "name" : "Meiyou",
      "photo" : "",
      "points" : 0
    },
    "CIxg5db1wHWTu1eeymVp4EkLzfg1" : {
      "avatar_url" : "",
      "company_count" : 8,
      "consultant_count" : 2,
      "contact_count" : 0,
      "dispatcher_count" : 2,
      "event_count" : 2,
      "gender" : "",
      "id" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
      "job_count" : 6,
      "knowledge_count" : 3,
      "learnings" : {
        "-LbW07Cj8C37LDyZeKHF" : {
          "LearningStatus" : true,
          "approval_at" : 1556488258616,
          "contentOrd" : "2"
        },
        "-LbYZZXvYQxtpo2AWpzL" : {
          "LearningStatus" : true,
          "approval_at" : 1554951668780,
          "contentOrd" : 2
        },
        "-LdLtODpcc-J83q1aU5f" : {
          "LearningStatus" : true,
          "approval_at" : 1558071268381,
          "contentOrd" : "06"
        },
        "-LdLtaiBADqiIat-6k_3" : {
          "LearningStatus" : true,
          "approval_at" : 1558760784229,
          "contentOrd" : "13"
        },
        "-LdLtaiBADqiIat-6k_6" : {
          "LearningStatus" : true,
          "approval_at" : 1558767503930,
          "contentOrd" : "06"
        },
        "-LdLuLklhwL7keqLFNmD" : {
          "LearningStatus" : true,
          "approval_at" : 1558012714405,
          "contentOrd" : "06"
        },
        "-LdLuU-AHWwvMHDT-QpQ" : {
          "LearningStatus" : true,
          "approval_at" : 1558761790234,
          "contentOrd" : "13"
        },
        "-LdLubY6J4gW1t94t63x" : {
          "LearningStatus" : true,
          "approval_at" : 1558763042883,
          "contentOrd" : "11"
        },
        "-LdLvzsimpPWmPNFJwdO" : {
          "LearningStatus" : true,
          "approval_at" : 1558870263017,
          "contentOrd" : "9"
        },
        "-LedXZi8fzaKO45rL-Kv" : {
          "LearningStatus" : true,
          "approval_at" : 1558393899490,
          "contentOrd" : "04"
        }
      },
      "location" : "",
      "login_name" : "test1@gmail.com",
      "name" : "test1",
      "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/users%2FCIxg5db1wHWTu1eeymVp4EkLzfg1?alt=media&token=c3889a1d-9cf5-4c58-9fdc-6f078f1ce32e",
      "points" : 0,
      "post_count" : 12,
      "project_count" : 2,
      "rooms" : {
        "-LbpDP3nLIekOaNV6i9R" : {
          "active" : true,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "header" : "A",
          "id" : "-LbpDP3nLIekOaNV6i9R",
          "location" : "Tokyo",
          "name" : "test2"
        },
        "-LdZLabGR1N_h0cosQNI" : {
          "active" : true,
          "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "header" : "A",
          "id" : "-LdZLabGR1N_h0cosQNI",
          "location" : "Tokyo",
          "name" : "tei952"
        },
        "-LflYUB34LC-UmMllL-N" : {
          "active" : true,
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "header" : "M",
          "id" : "-LflYUB34LC-UmMllL-N",
          "location" : "Knowledge",
          "name" : "Meiyou"
        },
        "-LfltqWWYNQNsblL4ET1" : {
          "active" : true,
          "avatar" : "SltouNWndEXkvLg3nCWCiHXdmnx1",
          "header" : "T",
          "id" : "-LfltqWWYNQNsblL4ET1",
          "location" : "Knowledge",
          "name" : "test3"
        }
      },
      "talent_count" : 3,
      "tool_count" : 2
    },
    "GQxxS27YoMV4aMVZ69C9uVimoG63" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "GQxxS27YoMV4aMVZ69C9uVimoG63",
      "location" : "",
      "login_name" : "test5@gmail.com",
      "name" : "test5",
      "photo" : "",
      "points" : 0
    },
    "PHa92muIF0Vl4DmIaSrAYSn2sFz1" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "PHa92muIF0Vl4DmIaSrAYSn2sFz1",
      "location" : "",
      "login_name" : "xhdpgroop@123.com",
      "name" : "无",
      "photo" : "",
      "points" : 0
    },
    "SltouNWndEXkvLg3nCWCiHXdmnx1" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "SltouNWndEXkvLg3nCWCiHXdmnx1",
      "location" : "",
      "login_name" : "test3@gmail.com",
      "name" : "test3",
      "photo" : "",
      "points" : 0
    },
    "Vn8NjeM3yCh7vsK6mwhEdk9d1h73" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
      "invites" : {
        "-LbM7zO3wA7flCWYyECk" : {
          "fromUserId" : "CIxg5db1wHWTu1eeymVp4EkLzfg1",
          "fromUserName" : "test1",
          "id" : "-LbM7zO3wA7flCWYyECk",
          "roomId" : "-LbLowCug333-9BAkwM9",
          "status" : "declined",
          "toUserName" : "test2"
        }
      },
      "learnings" : {
        "-LbW07Cj8C37LDyZeKHF" : {
          "LearningStatus" : true,
          "approval_at" : 1556060905815,
          "contentOrd" : "3"
        },
        "-LbYZZXvYQxtpo2AWpzL" : {
          "LearningStatus" : true,
          "approval_at" : 1557890768999,
          "contentOrd" : "18"
        }
      },
      "location" : "",
      "login_name" : "test2@gmail.com",
      "name" : "test2",
      "photo" : "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/users%2FVn8NjeM3yCh7vsK6mwhEdk9d1h73?alt=media&token=c483679f-b290-41b1-b5c6-7512118e3c70",
      "points" : 0,
      "rooms" : {
        "-LbpDP3nLIekOaNV6i9R" : {
          "active" : true,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "header" : "A",
          "id" : "-LbpDP3nLIekOaNV6i9R",
          "location" : "Tokyo",
          "name" : "test2"
        }
      }
    },
    "ejGASFLSr1RsV2ZiVGtENSZ0JP33" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "ejGASFLSr1RsV2ZiVGtENSZ0JP33",
      "location" : "",
      "login_name" : "zhoumeiqi77@icloud.com",
      "name" : "IT",
      "photo" : "",
      "points" : 0
    },
    "err_code" : 0,
    "err_msg" : "success",
    "fxsAVCvXnrfUbJ1XJXa8ptBAAZv2" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "fxsAVCvXnrfUbJ1XJXa8ptBAAZv2",
      "location" : "",
      "login_name" : "test4@gmail.com",
      "name" : "test4",
      "photo" : "",
      "points" : 0
    },
    "iHmcxnnRDWPOJAE38On1nCdq0ir2" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
      "knowledge_count" : 1,
      "learnings" : {
        "-LbW07Cj8C37LDyZeKHF" : {
          "LearningStatus" : true,
          "approval_at" : 1558956689316,
          "contentOrd" : "04"
        },
        "-LbYZZXvYQxtpo2AWpzL" : {
          "LearningStatus" : true,
          "approval_at" : 1558928593116,
          "contentOrd" : "17"
        }
      },
      "location" : "",
      "login_name" : "zhengjun@jp.highwayns.com",
      "name" : "tei952",
      "photo" : "",
      "points" : 0,
      "rooms" : {
        "-LbpDP3nLIekOaNV6i9R" : {
          "active" : true,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "header" : "A",
          "id" : "-LbpDP3nLIekOaNV6i9R",
          "location" : "Tokyo",
          "name" : "test2"
        },
        "-LdZLabGR1N_h0cosQNI" : {
          "active" : true,
          "avatar" : "iHmcxnnRDWPOJAE38On1nCdq0ir2",
          "header" : "A",
          "id" : "-LdZLabGR1N_h0cosQNI",
          "location" : "Tokyo",
          "name" : "tei952"
        },
        "-Lg-sWfwAz0Y28V8Q-dy" : {
          "active" : true,
          "avatar" : "4MHc583pZYafkhamCo7Pvh4q6JN2",
          "header" : "M",
          "id" : "-Lg-sWfwAz0Y28V8Q-dy",
          "location" : "Knowledge",
          "name" : "Meiyou"
        }
      },
      "sessions" : {
        "-Lfdxs9pvVtcE4i4bkfi" : true
      }
    },
    "icC70eXYlkOrVQayAOrPo0Os7is2" : {
      "avatar_url" : "",
      "gender" : "",
      "id" : "icC70eXYlkOrVQayAOrPo0Os7is2",
      "location" : "",
      "login_name" : "hally601@yahoo.co.jp",
      "name" : "hally601",
      "photo" : "",
      "points" : 0,
      "rooms" : {
        "-LbpDP3nLIekOaNV6i9R" : {
          "active" : true,
          "avatar" : "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
          "header" : "A",
          "id" : "-LbpDP3nLIekOaNV6i9R",
          "location" : "Tokyo",
          "name" : "test2"
        }
      }
    }
  }
}
