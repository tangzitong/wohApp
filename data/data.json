{
    "knowledgecontents": {
        "data": {
            "-LbW07Cj8C37LDyZeKHF": {
                "contents": {
                    "x01": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Angularへようこそ！ Angularは、Web、モバイル、またはデスクトップ用\nの最新のアプリケーションを構築するのに役立ちます。\nこのガイドでは、簡単なAngularアプリを構築して実行する方法を説明します。\n Angular CLIツールを使用して開発を加速し、すべてのAngularプロジェクト\n に役立つスタイルガイドの推奨事項を遵守します。\nこのガイドは30分以内に完了します。このガイドの最後には、最終的なコード\nレビューの一環として、最終的なアプリケーションコードのコピーをダウンロード\nするリンクがあります。 （このガイドのコマンドを実行しない場合でも、\n最終的なアプリケーションコードをダウンロードできます）。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x01",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "01",
                        "time": 1555228371611,
                        "title": "1.0 Angularへようこそ",
                        "update_at": 1556488166377
                    },
                    "x02": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Angularには、Node.js バージョン8.xまたは10.xが必要です。\nバージョンをチェックするためには、node -v をターミナルあるいは\nコンソールで実行してください。\nNode.jsを手に入れるには、 nodejs.orgへ行きましょう。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x02",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "02",
                        "time": 1555228371611,
                        "title": "2.0 Node.js",
                        "update_at": 1556488166377
                    },
                    "x03": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Angular、Angular CLI、Angularアプリケーションは、npmパッケージとして\n利用可能なライブラリによって提供される機能に依存します。 npmパッケージ\nをダウンロードしてインストールするには、npmパッケージマネージャが必要です。\nこのクイックスタートでは、デフォルトで Node.js とともにインストールされる\nnpmクライアントコマンドラインインターフェースを使用します。\nnpmクライアントがインストールされていることを確認するには、ターミナルや\nコンソールでnpm -vを実行します。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x03",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "03",
                        "time": 1555228371611,
                        "title": "3.0 npm パッケージマネージャー",
                        "update_at": 1556488166377
                    },
                    "x04": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>インストール\nnpm install -g @angular/cli\nワークスペースと初期アプリケーションの作成\nng new my-app\nアプリケーションをサーブする\ncd my-app\nng serve --open\nng serve コマンドはサーバーを起動します。\nプロジェクトのファイル変更を監視して、変更があれば再度ビルドを行います。\n--open （または -o ）オプションはhttp://localhost:4200/ を自動的\nにブラウザで開きます。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x04",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "04",
                        "time": 1555228371611,
                        "title": "4.0 Angular CLI",
                        "update_at": 1556488166377
                    },
                    "x05": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>コンポーネントは、Angularアプリケーションの基本的なビルディング\nブロックです。彼らは、画面上にデータを表示し、ユーザーの入力を聞いて、\nその入力に基づいて行動を起こします。\n最初のアプリの一環として、CLIが最初のAngularコンポーネントを作成\nしました。これはルートコンポーネントであり、app-rootという名前です。\nsrc/app/app.component.ts\n@Component({\n  selector: &#39;app-root&#39;,\n  templateUrl: &#39;./app.component.html&#39;,\n  styleUrls: [&#39;./app.component.css&#39;]\n})\nexport class AppComponent {\n  title = &#39;My First Angular App!&#39;;\n}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x05",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "05",
                        "time": 1555228371611,
                        "title": "5.0 Angularコンポーネントを編集する",
                        "update_at": 1556488166377
                    },
                    "x06": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>ツアー・オブ・ヒーローズ チュートリアルはAngularの基礎をカバーしています。\n このチュートリアルでは人材派遣会社がヒーローの集合を管理するための\n アプリケーションを開発します。\nこの基本的なアプリケーションは、データ駆動型アプリケーションで期待される\n多くの機能を持っています。 ヒーローのリストを取得して表示し、選択した\nヒーローの詳細を編集し、ヒーローデータのさまざまなビュー間を遷移します。\nこのチュートリアルが終わるときには、あなたは次のことができるように\nなっています。\n要素を表示・隠蔽する、そしてヒーローデータのリストを表示するための\n組み込みAngularディレクティブを使う。\nヒーローの詳細やヒーローのリストを表示するためのAngularコンポーネント\nを作成する。\n読み取り専用データのための単方向データバインディングを使用する。\n双方向データバインディングを用いて、モデルを更新するための編集可能な\nフィールドを設置する。\nキー入力やクリックといったユーザーのイベントに対しコンポーネントがもつ\nメソッドをバインドする。\nユーザーがマスターリストからヒーローを選択し、詳細画面でそのヒーロー\nを編集できるようにする。\nパイプによりデータを整形する。\nヒーローを組み立てるための共有サービスを作成する。\nさまざまなビューとそれらのコンポーネント間を遷移可能にするために\nルーティングを使用する。\nAngularを始めるためにAngularのことを十分に学び、Angularは必要なことを\n何でもできるということを確信するでしょう。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x06",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "06",
                        "time": 1555228371611,
                        "title": "6.0 チュートリアル: ツアー・オブ・ヒーローズ",
                        "update_at": 1556488166377
                    },
                    "x07": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "picturePath": "https://angular.jp/generated/images/guide/toh/toh-anim.gif",
                            "type": "Picture"
                        },
                        "id": "x07",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "07",
                        "time": 1555228371611,
                        "title": "6.4 アプリケーションでユーザーがアクションを取っている様子です。",
                        "update_at": 1556488166377
                    },
                    "x08": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>まず、Angular CLIを使用して初期アプリケーションを作成します。このチュートリアル\nでは、スターターアプリケーションを修正して拡張し、Tour of Heroesアプリを作成します。\nチュートリアルのこの部分では、次のことを行います。\n1 環境を設定します。\n2 新しいワークスペースと初期アプリケーションプロジェクトを作成します。\n3 アプリケーションをサーブします。\n4 アプリケーションを変更します。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x08",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "08",
                        "time": 1555228371611,
                        "title": "7.0 アプリケーションシェル",
                        "update_at": 1556488166377
                    },
                    "x09": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>開発環境を設定するには、入門の次の手順に従います。\nng new angular-tour-of-heroes\ncd angular-tour-of-heroes\nng serve --open</code></pre>",
                            "type": "Html"
                        },
                        "id": "x09",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "09",
                        "time": 1555228371611,
                        "title": "8.0 環境を設定します",
                        "update_at": 1556488166377
                    },
                    "x10": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\napp.component.ts (class title property)\n    import { Component } from &#39;@angular/core&#39;;</p>\n<pre><code>@Component({\nselector: &#39;app-root&#39;,\ntemplateUrl: &#39;./app.component.html&#39;,\nstyleUrls: [&#39;./app.component.css&#39;]\n})\nexport class AppComponent {\ntitle = &#39;Tour of Heroes&#39;;\n}\n</code></pre><p>app.component.html (template)<br>    <h1>{{title}}</h1>\nsrc/styles.css\n/<em> Application-wide Styles </em>/\nh1 {\n  color: #369;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 250%;\n}\nh2, h3 {\n  color: #444;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\nbody {\n  margin: 2em;\n}\nbody, input[type=&quot;text&quot;], button {\n  color: #888;\n  font-family: Cambria, Georgia;\n}\n/<em> everywhere else </em>/\n* {\n  font-family: Arial, Helvetica, sans-serif;\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x10",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "10",
                        "time": 1555228371611,
                        "title": "9.0 アプリケーションを変更する",
                        "update_at": 1556488166377
                    },
                    "x11": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nng generate component heroes</p>\n<p>app/heroes/heroes.component.ts (初期バージョン)\n    import { Component, OnInit } from &#39;@angular/core&#39;;</p>\n<pre><code>    @Component({\n    selector: &#39;app-heroes&#39;,\n    templateUrl: &#39;./heroes.component.html&#39;,\n    styleUrls: [&#39;./heroes.component.css&#39;]\n    })\n    export class HeroesComponent implements OnInit {\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n}\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x11",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "11",
                        "time": 1555228371611,
                        "title": "10.0 heroes コンポーネントを作成する",
                        "update_at": 1556488166377
                    },
                    "x12": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>heroes.component.ts (hero プロパティ)\n    hero = &#39;Windstorm&#39;;\nheroes.component.html    \n    {{hero}}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x12",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "12",
                        "time": 1555228371611,
                        "title": "11.0 hero プロパティを追加する",
                        "update_at": 1556488166377
                    },
                    "x13": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/app.component.html   \n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;app-heroes&gt;&lt;/app-heroes&gt;</code></pre>",
                            "type": "Html"
                        },
                        "id": "x13",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "13",
                        "time": 1555228371611,
                        "title": "12.0 HeroesComponent ビューを表示する",
                        "update_at": 1556488166377
                    },
                    "x14": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nsrc/app/hero.ts\n    export class Hero {\n    id: number;\n    name: string;\n    }\nsrc/app/heroes/heroes.component.ts\n    import { Component, OnInit } from &#39;@angular/core&#39;;\n    import { Hero } from &#39;../hero&#39;;</p>\n<pre><code>@Component({\nselector: &#39;app-heroes&#39;,\ntemplateUrl: &#39;./heroes.component.html&#39;,\nstyleUrls: [&#39;./heroes.component.css&#39;]\n})\nexport class HeroesComponent implements OnInit {\nhero: Hero = {\n    id: 1,\n    name: &#39;Windstorm&#39;\n};\n\nconstructor() { }\n\nngOnInit() {\n}\n\n}\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x14",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "14",
                        "time": 1555228371611,
                        "title": "13.0 Hero クラスを作成する",
                        "update_at": 1556488166377
                    },
                    "x15": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>heroes.component.html (HeroesComponent のテンプレート)\n    &lt;h2&gt;{{hero.name}} Details&lt;/h2&gt;\n    &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n    &lt;div&gt;&lt;span&gt;name: &lt;/span&gt;{{hero.name}}&lt;/div&gt;</code></pre>",
                            "type": "Html"
                        },
                        "id": "x15",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "15",
                        "time": 1555228371611,
                        "title": "14.0 ヒーローオブジェクトを表示する",
                        "update_at": 1556488166377
                    },
                    "x16": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x16",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "16",
                        "time": 1555228371611,
                        "title": "15.0 UppercasePipe で書式設定する",
                        "update_at": 1556488166377
                    },
                    "x22": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x22",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "22",
                        "time": 1555228371611,
                        "title": "26.0 サービス",
                        "update_at": 1556488166377
                    },
                    "x23": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Tour of Heroes の中で扱っている HeroesComponent は、今のところ仮\nのデータを取得して表示している状態です。\nこのチュートリアルのリファクタリング後には、HeroesComponent は小さく\nなりビューをサポートすることに専念します。 これはモックサービスを使用\nして、ユニットテストをより簡潔にすることにもつながります。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x23",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "23",
                        "time": 1555228371611,
                        "title": "27.0 HeroService の作成",
                        "update_at": 1556488166377
                    },
                    "x24": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nng generate service hero</p>\n<p>src/app/hero.service.ts (new service)\n    import { Injectable } from &#39;@angular/core&#39;;</p>\n<pre><code>@Injectable({\nprovidedIn: &#39;root&#39;,\n})\nexport class HeroService {\n\nconstructor() { }\n\n}\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x24",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "24",
                        "time": 1555228371611,
                        "title": "28.0 ヒーローデータの取得",
                        "update_at": 1556488166377
                    },
                    "x25": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/hero.service.ts (Observable imports)\n    import { Observable, of } from &#39;rxjs&#39;;\n    getHeroes(): Observable&lt;Hero[]&gt; {\n        return of(HEROES);\n    }\nsrc/app/heroes/heroes.component.ts (import HeroService)\n    heroes: Hero[];\n    constructor(private heroService: HeroService) { }\n    getHeroes(): void {\n    this.heroService.getHeroes()\n        .subscribe(heroes =&gt; this.heroes = heroes);\n    }</code></pre>",
                            "type": "Html"
                        },
                        "id": "x25",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "25",
                        "time": 1555228371611,
                        "title": "29.0 MessagesComponent",
                        "update_at": 1556488166377
                    },
                    "x26": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nng generate component messages</p>\n<p>/src/app/app.component.html\n    <h1>{{title}}</h1>\n    <app-heroes></app-heroes>\n    <app-messages></app-messages>\n/src/app/message.service.ts\n    import { Injectable } from &#39;@angular/core&#39;;</p>\n<pre><code>@Injectable({\nprovidedIn: &#39;root&#39;,\n})\nexport class MessageService {\nmessages: string[] = [];\n\nadd(message: string) {\n    this.messages.push(message);\n}\n\nclear() {\n    this.messages = [];\n}\n}\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x26",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "26",
                        "time": 1555228371611,
                        "title": "30.0 HeroService への注入",
                        "update_at": 1556488166377
                    },
                    "x27": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>/src/app/hero.service.ts (import MessageService)\n    import { MessageService } from &#39;./message.service&#39;;\n    constructor(private messageService: MessageService) { }\n    getHeroes(): Observable&lt;Hero[]&gt; {\n    // TODO: send the message _after_ fetching the heroes\n    this.messageService.add(&#39;HeroService: fetched heroes&#39;);\n    return of(HEROES);\n    }</code></pre>",
                            "type": "Html"
                        },
                        "id": "x27",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "27",
                        "time": 1555228371611,
                        "title": "31.0 HeroService からのメッセージを表示する",
                        "update_at": 1556488166377
                    },
                    "x28": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n/src/app/messages/messages.component.ts (import MessageService)\n    import { MessageService } from &#39;../message.service&#39;;\n    constructor(public messageService: MessageService) {}\nsrc/app/messages/messages.component.html\n    <div *ngIf=\"messageService.messages.length\"></p>\n<pre><code>&lt;h2&gt;Messages&lt;/h2&gt;\n&lt;button class=&quot;clear&quot;\n        (click)=&quot;messageService.clear()&quot;&gt;clear&lt;/button&gt;\n&lt;div *ngFor=&#39;let message of messageService.messages&#39;&gt; {{message}} &lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x28",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "28",
                        "time": 1555228371611,
                        "title": "32.0 ルーティング",
                        "update_at": 1556488166377
                    },
                    "x29": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "picturePath": "https://angular.jp/generated/images/guide/toh/nav-diagram.png",
                            "type": "Picture"
                        },
                        "id": "x29",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "29",
                        "time": 1555228371611,
                        "title": "32.4 ルーティング",
                        "update_at": 1556488166377
                    },
                    "x30": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Tour of Heroes アプリケーションには新しい要求があります：\nダッシュボードビューを追加する。\nヒーローズビューとダッシュボードビューの間で行き来できる機能を追加する。\nユーザーが各ビューでヒーロー名をクリックしたとき、選択されたヒーローの詳細ビューを表示する。\nユーザーがEメール上でディープリンクをクリックしたとき、特定のヒーローの詳細ビューを開く。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x30",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "30",
                        "time": 1555228371611,
                        "title": "33.0 AppRoutingModuleを追加する",
                        "update_at": 1556488166377
                    },
                    "x31": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nng generate module app-routing --flat --module=app</p>\n<p>src/app/app-routing.module.ts (generated)\n    import { NgModule } from &#39;@angular/core&#39;;\n    import { CommonModule } from &#39;@angular/common&#39;;</p>\n<pre><code>@NgModule({\nimports: [\n    CommonModule\n],\ndeclarations: []\n})\nexport class AppRoutingModule { }\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x31",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "31",
                        "time": 1555228371611,
                        "title": "34.0 ルートを追加する",
                        "update_at": 1556488166377
                    },
                    "x32": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nsrc/app/app-routing.module.ts (v1)\n    import { HeroesComponent }      from &#39;./heroes/heroes.component&#39;;</p>\n<pre><code>const routes: Routes = [\n{ path: &#39;heroes&#39;, component: HeroesComponent }\n];\n</code></pre><p>src/app/app.component.html (router-outlet)\n    <h1>{{title}}</h1>\n    <nav>\n    <a routerLink=\"/heroes\">Heroes</a>\n    </nav>\n    <router-outlet></router-outlet>\n    <app-messages></app-messages>\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x32",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "32",
                        "time": 1555228371611,
                        "title": "35.0 ダッシュボードビューを追加する",
                        "update_at": 1556488166377
                    },
                    "x33": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code> \nng generate component dashboard</p>\n<p>src/app/dashboard/dashboard.component.html\n    <h3>Top Heroes</h3>\n    <div class=\"grid grid-pad\">\n    <a *ngFor=\"let hero of heroes\" class=\"col-1-4\">\n        <div class=\"module hero\">\n        <h4>{{hero.name}}</h4>\n        </div>\n    </a>\n    </div>\nsrc/app/dashboard/dashboard.component.ts\n    import { Component, OnInit } from &#39;@angular/core&#39;;\n    import { Hero } from &#39;../hero&#39;;\n    import { HeroService } from &#39;../hero.service&#39;;</p>\n<pre><code>@Component({\nselector: &#39;app-dashboard&#39;,\ntemplateUrl: &#39;./dashboard.component.html&#39;,\nstyleUrls: [ &#39;./dashboard.component.css&#39; ]\n})\nexport class DashboardComponent implements OnInit {\nheroes: Hero[] = [];\n\nconstructor(private heroService: HeroService) { }\n\nngOnInit() {\n    this.getHeroes();\n}\n\ngetHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n}\n}\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x33",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "33",
                        "time": 1555228371611,
                        "title": "36.0 ダッシュボードのルートを追加する",
                        "update_at": 1556488166377
                    },
                    "x34": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/app-routing.module.ts (import DashboardComponent)\n    import { DashboardComponent }   from &#39;./dashboard/dashboard.component&#39;;\n    { path: &#39;dashboard&#39;, component: DashboardComponent },\nsrc/app/app.component.html\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;nav&gt;\n    &lt;a routerLink=&quot;/dashboard&quot;&gt;Dashboard&lt;/a&gt;\n    &lt;a routerLink=&quot;/heroes&quot;&gt;Heroes&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n    &lt;app-messages&gt;&lt;/app-messages&gt;</code></pre>",
                            "type": "Html"
                        },
                        "id": "x34",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "34",
                        "time": 1555228371611,
                        "title": "37.0 HTTPサービス",
                        "update_at": 1556488166377
                    },
                    "x35": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>このチュートリアルではAngularのHttpClientを使用して、次のデータ永続の\n機能を追加します。\nHeroServiceはHTTPリクエストを介してヒーローデータを取得します。\nユーザーはヒーロー情報を追加、編集、削除ができ、その変更をHTTPを通\nして保存することができます。\nユーザーは名前でヒーロー情報を検索できます。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x35",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "35",
                        "time": 1555228371611,
                        "title": "38.0 サービス有効化",
                        "update_at": 1556488166377
                    },
                    "x36": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/app.module.ts (Http Client import)\n    import { HttpClientModule }    from &#39;@angular/common/http&#39;;\nデータサーバーをシミュレートする\n    npm install angular-in-memory-web-api --save\nsrc/app/app.module.ts (インメモリ Web API をインポート)\n    import { HttpClientInMemoryWebApiModule } from &#39;angular-in-memory-web-api&#39;;\n    import { InMemoryDataService }  from &#39;./in-memory-data.service&#39;;</code></pre>",
                            "type": "Html"
                        },
                        "id": "x36",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "36",
                        "time": 1555228371611,
                        "title": "39.0 HTTPサービス",
                        "update_at": 1556488166377
                    },
                    "x37": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nng generate service InMemoryData</p>\n<p>src/app/in-memory-data.service.ts\n    import { InMemoryDbService } from &#39;angular-in-memory-web-api&#39;;\n    import { Hero } from &#39;./hero&#39;;\n    import { Injectable } from &#39;@angular/core&#39;;</p>\n<pre><code>@Injectable({\nprovidedIn: &#39;root&#39;,\n})\nexport class InMemoryDataService implements InMemoryDbService {\ncreateDb() {\n    const heroes = [\n    { id: 11, name: &#39;Mr. Nice&#39; },\n    { id: 12, name: &#39;Narco&#39; },\n    { id: 13, name: &#39;Bombasto&#39; },\n    { id: 14, name: &#39;Celeritas&#39; },\n    { id: 15, name: &#39;Magneta&#39; },\n    { id: 16, name: &#39;RubberMan&#39; },\n    { id: 17, name: &#39;Dynama&#39; },\n    { id: 18, name: &#39;Dr IQ&#39; },\n    { id: 19, name: &#39;Magma&#39; },\n    { id: 20, name: &#39;Tornado&#39; }\n    ];\n    return {heroes};\n}\n\n// Overrides the genId method to ensure that a hero always has an id.\n// If the heroes array is empty,\n// the method below returns the initial number (11).\n// if the heroes array is not empty, the method below returns the highest\n// hero id + 1.\ngenId(heroes: Hero[]): number {\n    return heroes.length &gt; 0 ? Math.max(...heroes.map(hero =&gt; hero.id)) + 1 : 11;\n}\n}\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x37",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "37",
                        "time": 1555228371611,
                        "title": "40.0 ヒーローとHTTP",
                        "update_at": 1556488166377
                    },
                    "x38": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/hero.service.ts (HTTPシンボルをインポート)\n    import { HttpClient, HttpHeaders } from &#39;@angular/common/http&#39;;\n    constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\nsrc/app/hero.service.ts (RxJSの&#39;of()&#39;を使ったgetHeroes)\n    private heroesUrl = &#39;api/heroes&#39;;  // Web APIのURL\n    /** サーバーからヒーローを取得する */\n    getHeroes (): Observable&lt;Hero[]&gt; {\n        return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n    }</code></pre>",
                            "type": "Html"
                        },
                        "id": "x38",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "38",
                        "time": 1555228371611,
                        "title": "41.0 Observableに侵入link",
                        "update_at": 1556488166377
                    },
                    "x39": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/hero.service.ts (RxJSの&#39;of()&#39;を使ったgetHeroes)\n    /** サーバーからヒーローを取得する */\n    getHeroes (): Observable&lt;Hero[]&gt; {\n    return this.http.get&lt;Hero[]&gt;(this.heroesUrl)\n        .pipe(\n        tap(heroes =&gt; this.log(&#39;fetched heroes&#39;)),\n        catchError(this.handleError&lt;Hero[]&gt;(&#39;getHeroes&#39;, []))\n        );\n    }</code></pre>",
                            "type": "Html"
                        },
                        "id": "x39",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "39",
                        "time": 1555228371611,
                        "title": "42.0 IDでヒーローを取得する",
                        "update_at": 1556488166377
                    },
                    "x40": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/hero.service.ts\n    /** IDによりヒーローを取得する。見つからなかった場合は404を返却する。 */\n    getHero(id: number): Observable&lt;Hero&gt; {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get&lt;Hero&gt;(url).pipe(\n        tap(_ =&gt; this.log(`fetched hero id=${id}`)),\n        catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))\n    );\n    }</code></pre>",
                            "type": "Html"
                        },
                        "id": "x40",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "40",
                        "time": 1555228371611,
                        "title": "43.0 Angularアニメーション・イントロダクション",
                        "update_at": 1556488166377
                    },
                    "x41": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>アニメーションは動きの錯覚を提供します(時間の経過と共にHTML要素の\nスタイルが変化します)。うまく設計されたアニメーションは\nアプリケーションをより楽しく使いやすくすることができます。しかし、\nただの飾りではありません。アニメーションは、さまざまな方法でアプリ\n・ユーザー体験を向上させることができます:\nアニメーションがなければ、Webページの遷移は突然で不快感を与えるか\nもしれません。\nモーションはユーザー体験を大幅に向上させます。アニメーションは\nユーザーの操作に対するアプリケーションの応答を検出する機会を与えます。\nよいアニメーションは直感的にユーザーの注意を必要な場所に呼びよせます。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x41",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "41",
                        "time": 1555228371611,
                        "title": "44.0 アニメーションモジュールを有効にする",
                        "update_at": 1556488166377
                    },
                    "x42": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nsrc/app/app.module.ts\n    import { NgModule } from &#39;@angular/core&#39;;\n    import { BrowserModule } from &#39;@angular/platform-browser&#39;;\n    import { BrowserAnimationsModule } from &#39;@angular/platform-browser/animations&#39;;</p>\n<pre><code>@NgModule({\nimports: [\n    BrowserModule,\n    BrowserAnimationsModule\n],\ndeclarations: [ ],\nbootstrap: [ ]\n})\nexport class AppModule { }\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x42",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "42",
                        "time": 1555228371611,
                        "title": "45.0 コンポーネントファイル内にアニメーション関数をインポートする",
                        "update_at": 1556488166377
                    },
                    "x43": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/app.component.ts\n    import { Component, HostBinding } from &#39;@angular/core&#39;;\n    import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    // ...\n    } from &#39;@angular/animations&#39;;</code></pre>",
                            "type": "Html"
                        },
                        "id": "x43",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "43",
                        "time": 1555228371611,
                        "title": "46.0 アニメーションメタデータプロパティを追加する",
                        "update_at": 1556488166377
                    },
                    "x44": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "picturePath": "https://angular.jp/generated/images/guide/animations/open-closed.png",
                            "type": "Picture"
                        },
                        "id": "x44",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "44",
                        "time": 1555228371611,
                        "title": "46.4 シンプルな遷移アニメーション",
                        "update_at": 1556488166377
                    },
                    "x45": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>単一のHTML要素をある状態から別の状態に変更するシンプルな遷移\nをアニメーション化しましょう。たとえば、ユーザーの最後の操作\nから、ボタンがOpenまたはClosedのいずれかを表示するように指定\nできます。ボタンがopen状態では表示され黄色になり、closed状態\nになると透明で緑色になります。\nHTMLでは、これらの属性は色や不透明度などの通常のCSSスタイル\nを使用して設定されます。Angularでは、style()関数を使用して\n、アニメーションで使用する一連のCSSスタイルを指定します。\nアニメーションの状態に対して一連のスタイルをまとめて、その状\n態に対してopenやclosedなどの名前を付けることができます。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x45",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "45",
                        "time": 1555228371611,
                        "title": "47.0 アニメーションの状態とスタイル",
                        "update_at": 1556488166377
                    },
                    "x46": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/open-close.component.ts\n    // ...\n    state(&#39;open&#39;, style({\n    height: &#39;200px&#39;,\n    opacity: 1,\n    backgroundColor: &#39;yellow&#39;\n    })),\nsrc/app/open-close.component.ts\n    state(&#39;closed&#39;, style({\n    height: &#39;100px&#39;,\n    opacity: 0.5,\n    backgroundColor: &#39;green&#39;\n    })),</code></pre>",
                            "type": "Html"
                        },
                        "id": "x46",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "46",
                        "time": 1555228371611,
                        "title": "48.0 アニメーションの状態とスタイル",
                        "update_at": 1556488166377
                    },
                    "x47": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>src/app/open-close.component.ts\n    transition(&#39;open =&gt; closed&#39;, [\n        animate(&#39;1s&#39;)\n    ]),\nsrc/app/open-close.component.ts\n    transition(&#39;closed =&gt; open&#39;, [\n        animate(&#39;0.5s&#39;)\n    ]),</code></pre>",
                            "type": "Html"
                        },
                        "id": "x47",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "47",
                        "time": 1555228371611,
                        "title": "49.0 Httpクライアントモジュール",
                        "update_at": 1556488166377
                    },
                    "x48": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>新しいHttpクライアントモジュールは@angular/common/httpとして、\nこれまでの@angular/httpとは別のモジュールとして提供されています。\n既存のHttpモジュールと新しいHttpクライアントモジュールでは基本的\nな使い方は似ていますが、一部互換性のない構文が含まれています。\nそのためいきなり@angular/httpを置き換えるのではなく別モジュール\nとすることで、徐々に移行できるようにしようという意図があるようです。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x48",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "48",
                        "time": 1555228371611,
                        "title": "50.0 Httpクライアントモジュールインストール",
                        "update_at": 1556488166377
                    },
                    "x49": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\napp.module.ts\n    import { NgModule } from &#39;@angular/core&#39;;\n    import { BrowserModule } from &#39;@angular/platform-browser&#39;;</p>\n<pre><code>// HttpClientModuleをインポート\nimport { HttpClientModule } from &#39;@angular/common/http&#39;;\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        // HttpClientModuleを追加\n        HttpClientModule,\n    ],\n})\nexport class AppModule {}\n</code></pre><p>sample.service.ts\n    import { Injectable } from &#39;@angular/core&#39;;\n    import { HttpClient } from &#39;@angular/common/http&#39;;</p>\n<pre><code>@Injectable()\nexport class SampleService {\n\n    // コンストラクタの引数に指定してDI\n    constructor(private http: HttpClient) {}\n}\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x49",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "49",
                        "time": 1555228371611,
                        "title": "51.0 JSON形式のパースがデフォルトに",
                        "update_at": 1556488166377
                    },
                    "x50": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>this.http.get(url).map(response =&gt; response.json()).subscribe(json =&gt; ...);\nhttp.get(url, { responseType: &#39;text&#39; })\n    // レスポンスはテキストとしてsubscribeに渡される\n    .subscribe(text =&gt; console.log(text));</code></pre>",
                            "type": "Html"
                        },
                        "id": "x50",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "50",
                        "time": 1555228371611,
                        "title": "52.0 レスポンスの型指定",
                        "update_at": 1556488166377
                    },
                    "x51": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nJavaScriptとTypeScriptで全く同じコードなのにresponse.fooの呼び出しがエラー\nになってしまいました。これを回避するためには、interfaceを用いて内部のプロパティ\nを定義する必要があります。\nimport &#39;rxjs/add/operator/map&#39;;</p>\n<p>// プロパティ: fooを持つinterfaceを定義\ninterface FooResponse {\n    foo: string;\n}</p>\n<p>// パターン1：mapでキャスト\nthis.http.get(url)\n    // FooResponseにキャスト\n    .map(response =&gt; response as FooResponse)\n    .subscribe(response =&gt; {\n        console.log(response.foo);     // OK \n        console.log(response[&#39;foo&#39;]);  // OK\n    });</p>\n<p>// パターン2：subscribe内でキャスト\nthis.http.get(url)\n    .subscribe(response =&gt; {\n        const fooResponse = response as FooResponse;\n        console.log(fooResponse.foo);     // OK\n        console.log(fooResponse[&#39;foo&#39;]);  // OK\n    });\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x51",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "51",
                        "time": 1555228371611,
                        "title": "53.0 完全なレスポンスの取得",
                        "update_at": 1556488166377
                    },
                    "x52": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n// プロパティ: fooを持つinterfaceを定義\ninterface FooResponse {\n    foo: string;\n}</p>\n<p>// getメソッドにobserveオプションを指定\nthis.http.get<FooResponse>(url, { observe: &#39;response&#39; })\n    .subscribe(response =&gt; {\n        // ヘッダ情報はresponse.headersに格納。getメソッドで取得。\n        console.log(response.headers.get(&#39;X-My-Header&#39;));</p>\n<pre><code>    // レスポンスボディはresponse.bodyに格納。型指定も有効。\n    console.log(response.body.foo);\n});\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x52",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "52",
                        "time": 1555228371611,
                        "title": "54.0 Interceptor",
                        "update_at": 1556488166377
                    },
                    "x53": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { Injectable } from &#39;@angular/core&#39;;\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from &#39;@angular/common/http&#39;;\nimport { Observable } from &#39;rxjs/Observable&#39;;</p>\n<p>@Injectable()\nexport class SimpleInterceptor implements HttpInterceptor {</p>\n<pre><code>// リクエストの変換処理。ここに共通処理を記述。\nintercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {\n    return next.handle(request);\n}\n</code></pre><p>}</p>\n<p>import { NgModule } from &#39;@angular/core&#39;;\nimport { HTTP_INTERCEPTORS } from &#39;@angular/common/http&#39;;\nimport { SimpleInterceptor } from &#39;./simple-interceptor.service&#39;;</p>\n<p>@NgModule({\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: SimpleInterceptor,\n            // 必須：HTTP_INTERCEPTORSが配列であることを示す\n            multi: true\n        }\n    ]\n})\nexport class AppModule {}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x53",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "53",
                        "time": 1555228371611,
                        "title": "55.0 リクエストの処理",
                        "update_at": 1556488166377
                    },
                    "x54": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n// そのまま複製するサンプル\nintercept(request: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent<any>&gt; {\n    const req = request.clone();</p>\n<pre><code>return next.handle(req);\n</code></pre><p>}</p>\n<p>// fooの値を書き換える場合\nintercept(request: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent<any>&gt; {\n    const req = request.clone({ foo: &#39;Foo&#39; });</p>\n<pre><code>return next.handle(req);\n</code></pre><p>}</p>\n<p>// 複数の値も可\nintercept(request: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent<any>&gt; {\n    const req = request.clone({ foo: &#39;Foo&#39;, bar: &#39;Bar&#39; });</p>\n<pre><code>return next.handle(req);\n</code></pre><p>}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x54",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "54",
                        "time": 1555228371611,
                        "title": "56.0 レスポンスの処理",
                        "update_at": 1556488166377
                    },
                    "x55": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nintercept(request: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent<any>&gt; {\n    const storage = window.sessionStorage;</p>\n<pre><code>return next.handle(request)\n    .do(event =&gt; {\n        if (event instanceof HttpResponse) {\n            storage.setItem(&#39;cache&#39;, event.body);\n        }\n    });\n</code></pre><p>}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x55",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "55",
                        "time": 1555228371611,
                        "title": "57.0 Progress Events",
                        "update_at": 1556488166377
                    },
                    "x56": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { HttpEventType, HttpResponse, HttpEventType } from &#39;@angular/common/http&#39;;</p>\n<p>this.http.request(request).subscribe(event =&gt; {</p>\n<pre><code>if (event.type === HttpEventType.UploadProgress) {\n    // 進捗状況の出力\n    const percentDone = Math.round(100 * event.loaded / event.total);\n    console.log(`File is ${percentDone}% uploaded.`);\n} else if (event instanceof HttpResponse) {\n    // HttpResponseを取得した場合は処理完了\n    console.log(&#39;File is completely uploaded!&#39;);\n}\n</code></pre><p>});\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x56",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "56",
                        "time": 1555228371611,
                        "title": "58.0 XSRF対策",
                        "update_at": 1556488166377
                    },
                    "x57": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>上で紹介した Interceptor を利用した機能として、XSRF 対策がサポートされています。\nクッキーに XSRF-TOKEN が設定されている場合、その値をリクエストヘッダ X-XSRF-TOKEN \nに設定して通信します。\nこの Intercepter は、HttpClient を使用した通信のうち、\nリクエストメソッドが GET, HEAD 以外\nリクエスト先 URL が相対パス\nであるリクエストに適用されます。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x57",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "57",
                        "time": 1555228371611,
                        "title": "59.0 Observable",
                        "update_at": 1556488166377
                    },
                    "x58": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Observableは、アプリケーションの中でパブリッシャーとサブスクライバー間でメッセージ\nを渡すためのサポートを提供します。Observableは、イベント処理、非同期プログラミング、\nおよび複数の値の処理のための他のテクニックよりも大きな利点を提供します。\nObservableは宣言的です—つまり、値を公開するための関数を定義しますが、コンシューマー\nがそれを購読するまでは実行されません。購読するコンシューマーは、機能が完了するまで、\nまたは購読を中止するまで通知を受け取ります。\nObservableは、文脈に応じて、任意の型—リテラル、メッセージ、またはイベントの複数の値\nを提供できます。受け取るためのAPIは値が同期的・非同期的に提供される場合も同じです。\n基本的なセットアップとティアダウンはObservableによって処理されるので、あなたの\nアプリケーションコードは値を消費するためにサブスクライブを行うことと、それが済んだら\n購読を中止することだけを心配する必要があります。ストリームがキー入力、HTTPレスポンス、\nインターバルタイマーのどれでも、値をリスニングしたり、リスニングを止めるためのインター\nフェースは同じです。\nこれらの利点のために、ObservableはAngular内で広く使用されており、アプリの開発にも推\n奨されています。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x58",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "58",
                        "time": 1555228371611,
                        "title": "60.0 ジオロケーションのアップデートを監視する",
                        "update_at": 1556488166377
                    },
                    "x59": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n// Create an Observable that will start listening to geolocation updates\n// when a consumer subscribes.\nconst locations = new Observable((observer) =&gt; {\n  // Get the next and error callbacks. These will be passed in when\n  // the consumer subscribes.\n  const {next, error} = observer;\n  let watchId;</p>\n<p>  // Simple geolocation API check provides values to publish\n  if (&#39;geolocation&#39; in navigator) {\n    watchId = navigator.geolocation.watchPosition(next, error);\n  } else {\n    error(&#39;Geolocation not available&#39;);\n  }</p>\n<p>  // When the consumer unsubscribes, clean up data ready for next subscription.\n  return {unsubscribe() { navigator.geolocation.clearWatch(watchId); }};\n});</p>\n<p>// Call subscribe() to start listening for updates.\nconst locationsSubscription = locations.subscribe({\n  next(position) { console.log(&#39;Current Position: &#39;, position); },\n  error(msg) { console.log(&#39;Error Getting Location: &#39;, msg); }\n});</p>\n<p>// Stop listening for location after 10 seconds\nsetTimeout(() =&gt; { locationsSubscription.unsubscribe(); }, 10000);</p>\n<p>next\n必須です。個々の値が提供されたときのハンドラーです。実行が開始されてから0回以上呼び出されます。\nerror\nオプションです。エラー通知のハンドラーです。エラーはObservableインスタンスの実行を停止します。\ncomplete\nオプションです。実行完了通知のハンドラーです。遅延した値は、実行完了後もnextハンドラーに引き続き渡されます。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x59",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "59",
                        "time": 1555228371611,
                        "title": "61.0 サブスクライブ",
                        "update_at": 1556488166377
                    },
                    "x60": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nSubscribe using observer\n    // Create simple observable that emits three values\n    const myObservable = of(1, 2, 3);</p>\n<pre><code>// Create observer object\nconst myObserver = {\nnext: x =&gt; console.log(&#39;Observer got a next value: &#39; + x),\nerror: err =&gt; console.error(&#39;Observer got an error: &#39; + err),\ncomplete: () =&gt; console.log(&#39;Observer got a complete notification&#39;),\n};\n\n// Execute with the observer object\nmyObservable.subscribe(myObserver);\n// Logs:\n// Observer got a next value: 1\n// Observer got a next value: 2\n// Observer got a next value: 3\n// Observer got a complete notification\n</code></pre><p>Subscribe with positional arguments\n    myObservable.subscribe(\n    x =&gt; console.log(&#39;Observer got a next value: &#39; + x),\n    err =&gt; console.error(&#39;Observer got an error: &#39; + err),\n    () =&gt; console.log(&#39;Observer got a complete notification&#39;)\n    );\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x60",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "60",
                        "time": 1555228371611,
                        "title": "62.0 Observableを作成する",
                        "update_at": 1556488166377
                    },
                    "x61": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nCreate observable with constructor\n    // This function runs when subscribe() is called\n    function sequenceSubscriber(observer) {\n    // synchronously deliver 1, 2, and 3, then complete\n    observer.next(1);\n    observer.next(2);\n    observer.next(3);\n    observer.complete();</p>\n<pre><code>// unsubscribe function doesn&#39;t need to do anything in this\n// because values are delivered synchronously\nreturn {unsubscribe() {}};\n}\n\n// Create a new Observable that will deliver the above sequence\nconst sequence = new Observable(sequenceSubscriber);\n\n// execute the Observable and print the result of each notification\nsequence.subscribe({\nnext(num) { console.log(num); },\ncomplete() { console.log(&#39;Finished sequence&#39;); }\n});\n\n// Logs:\n// 1\n// 2\n// 3\n// Finished sequence\n</code></pre><p>Create with custom fromEvent function\n    function fromEvent(target, eventName) {\n    return new Observable((observer) =&gt; {\n        const handler = (e) =&gt; observer.next(e);</p>\n<pre><code>    // Add the event handler to the target\n    target.addEventListener(eventName, handler);\n\n    return () =&gt; {\n    // Detach the event handler from the target\n    target.removeEventListener(eventName, handler);\n    };\n});\n}\n</code></pre><p>Use custom fromEvent function\n    const ESC_KEY = 27;\n    const nameInput = document.getElementById(&#39;name&#39;) as HTMLInputElement;</p>\n<pre><code>const subscription = fromEvent(nameInput, &#39;keydown&#39;)\n.subscribe((e: KeyboardEvent) =&gt; {\n    if (e.keyCode === ESC_KEY) {\n    nameInput.value = &#39;&#39;;\n    }\n});\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x61",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "61",
                        "time": 1555228371611,
                        "title": "63.0 マルチキャスト",
                        "update_at": 1556488166377
                    },
                    "x62": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>典型的なObservableは、サブスクライブしたオブザーバーごとに独立した新しい実行を作成します。\nオブザーバーが購読すると、Observableはイベントハンドラーをつなぎ、そのオブザーバーに値を\n渡します。2つ目のオブザーバーが加入すると、Observableは新しいイベントハンドラーをつなぎ、\n別の実行でその2つ目のオブザーバーに値を渡します。\n場合によっては、各サブスクライバーに対して独立した実行を開始するのではなく各サブスクリプ\nションが同じ値を取得するようにしたいことがあるでしょう—値の発行がすでに始まっていたとして\nも。これは、ドキュメントオブジェクトのクリックを監視するような場合に当てはまります。\nマルチキャスト は、1回の実行で複数のサブスクライバーにブロードキャストする方法です。マルチ\nキャスト\bをするObservable\bの場合、ドキュメントに複数のリスナーを登録するのではなく、最初\nのリスナーを再利用して値を各サブスクライバーに送信します。\nObservableを作成するときは、そのObservableをどのように使用するか、およびその値をマルチキ\nャストするかどうかを決定する必要があります。\n個々の数値が発信されてから1秒遅れ\bて、1から3までカウントする例を見てみましょう。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x62",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "62",
                        "time": 1555228371611,
                        "title": "64.0 Create a delayed sequence",
                        "update_at": 1556488166377
                    },
                    "x63": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nfunction sequenceSubscriber(observer) {\n  const seq = [1, 2, 3];\n  let timeoutId;</p>\n<p>  // Will run through an array of numbers, emitting one value\n  // per second until it gets to the end of the array.\n  function doSequence(arr, idx) {\n    timeoutId = setTimeout(() =&gt; {\n      observer.next(arr[idx]);\n      if (idx === arr.length - 1) {\n        observer.complete();\n      } else {\n        doSequence(arr, ++idx);\n      }\n    }, 1000);\n  }</p>\n<p>  doSequence(seq, 0);</p>\n<p>  // Unsubscribe should clear the timeout to stop execution\n  return {unsubscribe() {\n    clearTimeout(timeoutId);\n  }};\n}</p>\n<p>// Create a new Observable that will deliver the above sequence\nconst sequence = new Observable(sequenceSubscriber);</p>\n<p>sequence.subscribe({\n  next(num) { console.log(num); },\n  complete() { console.log(&#39;Finished sequence&#39;); }\n});</p>\n<p>// Logs:\n// (at 1 second): 1\n// (at 2 seconds): 2\n// (at 3 seconds): 3\n// (at 3 seconds): Finished sequence\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x63",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "63",
                        "time": 1555228371611,
                        "title": "65.0 Two subscriptions",
                        "update_at": 1556488166377
                    },
                    "x64": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n// Subscribe starts the clock, and will emit after 1 second\nsequence.subscribe({\n  next(num) { console.log(&#39;1st subscribe: &#39; + num); },\n  complete() { console.log(&#39;1st sequence finished.&#39;); }\n});</p>\n<p>// After 1/2 second, subscribe again.\nsetTimeout(() =&gt; {\n  sequence.subscribe({\n    next(num) { console.log(&#39;2nd subscribe: &#39; + num); },\n    complete() { console.log(&#39;2nd sequence finished.&#39;); }\n  });\n}, 500);</p>\n<p>// Logs:\n// (at 1 second): 1st subscribe: 1\n// (at 1.5 seconds): 2nd subscribe: 1\n// (at 2 seconds): 1st subscribe: 2\n// (at 2.5 seconds): 2nd subscribe: 2\n// (at 3 seconds): 1st subscribe: 3\n// (at 3 seconds): 1st sequence finished\n// (at 3.5 seconds): 2nd subscribe: 3\n// (at 3.5 seconds): 2nd sequence finished\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x64",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "64",
                        "time": 1555228371611,
                        "title": "66.0 Create a multicast subscriber",
                        "update_at": 1556488166377
                    },
                    "x65": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nfunction multicastSequenceSubscriber() {\n  const seq = [1, 2, 3];\n  // Keep track of each observer (one for every active subscription)\n  const observers = [];\n  // Still a single timeoutId because there will only ever be one\n  // set of values being generated, multicasted to each subscriber\n  let timeoutId;</p>\n<p>  // Return the subscriber function (runs when subscribe()\n  // function is invoked)\n  return (observer) =&gt; {\n    observers.push(observer);\n    // When this is the first subscription, start the sequence\n    if (observers.length === 1) {\n      timeoutId = doSequence({\n        next(val) {\n          // Iterate through observers and notify all subscriptions\n          observers.forEach(obs =&gt; obs.next(val));\n        },\n        complete() {\n          // Notify all complete callbacks\n          observers.slice(0).forEach(obs =&gt; obs.complete());\n        }\n      }, seq, 0);\n    }</p>\n<pre><code>return {\n  unsubscribe() {\n    // Remove from the observers array so it&#39;s no longer notified\n    observers.splice(observers.indexOf(observer), 1);\n    // If there&#39;s no more listeners, do cleanup\n    if (observers.length === 0) {\n      clearTimeout(timeoutId);\n    }\n  }\n};\n</code></pre><p>  };\n}</p>\n<p>// Run through an array of numbers, emitting one value\n// per second until it gets to the end of the array.\nfunction doSequence(observer, arr, idx) {\n  return setTimeout(() =&gt; {\n    observer.next(arr[idx]);\n    if (idx === arr.length - 1) {\n      observer.complete();\n    } else {\n      doSequence(observer, arr, ++idx);\n    }\n  }, 1000);\n}</p>\n<p>// Create a new Observable that will deliver the above sequence\nconst multicastSequence = new Observable(multicastSequenceSubscriber());</p>\n<p>// Subscribe starts the clock, and begins to emit after 1 second\nmulticastSequence.subscribe({\n  next(num) { console.log(&#39;1st subscribe: &#39; + num); },\n  complete() { console.log(&#39;1st sequence finished.&#39;); }\n});</p>\n<p>// After 1 1/2 seconds, subscribe again (should &quot;miss&quot; the first value).\nsetTimeout(() =&gt; {\n  multicastSequence.subscribe({\n    next(num) { console.log(&#39;2nd subscribe: &#39; + num); },\n    complete() { console.log(&#39;2nd sequence finished.&#39;); }\n  });\n}, 1500);</p>\n<p>// Logs:\n// (at 1 second): 1st subscribe: 1\n// (at 2 seconds): 1st subscribe: 2\n// (at 2 seconds): 2nd subscribe: 2\n// (at 3 seconds): 1st subscribe: 3\n// (at 3 seconds): 1st sequence finished\n// (at 3 seconds): 2nd subscribe: 3\n// (at 3 seconds): 2nd sequence finished\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x65",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "65",
                        "time": 1555228371611,
                        "title": "67.0 RxJS ライブラリ",
                        "update_at": 1556488166377
                    },
                    "x66": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>RxJS は Observable 型の実装を提供します。Observable 型は、型が言語の\n一部となるまで、そしてブラウザがそれをサポートするまで必要です。ライブラリ\nはまたobservablesを作成して作業するためのユーティリティ関数を提供します。\nこれらのユーティリティ関数は、次の用途に使用できます。\n 非同期処理の既存のコードを observables に変換する\n ストリーム内の値を反復処理する\n 異なる型への値のマッピング\n ストリームのフィルタリング\n 複数のストリームの作成</code></pre>",
                            "type": "Html"
                        },
                        "id": "x66",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "66",
                        "time": 1555228371611,
                        "title": "68.0 Observable 作成関数",
                        "update_at": 1556488166377
                    },
                    "x67": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\npromise から observable を作成する\n    import { from } from &#39;rxjs&#39;;</p>\n<pre><code>// Create an Observable out of a promise\nconst data = from(fetch(&#39;/api/endpoint&#39;));\n// Subscribe to begin listening for async result\ndata.subscribe({\nnext(response) { console.log(response); },\nerror(err) { console.error(&#39;Error: &#39; + err); },\ncomplete() { console.log(&#39;Completed&#39;); }\n});\n</code></pre><p>カウンターから observable を\b作成する\n    import { interval } from &#39;rxjs&#39;;</p>\n<pre><code>// Create an Observable that will publish a value on an interval\nconst secondsCounter = interval(1000);\n// Subscribe to begin publishing values\nsecondsCounter.subscribe(n =&gt;\nconsole.log(`It&#39;s been ${n} seconds since subscribing!`));\n</code></pre><p>イベントから observable を作成する\n    import { fromEvent } from &#39;rxjs&#39;;</p>\n<pre><code>const el = document.getElementById(&#39;my-element&#39;);\n\n// Create an Observable that will publish mouse movements\nconst mouseMoves = fromEvent(el, &#39;mousemove&#39;);\n\n// Subscribe to start listening for mouse-move events\nconst subscription = mouseMoves.subscribe((evt: MouseEvent) =&gt; {\n// Log coords of mouse movements\nconsole.log(`Coords: ${evt.clientX} X ${evt.clientY}`);\n\n// When the mouse is over the upper-left of the screen,\n// unsubscribe to stop listening for mouse movements\nif (evt.clientX &lt; 40 &amp;&amp; evt.clientY &lt; 40) {\n    subscription.unsubscribe();\n}\n});\n</code></pre><p>AJAX リクエストから observable を作成する\n    import { ajax } from &#39;rxjs/ajax&#39;;</p>\n<pre><code>// Create an Observable that will create an AJAX request\nconst apiData = ajax(&#39;/api/data&#39;);\n// Subscribe to create the request\napiData.subscribe(res =&gt; console.log(res.status, res.response));\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x67",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "67",
                        "time": 1555228371611,
                        "title": "69.0 オペレーター",
                        "update_at": 1556488166377
                    },
                    "x68": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nMap operator\n    import { map } from &#39;rxjs/operators&#39;;</p>\n<pre><code>const nums = of(1, 2, 3);\n\nconst squareValues = map((val: number) =&gt; val * val);\nconst squaredNums = squareValues(nums);\n\nsquaredNums.subscribe(x =&gt; console.log(x));\n\n// Logs\n// 1\n// 4\n// 9\n</code></pre><p>Standalone pipe function\n    import { filter, map } from &#39;rxjs/operators&#39;;</p>\n<pre><code>const nums = of(1, 2, 3, 4, 5);\n\n// Create a function that accepts an Observable.\nconst squareOddVals = pipe(\nfilter((n: number) =&gt; n % 2 !== 0),\nmap(n =&gt; n * n)\n);\n\n// Create an Observable that will run the filter and map functions\nconst squareOdd = squareOddVals(nums);\n\n// Suscribe to run the combined functions\nsquareOdd.subscribe(x =&gt; console.log(x));\n</code></pre><p>Observable.pipe function\n    import { filter, map } from &#39;rxjs/operators&#39;;</p>\n<pre><code>const squareOdd = of(1, 2, 3, 4, 5)\n.pipe(\n    filter(n =&gt; n % 2 !== 0),\n    map(n =&gt; n * n)\n);\n\n// Subscribe to get values\nsquareOdd.subscribe(x =&gt; console.log(x));\n</code></pre><pcode>`</code></pre>",
                            "type": "Html"
                        },
                        "id": "x68",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "68",
                        "time": 1555228371611,
                        "title": "70.0 catchError オペレーター",
                        "update_at": 1556488166377
                    },
                    "x69": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { ajax } from &#39;rxjs/ajax&#39;;\nimport { map, catchError } from &#39;rxjs/operators&#39;;\n// Return &quot;response&quot; from the API. If an error happens,\n// return an empty array.\nconst apiData = ajax(&#39;/api/data&#39;).pipe(\n  map(res =&gt; {\n    if (!res.response) {\n      throw new Error(&#39;Value expected!&#39;);\n    }\n    return res.response;\n  }),\n  catchError(err =&gt; of([]))\n);</p>\n<p>apiData.subscribe({\n  next(x) { console.log(&#39;data: &#39;, x); },\n  error(err) { console.log(&#39;errors already caught... will not run&#39;); }\n});\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x69",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "69",
                        "time": 1555228371611,
                        "title": "71.0 失敗した observable の再実行",
                        "update_at": 1556488166377
                    },
                    "x70": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { ajax } from &#39;rxjs/ajax&#39;;\nimport { map, retry, catchError } from &#39;rxjs/operators&#39;;</p>\n<p>const apiData = ajax(&#39;/api/data&#39;).pipe(\n  retry(3), // Retry up to 3 times before failing\n  map(res =&gt; {\n    if (!res.response) {\n      throw new Error(&#39;Value expected!&#39;);\n    }\n    return res.response;\n  }),\n  catchError(err =&gt; of([]))\n);</p>\n<p>apiData.subscribe({\n  next(x) { console.log(&#39;data: &#39;, x); },\n  error(err) { console.log(&#39;errors already caught... will not run&#39;); }\n});\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x70",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "70",
                        "time": 1555228371611,
                        "title": "72.0 Naming observables",
                        "update_at": 1556488166377
                    },
                    "x71": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { Component } from &#39;@angular/core&#39;;\nimport { Observable } from &#39;rxjs&#39;;</p>\n<p>@Component({\n  selector: &#39;app-stopwatch&#39;,\n  templateUrl: &#39;./stopwatch.component.html&#39;\n})\nexport class StopwatchComponent {</p>\n<p>  stopwatchValue: number;\n  stopwatchValue$: Observable<number>;</p>\n<p>  start() {\n    this.stopwatchValue$.subscribe(num =&gt;\n      this.stopwatchValue = num\n    );\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x71",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "71",
                        "time": 1555228371611,
                        "title": "73.0 Angular での Observable",
                        "update_at": 1556488166377
                    },
                    "x72": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Angular はさまざまな一般的な非同期操作を処理するためのインターフェースとして \nObservable を使用します。たとえば：\nEventEmitter クラスは Observable を拡張しています。\nHTTP モジュールは Observable を使用して AJAX リクエストとレスポンスを処理\nします。\nRouter と Form モジュールは、ユーザー入力イベントを待ち受けてレスポンスする\nために Observable を使用します。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x72",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "72",
                        "time": 1555228371611,
                        "title": "74.0 EventEmitter",
                        "update_at": 1556488166377
                    },
                    "x73": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n@Component({\n  selector: &#39;zippy&#39;,\n  template: <code>&lt;div class=&quot;zippy&quot;&gt;\n    &lt;div (click)=&quot;toggle()&quot;&gt;Toggle&lt;/div&gt;\n    &lt;div [hidden]=&quot;!visible&quot;&gt;\n      &lt;ng-content&gt;&lt;/ng-content&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;</code>})</p>\n<p>export class ZippyComponent {\n  visible = true;\n  @Output() open = new EventEmitter<any>();\n  @Output() close = new EventEmitter<any>();</p>\n<p>  toggle() {\n    this.visible = !this.visible;\n    if (this.visible) {\n      this.open.emit(null);\n    } else {\n      this.close.emit(null);\n    }\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x73",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "73",
                        "time": 1555228371611,
                        "title": "75.0 HTTP",
                        "update_at": 1556488166377
                    },
                    "x74": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>ngularの HttpClient は、HTTPメソッド呼び出しからの Observable を返します。\nたとえば、http.get(‘/api’) は Observable オブジェクトを返します。これは、\nPromise ベースの HTTP API に勝るいくつかの利点を提供します。\nObservables はサーバーのレスポンスを変更しません(Promise で .then() の呼び\n出しによって発生する可能性があります)。代わりに、必要に応じて一連のオペレータ\nーを使用して値を変換することができます。\nHTTP リクエストは unsubscribe() メソッドで取り消すことができます。\nイベントの更新の進行状況を取得するようにリクエストを構成できます。\n失敗したリクエストは簡単に再試行できます。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x74",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "74",
                        "time": 1555228371611,
                        "title": "76.0 非同期パイプの使用",
                        "update_at": 1556488166377
                    },
                    "x75": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>@Component({\n  selector: &#39;async-observable-pipe&#39;,\n  template: `&lt;div&gt;&lt;code&gt;observable|async&lt;/code&gt;:\n       Time: {{ time | async }}&lt;/div&gt;`\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable(observer =&gt;\n    setInterval(() =&gt; observer.next(new Date().toString()), 1000)\n  );\n}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x75",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "75",
                        "time": 1555228371611,
                        "title": "77.0 ルーターイベント",
                        "update_at": 1556488166377
                    },
                    "x76": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { Router, NavigationStart } from &#39;@angular/router&#39;;\nimport { filter } from &#39;rxjs/operators&#39;;</p>\n<p>@Component({\n  selector: &#39;app-routable&#39;,\n  templateUrl: &#39;./routable.component.html&#39;,\n  styleUrls: [&#39;./routable.component.css&#39;]\n})\nexport class Routable1Component implements OnInit {</p>\n<p>  navStart: Observable<NavigationStart>;</p>\n<p>  constructor(private router: Router) {\n    // Create a new Observable that publishes only the NavigationStart event\n    this.navStart = router.events.pipe(\n      filter(evt =&gt; evt instanceof NavigationStart)\n    ) as Observable<NavigationStart>;\n  }</p>\n<p>  ngOnInit() {\n    this.navStart.subscribe(evt =&gt; console.log(&#39;Navigation Started!&#39;));\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x76",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "76",
                        "time": 1555228371611,
                        "title": "78.0 ActivatedRoute",
                        "update_at": 1556488166377
                    },
                    "x77": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { ActivatedRoute } from &#39;@angular/router&#39;;</p>\n<p>@Component({\n  selector: &#39;app-routable&#39;,\n  templateUrl: &#39;./routable.component.html&#39;,\n  styleUrls: [&#39;./routable.component.css&#39;]\n})\nexport class Routable2Component implements OnInit {\n  constructor(private activatedRoute: ActivatedRoute) {}</p>\n<p>  ngOnInit() {\n    this.activatedRoute.url\n      .subscribe(url =&gt; console.log(&#39;The URL changed to: &#39; + url));\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x77",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "77",
                        "time": 1555228371611,
                        "title": "79.0 リアクティブフォーム",
                        "update_at": 1556488166377
                    },
                    "x78": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { FormGroup } from &#39;@angular/forms&#39;;</p>\n<p>@Component({\n  selector: &#39;my-component&#39;,\n  template: &#39;MyComponent Template&#39;\n})\nexport class MyComponent implements OnInit {\n  nameChangeLog: string[] = [];\n  heroForm: FormGroup;</p>\n<p>  ngOnInit() {\n    this.logNameChange();\n  }\n  logNameChange() {\n    const nameControl = this.heroForm.get(&#39;name&#39;);\n    nameControl.valueChanges.forEach(\n      (value: string) =&gt; this.nameChangeLog.push(value)\n    );\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x78",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "78",
                        "time": 1555228371611,
                        "title": "80.0 事前サジェスト",
                        "update_at": 1556488166377
                    },
                    "x79": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nimport { fromEvent } from &#39;rxjs&#39;;\nimport { ajax } from &#39;rxjs/ajax&#39;;\nimport { map, filter, debounceTime, distinctUntilChanged, switchMap } from &#39;rxjs/operators&#39;;</p>\n<p>const searchBox = document.getElementById(&#39;search-box&#39;);</p>\n<p>const typeahead = fromEvent(searchBox, &#39;input&#39;).pipe(\n  map((e: KeyboardEvent) =&gt; e.target.value),\n  filter(text =&gt; text.length &gt; 2),\n  debounceTime(10),\n  distinctUntilChanged(),\n  switchMap(() =&gt; ajax(&#39;/api/endpoint&#39;))\n);</p>\n<p>typeahead.subscribe(data =&gt; {\n // Handle the data from the API\n});\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x79",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "ord": "79",
                        "time": 1555228371611,
                        "title": "81.0 指数関数的バックオフ",
                        "update_at": 1556488166377
                    }
                }
            },
            "-LbYZZXvYQxtpo2AWpzL": {
                "contents": {
                    "x01": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>二進数　0011100\n八進数　034\n十六進数１C\n計算　&amp; | !\n文字コーディング：\nSHIFT－JIS\nUTF－８\nEUC\nBCD</code></pre>",
                            "type": "Html"
                        },
                        "id": "x01",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "01",
                        "time": 1555228371611,
                        "title": "1.0 数の進数",
                        "update_at": 1556488166377
                    },
                    "x02": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>整数 bit byte short int long\n小数 single double\n文字ストリング string\nブーリアン boolean true false\n計算式 + - * /\n優先順位 * / + - ()</code></pre>",
                            "type": "Html"
                        },
                        "id": "x02",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "02",
                        "time": 1555228371611,
                        "title": "2.0 データタイプと計算式",
                        "update_at": 1556488166377
                    },
                    "x03": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>配列 []\nリスト List\nセット DataSet\nキュー Queue\nハッシュテーブル Hashtable Map\nスタック Stack\nソート bubble sort, Hash sort\nツリー (Directory)</code></pre>",
                            "type": "Html"
                        },
                        "id": "x03",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "03",
                        "time": 1555228371611,
                        "title": "3.0 データ構造",
                        "update_at": 1556488166377
                    },
                    "x04": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>順番 ; {}\n分岐 if else switch\nループ for foreach loop\nファイル read write text file csv tsv xml config</code></pre>",
                            "type": "Html"
                        },
                        "id": "x04",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "04",
                        "time": 1555228371611,
                        "title": "4.0 ブーリアン計算式、プログラム構造",
                        "update_at": 1556488166377
                    },
                    "x05": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>class\ninterface\ninstance\nシングルトン\nFactory</code></pre>",
                            "type": "Html"
                        },
                        "id": "x05",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "05",
                        "time": 1555228371611,
                        "title": "5.0 クラスとデザインパタン",
                        "update_at": 1556488166377
                    },
                    "x06": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>XP\nPMP\n開発管理\n工数 schecdule\nバッグ bugfree\nバージョン git svn team founder</code></pre>",
                            "type": "Html"
                        },
                        "id": "x06",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "06",
                        "time": 1555228371611,
                        "title": "6.0 開発プロセス",
                        "update_at": 1556488166377
                    },
                    "x07": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>create table\nCRUD\ninsert\nupdate\ndelete\nselect</code></pre>",
                            "type": "Html"
                        },
                        "id": "x07",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "07",
                        "time": 1555228371611,
                        "title": "7.0 データベースのテーブル",
                        "update_at": 1556488166377
                    },
                    "x08": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>left join\nright join\ninner join\nin\nexists</code></pre>",
                            "type": "Html"
                        },
                        "id": "x08",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "08",
                        "time": 1555228371611,
                        "title": "8.0 データベースのクエリ",
                        "update_at": 1556488166377
                    },
                    "x09": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>funtion \nprocedure\npackage\ntrigger</code></pre>",
                            "type": "Html"
                        },
                        "id": "x09",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "09",
                        "time": 1555228371611,
                        "title": "9.0 データベースのプロシージャ",
                        "update_at": 1556488166377
                    },
                    "x10": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>tranaction\nbegin trans\ncommit\nrollback\nindex</code></pre>",
                            "type": "Html"
                        },
                        "id": "x10",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "10",
                        "time": 1555228371611,
                        "title": "10.0 データベーストランザクションとチューニング",
                        "update_at": 1556488166377
                    },
                    "x11": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>.net framework \nJava struts+spring+hibernet</code></pre>",
                            "type": "Html"
                        },
                        "id": "x11",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "11",
                        "time": 1555228371611,
                        "title": "11.0 フレームワーク",
                        "update_at": 1556488166377
                    },
                    "x12": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>アプリケーション\nウェブプログラム\nアプリ\nサービス\nバッチ\nウェブサービス\nWCF</code></pre>",
                            "type": "Html"
                        },
                        "id": "x12",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "12",
                        "time": 1555228371611,
                        "title": "12.0 プログラム種類",
                        "update_at": 1556488166377
                    },
                    "x13": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>詳細設計\nテスト仕様書\nスケジュール\n課題票\nバッグ票</code></pre>",
                            "type": "Html"
                        },
                        "id": "x13",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "13",
                        "time": 1555228371611,
                        "title": "13.0 プロジェクト演習のプロジェクト起動、各種類の管理書類",
                        "update_at": 1556488166377
                    },
                    "x14": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Excel\nPDF\nPPT</code></pre>",
                            "type": "Html"
                        },
                        "id": "x14",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "14",
                        "time": 1555228371611,
                        "title": "14.0 プロジェクト演習のプログラムでOFFICE文書操作",
                        "update_at": 1556488166377
                    },
                    "x15": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>データ暗号化\n復号化\nデータベース接続\nファイル操作（テクストファイル、バイナリファイル、XMLファイルなど）</code></pre>",
                            "type": "Html"
                        },
                        "id": "x15",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "15",
                        "time": 1555228371611,
                        "title": "15.0 プロジェクト演習共通部品",
                        "update_at": 1556488166377
                    },
                    "x16": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>メール送信\nメディア接続\nFTPアクセス</code></pre>",
                            "type": "Html"
                        },
                        "id": "x16",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "16",
                        "time": 1555228371611,
                        "title": "16.0 プロジェクト演習のメール送信、メディア接続、FTPアクセス",
                        "update_at": 1556488166377
                    },
                    "x17": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>システム配布\n自動更新\n多言語化</code></pre>",
                            "type": "Html"
                        },
                        "id": "x17",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "17",
                        "time": 1555228371611,
                        "title": "17.0 プロジェクト演習のシステム配布、自動更新、多言語化",
                        "update_at": 1556488166377
                    },
                    "x18": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>WinService\nWebService\nWCF</code></pre>",
                            "type": "Html"
                        },
                        "id": "x18",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "18",
                        "time": 1555228371611,
                        "title": "18.0 プロジェクト演習のサービスアプリケーション開発",
                        "update_at": 1556488166377
                    },
                    "x19": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>VS2017\nAndroid\nIOS</code></pre>",
                            "type": "Html"
                        },
                        "id": "x19",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "19",
                        "time": 1555228371611,
                        "title": "19.0 プロジェクト演習のAndroid、IOSなどクロスアプリ開発環境構築",
                        "update_at": 1556488166377
                    },
                    "x20": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "certificatePath": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
                            "type": "Certificate"
                        },
                        "id": "x20",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test1",
                        "ord": "20",
                        "time": 1555228371611,
                        "title": "20.9 御修了ありがとうございました。",
                        "update_at": 1556488166377
                    }
                }
            },
            "-Ld495mtWIyObJzEEK7s": {
                "contents": {
                    "x01": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\ngit install\n<a href=\"https://qiita.com/toshi-click/items/dcf3dd48fdc74c91b409\">git install guid</a></p>\n<p>create local repository\ncd D:\\work\\wohapp\ngit init\ngit clone https://github.com/highwayns/wohApp.git\ngit remote add origin/master https://github.com/highwayns/wohApp.git</p>\n<p>update repository</p>\n<p>git reset --hard origin/master\ngit fetch\ngit pull</p>\n<p>commit modified\ngit add .\ngit commit -m &quot;XXX modified&quot;\ngit push</p>\n<p>コンフリクト解消\n<a href=\"https://qiita.com/yuya_presto/items/5d99499cf96c0ebb09f8\">コンフリクト解消ガイド</a>\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x01",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "01",
                        "time": 1555228371611,
                        "title": "1.0 Git",
                        "update_at": 1556488166377
                    },
                    "x02": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>[json-server](https://github.com/highwayns/json-server)\n[json.org](https://json.org/)\n[json-editor](https://github.com/jdorn/json-editor)</code></pre>",
                            "type": "Html"
                        },
                        "id": "x02",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "02",
                        "time": 1555228371611,
                        "title": "2.0 json",
                        "update_at": 1556488166377
                    },
                    "x03": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>https://qiita.com/takeharu/items/809114f943208aaf55b3\nhttps://momentjs.com/\nhttps://underscorejs.org/\nhttps://qiita.com/tsukishimaao/items/39d22fd9178546d6cdeb\nhttps://wp-p.info/tpl_rep.php?cat=js-application&amp;fl=r9\nhttps://qiita.com/ichikawa_0829/items/85413fedc59822ccef75\nhttps://developer.mozilla.org/ja/docs/Web/API/Window/localStorage\n[js study guildline](https://github.com/highwayns/wohApp/blob/master/doc/js.md)</code></pre>",
                            "type": "Html"
                        },
                        "id": "x03",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "03",
                        "time": 1555228371611,
                        "title": "3.0 js",
                        "update_at": 1556488166377
                    },
                    "x04": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>http://www.ituore.com/entry/html-css-basic\nhttps://www.webopixel.net/html-css/503.html\nhttps://qiita.com/ritukiii/items/67b3c50002b48c6186d6</code></pre>",
                            "type": "Html"
                        },
                        "id": "x04",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "04",
                        "time": 1555228371611,
                        "title": "4.0 html/css",
                        "update_at": 1556488166377
                    },
                    "x05": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttps://qiita.com/taiponrock/items/9001ae194571feb63a5e\nhttps://nodejs.org/en/docs/</p>\n<p>npm install\nnpm start\nnpm run build</p>\n<p>https://dackdive.hateblo.jp/entry/2016/10/10/095800\nhttps://github.com/highwayns/esformatter</p>\n<p>npm install [-g] esformatter\nesformatter -i test.js</p>\n<p>webpack：\n【入门 Webpack，看这篇就够了 - 前端学习笔记 - SegmentFault 思否】\nhttps://segmentfault.com/a/1190000006178770\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x05",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "05",
                        "time": 1555228371611,
                        "title": "5.0 nodejs",
                        "update_at": 1556488166377
                    },
                    "x06": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>http://docs.phonegap.com/</code></pre>",
                            "type": "Html"
                        },
                        "id": "x06",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "06",
                        "time": 1555228371611,
                        "title": "6.0 phonegap",
                        "update_at": 1556488166377
                    },
                    "x07": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttps://algorithm.joho.info/programming/vs2017-visual-studio-tools-for-apache-cordova-install/\ndebug\nhttps://jp.vuejs.org/v2/cookbook/debugging-in-vscode.html</p>\n<p>install vue plugin &amp; Eslint plugin &amp; Debugger for Chrome\n    {\n      &quot;type&quot;: &quot;chrome&quot;,\n      &quot;request&quot;: &quot;launch&quot;,\n      &quot;name&quot;: &quot;vuejs: chrome&quot;,\n      &quot;url&quot;: &quot;http://localhost:8080&quot;,\n      &quot;webRoot&quot;: &quot;${workspaceFolder}/src&quot;,\n      &quot;breakOnLoad&quot;: true,\n      &quot;sourceMapPathOverrides&quot;: {\n        &quot;webpack:///./src/<em>&quot;: &quot;${webRoot}/</em>&quot;\n      }\n    }\nhttps://docs.microsoft.com/en-us/visualstudio/cross-platform/tools-for-cordova/debug-test/debug-using-visual-studio?view=toolsforcordova-2017\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x07",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "07",
                        "time": 1555228371611,
                        "title": "7.0 vs install cordova",
                        "update_at": 1556488166377
                    },
                    "x08": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttps://firebase.google.com/docs/reference/js/firebase</p>\n<p>firebase tools:</p>\n<p>npm i firebase-tools\nnpm i -g firebase-tools\nfirebase login\nfirebase init\nfirebase use --add\nfirebase serve --only hosting\nfirebase deploy\nfirebase open hosting:site</p>\n<p>firebase auth:\nfirebase database:\nfirebase firestore:\nfirebase storage:\nfirebase hosting:\nfirebase mlkit:</p>\n<p>firebase performance monitor:</p>\n<p>アプリケーションにPerformance Monitoring SDKを追加する\n  （Optional）SDKを使用してアプリケーションのカスタムトレースとカウンタを定義する\n  Firebaseコンソールでのパフォーマンスデータの監視\nfirebase Crashlytics:\nfirebase Test Lab:</p>\n<p>firebase In-App messaging:\nfirebase Predictions:\nfirebase A/B Testing:\nfirebase Cloud messaging:\nfirebase Remote Config:\nfirebase Dynamic Links:\nfirebase App Index:\nfirebase invite:\nfirebase admob:</p>\n<p><a href=\"https://github.com/highwayns/wohApp/blob/master/doc/firebase.md\">Firebase study guildline</a>\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x08",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "08",
                        "time": 1555228371611,
                        "title": "8.0 firebase",
                        "update_at": 1556488166377
                    },
                    "x09": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttps://cordova.apache.org/docs/en/latest/</p>\n<p>npm install cordova -g\ncordova create wohapp com.highwayns.wohapp wohApp\ncordova requirements\ncordova platform add ios --save\ncordova plugin add cordova-plugin-whitelist cordova-plugin-statusbar cordova-plugin-camera cordova-plugin-geolocation cordova-plugin-file-transfer cordova-plugin-inappbrowser cordova-plugin-network-information\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x09",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "09",
                        "time": 1555228371611,
                        "title": "9.0 cordova",
                        "update_at": 1556488166377
                    },
                    "x10": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttps://vuejs.org/v2/guide/\nhttps://vuex.vuejs.org/guide/\nhttps://jp.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html\nproject create:\nnpm install -g vue-cli\nvue init webpack test-vue</p>\n<p>project manager:\nnpm install --global @vue/cli\nvue ui</p>\n<p>online editor:\nhttps://github.com/highwayns/vuegg</p>\n<p><a href=\"https://github.com/highwayns/wohApp/blob/master/doc/vue.md\">Vue usage guildline</a>\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x10",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "10",
                        "time": 1555228371611,
                        "title": "10.0 vue &amp; vuex &amp;axios",
                        "update_at": 1556488166377
                    },
                    "x11": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttp://v2.framework7.io/vue/</p>\n<p>npm install framework7\nnpm install -g framework7-cli\nframework7 create\nframework7 create --ui\nframework7 create --ui --port 8080\nframework7 generate-assets\nframework7 generate-assets --ui\nframework7 cordova plugin add cordova-plugin-statusbar\nframework7 cordova plugin add cordova-plugin-splashscreen\nframework7 cordova build ios</p>\n<p><a href=\"https://github.com/highwayns/wohApp/blob/master/doc/framework7.md\">Framework7 study guildline</a>\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x11",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "11",
                        "time": 1555228371611,
                        "title": "11.0 framework7",
                        "update_at": 1556488166377
                    },
                    "x12": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttps://github.com/gulpjs/gulp/tree/master/docs</p>\n<p>npm install glup -g\ngulp Iconfont</p>\n<p>framework7-icons:\nhttps://github.com/framework7io/framework7-icons</p>\n<p>material-design-icons:\nhttps://github.com/google/material-design-icons\nhttps://icofont.com/icons\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x12",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "12",
                        "time": 1555228371611,
                        "title": "12.0 glup &amp; Iconfont",
                        "update_at": 1556488166377
                    },
                    "x13": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>https://maketips.net/tip/223/how-to-include-jquery-into-vuejs</code></pre>",
                            "type": "Html"
                        },
                        "id": "x13",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "13",
                        "time": 1555228371611,
                        "title": "13.0 jQuery",
                        "update_at": 1556488166377
                    },
                    "x14": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>https://github.com/FirebaseExtended/bolt/blob/master/docs/language.md\nnpm install --global firebase-bolt\nfirebase-bolt &lt; posts.bolt\n[Bolt study guildline](https://github.com/highwayns/wohApp/blob/master/doc/bolt.md)</code></pre>",
                            "type": "Html"
                        },
                        "id": "x14",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "14",
                        "time": 1555228371611,
                        "title": "14.0 firebasebot",
                        "update_at": 1556488166377
                    },
                    "x15": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttps://firechat.firebaseapp.com/docs/\nAPI - Public Methods\nnew Firechat(ref, options)\nFirechat.setUser(userId, userName, onComplete)\nFirechat.resumeSession()\nFirechat.on(eventType, callback)\nFirechat.createRoom(roomName, roomType, callback(roomId))\nFirechat.enterRoom(roomId)\nFirechat.leaveRoom(roomId)\nFirechat.sendMessage(roomId, messageContent, messageType=&#39;default&#39;, callback)\nFirechat.toggleUserMute(userId, callback)\nFirechat.inviteUser(userId, roomId)\nFirechat.acceptInvite(inviteId, callback)\nFirechat.declineInvite(inviteId, callback)\nFirechat.getRoomList(callback)\nFirechat.getUsersByRoom(roomId, [limit=100], callback)\nFirechat.getUsersByPrefix(prefix, startAt, endAt, limit, callback)\nFirechat.getRoom(roomId, callback)\nFirechat.createPost(content, pic, callback)\nFirechat.addComment(postKey, comments, callback)\nFirechat.likePost(postKey, callback)\nFirechat.getPostList(callback)\nFirechat.removePost(postKey, callback)\nFirechat.getPostComments(postkey, callback)\nFirechat.removePostComment(postKey, commentKey, callback)\nFirechat.getPostLikes(postkey, callback)\nFirechat.unlikePost(postKey, likeKey, callback)\nFirechat.addContact(userid, name, header, location, callback)\nFirechat.removeContact(userkey, callback)\nFirechat.getContactList(callback)</p>\n<p>API - Exposed Bindings\nuser-update - Invoked when the user&#39;s metadata changes.\nroom-enter - Invoked when the user successfully enters a room.\nroom-exit - Invoked when the user exists a room.\nmessage-add - Invoked when a new message is received.\nmessage-remove - Invoked when a message is deleted.\nroom-invite - Invoked when a new room invite is received.\nroom-invite-response - Invoked when a response to a previous invite is received.</p>\n<p>Data Structure\nmoderators/ \n  <user-id> - A list of user ids and their moderator status. \n    true|false - A boolean value indicating the user&#39;s moderator status.\nroom-messages/ \n  <room-id> \n    <message-id> \n      userId - The id of the user that sent the message.\n      name - The name of the user that sent the message.\n      message - The content of the message.\n      timestamp - The time at which the message was sent.\nroom-metadata/ \n  <room-id> \n    createdAt - The time at which the room was created.\n    createdByUserId- The id of the user that created the room.\n    id - The id of the room.\n    name - The public display name of the room.\n    type - The type of room, public or private.\nroom-users/\nuser-names-online/\nusers/ \n  <user-id> \n    id - The id of the user.\n    name - The display name of the user.\n    invites - A list of invites the user has received.\n    muted - A list of user ids currently muted by the user.\n    rooms - A list of currently active rooms, used for sessioning.\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x15",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "15",
                        "time": 1555228371611,
                        "title": "15.0 firechat",
                        "update_at": 1556488166377
                    },
                    "x16": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nJDKのインストール\nAndroid SDKのインストール</p>\n<p>export PATH=$HOME/Library/Android/sdk/platform-tools:$PATH\nexport PATH=$HOME/Library/Android/sdk/tools:$PATH</p>\n<p>cordova platform add android</p>\n<p>エミュレータでの検証:\nGenymotion.appを起動\nアプリケーション内で、VMをダウンロード (もしまだなければ)\nVMを起動\nCordovaから起動 \n$ cordova run android </p>\n<p>実機で検証:\nAndroid実機のUSBデバッグ機能をONに\nMacにAndroid実機をUSB接続 (USBケーブルが充電専用だとNGなので注意)\n次のコマンドで接続確認して、表示されればOK $ adb devices \nCordovaから起動 \n$ cordova run android \nビルドを待つ...\n実機でアプリが起動!\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x16",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "16",
                        "time": 1555228371611,
                        "title": "16.0 android",
                        "update_at": 1556488166377
                    },
                    "x17": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>Apple の開発者のダウンロードアップルの開発者として登録する必要があります。\n    $ npm install -g ios-sim\n    $ npm install -g ios-deploy\n    $ cordova run ios --device\n    $ cordova emulate ios</code></pre>",
                            "type": "Html"
                        },
                        "id": "x17",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "17",
                        "time": 1555228371611,
                        "title": "17.0 ios",
                        "update_at": 1556488166377
                    },
                    "x18": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\ncordova build windows -- --appx=8.1-phone\nTo deploy Windows package:\ncordova run windows -- --win  # explicitly specify Windows as deployment target\ncordova run windows # <code>run</code> uses Windows package by default</p>\n<p>To deploy Windows Phone package:\ncordova run windows -- --phone  # deploy app to Windows Phone 8.1 emulator\ncordova run windows --device -- --phone  # deploy app to connected device</p>\n<p>This command will give you the list of all available targets:\ncordova run windows --list\ncordova run windows --target=&quot;Emulator 8.1 720P 4.7 inch&quot; -- --phone\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x18",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "18",
                        "time": 1555228371611,
                        "title": "18.0 windows",
                        "update_at": 1556488166377
                    },
                    "x19": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>一部Packageはpython2.7を使っている。\nhttps://www.python.jp/install/windows/install_py2.7.html</code></pre>",
                            "type": "Html"
                        },
                        "id": "x19",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "19",
                        "time": 1555228371611,
                        "title": "19.0 python2.7",
                        "update_at": 1556488166377
                    },
                    "x20": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>https://github.com/highwayns/awesome-vue\nhttps://github.com/highwayns/vuejs-interview-questions\nhttps://github.com/highwayns/awesome-github-vue\nhttps://github.com/highwayns/vue2-elm\nhttps://github.com/useryangtao/vue-wechat</code></pre>",
                            "type": "Html"
                        },
                        "id": "x20",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "20",
                        "time": 1555228371611,
                        "title": "20.0 awaresome",
                        "update_at": 1556488166377
                    },
                    "x21": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nhttps://qiita.com/oret/items/8c9a216865b088c15d68\nhttps://jp.vuejs.org/v2/guide/unit-testing.html\nhttps://qiita.com/TsutomuNakamura/items/975329b61e5c8a375691\nhttps://qiita.com/chimame/items/e97883fd46b67529d59f</p>\n<p>npm install -g nodeunit\ntest folderにテストプログラムを作成する\nnodeunit test\n<a href=\"https://github.com/highwayns/wohApp/blob/master/doc/nodeunit.md\">Nodeunit usage guildline</a>\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x21",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "21",
                        "time": 1555228371611,
                        "title": "21.0 unittest",
                        "update_at": 1556488166377
                    },
                    "x22": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>[vuefire](https://github.com/highwayns/vuefire)\n[vue plugin](https://jp.vuejs.org/v2/guide/plugins.html)\n[VUEプラグインの使用](https://github.com/highwayns/wohApp/blob/master/doc/vueplugin.md)</code></pre>",
                            "type": "Html"
                        },
                        "id": "x22",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "22",
                        "time": 1555228371611,
                        "title": "22.0 vue plugin &amp; vuefire",
                        "update_at": 1556488166377
                    },
                    "x23": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>https://github.com/ahmed-musallam/AtACE-AEM-Vue</code></pre>",
                            "type": "Html"
                        },
                        "id": "x23",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "23",
                        "time": 1555228371611,
                        "title": "23.0 vue on aem",
                        "update_at": 1556488166377
                    },
                    "x24": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>[app-framework git](https://github.com/highwayns/app-framework)\n[app-framework guildline](https://github.com/highwayns/wohApp/blob/master/doc/appframework.md)\n[image-upload-component](https://github.com/highwayns/wohApp/blob/master/doc/image-upload-component.md)\n[sort-object](https://github.com/highwayns/wohApp/blob/master/doc/sort-object.md)\n[language-files](https://github.com/highwayns/wohApp/blob/master/doc/language-files.md)\n[Design your application](https://github.com/highwayns/wohApp/blob/master/doc/design.md)\n[Page components](https://github.com/highwayns/wohApp/blob/master/doc/page-components.md)\n[Routing](https://github.com/highwayns/wohApp/blob/master/doc/routing.md)\n[Global data object](https://github.com/highwayns/wohApp/blob/master/doc/data-object.md)\n[Icon fonts](https://github.com/highwayns/wohApp/blob/master/doc/icon-fonts.md)\n[Images](https://github.com/highwayns/wohApp/blob/master/doc/images.md)\n[Modules and Scripts](https://github.com/highwayns/wohApp/blob/master/doc/modules-and-scripts.md)\n[State restoration](https://github.com/highwayns/wohApp/blob/master/doc/state-restoration.md)</code></pre>",
                            "type": "Html"
                        },
                        "id": "x24",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "ord": "24",
                        "time": 1555228371611,
                        "title": "24.0 app-framework",
                        "update_at": 1556488166377
                    }
                }
            },
            "-LdLuLklhwL7keqLFNmD": {
                "contents": {
                    "x01": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n基本类型有六种： null，undefined，boolean，number，string，symbol\n对象（Object）是引用类型，在使用过程中会遇到浅拷贝和深拷贝的问题。\nlet a = { name: &#39;FE&#39; }\nlet b = a\nb.name = &#39;EF&#39;\nconsole.log(a.name) // EF</p>\n<p>Typeof\ntypeof 1 // &#39;number&#39;\ntypeof &#39;1&#39; // &#39;string&#39;\ntypeof undefined // &#39;undefined&#39;\ntypeof true // &#39;boolean&#39;\ntypeof Symbol() // &#39;symbol&#39;\ntypeof b // b 没有声明，但是还会显示 undefined\ntypeof [] // &#39;object&#39;\ntypeof {} // &#39;object&#39;\ntypeof console.log // &#39;function&#39;\ntypeof null // &#39;object&#39;\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x01",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "01",
                        "time": 1555228371611,
                        "title": "1.0 内置类型",
                        "update_at": 1556488166377
                    },
                    "x02": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "answer": "a",
                            "options": {
                                "a": "symbol",
                                "b": "undefined",
                                "c": "object",
                                "d": "function"
                            },
                            "title": "typeof Symbol()的结果是",
                            "type": "Select"
                        },
                        "id": "x02",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "02",
                        "time": 1555228371611,
                        "title": "1.1 内置类型选择题",
                        "update_at": 1556488166377
                    },
                    "x03": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "inputanswer": "Object",
                            "inputcontent": "对象（）是引用类型，在使用过程中会遇到浅拷贝和深拷贝的问题",
                            "title": "在（）中填入正确文字",
                            "type": "Input"
                        },
                        "id": "x03",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "03",
                        "time": 1555228371611,
                        "title": "1.2 内置类型填空题",
                        "update_at": 1556488166377
                    },
                    "x04": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>在条件判断时，除了 undefined， null， false， NaN， &#39;&#39;， 0， -0，其他所有值都转为 true，包括所有对象。\n对象在转换基本类型时，首先会调用 valueOf 然后调用 toString。并且这两个方法你是可以重写的。\nlet a = {\n  valueOf() {\n    return 0;\n  },\n  toString() {\n    return &#39;1&#39;;\n  },\n  [Symbol.toPrimitive]() {\n    return 2;\n  }\n}\n1 + a // =&gt; 3\n&#39;1&#39; + a // =&gt; &#39;12&#39;</code></pre>",
                            "type": "Html"
                        },
                        "id": "x04",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "04",
                        "time": 1555228371611,
                        "title": "2.0 类型转换",
                        "update_at": 1556488166377
                    },
                    "x05": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "answer": "d",
                            "options": {
                                "a": "undefined",
                                "b": "null",
                                "c": "false",
                                "d": "&#39;1&#39;"
                            },
                            "title": "在条件判断时转化为true的是",
                            "type": "Select"
                        },
                        "id": "x05",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "05",
                        "time": 1555228371611,
                        "title": "2.1 类型转换选择题",
                        "update_at": 1556488166377
                    },
                    "x06": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "inputanswer": "false",
                            "inputcontent": "在条件判断时-0转化为（）",
                            "title": "在（）中填入正确文字",
                            "type": "Input"
                        },
                        "id": "x06",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "06",
                        "time": 1555228371611,
                        "title": "2.2 类型转换填空题",
                        "update_at": 1556488166377
                    },
                    "x07": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>// [] 转成 true，然后取反变成 false\n[] == false\n// 根据第 8 条得出\n[] == ToNumber(false)\n[] == 0\n// 根据第 10 条得出\nToPrimitive([]) == 0\n// [].toString() -&gt; &#39;&#39;\n&#39;&#39; == 0\n// 根据第 6 条得出\n0 == 0 // -&gt; true</code></pre>",
                            "type": "Html"
                        },
                        "id": "x07",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "07",
                        "time": 1555228371611,
                        "title": "3.0 == 操作符",
                        "update_at": 1556488166377
                    },
                    "x08": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "answer": "c",
                            "options": {
                                "a": "[] == false",
                                "b": "[] == 0",
                                "c": "ToPrimitive([]) ！== 0",
                                "d": "&#39;&#39; == 0"
                            },
                            "title": "下述选择答案为false的是",
                            "type": "Select"
                        },
                        "id": "x08",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "08",
                        "time": 1555228371611,
                        "title": "3.1 == 操作符选择题",
                        "update_at": 1556488166377
                    },
                    "x09": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "inputanswer": "true",
                            "inputcontent": "0 == 0的结果是（）",
                            "title": "在（）中填入正确文字",
                            "type": "Input"
                        },
                        "id": "x09",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "09",
                        "time": 1555228371611,
                        "title": "3.2 == 操作符填空题",
                        "update_at": 1556488166377
                    },
                    "x10": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n每个函数都有 prototype 属性，除了 Function.prototype.bind()，该属性指向原型。\n每个对象都有 <strong>proto</strong> 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 [[prototype]]，但是 [[prototype]] 是内部属性，我们并不能访问到，所以使用 <em>proto</em> 来访问。\n对象可以通过 <strong>proto</strong> 来寻找不属于该对象的属性，<strong>proto</strong> 将对象连接起来组成了原型链。\nnew\nfunction create() {\n    // 创建一个空的对象\n    let obj = new Object()\n    // 获得构造函数\n    let Con = [].shift.call(arguments)\n    // 链接到原型\n    obj.<strong>proto</strong> = Con.prototype\n    // 绑定 this，执行构造函数\n    let result = Con.apply(obj, arguments)\n    // 确保 new 出来的是个对象\n    return typeof result === &#39;object&#39; ? result : obj\n}</p>\n<p>function Foo() {\n    return this;\n}\nFoo.getName = function () {\n    console.log(&#39;1&#39;);\n};\nFoo.prototype.getName = function () {\n    console.log(&#39;2&#39;);\n};</p>\n<p>new Foo.getName();   // -&gt; 1\nnew Foo().getName(); // -&gt; 2<br></code></pre>",
                            "type": "Html"
                        },
                        "id": "x10",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "10",
                        "time": 1555228371611,
                        "title": "4.0 prototype",
                        "update_at": 1556488166377
                    },
                    "x11": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>function instanceof(left, right) {\n    // 获得类型的原型\n    let prototype = right.prototype\n    // 获得对象的原型\n    left = left.__proto__\n    // 判断对象的类型是否等于类型的原型\n    while (true) {\n        if (left === null)\n            return false\n        if (prototype === left)\n            return true\n        left = left.__proto__\n    }\n}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x11",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "11",
                        "time": 1555228371611,
                        "title": "5.0 instanceof",
                        "update_at": 1556488166377
                    },
                    "x12": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nfunction foo() {\n    console.log(this.a)\n}\nvar a = 1\nfoo()</p>\n<p>var obj = {\n    a: 2,\n    foo: foo\n}\nobj.foo()\n// 以上两者情况 this 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x12",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "12",
                        "time": 1555228371611,
                        "title": "6.0 this",
                        "update_at": 1556488166377
                    },
                    "x13": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n全局执行上下文\n函数执行上下文\neval 执行上下文\nvar foo = 1\n(function foo() {\n    foo = 10\n    console.log(foo)\n}()) // -&gt; ƒ foo() { foo = 10 ; console.log(foo) }</p>\n<p>var 会产生很多错误，所以在 ES6中引入了 let。let 不能在声明前使用，但是这并不是常说的 let 不会提升，let 提升了声明但没有赋值，因为临时死区导致了并不能在声明前使用。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x13",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "13",
                        "time": 1555228371611,
                        "title": "7.0 执行上下文",
                        "update_at": 1556488166377
                    },
                    "x14": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。\nfor ( var i=1; i&lt;=5; i++) {\n    setTimeout( function timer() {\n        console.log( i );\n    }, i*1000 );\n}</p>\n<p>for (var i = 1; i &lt;= 5; i++) {\n  (function(j) {\n    setTimeout(function timer() {\n      console.log(j);\n    }, j * 1000);\n  })(i);\n}</p>\n<p>for ( var i=1; i&lt;=5; i++) {\n    setTimeout( function timer(j) {\n        console.log( j );\n    }, i*1000, i);\n}</p>\n<p>for ( let i=1; i&lt;=5; i++) {\n    setTimeout( function timer() {\n        console.log( i );\n    }, i*1000 );\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x14",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "14",
                        "time": 1555228371611,
                        "title": "8.0 闭包:",
                        "update_at": 1556488166377
                    },
                    "x15": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nlet a = {\n    age: 1\n}\nlet b = a\na.age = 2\nconsole.log(b.age) // 2</p>\n<p>let a = {\n    age: 1\n}\nlet b = Object.assign({}, a)\na.age = 2\nconsole.log(b.age) // 1\nlet a = {\n    age: 1\n}\nlet b = {...a}//展开运算符（…）\na.age = 2\nconsole.log(b.age) // 1\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x15",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "15",
                        "time": 1555228371611,
                        "title": "9.0 浅拷贝",
                        "update_at": 1556488166377
                    },
                    "x16": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nlet a = {\n    age: 1,\n    jobs: {\n        first: &#39;FE&#39;\n    }\n}\nlet b = {...a}\na.jobs.first = &#39;native&#39;\nconsole.log(b.jobs.first) // native</p>\n<p>let a = {\n    age: 1,\n    jobs: {\n        first: &#39;FE&#39;\n    }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = &#39;native&#39;\nconsole.log(b.jobs.first) // FE</p>\n<p>但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝性能最快的。当然如果你的数据中含有以上三种情况下，可以使用 lodash 的深拷贝函数。\nfunction structuralClone(obj) {\n  return new Promise(resolve =&gt; {\n    const {port1, port2} = new MessageChannel();\n    port2.onmessage = ev =&gt; resolve(ev.data);\n    port1.postMessage(obj);\n  });\n}</p>\n<p>var obj = {a: 1, b: {\n    c: b\n}}\n// 注意该方法是异步的\n// 可以处理 undefined 和循环引用对象\n(async () =&gt; {\n  const clone = await structuralClone(obj)\n})()</p>\n<p>在有 Babel 的情况下，我们可以直接使用 ES6 的模块化</p>\n<p>// file a.js\nexport function a() {}\nexport function b() {}\n// file b.js\nexport default function() {}</p>\n<p>import {a, b} from &#39;./a.js&#39;\nimport XXX from &#39;./b.js&#39;</p>\n<p>CommonJS\nCommonJs 是 Node 独有的规范，浏览器中使用就需要用到 Browserify 解析了。\n// a.js\nmodule.exports = {\n    a: 1\n}\n// or\nexports.a = 1</p>\n<p>// b.js\nvar module = require(&#39;./a.js&#39;)\nmodule.a // -&gt; log 1</p>\n<p>var module = require(&#39;./a.js&#39;)\nmodule.a\n// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，\n// 重要的是 module 这里，module 是 Node 独有的一个变量\nmodule.exports = {\n    a: 1\n}\n// 基本实现\nvar module = {\n  exports: {} // exports 就是个空对象\n}\n// 这个是为什么 exports 和 module.exports 用法相似的原因\nvar exports = module.exports\nvar load = function (module) {\n    // 导出的东西\n    var a = 1\n    module.exports = a\n    return module.exports\n};\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x16",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "16",
                        "time": 1555228371611,
                        "title": "10.0 深拷贝",
                        "update_at": 1556488166377
                    },
                    "x17": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>// AMD\ndefine([&#39;./a&#39;, &#39;./b&#39;], function(a, b) {\n    a.do()\n    b.do()\n})\ndefine(function(require, exports, module) {   \n    var a = require(&#39;./a&#39;)  \n    a.doSomething()   \n    var b = require(&#39;./b&#39;)\n    b.doSomething()\n})</code></pre>",
                            "type": "Html"
                        },
                        "id": "x17",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "17",
                        "time": 1555228371611,
                        "title": "11.0 AMD:AMD 是由 RequireJS 提出的",
                        "update_at": 1556488166377
                    },
                    "x18": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) =&gt; {\n  // 缓存一个定时器id\n  let timer = 0\n  // 这里返回的函数是每次用户实际调用的防抖函数\n  // 如果已经设定过定时器了就清空上一次的定时器\n  // 开始一个新的定时器，延迟执行用户传入的方法\n  return function(...args) {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() =&gt; {\n      func.apply(this, args)\n    }, wait)\n  }\n}\n// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</p>\n<p>// 这个是用来获取当前时间戳的\nfunction now() {\n  return +new Date()\n}\n/*<em>\n </em> 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n <em>\n </em> @param  {function} func        回调函数\n <em> @param  {number}   wait        表示时间窗口的间隔\n </em> @param  {boolean}  immediate   设置为ture时，是否立即调用函数\n <em> @return {function}             返回客户调用函数\n </em>/\nfunction debounce (func, wait = 50, immediate = true) {\n  let timer, context, args</p>\n<p>  // 延迟执行函数\n  const later = () =&gt; setTimeout(() =&gt; {\n    // 延迟函数执行完毕，清空缓存的定时器序号\n    timer = null\n    // 延迟执行的情况下，函数会在延迟函数中执行\n    // 使用到之前缓存的参数和上下文\n    if (!immediate) {\n      func.apply(context, args)\n      context = args = null\n    }\n  }, wait)</p>\n<p>  // 这里返回的函数是每次实际调用的函数\n  return function(...params) {\n    // 如果没有创建延迟执行函数（later），就创建一个\n    if (!timer) {\n      timer = later()\n      // 如果是立即执行，调用函数\n      // 否则缓存参数和调用上下文\n      if (immediate) {\n        func.apply(this, params)\n      } else {\n        context = this\n        args = params\n      }\n    // 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个\n    // 这样做延迟函数会重新计时\n    } else {\n      clearTimeout(timer)\n      timer = later()\n    }\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x18",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "18",
                        "time": 1555228371611,
                        "title": "12.0 防抖",
                        "update_at": 1556488166377
                    },
                    "x19": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>/**\n * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait\n *\n * @param  {function}   func      回调函数\n * @param  {number}     wait      表示时间窗口的间隔\n * @param  {object}     options   如果想忽略开始函数的的调用，传入{leading: false}。\n *                                如果想忽略结尾函数的调用，传入{trailing: false}\n *                                两者不能共存，否则函数不能执行\n * @return {function}             返回客户调用函数   \n */\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    // 之前的时间戳\n    var previous = 0;\n    // 如果 options 没传则设为空对象\n    if (!options) options = {};\n    // 定时器回调函数\n    var later = function() {\n      // 如果设置了 leading，就将 previous 设为 0\n      // 用于下面函数的第一个 if 判断\n      previous = options.leading === false ? 0 : _.now();\n      // 置空一是为了防止内存泄漏，二是为了下面的定时器判断\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      // 获得当前时间戳\n      var now = _.now();\n      // 首次进入前者肯定为 true\n      // 如果需要第一次不执行函数\n      // 就将上次时间戳设为当前的\n      // 这样在接下来计算 remaining 的值时会大于0\n      if (!previous &amp;&amp; options.leading === false) previous = now;\n      // 计算剩余时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      // 如果当前调用已经大于上次调用时间 + wait\n      // 或者用户手动调了时间\n       // 如果设置了 trailing，只会进入这个条件\n      // 如果没有设置 leading，那么第一次会进入这个条件\n      // 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了\n      // 其实还是会进入的，因为定时器的延时\n      // 并不是准确的时间，很可能你设置了2秒\n      // 但是他需要2.2秒才触发，这时候就会进入这个条件\n      if (remaining &lt;= 0 || remaining &gt; wait) {\n        // 如果存在定时器就清理掉否则会调用二次回调\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout &amp;&amp; options.trailing !== false) {\n        // 判断是否设置了定时器和 trailing\n        // 没有的话就开启一个定时器\n        // 并且不能不能同时设置 leading 和 trailing\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };</code></pre>",
                            "type": "Html"
                        },
                        "id": "x19",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "19",
                        "time": 1555228371611,
                        "title": "13.0 节流",
                        "update_at": 1556488166377
                    },
                    "x20": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n在 ES5 中，我们可以使用如下方式解决继承的问题\nfunction Super() {}\nSuper.prototype.getNumber = function() {\n  return 1\n}</p>\n<p>function Sub() {}\nlet s = new Sub()\nSub.prototype = Object.create(Super.prototype, {\n  constructor: {\n    value: Sub,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n})</p>\n<p>在 ES6 中，我们可以通过 class 语法轻松解决这个问题</p>\n<p>class MyDate extends Date {\n  test() {\n    return this.getTime()\n  }\n}\nlet myDate = new MyDate()\nmyDate.test()</p>\n<p>call, apply, bind 区别\nlet a = {\n    value: 1\n}\nfunction getValue(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value)\n}\ngetValue.call(a, &#39;yck&#39;, &#39;24&#39;)\ngetValue.apply(a, [&#39;yck&#39;, &#39;24&#39;])</p>\n<p>call, apply, bind 区别\nall 和 apply 都是为了解决改变 this 的指向。作用都是相同的，只是传参的方式不同。\nlet a = {\n    value: 1\n}\nfunction getValue(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value)\n}\ngetValue.call(a, &#39;yck&#39;, &#39;24&#39;)\ngetValue.apply(a, [&#39;yck&#39;, &#39;24&#39;])</p>\n<p>Function.prototype.myCall = function (context) {\n  var context = context || window\n  // 给 context 添加一个属性\n  // getValue.call(a, &#39;yck&#39;, &#39;24&#39;) =&gt; a.fn = getValue\n  context.fn = this\n  // 将 context 后面的参数取出来\n  var args = [...arguments].slice(1)\n  // getValue.call(a, &#39;yck&#39;, &#39;24&#39;) =&gt; a.fn(&#39;yck&#39;, &#39;24&#39;)\n  var result = context.fn(...args)\n  // 删除 fn\n  delete context.fn\n  return result\n}</p>\n<p>Function.prototype.myApply = function (context) {\n  var context = context || window\n  context.fn = this</p>\n<p>  var result\n  // 需要判断是否存储第二个参数\n  // 如果存在，就将第二个参数展开\n  if (arguments[1]) {\n    result = context.fn(...arguments[1])\n  } else {\n    result = context.fn()\n  }</p>\n<p>  delete context.fn\n  return result\n}</p>\n<p>Function.prototype.myBind = function (context) {\n  if (typeof this !== &#39;function&#39;) {\n    throw new TypeError(&#39;Error&#39;)\n  }\n  var _this = this\n  var args = [...arguments].slice(1)\n  // 返回一个函数\n  return function F() {\n    // 因为返回了一个函数，我们可以 new F()，所以需要判断\n    if (this instanceof F) {\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x20",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "20",
                        "time": 1555228371611,
                        "title": "14.0 继承",
                        "update_at": 1556488166377
                    },
                    "x21": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nPromise 是 ES6 新增的语法，解决了回调地狱的问题。\n// 三种状态\nconst PENDING = &quot;pending&quot;;\nconst RESOLVED = &quot;resolved&quot;;\nconst REJECTED = &quot;rejected&quot;;\n// promise 接收一个函数参数，该函数会立即执行\nfunction MyPromise(fn) {\n  let _this = this;\n  _this.currentState = PENDING;\n  _this.value = undefined;\n  // 用于保存 then 中的回调，只有当 promise\n  // 状态为 pending 时才会缓存，并且每个实例至多缓存一个\n  _this.resolvedCallbacks = [];\n  _this.rejectedCallbacks = [];</p>\n<p>  _this.resolve = function (value) {\n    if (value instanceof MyPromise) {\n      // 如果 value 是个 Promise，递归执行\n      return value.then(_this.resolve, _this.reject)\n    }\n    setTimeout(() =&gt; { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = RESOLVED;\n        _this.value = value;\n        _this.resolvedCallbacks.forEach(cb =&gt; cb());\n      }\n    })\n  };</p>\n<p>  _this.reject = function (reason) {\n    setTimeout(() =&gt; { // 异步执行，保证执行顺序\n      if (_this.currentState === PENDING) {\n        _this.currentState = REJECTED;\n        _this.value = reason;\n        _this.rejectedCallbacks.forEach(cb =&gt; cb());\n      }\n    })\n  }\n  // 用于解决以下问题\n  // new Promise(() =&gt; throw Error(&#39;error))\n  try {\n    fn(_this.resolve, _this.reject);\n  } catch (e) {\n    _this.reject(e);\n  }\n}</p>\n<p>MyPromise.prototype.then = function (onResolved, onRejected) {\n  var self = this;\n  // 规范 2.2.7，then 必须返回一个新的 promise\n  var promise2;\n  // 规范 2.2.onResolved 和 onRejected 都为可选参数\n  // 如果类型不是函数需要忽略，同时也实现了透传\n  // Promise.resolve(4).then().then((value) =&gt; console.log(value))\n  onResolved = typeof onResolved === &#39;function&#39; ? onResolved : v =&gt; v;\n  onRejected = typeof onRejected === &#39;function&#39; ? onRejected : r =&gt; throw r;</p>\n<p>  if (self.currentState === RESOLVED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      // 规范 2.2.4，保证 onFulfilled，onRjected 异步执行\n      // 所以用了 setTimeout 包裹下\n      setTimeout(function () {\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }</p>\n<p>  if (self.currentState === REJECTED) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      setTimeout(function () {\n        // 异步执行onRejected\n        try {\n          var x = onRejected(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (reason) {\n          reject(reason);\n        }\n      });\n    }));\n  }</p>\n<p>  if (self.currentState === PENDING) {\n    return (promise2 = new MyPromise(function (resolve, reject) {\n      self.resolvedCallbacks.push(function () {\n        // 考虑到可能会有报错，所以使用 try/catch 包裹\n        try {\n          var x = onResolved(self.value);\n          resolutionProcedure(promise2, x, resolve, reject);\n        } catch (r) {\n          reject(r);\n        }\n      });</p>\n<pre><code>  self.rejectedCallbacks.push(function () {\n    try {\n      var x = onRejected(self.value);\n      resolutionProcedure(promise2, x, resolve, reject);\n    } catch (r) {\n      reject(r);\n    }\n  });\n}));\n</code></pre><p>  }\n};\n// 规范 2.3\nfunction resolutionProcedure(promise2, x, resolve, reject) {\n  // 规范 2.3.1，x 不能和 promise2 相同，避免循环引用\n  if (promise2 === x) {\n    return reject(new TypeError(&quot;Error&quot;));\n  }\n  // 规范 2.3.2\n  // 如果 x 为 Promise，状态为 pending 需要继续等待否则执行\n  if (x instanceof MyPromise) {\n    if (x.currentState === PENDING) {\n      x.then(function (value) {\n        // 再次调用该函数是为了确认 x resolve 的\n        // 参数是什么类型，如果是基本类型就再次 resolve\n        // 把值传给下个 then\n        resolutionProcedure(promise2, value, resolve, reject);\n      }, reject);\n    } else {\n      x.then(resolve, reject);\n    }\n    return;\n  }\n  // 规范 2.3.3.3.3\n  // reject 或者 resolve 其中一个执行过得话，忽略其他的\n  let called = false;\n  // 规范 2.3.3，判断 x 是否为对象或者函数\n  if (x !== null &amp;&amp; (typeof x === &quot;object&quot; || typeof x === &quot;function&quot;)) {\n    // 规范 2.3.3.2，如果不能取出 then，就 reject\n    try {\n      // 规范 2.3.3.1\n      let then = x.then;\n      // 如果 then 是函数，调用 x.then\n      if (typeof then === &quot;function&quot;) {\n        // 规范 2.3.3.3\n        then.call(\n          x,\n          y =&gt; {\n            if (called) return;\n            called = true;\n            // 规范 2.3.3.3.1\n            resolutionProcedure(promise2, y, resolve, reject);\n          },\n          e =&gt; {\n            if (called) return;\n            called = true;\n            reject(e);\n          }\n        );\n      } else {\n        // 规范 2.3.3.4\n        resolve(x);\n      }\n    } catch (e) {\n      if (called) return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    // 规范 2.3.4，x 为基本类型\n    resolve(x);\n  }\n}</p>\n<p>Generator 实现\nGenerator 是 ES6 中新增的语法，和 Promise 一样，都可以用来异步编程\n// 使用 <em> 表示这是一个 Generator 函数\n// 内部可以通过 yield 暂停代码\n// 通过调用 next 恢复执行\nfunction</em> test() {\n  let a = 1 + 2;\n  yield 2;\n  yield 3;\n}\nlet b = test();\nconsole.log(b.next()); // &gt;  { value: 2, done: false }\nconsole.log(b.next()); // &gt;  { value: 3, done: false }\nconsole.log(b.next()); // &gt;  { value: undefined, done: true }</p>\n<p>// cb 也就是编译过的 test 函数\nfunction generator(cb) {\n  return (function() {\n    var object = {\n      next: 0,\n      stop: function() {}\n    };</p>\n<pre><code>return {\n  next: function() {\n    var ret = cb(object);\n    if (ret === undefined) return { value: undefined, done: true };\n    return {\n      value: ret,\n      done: false\n    };\n  }\n};\n</code></pre><p>  })();\n}\n// 如果你使用 babel 编译后可以发现 test 函数变成了这样\nfunction test() {\n  var a;\n  return generator(function(_context) {\n    while (1) {\n      switch ((_context.prev = _context.next)) {\n        // 可以发现通过 yield 将代码分割成几块\n        // 每次执行 next 函数就执行一块代码\n        // 并且表明下次需要执行哪块代码\n        case 0:\n          a = 1 + 2;\n          _context.next = 4;\n          return 2;\n        case 4:\n          _context.next = 6;\n          return 3;\n        // 执行完毕\n        case 6:\n        case &quot;end&quot;:\n          return _context.stop();\n      }\n    }\n  });\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x21",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "21",
                        "time": 1555228371611,
                        "title": "15.0 Promise 实现",
                        "update_at": 1556488166377
                    },
                    "x22": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n[1, 2, 3].map((v) =&gt; v + 1)\n// -&gt; [2, 3, 4]</p>\n<p>[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;].map(parseInt)\n//  parseInt(&#39;1&#39;, 0) -&gt; 1\n//  parseInt(&#39;2&#39;, 1) -&gt; NaN\n//  parseInt(&#39;3&#39;, 2) -&gt; NaN</p>\n<p>[1, [2], 3].flatMap((v) =&gt; v + 1)\n// -&gt; [2, 3, 4]\n如果想将一个多维数组彻底的降维，可以这样实现\nconst flattenDeep = (arr) =&gt; Array.isArray(arr)\n  ? arr.reduce( (a, b) =&gt; [...a, ...flattenDeep(b)] , [])\n  : [arr]</p>\n<p>flattenDeep([1, [[2], [3, [4]], 5]])</p>\n<p>Reduce 作用是数组中的值组合起来，最终得到一个值\nfunction a() {\n    console.log(1);\n}</p>\n<p>function b() {\n    console.log(2);\n}</p>\n<p>[a, b].reduce((a, b) =&gt; a(b()))\n// -&gt; 2 1\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x22",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "22",
                        "time": 1555228371611,
                        "title": "16.0 Map、FlatMap 和 Reduce",
                        "update_at": 1556488166377
                    },
                    "x23": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n一个函数如果加上 async ，那么该函数就会返回一个 Promise\nasync function test() {\n  return &quot;1&quot;;\n}\nconsole.log(test()); // -&gt; Promise {<resolved>: &quot;1&quot;}</p>\n<p>await 只能在 async 函数中使用\nfunction sleep() {\n  return new Promise(resolve =&gt; {\n    setTimeout(() =&gt; {\n      console.log(&#39;finish&#39;)\n      resolve(&quot;sleep&quot;);\n    }, 2000);\n  });\n}\nasync function test() {\n  let value = await sleep();\n  console.log(&quot;object&quot;);\n}\ntest()\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x23",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "23",
                        "time": 1555228371611,
                        "title": "17.0 async 和 await",
                        "update_at": 1556488166377
                    },
                    "x24": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nProxy 是 ES6 中新增的功能，可以用来自定义对象中的操作\nlet p = new Proxy(target, handler);\n// target 代表需要添加代理的对象\n// handler 用来自定义对象中的操作</p>\n<p>可以很方便的使用 Proxy 来实现一个数据绑定和监听\nlet onWatch = (obj, setBind, getLogger) =&gt; {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver);\n    },\n    set(target, property, value, receiver) {\n      setBind(value);\n      return Reflect.set(target, property, value);\n    }\n  };\n  return new Proxy(obj, handler);\n};</p>\n<p>let obj = { a: 1 }\nlet value\nlet p = onWatch(obj, (v) =&gt; {\n  value = v\n}, (target, property) =&gt; {\n  console.log(Get &#39;${property}&#39; = ${target[property]});\n})\np.a = 2 // bind value to 2\np.a // -&gt; Get &#39;a&#39; = 2\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x24",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "24",
                        "time": 1555228371611,
                        "title": "18.0 Proxy",
                        "update_at": 1556488166377
                    },
                    "x25": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "certificatePath": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecontents%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF-LcPuq3uP8_kKl9Si9yX?alt=media&amp;token=22d159ac-ead7-4465-9279-35ce0d322b20",
                            "type": "Certificate"
                        },
                        "id": "x25",
                        "knowledgeid": "-LdLuLklhwL7keqLFNmD",
                        "name": "tei952",
                        "ord": "25",
                        "time": 1555228371611,
                        "title": "19.9 学習終了頂きまして、おめでとうございます！",
                        "update_at": 1556488166377
                    }
                }
            },
            "-LedXZi8fzaKO45rL-Kv": {
                "contents": {
                    "x01": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>LOH教材制作基础是Markdown文件转换成为JSON格式。\n同时也支持将Markdown转化为HTML和PDF\nMarkDown文件格式要求请参照目录下的js.md</code></pre>",
                            "type": "Html"
                        },
                        "id": "x01",
                        "knowledgeid": "-LedXZi8fzaKO45rL-Kv",
                        "name": "tei952",
                        "ord": "01",
                        "time": 1555228371611,
                        "title": "1.0 LOH教材制作基础",
                        "update_at": 1556488166377
                    },
                    "x02": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nNOTE: 命令都是在终端里进行的。</p>\n<p>在开始之前，请确认你已经安装node.js</p>\n<p>1 下载并解压或者clone到本地\n2 进入LOHMD2N 目录，\n3 执行命令：<code>npm install</code>\n4 然后把需要批量转换的Markdown 文件放到 <code>./Markdowns</code> 目录下。\n5 执行命令: <code>gulp</code>\n6 工具会自动把Markdown 文件批量转换成相应的文件。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x02",
                        "knowledgeid": "-LedXZi8fzaKO45rL-Kv",
                        "name": "tei952",
                        "ord": "02",
                        "time": 1555228371611,
                        "title": "2.0 使用方法",
                        "update_at": 1556488166377
                    },
                    "x03": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>任务|命令| 说明\n----|----|-----\nMD2HTML | gulp MD2HTML | 把 markdown 转换成 HTML 文件。\nMD2PDF | gulp MD2PDF | 把 markdown 转换成 PDF 文件。\nMD2JSON| gulp MD2JSON| 把 markdown 转换成 JSON 文件。\nwatching | gulp watching| 监视 Markdowns 文件夹，一旦 markdown 文件被更改(新建、修改、删除)时自动进行转换。\ndefault | gulp 或者 gulp default | 一次批量把markdown 文件转换成相应的HTML/JSON/PDF文件。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x03",
                        "knowledgeid": "-LedXZi8fzaKO45rL-Kv",
                        "name": "tei952",
                        "ord": "03",
                        "time": 1555228371611,
                        "title": "3.0 Task (任务说明-命令说明)",
                        "update_at": 1556488166377
                    },
                    "x04": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>knowledgeid 知识编号\nauthor: 作者名称\nauthorid: 作者编号\n以上三项由LOH系统提供\n课件每页类型如下\n0 html\n1 select\n2 input\n3 youtube\n4 picture\n5 audio\n6 multiselect\n7 advertisment\n8 flash</code></pre>",
                            "type": "Html"
                        },
                        "id": "x04",
                        "knowledgeid": "-LedXZi8fzaKO45rL-Kv",
                        "name": "tei952",
                        "ord": "04",
                        "time": 1555228371611,
                        "title": "4.0 MD文件说明",
                        "update_at": 1556488166377
                    }
                }
            },
            "-LdLuU-AHWwvMHDT-QpQ": {
                "contents": {
                    "x01": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\nnextTick 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。</p>\n<p>在 Vue 2.4 之前都是使用的 microtasks，但是 microtasks 的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都使用 macrotasks 又可能会出现渲染的性能问题。所以在新版本中，会默认使用 microtasks，但在特殊情况下会使用 macrotasks，比如 v-on。</p>\n<p>对于实现 macrotasks ，会先判断是否能使用 setImmediate ，不能的话降级为 MessageChannel ，以上都不行的话就使用 setTimeout </p>\n<p>js\nif (typeof setImmediate !== &#39;undefined&#39; &amp;&amp; isNative(setImmediate)) {\n  macroTimerFunc = () =&gt; {\n    setImmediate(flushCallbacks)\n  }\n} else if (\n  typeof MessageChannel !== &#39;undefined&#39; &amp;&amp;\n  (isNative(MessageChannel) ||\n    // PhantomJS\n    MessageChannel.toString() === &#39;[object MessageChannelConstructor]&#39;)\n) {\n  const channel = new MessageChannel()\n  const port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = () =&gt; {\n    port.postMessage(1)\n  }\n} else {\n  /<em> istanbul ignore next </em>/\n  macroTimerFunc = () =&gt; {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x01",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "01",
                        "time": 1555228371611,
                        "title": "1.0 NextTick 原理分析",
                        "update_at": 1556488166377
                    },
                    "x02": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>js\nexport function nextTick(cb?: Function, ctx?: Object) {\n  let _resolve\n  // 将回调函数整合进一个数组中\n  callbacks.push(() =&gt; {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, &#39;nextTick&#39;)\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    if (useMacroTask) {\n      macroTimerFunc()\n    } else {\n      microTimerFunc()\n    }\n  }\n  // 判断是否可以使用 Promise \n  // 可以的话给 _resolve 赋值\n  // 这样回调函数就能以 promise 的方式调用\n  if (!cb &amp;&amp; typeof Promise !== &#39;undefined&#39;) {\n    return new Promise(resolve =&gt; {\n      _resolve = resolve\n    })\n  }\n}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x02",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "02",
                        "time": 1555228371611,
                        "title": "2.0 nextTick 同时也支持 Promise 的使用，会判断是否实现了 Promise",
                        "update_at": 1556488166377
                    },
                    "x03": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n生命周期函数就是组件在初始化或者数据更新时会触发的钩子函数。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/12/1648d9df78201f07?w=1200&amp;h=3039&amp;f=png&amp;s=50021\" alt=\"\"></p>\n<p>在初始化时，会调用以下代码，生命周期就是通过 callHook 调用的</p>\n<p>js\nVue.prototype._init = function(options) {\n    initLifecycle(vm)\n    initEvents(vm)\n    initRender(vm)\n    callHook(vm, &#39;beforeCreate&#39;) // 拿不到 props data\n    initInjections(vm) \n    initState(vm)\n    initProvide(vm)\n    callHook(vm, &#39;created&#39;)\n}</p>\n<p>可以发现在以上代码中，beforeCreate 调用的时候，是获取不到 props 或者 data 中的数据的，因为这些数据的初始化都在 initState 中。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x03",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "03",
                        "time": 1555228371611,
                        "title": "3.0 生命周期分析",
                        "update_at": 1556488166377
                    },
                    "x04": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n接下来会执行挂载函数</p>\n<p>js\nexport function mountComponent {\n    callHook(vm, &#39;beforeMount&#39;)\n    // ...\n    if (vm.$vnode == null) {\n        vm._isMounted = true\n        callHook(vm, &#39;mounted&#39;)\n    }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x04",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "04",
                        "time": 1555228371611,
                        "title": "4.0 挂载函数",
                        "update_at": 1556488166377
                    },
                    "x05": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n接下来是数据更新时会调用的钩子函数</p>\n<p>js\nfunction flushSchedulerQueue() {\n  // ...\n  for (index = 0; index &lt; queue.length; index++) {\n    watcher = queue[index]\n    if (watcher.before) {\n      watcher.before() // 调用 beforeUpdate\n    }\n    id = watcher.id\n    has[id] = null\n    watcher.run()\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1\n      if (circular[id] &gt; MAX_UPDATE_COUNT) {\n        warn(\n          &#39;You may have an infinite update loop &#39; +\n            (watcher.user\n              ? in watcher with expression &quot;${watcher.expression}&quot;\n              : in a component render function.),\n          watcher.vm\n        )\n        break\n      }\n    }\n  }\n  callUpdatedHooks(updatedQueue)\n}</p>\n<p>function callUpdatedHooks(queue) {\n  let i = queue.length\n  while (i--) {\n    const watcher = queue[i]\n    const vm = watcher.vm\n    if (vm._watcher === watcher &amp;&amp; vm._isMounted) {\n      callHook(vm, &#39;updated&#39;)\n    }\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x05",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "05",
                        "time": 1555228371611,
                        "title": "5.0 钩子函数",
                        "update_at": 1556488166377
                    },
                    "x06": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n上图还有两个生命周期没有说，分别为 activated 和 deactivated ，这两个钩子函数是 keep-alive 组件独有的。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 actived 钩子函数。</p>\n<p>最后就是销毁组件的钩子函数了</p>\n<p>js\nVue.prototype.$destroy = function() {\n  // ...\n  callHook(vm, &#39;beforeDestroy&#39;)\n  vm._isBeingDestroyed = true\n  // remove self from parent\n  const parent = vm.$parent\n  if (parent &amp;&amp; !parent._isBeingDestroyed &amp;&amp; !vm.$options.abstract) {\n    remove(parent.$children, vm)\n  }\n  // teardown watchers\n  if (vm._watcher) {\n    vm._watcher.teardown()\n  }\n  let i = vm._watchers.length\n  while (i--) {\n    vm._watchers[i].teardown()\n  }\n  // remove reference from data ob\n  // frozen object may not have observer.\n  if (vm._data.<strong>ob</strong>) {\n    vm._data.<strong>ob</strong>.vmCount--\n  }\n  // call the last hook...\n  vm._isDestroyed = true\n  // invoke destroy hooks on current rendered tree\n  vm.<strong>patch</strong>(vm._vnode, null)\n  // fire destroyed hook\n  callHook(vm, &#39;destroyed&#39;)\n  // turn off all instance listeners.\n  vm.$off()\n  // remove <strong>vue</strong> reference\n  if (vm.$el) {\n    vm.$el.<strong>vue</strong> = null\n  }\n  // release circular reference (#6759)\n  if (vm.$vnode) {\n    vm.$vnode.parent = null\n  }\n}</p>\n<p>在执行销毁操作前会调用 beforeDestroy 钩子函数，然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 destroyed 钩子函数。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x06",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "06",
                        "time": 1555228371611,
                        "title": "6.0 销毁组件的钩子函数",
                        "update_at": 1556488166377
                    },
                    "x07": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>以下思维导图罗列了源码中重要的一些函数\n![](https://user-gold-cdn.xitu.io/2018/7/27/164da511aeec01c9?w=3000&amp;h=1345&amp;f=png&amp;s=1424682)</code></pre>",
                            "type": "Html"
                        },
                        "id": "x07",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "07",
                        "time": 1555228371611,
                        "title": "7.0 重要函数思维导图",
                        "update_at": 1556488166377
                    },
                    "x08": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n在开始之前，推荐大家 clone 一份源码对照着看。因为篇幅较长，函数间的跳转也很多。</p>\n<p>使用路由之前，需要调用 Vue.use(VueRouter)，这是因为让插件可以使用 Vue \njs\nexport function initUse (Vue: GlobalAPI) {\n  Vue.use = function (plugin: Function | Object) {\n    // 判断重复安装插件\n    const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\n    if (installedPlugins.indexOf(plugin) &gt; -1) {\n      return this\n    }\n    const args = toArray(arguments, 1)\n    // 插入 Vue\n    args.unshift(this)\n    // 一般插件都会有一个 install 函数\n    // 通过该函数让插件可以使用 Vue\n    if (typeof plugin.install === &#39;function&#39;) {\n      plugin.install.apply(plugin, args)\n    } else if (typeof plugin === &#39;function&#39;) {\n      plugin.apply(null, args)\n    }\n    installedPlugins.push(plugin)\n    return this\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x08",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "08",
                        "time": 1555228371611,
                        "title": "8.0 路由注册",
                        "update_at": 1556488166377
                    },
                    "x09": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\njs\nexport function install (Vue) {\n  // 确保 install 调用一次\n  if (install.installed &amp;&amp; _Vue === Vue) return\n  install.installed = true\n  // 把 Vue 赋值给全局变量\n  _Vue = Vue\n  const registerInstance = (vm, callVal) =&gt; {\n    let i = vm.$options._parentVnode\n    if (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal)\n    }\n  }\n  // 给每个组件的钩子函数混入实现\n  // 可以发现在 beforeCreate 钩子执行时\n  // 会初始化路由\n  Vue.mixin({\n    beforeCreate () {\n      // 判断组件是否存在 router 对象，该对象只在根组件上有\n      if (isDef(this.$options.router)) {\n        // 根路由设置为自己\n        this._routerRoot = this\n        this._router = this.$options.router\n        // 初始化路由\n        this._router.init(this)\n        // 很重要，为 _route 属性实现双向绑定\n        // 触发组件渲染\n        Vue.util.defineReactive(this, &#39;_route&#39;, this._router.history.current)\n      } else {\n        // 用于 router-view 层级判断\n        this._routerRoot = (this.$parent &amp;&amp; this.$parent._routerRoot) || this\n      }\n      registerInstance(this, this)\n    },\n    destroyed () {\n      registerInstance(this)\n    }\n  })\n  // 全局注册组件 router-link 和 router-view\n  Vue.component(&#39;RouterView&#39;, View)\n  Vue.component(&#39;RouterLink&#39;, Link)\n}</p>\n<p>对于路由注册来说，核心就是调用 Vue.use(VueRouter)，使得 VueRouter 可以使用 Vue。然后通过 Vue 来调用 VueRouter 的 install 函数。在该函数中，核心就是给组件混入钩子函数和全局注册两个路由组件。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x09",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "09",
                        "time": 1555228371611,
                        "title": "9.0 接下来看下 install 函数的部分实现",
                        "update_at": 1556488166377
                    },
                    "x10": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n在安装插件后，对 VueRouter 进行实例化。\njs\nconst Home = { template: &#39;<div>home</div>&#39; }\nconst Foo = { template: &#39;<div>foo</div>&#39; }\nconst Bar = { template: &#39;<div>bar</div>&#39; }</p>\n<p>// 3. Create the router\nconst router = new VueRouter({\n  mode: &#39;hash&#39;,\n  base: __dirname,\n  routes: [\n    { path: &#39;/&#39;, component: Home }, // all paths are defined without the hash.\n    { path: &#39;/foo&#39;, component: Foo },\n    { path: &#39;/bar&#39;, component: Bar }\n  ]\n})\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x10",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "10",
                        "time": 1555228371611,
                        "title": "10.0 VueRouter 实例化",
                        "update_at": 1556488166377
                    },
                    "x11": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\njs\nconstructor(options: RouterOptions = {}) {\n    // ...\n    // 路由匹配对象\n    this.matcher = createMatcher(options.routes || [], this)</p>\n<pre><code>// 根据 mode 采取不同的路由方式\nlet mode = options.mode || &#39;hash&#39;\nthis.fallback =\n  mode === &#39;history&#39; &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== false\nif (this.fallback) {\n  mode = &#39;hash&#39;\n}\nif (!inBrowser) {\n  mode = &#39;abstract&#39;\n}\nthis.mode = mode\n\nswitch (mode) {\n  case &#39;history&#39;:\n    this.history = new HTML5History(this, options.base)\n    break\n  case &#39;hash&#39;:\n    this.history = new HashHistory(this, options.base, this.fallback)\n    break\n  case &#39;abstract&#39;:\n    this.history = new AbstractHistory(this, options.base)\n    break\n  default:\n    if (process.env.NODE_ENV !== &#39;production&#39;) {\n      assert(false, invalid mode: ${mode})\n    }\n}\n</code></pre><p>  }\n在实例化 VueRouter 的过程中，核心是创建一个路由匹配对象，并且根据 mode 来采取不同的路由方式。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x11",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "11",
                        "time": 1555228371611,
                        "title": "11.0 来看一下 VueRouter 的构造函数",
                        "update_at": 1556488166377
                    },
                    "x12": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\njs\nexport function createMatcher (\n  routes: Array<RouteConfig>,\n  router: VueRouter\n): Matcher {\n    // 创建路由映射表\n  const { pathList, pathMap, nameMap } = createRouteMap(routes)</p>\n<p>  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap)\n  }\n  // 路由匹配\n  function match (\n    raw: RawLocation,\n    currentRoute?: Route,\n    redirectedFrom?: Location\n  ): Route {\n    //...\n  }</p>\n<p>  return {\n    match,\n    addRoutes\n  }\n}\ncreateMatcher 函数的作用就是创建路由映射表，然后通过闭包的方式让 addRoutes 和 match 函数能够使用路由映射表的几个对象，最后返回一个 Matcher 对象。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x12",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "12",
                        "time": 1555228371611,
                        "title": "12.0 创建路由匹配对象",
                        "update_at": 1556488166377
                    },
                    "x13": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n接下来看 createMatcher 函数时如何创建映射表的\njs\nexport function createRouteMap (\n  routes: Array<RouteConfig>,\n  oldPathList?: Array<string>,\n  oldPathMap?: Dictionary<RouteRecord>,\n  oldNameMap?: Dictionary<RouteRecord>\n): {\n  pathList: Array<string>;\n  pathMap: Dictionary<RouteRecord>;\n  nameMap: Dictionary<RouteRecord>;\n} {\n  // 创建映射表\n  const pathList: Array<string> = oldPathList || []\n  const pathMap: Dictionary<RouteRecord> = oldPathMap || Object.create(null)\n  const nameMap: Dictionary<RouteRecord> = oldNameMap || Object.create(null)\n  // 遍历路由配置，为每个配置添加路由记录\n  routes.forEach(route =&gt; {\n    addRouteRecord(pathList, pathMap, nameMap, route)\n  })\n  // 确保通配符在最后\n  for (let i = 0, l = pathList.length; i &lt; l; i++) {\n    if (pathList[i] === &#39;*&#39;) {\n      pathList.push(pathList.splice(i, 1)[0])\n      l--\n      i--\n    }\n  }\n  return {\n    pathList,\n    pathMap,\n    nameMap\n  }\n}\n// 添加路由记录\nfunction addRouteRecord (\n  pathList: Array<string>,\n  pathMap: Dictionary<RouteRecord>,\n  nameMap: Dictionary<RouteRecord>,\n  route: RouteConfig,\n  parent?: RouteRecord,\n  matchAs?: string\n) {\n  // 获得路由配置下的属性\n  const { path, name } = route\n  const pathToRegexpOptions: PathToRegexpOptions = route.pathToRegexpOptions || {}\n  // 格式化 url，替换 / \n  const normalizedPath = normalizePath(\n    path,\n    parent,\n    pathToRegexpOptions.strict\n  )\n  // 生成记录对象\n  const record: RouteRecord = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name,\n    parent,\n    matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  }</p>\n<p>  if (route.children) {\n    // 递归路由配置的 children 属性，添加路由记录\n    route.children.forEach(child =&gt; {\n      const childMatchAs = matchAs\n        ? cleanPath(${matchAs}/${child.path})\n        : undefined\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs)\n    })\n  }\n  // 如果路由有别名的话\n  // 给别名也添加路由记录\n  if (route.alias !== undefined) {\n    const aliases = Array.isArray(route.alias)\n      ? route.alias\n      : [route.alias]</p>\n<pre><code>aliases.forEach(alias =&gt; {\n  const aliasRoute = {\n    path: alias,\n    children: route.children\n  }\n  addRouteRecord(\n    pathList,\n    pathMap,\n    nameMap,\n    aliasRoute,\n    parent,\n    record.path || &#39;/&#39; // matchAs\n  )\n})\n</code></pre><p>  }\n  // 更新映射表\n  if (!pathMap[record.path]) {\n    pathList.push(record.path)\n    pathMap[record.path] = record\n  }\n  // 命名路由添加记录\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record\n    } else if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; !matchAs) {\n      warn(\n        false,\n        Duplicate named routes definition:  +\n        { name: &quot;${name}&quot;, path: &quot;${record.path}&quot; }\n      )\n    }\n  }\n}\n以上就是创建路由匹配对象的全过程，通过用户配置的路由规则来创建对应的路由映射表。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x13",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "13",
                        "time": 1555228371611,
                        "title": "13.0 创建映射表",
                        "update_at": 1556488166377
                    },
                    "x14": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n当根组件调用 beforeCreate 钩子函数时，会执行以下代码\njs\nbeforeCreate () {\n// 只有根组件有 router 属性，所以根组件初始化时会初始化路由\n  if (isDef(this.$options.router)) {\n    this._routerRoot = this\n    this._router = this.$options.router\n    this._router.init(this)\n    Vue.util.defineReactive(this, &#39;_route&#39;, this._router.history.current)\n  } else {\n    this._routerRoot = (this.$parent &amp;&amp; this.$parent._routerRoot) || this\n  }\n  registerInstance(this, this)\n}</p>\n<p>接下来看下路由初始化会做些什么\njs\ninit(app: any /<em> Vue component instance </em>/) {\n    // 保存组件实例\n    this.apps.push(app)\n    // 如果根组件已经有了就返回\n    if (this.app) {\n      return\n    }\n    this.app = app\n    // 赋值路由模式\n    const history = this.history\n    // 判断路由模式，以哈希模式为例\n    if (history instanceof HTML5History) {\n      history.transitionTo(history.getCurrentLocation())\n    } else if (history instanceof HashHistory) {\n      // 添加 hashchange 监听\n      const setupHashListener = () =&gt; {\n        history.setupListeners()\n      }\n      // 路由跳转\n      history.transitionTo(\n        history.getCurrentLocation(),\n        setupHashListener,\n        setupHashListener\n      )\n    }\n    // 该回调会在 transitionTo 中调用\n    // 对组件的 _route 属性进行赋值，触发组件渲染\n    history.listen(route =&gt; {\n      this.apps.forEach(app =&gt; {\n        app._route = route\n      })\n    })\n  }\n在路由初始化时，核心就是进行路由的跳转，改变 URL 然后渲染对应的组件。接下来来看一下路由是如何进行跳转的。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x14",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "14",
                        "time": 1555228371611,
                        "title": "14.0 路由初始化",
                        "update_at": 1556488166377
                    },
                    "x15": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>js\ntransitionTo (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  // 获取匹配的路由信息\n  const route = this.router.match(location, this.current)\n  // 确认切换路由\n  this.confirmTransition(route, () =&gt; {\n    // 以下为切换路由成功或失败的回调\n    // 更新路由信息，对组件的 _route 属性进行赋值，触发组件渲染\n    // 调用 afterHooks 中的钩子函数\n    this.updateRoute(route)\n    // 添加 hashchange 监听\n    onComplete &amp;&amp; onComplete(route)\n    // 更新 URL\n    this.ensureURL()\n    // 只执行一次 ready 回调\n    if (!this.ready) {\n      this.ready = true\n      this.readyCbs.forEach(cb =&gt; { cb(route) })\n    }\n  }, err =&gt; {\n  // 错误处理\n    if (onAbort) {\n      onAbort(err)\n    }\n    if (err &amp;&amp; !this.ready) {\n      this.ready = true\n      this.readyErrorCbs.forEach(cb =&gt; { cb(err) })\n    }\n  })\n}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x15",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "15",
                        "time": 1555228371611,
                        "title": "15.0 路由跳转",
                        "update_at": 1556488166377
                    },
                    "x16": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>在路由跳转中，需要先获取匹配的路由信息，所以先来看下如何获取匹配的路由信息\njs\nfunction match (\n  raw: RawLocation,\n  currentRoute?: Route,\n  redirectedFrom?: Location\n): Route {\n  // 序列化 url\n  // 比如对于该 url 来说 /abc?foo=bar&amp;baz=qux#hello\n  // 会序列化路径为 /abc\n  // 哈希为 #hello\n  // 参数为 foo: &#39;bar&#39;, baz: &#39;qux&#39;\n  const location = normalizeLocation(raw, currentRoute, false, router)\n  const { name } = location\n  // 如果是命名路由，就判断记录中是否有该命名路由配置\n  if (name) {\n    const record = nameMap[name]\n    // 没找到表示没有匹配的路由\n    if (!record) return _createRoute(null, location)\n    const paramNames = record.regex.keys\n      .filter(key =&gt; !key.optional)\n      .map(key =&gt; key.name)\n    // 参数处理\n    if (typeof location.params !== &#39;object&#39;) {\n      location.params = {}\n    }\n    if (currentRoute &amp;&amp; typeof currentRoute.params === &#39;object&#39;) {\n      for (const key in currentRoute.params) {\n        if (!(key in location.params) &amp;&amp; paramNames.indexOf(key) &gt; -1) {\n          location.params[key] = currentRoute.params[key]\n        }\n      }\n    }\n    if (record) {\n      location.path = fillParams(record.path, location.params, named route &quot;${name}&quot;)\n      return _createRoute(record, location, redirectedFrom)\n    }\n  } else if (location.path) {\n    // 非命名路由处理\n    location.params = {}\n    for (let i = 0; i &lt; pathList.length; i++) {\n     // 查找记录\n      const path = pathList[i]\n      const record = pathMap[path]\n      // 如果匹配路由，则创建路由\n      if (matchRoute(record.regex, location.path, location.params)) {\n        return _createRoute(record, location, redirectedFrom)\n      }\n    }\n  }\n  // 没有匹配的路由\n  return _createRoute(null, location)\n}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x16",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "16",
                        "time": 1555228371611,
                        "title": "16.0 获取匹配的路由信息",
                        "update_at": 1556488166377
                    },
                    "x17": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n接下来看看如何创建路由\njs\n// 根据条件创建不同的路由\nfunction _createRoute(\n  record: ?RouteRecord,\n  location: Location,\n  redirectedFrom?: Location\n): Route {\n  if (record &amp;&amp; record.redirect) {\n    return redirect(record, redirectedFrom || location)\n  }\n  if (record &amp;&amp; record.matchAs) {\n    return alias(record, location, record.matchAs)\n  }\n  return createRoute(record, location, redirectedFrom, router)\n}</p>\n<p>export function createRoute (\n  record: ?RouteRecord,\n  location: Location,\n  redirectedFrom?: ?Location,\n  router?: VueRouter\n): Route {\n  const stringifyQuery = router &amp;&amp; router.options.stringifyQuery\n  // 克隆参数\n  let query: any = location.query || {}\n  try {\n    query = clone(query)\n  } catch (e) {}\n  // 创建路由对象\n  const route: Route = {\n    name: location.name || (record &amp;&amp; record.name),\n    meta: (record &amp;&amp; record.meta) || {},\n    path: location.path || &#39;/&#39;,\n    hash: location.hash || &#39;&#39;,\n    query,\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery),\n    matched: record ? formatMatch(record) : []\n  }\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery)\n  }\n  // 让路由对象不可修改\n  return Object.freeze(route)\n}\n// 获得包含当前路由的所有嵌套路径片段的路由记录\n// 包含从根路由到当前路由的匹配记录，从上至下\nfunction formatMatch(record: ?RouteRecord): Array<RouteRecord> {\n  const res = []\n  while (record) {\n    res.unshift(record)\n    record = record.parent\n  }\n  return res\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x17",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "17",
                        "time": 1555228371611,
                        "title": "17.0 如何创建路由",
                        "update_at": 1556488166377
                    },
                    "x18": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n至此匹配路由已经完成，我们回到 transitionTo 函数中，接下来执行 confirmTransition \njs\ntransitionTo (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  // 确认切换路由\n  this.confirmTransition(route, () =&gt; {}\n}\nconfirmTransition(route: Route, onComplete: Function, onAbort?: Function) {\n  const current = this.current\n  // 中断跳转路由函数\n  const abort = err =&gt; {\n    if (isError(err)) {\n      if (this.errorCbs.length) {\n        this.errorCbs.forEach(cb =&gt; {\n          cb(err)\n        })\n      } else {\n        warn(false, &#39;uncaught error during route navigation:&#39;)\n        console.error(err)\n      }\n    }\n    onAbort &amp;&amp; onAbort(err)\n  }\n  // 如果是相同的路由就不跳转\n  if (\n    isSameRoute(route, current) &amp;&amp;\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL()\n    return abort()\n  }\n  // 通过对比路由解析出可复用的组件，需要渲染的组件，失活的组件\n  const { updated, deactivated, activated } = resolveQueue(\n    this.current.matched,\n    route.matched\n  )</p>\n<p>  function resolveQueue(\n      current: Array<RouteRecord>,\n      next: Array<RouteRecord>\n    ): {\n      updated: Array<RouteRecord>,\n      activated: Array<RouteRecord>,\n      deactivated: Array<RouteRecord>\n    } {\n      let i\n      const max = Math.max(current.length, next.length)\n      for (i = 0; i &lt; max; i++) {\n        // 当前路由路径和跳转路由路径不同时跳出遍历\n        if (current[i] !== next[i]) {\n          break\n        }\n      }\n      return {\n        // 可复用的组件对应路由\n        updated: next.slice(0, i),\n        // 需要渲染的组件对应路由\n        activated: next.slice(i),\n        // 失活的组件对应路由\n        deactivated: current.slice(i)\n      }\n  }\n  // 导航守卫数组\n  const queue: Array&lt;?NavigationGuard&gt; = [].concat(\n    // 失活的组件钩子\n    extractLeaveGuards(deactivated),\n    // 全局 beforeEach 钩子\n    this.router.beforeHooks,\n    // 在当前路由改变，但是该组件被复用时调用\n    extractUpdateHooks(updated),\n    // 需要渲染组件 enter 守卫钩子\n    activated.map(m =&gt; m.beforeEnter),\n    // 解析异步路由组件\n    resolveAsyncComponents(activated)\n  )\n  // 保存路由\n  this.pending = route\n  // 迭代器，用于执行 queue 中的导航守卫钩子\n  const iterator = (hook: NavigationGuard, next) =&gt; {\n  // 路由不相等就不跳转路由\n    if (this.pending !== route) {\n      return abort()\n    }\n    try {\n    // 执行钩子\n      hook(route, current, (to: any) =&gt; {\n        // 只有执行了钩子函数中的 next，才会继续执行下一个钩子函数\n        // 否则会暂停跳转\n        // 以下逻辑是在判断 next() 中的传参\n        if (to === false || isError(to)) {\n          // next(false) \n          this.ensureURL(true)\n          abort(to)\n        } else if (\n          typeof to === &#39;string&#39; ||\n          (typeof to === &#39;object&#39; &amp;&amp;\n            (typeof to.path === &#39;string&#39; || typeof to.name === &#39;string&#39;))\n        ) {\n        // next(&#39;/&#39;) 或者 next({ path: &#39;/&#39; }) -&gt; 重定向\n          abort()\n          if (typeof to === &#39;object&#39; &amp;&amp; to.replace) {\n            this.replace(to)\n          } else {\n            this.push(to)\n          }\n        } else {\n        // 这里执行 next\n        // 也就是执行下面函数 runQueue 中的 step(index + 1)\n          next(to)\n        }\n      })\n    } catch (e) {\n      abort(e)\n    }\n  }\n  // 经典的同步执行异步函数\n  runQueue(queue, iterator, () =&gt; {\n    const postEnterCbs = []\n    const isValid = () =&gt; this.current === route\n    // 当所有异步组件加载完成后，会执行这里的回调，也就是 runQueue 中的 cb()\n    // 接下来执行 需要渲染组件的导航守卫钩子\n    const enterGuards = extractEnterGuards(activated, postEnterCbs, isValid)\n    const queue = enterGuards.concat(this.router.resolveHooks)\n    runQueue(queue, iterator, () =&gt; {\n    // 跳转完成\n      if (this.pending !== route) {\n        return abort()\n      }\n      this.pending = null\n      onComplete(route)\n      if (this.router.app) {\n        this.router.app.$nextTick(() =&gt; {\n          postEnterCbs.forEach(cb =&gt; {\n            cb()\n          })\n        })\n      }\n    })\n  })\n}\nexport function runQueue (queue: Array&lt;?NavigationGuard&gt;, fn: Function, cb: Function) {\n  const step = index =&gt; {\n  // 队列中的函数都执行完毕，就执行回调函数\n    if (index &gt;= queue.length) {\n      cb()\n    } else {\n      if (queue[index]) {\n      // 执行迭代器，用户在钩子函数中执行 next() 回调\n      // 回调中判断传参，没有问题就执行 next()，也就是 fn 函数中的第二个参数\n        fn(queue[index], () =&gt; {\n          step(index + 1)\n        })\n      } else {\n        step(index + 1)\n      }\n    }\n  }\n  // 取出队列中第一个钩子函数\n  step(0)\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x18",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "18",
                        "time": 1555228371611,
                        "title": "18.0 Transition",
                        "update_at": 1556488166377
                    },
                    "x19": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>接下来介绍导航守卫\njs\nconst queue: Array&lt;?NavigationGuard&gt; = [].concat(\n    // 失活的组件钩子\n    extractLeaveGuards(deactivated),\n    // 全局 beforeEach 钩子\n    this.router.beforeHooks,\n    // 在当前路由改变，但是该组件被复用时调用\n    extractUpdateHooks(updated),\n    // 需要渲染组件 enter 守卫钩子\n    activated.map(m =&gt; m.beforeEnter),\n    // 解析异步路由组件\n    resolveAsyncComponents(activated)\n)</code></pre>",
                            "type": "Html"
                        },
                        "id": "x19",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "19",
                        "time": 1555228371611,
                        "title": "19.0 导航守卫",
                        "update_at": 1556488166377
                    },
                    "x20": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>第一步是先执行失活组件的钩子函数\njs\nfunction extractLeaveGuards(deactivated: Array&lt;RouteRecord&gt;): Array&lt;?Function&gt; {\n// 传入需要执行的钩子函数名\n  return extractGuards(deactivated, &#39;beforeRouteLeave&#39;, bindGuard, true)\n}\nfunction extractGuards(\n  records: Array&lt;RouteRecord&gt;,\n  name: string,\n  bind: Function,\n  reverse?: boolean\n): Array&lt;?Function&gt; {\n  const guards = flatMapComponents(records, (def, instance, match, key) =&gt; {\n   // 找出组件中对应的钩子函数\n    const guard = extractGuard(def, name)\n    if (guard) {\n    // 给每个钩子函数添加上下文对象为组件自身\n      return Array.isArray(guard)\n        ? guard.map(guard =&gt; bind(guard, instance, match, key))\n        : bind(guard, instance, match, key)\n    }\n  })\n  // 数组降维，并且判断是否需要翻转数组\n  // 因为某些钩子函数需要从子执行到父\n  return flatten(reverse ? guards.reverse() : guards)\n}\nexport function flatMapComponents (\n  matched: Array&lt;RouteRecord&gt;,\n  fn: Function\n): Array&lt;?Function&gt; {\n// 数组降维\n  return flatten(matched.map(m =&gt; {\n  // 将组件中的对象传入回调函数中，获得钩子函数数组\n    return Object.keys(m.components).map(key =&gt; fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ))\n  }))\n}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x20",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "20",
                        "time": 1555228371611,
                        "title": "20.0 执行失活组件的钩子函数",
                        "update_at": 1556488166377
                    },
                    "x21": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>第二步执行全局 beforeEach 钩子函数\njs\nbeforeEach(fn: Function): Function {\n    return registerHook(this.beforeHooks, fn)\n}\nfunction registerHook(list: Array&lt;any&gt;, fn: Function): Function {\n  list.push(fn)\n  return () =&gt; {\n    const i = list.indexOf(fn)\n    if (i &gt; -1) list.splice(i, 1)\n  }\n}\n在 VueRouter 类中有以上代码，每当给 VueRouter 实例添加 beforeEach 函数时就会将函数 push 进 beforeHooks 中。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x21",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "21",
                        "time": 1555228371611,
                        "title": "21.0 全局 beforeEach 钩子函数",
                        "update_at": 1556488166377
                    },
                    "x22": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>第三步执行 beforeRouteUpdate 钩子函数，调用方式和第一步相同，只是传入的函数名不同，在该函数中可以访问到 this 对象。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x22",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "22",
                        "time": 1555228371611,
                        "title": "22.0 beforeRouteUpdate",
                        "update_at": 1556488166377
                    },
                    "x23": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>第四步执行 beforeEnter 钩子函数，该函数是路由独享的钩子函数。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x23",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "23",
                        "time": 1555228371611,
                        "title": "23.0 beforeEnter",
                        "update_at": 1556488166377
                    },
                    "x24": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>第五步是解析异步组件。\njs\nexport function resolveAsyncComponents (matched: Array&lt;RouteRecord&gt;): Function {\n  return (to, from, next) =&gt; {\n    let hasAsync = false\n    let pending = 0\n    let error = null\n    // 该函数作用之前已经介绍过了\n    flatMapComponents(matched, (def, _, match, key) =&gt; {\n    // 判断是否是异步组件\n      if (typeof def === &#39;function&#39; &amp;&amp; def.cid === undefined) {\n        hasAsync = true\n        pending++\n        // 成功回调\n        // once 函数确保异步组件只加载一次\n        const resolve = once(resolvedDef =&gt; {\n          if (isESModule(resolvedDef)) {\n            resolvedDef = resolvedDef.default\n          }\n          // 判断是否是构造函数\n          // 不是的话通过 Vue 来生成组件构造函数\n          def.resolved = typeof resolvedDef === &#39;function&#39;\n            ? resolvedDef\n            : _Vue.extend(resolvedDef)\n        // 赋值组件\n        // 如果组件全部解析完毕，继续下一步\n          match.components[key] = resolvedDef\n          pending--\n          if (pending &lt;= 0) {\n            next()\n          }\n        })\n        // 失败回调\n        const reject = once(reason =&gt; {\n          const msg = Failed to resolve async component ${key}: ${reason}\n          process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(false, msg)\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg)\n            next(error)\n          }\n        })\n        let res\n        try {\n        // 执行异步组件函数\n          res = def(resolve, reject)\n        } catch (e) {\n          reject(e)\n        }\n        if (res) {\n        // 下载完成执行回调\n          if (typeof res.then === &#39;function&#39;) {\n            res.then(resolve, reject)\n          } else {\n            const comp = res.component\n            if (comp &amp;&amp; typeof comp.then === &#39;function&#39;) {\n              comp.then(resolve, reject)\n            }\n          }\n        }\n      }\n    })\n    // 不是异步组件直接下一步\n    if (!hasAsync) next()\n  }\n}</code></pre>",
                            "type": "Html"
                        },
                        "id": "x24",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "24",
                        "time": 1555228371611,
                        "title": "24.0 解析异步组件",
                        "update_at": 1556488166377
                    },
                    "x25": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>以上就是第一个 runQueue 中的逻辑，第五步完成后会执行第一个 runQueue 中回调函数\njs\n// 该回调用于保存 beforeRouteEnter 钩子中的回调函数\nconst postEnterCbs = []\nconst isValid = () =&gt; this.current === route\n// beforeRouteEnter 导航守卫钩子\nconst enterGuards = extractEnterGuards(activated, postEnterCbs, isValid)\n// beforeResolve 导航守卫钩子\nconst queue = enterGuards.concat(this.router.resolveHooks)\nrunQueue(queue, iterator, () =&gt; {\n  if (this.pending !== route) {\n    return abort()\n  }\n  this.pending = null\n  // 这里会执行 afterEach 导航守卫钩子\n  onComplete(route)\n  if (this.router.app) {\n    this.router.app.$nextTick(() =&gt; {\n      postEnterCbs.forEach(cb =&gt; {\n        cb()\n      })\n    })\n  }\n})</code></pre>",
                            "type": "Html"
                        },
                        "id": "x25",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "25",
                        "time": 1555228371611,
                        "title": "25.0 保存 beforeRouteEnter 钩子中的回调函数",
                        "update_at": 1556488166377
                    },
                    "x26": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n第六步是执行 beforeRouteEnter 导航守卫钩子，beforeRouteEnter 钩子不能访问 this 对象，因为钩子在导航确认前被调用，需要渲染的组件还没被创建。但是该钩子函数是唯一一个支持在回调中获取 this 对象的函数，回调会在路由确认执行。\njs\nbeforeRouteEnter (to, from, next) {\n  next(vm =&gt; {\n    // 通过 vm 访问组件实例\n  })\n}</p>\n<p>下面来看看是如何支持在回调中拿到 this 对象的\njs\nfunction extractEnterGuards(\n  activated: Array<RouteRecord>,\n  cbs: Array<Function>,\n  isValid: () =&gt; boolean\n): Array&lt;?Function&gt; {\n// 这里和之前调用导航守卫基本一致\n  return extractGuards(\n    activated,\n    &#39;beforeRouteEnter&#39;,\n    (guard, _, match, key) =&gt; {\n      return bindEnterGuard(guard, match, key, cbs, isValid)\n    }\n  )\n}\nfunction bindEnterGuard(\n  guard: NavigationGuard,\n  match: RouteRecord,\n  key: string,\n  cbs: Array<Function>,\n  isValid: () =&gt; boolean\n): NavigationGuard {\n  return function routeEnterGuard(to, from, next) {\n    return guard(to, from, cb =&gt; {\n    // 判断 cb 是否是函数\n    // 是的话就 push 进 postEnterCbs\n      next(cb)\n      if (typeof cb === &#39;function&#39;) {\n        cbs.push(() =&gt; {\n          // 循环直到拿到组件实例\n          poll(cb, match.instances, key, isValid)\n        })\n      }\n    })\n  }\n}\n// 该函数是为了解决 issus #750\n// 当 router-view 外面包裹了 mode 为 out-in 的 transition 组件 \n// 会在组件初次导航到时获得不到组件实例对象\nfunction poll(\n  cb: any, // somehow flow cannot infer this is a function\n  instances: Object,\n  key: string,\n  isValid: () =&gt; boolean\n) {\n  if (\n    instances[key] &amp;&amp;\n    !instances[key]._isBeingDestroyed // do not reuse being destroyed instance\n  ) {\n    cb(instances[key])\n  } else if (isValid()) {\n  // setTimeout 16ms 作用和 nextTick 基本相同\n    setTimeout(() =&gt; {\n      poll(cb, instances, key, isValid)\n    }, 16)\n  }\n}\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x26",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "26",
                        "time": 1555228371611,
                        "title": "26.0 beforeRouteEnter 导航守卫钩子",
                        "update_at": 1556488166377
                    },
                    "x27": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>第七步是执行 beforeResolve 导航守卫钩子，如果注册了全局 beforeResolve 钩子就会在这里执行。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x27",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "27",
                        "time": 1555228371611,
                        "title": "27.0 beforeResolve 导航守卫钩子",
                        "update_at": 1556488166377
                    },
                    "x28": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>第八步就是导航确认，调用 afterEach 导航守卫钩子了。</code></pre>",
                            "type": "Html"
                        },
                        "id": "x28",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "28",
                        "time": 1555228371611,
                        "title": "28.0 调用 afterEach 导航守卫钩子",
                        "update_at": 1556488166377
                    },
                    "x29": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>以上都执行完成后，会触发组件的渲染\njs\nhistory.listen(route =&gt; {\n      this.apps.forEach(app =&gt; {\n        app._route = route\n      })\n})</code></pre>",
                            "type": "Html"
                        },
                        "id": "x29",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "29",
                        "time": 1555228371611,
                        "title": "29.0 触发组件的渲染",
                        "update_at": 1556488166377
                    },
                    "x30": {
                        "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                        "comment_count": 0,
                        "content": {
                            "data": "<pre><code>\n以上回调会在 updateRoute 中调用\njs\nupdateRoute(route: Route) {\n    const prev = this.current\n    this.current = route\n    this.cb &amp;&amp; this.cb(route)\n    this.router.afterHooks.forEach(hook =&gt; {\n      hook &amp;&amp; hook(route, prev)\n    })\n}</p>\n<p>至此，路由跳转已经全部分析完毕。核心就是判断需要跳转的路由是否存在于记录中，然后执行各种导航守卫函数，最后完成 URL 的改变和组件的渲染。\n</code></pre>",
                            "type": "Html"
                        },
                        "id": "x30",
                        "knowledgeid": "-LdLuU-AHWwvMHDT-QpQ",
                        "name": "tei952",
                        "ord": "30",
                        "time": 1555228371611,
                        "title": "30.0 updateRoute",
                        "update_at": 1556488166377
                    }
                }
            }
        }
    },
    "comments": {
        "data": {
            "0": {
                "avatar": "1",
                "name": "Cory Bergman",
                "postid": "11",
                "text": "wow that's some serious chat action",
                "time": "1404705240"
            },
            "1": {
                "avatar": "2",
                "name": "Rhonda Irvine",
                "postid": "12",
                "text": "what country is covered by your food app?",
                "time": "1404705260"
            },
            "2": {
                "avatar": "3",
                "name": "Nathan Lawson",
                "postid": "13",
                "text": "much  more interesting than a stupid grumpy cat",
                "time": "1404705300"
            },
            "3": {
                "avatar": "4",
                "name": "Vaughn",
                "postid": "14",
                "text": "Signed the petition. Hope it's not too late.",
                "time": "1404705400"
            },
            "-LbRHgPyDAMcmJnsf_nF": {
                "-LcRMrWF6UJfJ3gH8-I-": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRMrWF6UJfJ3gH8-I-",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "text": "sss",
                    "time": 1555254181076
                },
                "-LcRN4UeAaJJZuoRZyEP": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRN4UeAaJJZuoRZyEP",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "text": "xxx",
                    "time": 1555254238316
                },
                "-LcRNklevQTeQlpBWx0U": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRNklevQTeQlpBWx0U",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "text": "sss",
                    "time": 1555254414666
                },
                "-LcRPW2iMEZ6GsX-wg5u": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRPW2iMEZ6GsX-wg5u",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "text": "test comment",
                    "time": 1555254874587
                },
                "-LcRQ3lb9EYPAUMiuq26": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRQ3lb9EYPAUMiuq26",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "text": "sssxxxx",
                    "time": 1555255021307
                },
                "-LcRQvxtzTCO8pP38pV1": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRQvxtzTCO8pP38pV1",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "text": "test for the last time",
                    "time": 1555255247166
                }
            },
            "-LdLmvv2SvIuEAO7e-ch": {
                "-LdRfOl7dPjSLNuhUrCL": {
                    "avatar": "GQxxS27YoMV4aMVZ69C9uVimoG63",
                    "id": "-LdRfOl7dPjSLNuhUrCL",
                    "name": "test5",
                    "postid": "-LdLmvv2SvIuEAO7e-ch",
                    "text": "test",
                    "time": 1556333042903
                }
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "companys": {
        "data": {
            "-LbW068uZTzWv84W5fNq": {
                "Fax": "1",
                "HP": "1",
                "Manager": "1",
                "Tel": "1",
                "address": "11",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "companytype": "1",
                "created_at": 1554258359052,
                "id": "-LbW068uZTzWv84W5fNq",
                "industry": "2",
                "like_count": 0,
                "name": "test company3",
                "nickname": "test1",
                "photo": "",
                "update_at": 1554461027867
            },
            "-Lbfb0NmorPWFCnG4IA8": {
                "Fax": "",
                "HP": "",
                "Manager": "",
                "Tel": "",
                "address": "",
                "application_count": 0,
                "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                "companytype": "1",
                "created_at": 1554436069051,
                "id": "-Lbfb0NmorPWFCnG4IA8",
                "like_count": 0,
                "name": "",
                "nickname": "test1"
            },
            "-LbkD4fQjqDyGK1j_3dH": {
                "Fax": "sss",
                "HP": "sss",
                "Manager": "sss",
                "Tel": "sss",
                "address": "ssss",
                "application_count": 0,
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "companytype": "1",
                "created_at": 1554513419106,
                "id": "-LbkD4fQjqDyGK1j_3dH",
                "like_count": 0,
                "name": "ssss",
                "nickname": "test1"
            },
            "-Lc-YqFE4hBsd-Wk1DP5": {
                "Fax": "",
                "HP": "",
                "Manager": "",
                "Tel": "",
                "address": "",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "companytype": "1",
                "created_at": 1554787558607,
                "id": "-Lc-YqFE4hBsd-Wk1DP5",
                "industry": "2",
                "like_count": 0,
                "name": "",
                "nickname": "test1"
            },
            "-Lc-ZGlYd_AoMNoW4ArZ": {
                "Fax": "vvvv",
                "HP": "https://console.firebase.google.com/",
                "Manager": "bbb",
                "Tel": "hjhh",
                "address": "ssss",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "companytype": "1",
                "created_at": 1554787671328,
                "id": "-Lc-ZGlYd_AoMNoW4ArZ",
                "industry": "2",
                "like_count": 0,
                "name": "sss",
                "nickname": "test1",
                "photo": ""
            },
            "-Lc-aDeujDxx19uVyXZp": {
                "Fax": "ｓｓｓ",
                "HP": "jp.highwayns.com",
                "Manager": "ｓｓｓ",
                "Tel": "sss",
                "address": "sss",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "companytype": "1",
                "created_at": 1554788183520,
                "id": "-Lc-aDeujDxx19uVyXZp",
                "industry": "2",
                "like_count": 0,
                "name": "海威",
                "nickname": "test1"
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "consultants": {
        "data": {
            "-LbW06mrQIcnI-hUSrnL": {
                "Fax": "1",
                "HP": "1",
                "Manager": "1",
                "Tel": "1",
                "address": "11",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "consultanttype": "1",
                "created_at": 1554258361670,
                "id": "-LbW06mrQIcnI-hUSrnL",
                "industry": "1",
                "like_count": 0,
                "name": "test consultant2",
                "nickname": "test1",
                "photo": "",
                "update_at": 1554258362097
            },
            "-LbYYDCsAdRcUcrTtndD": {
                "Fax": "xxx",
                "HP": "sss",
                "Manager": "xxx",
                "Tel": "xzxx",
                "address": "xzxx",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "consultanttype": "2",
                "created_at": 1554300856662,
                "id": "-LbYYDCsAdRcUcrTtndD",
                "industry": "2",
                "like_count": 0,
                "name": "xxx",
                "nickname": "test1"
            }
        }
    },
    "contacts": {
        "data": [
            {
                "avatar": "1",
                "header": "A",
                "location": "London",
                "nickname": "Alex Black"
            },
            {
                "avatar": "5",
                "header": "A",
                "location": "Moscow",
                "nickname": "Alex Proti"
            },
            {
                "avatar": "3",
                "header": "A",
                "location": "Kiev",
                "nickname": "Andrew Smith"
            },
            {
                "avatar": "7",
                "header": "A",
                "location": "Kiev",
                "nickname": "Ann Ryder"
            },
            {
                "avatar": "8",
                "header": "D",
                "location": "Kiev",
                "nickname": "Daniel Ricci"
            },
            {
                "avatar": "3",
                "header": "I",
                "location": "Kiev",
                "nickname": "Ivan Ivanov"
            },
            {
                "avatar": "6",
                "header": "K",
                "location": "Odessa",
                "nickname": "Kate Lebedeva"
            },
            {
                "avatar": "10",
                "header": "K",
                "location": "Kiev",
                "nickname": "Kate Shy"
            },
            {
                "avatar": "1",
                "header": "M",
                "location": "Praha",
                "nickname": "Michael Fold"
            },
            {
                "avatar": "2",
                "header": "N",
                "location": "Moscow",
                "nickname": "Nadya Lovin"
            },
            {
                "avatar": "4",
                "header": "O",
                "location": "Odessa",
                "nickname": "Oleg Price"
            },
            {
                "avatar": "5",
                "header": "O",
                "location": "Kiev",
                "nickname": "Oleg Ryzhkov"
            },
            {
                "avatar": "9",
                "header": "O",
                "location": "Praha",
                "nickname": "Olga Blare"
            },
            {
                "avatar": "10",
                "header": "S",
                "location": "Milan",
                "nickname": "Svetlana Kot"
            }
        ],
        "err_code": 0,
        "err_msg": "success"
    },
    "datatype": {
        "enUS": {
            "area": {
                "data": [
                    {
                        "id": "1",
                        "text": "Tokyo"
                    },
                    {
                        "id": "2",
                        "text": "Beijing"
                    },
                    {
                        "id": "3",
                        "text": "Newyork"
                    },
                    {
                        "id": "4",
                        "text": "Osaka"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "companytype": {
                "data": [
                    {
                        "id": "1",
                        "name": "Stock Corporation",
                        "nickname": "S"
                    },
                    {
                        "id": "2",
                        "name": "Limited Corporation",
                        "nickname": "L"
                    },
                    {
                        "id": "3",
                        "name": "Contact Corporation",
                        "nickname": "C"
                    },
                    {
                        "id": "4",
                        "name": "International Corporation",
                        "nickname": "I"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "consultanttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "Talent",
                        "nickname": "T"
                    },
                    {
                        "id": "2",
                        "name": "Consultant",
                        "nickname": "C"
                    },
                    {
                        "id": "3",
                        "name": "Dispatcher",
                        "nickname": "D"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "dispatchertype": {
                "data": [
                    {
                        "id": "1",
                        "name": "Talent",
                        "nickname": "T"
                    },
                    {
                        "id": "2",
                        "name": "Consultant",
                        "nickname": "C"
                    },
                    {
                        "id": "3",
                        "name": "Dispatcher",
                        "nickname": "D"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "eventtype": {
                "data": [
                    {
                        "id": "1",
                        "name": "AI Learning Event",
                        "nickname": "A"
                    },
                    {
                        "id": "2",
                        "name": "Dispach Learning Event",
                        "nickname": "H"
                    },
                    {
                        "id": "3",
                        "name": "System Development Event",
                        "nickname": "K"
                    },
                    {
                        "id": "4",
                        "name": "Project Management Event",
                        "nickname": "P"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "industry": {
                "data": [
                    {
                        "id": "1",
                        "text": "System Development"
                    },
                    {
                        "id": "2",
                        "text": "Software Development"
                    },
                    {
                        "id": "3",
                        "text": "Mobile Development"
                    },
                    {
                        "id": "4",
                        "text": "System Mantainence"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "jobtype": {
                "data": [
                    {
                        "id": "1",
                        "name": "Normal",
                        "nickname": "N"
                    },
                    {
                        "id": "2",
                        "name": "Contact",
                        "nickname": "C"
                    },
                    {
                        "id": "3",
                        "name": "Arbeit",
                        "nickname": "A"
                    },
                    {
                        "id": "4",
                        "name": "Dispatch",
                        "nickname": "D"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "knowledgetype": {
                "data": [
                    {
                        "id": "1",
                        "name": "Program Language",
                        "nickname": "P"
                    },
                    {
                        "id": "2",
                        "name": "Database Management",
                        "nickname": "D"
                    },
                    {
                        "id": "3",
                        "name": "Mobile Development",
                        "nickname": "M"
                    },
                    {
                        "id": "4",
                        "name": "Math",
                        "nickname": "M"
                    },
                    {
                        "id": "5",
                        "language": "jaJP",
                        "name": "OS",
                        "nickname": "O"
                    },
                    {
                        "id": "6",
                        "name": "Framework",
                        "nickname": "F"
                    },
                    {
                        "id": "7",
                        "name": "Hardware",
                        "nickname": "H"
                    },
                    {
                        "id": "8",
                        "name": "Cloud",
                        "nickname": "C"
                    },
                    {
                        "id": "9",
                        "name": "Application",
                        "nickname": "A"
                    },
                    {
                        "id": "10",
                        "name": "Project Management",
                        "nickname": "P"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "projecttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "Max Price",
                        "nickname": "M"
                    },
                    {
                        "id": "2",
                        "name": "Fix Price",
                        "nickname": "F"
                    },
                    {
                        "id": "3",
                        "name": "Middle Price",
                        "nickname": "M"
                    },
                    {
                        "id": "4",
                        "name": "Valuation",
                        "nickname": "V"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "talenttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "Talent",
                        "nickname": "T"
                    },
                    {
                        "id": "2",
                        "name": "Consultant",
                        "nickname": "C"
                    },
                    {
                        "id": "3",
                        "name": "Dispatcher",
                        "nickname": "D"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "tooltype": {
                "data": [
                    {
                        "id": "1",
                        "name": "Voice Recognition",
                        "nickname": "V"
                    },
                    {
                        "id": "2",
                        "name": "Image Recognition",
                        "nickname": "I"
                    },
                    {
                        "id": "3",
                        "name": "Text Recognition",
                        "nickname": "T"
                    },
                    {
                        "id": "4",
                        "name": "Other",
                        "nickname": "O"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            }
        },
        "err_code": 0,
        "err_msg": "success",
        "jaJP": {
            "area": {
                "data": [
                    {
                        "id": "1",
                        "text": "东京"
                    },
                    {
                        "id": "2",
                        "text": "北京"
                    },
                    {
                        "id": "3",
                        "text": "ニューヨーク"
                    },
                    {
                        "id": "4",
                        "text": "大阪"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "companytype": {
                "data": [
                    {
                        "id": "1",
                        "name": "株式会社",
                        "nickname": "株"
                    },
                    {
                        "id": "2",
                        "name": "有限会社",
                        "nickname": "有"
                    },
                    {
                        "id": "3",
                        "name": "合同会社",
                        "nickname": "合"
                    },
                    {
                        "id": "4",
                        "name": "国際会社",
                        "nickname": "国"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "consultanttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "タレント",
                        "nickname": "タ"
                    },
                    {
                        "id": "2",
                        "name": "コンサルタント",
                        "nickname": "コ"
                    },
                    {
                        "id": "3",
                        "name": "派遣者",
                        "nickname": "派"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "dispatchertype": {
                "data": [
                    {
                        "id": "1",
                        "name": "タレント",
                        "nickname": "タ"
                    },
                    {
                        "id": "2",
                        "name": "コンサルタント",
                        "nickname": "コ"
                    },
                    {
                        "id": "3",
                        "name": "派遣者",
                        "nickname": "派"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "eventtype": {
                "data": [
                    {
                        "id": "1",
                        "name": "AI勉強会",
                        "nickname": "A"
                    },
                    {
                        "id": "2",
                        "name": "派遣営業会",
                        "nickname": "H"
                    },
                    {
                        "id": "3",
                        "name": "開発勉強会",
                        "nickname": "K"
                    },
                    {
                        "id": "4",
                        "name": "プロジェクト説明会",
                        "nickname": "P"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "industry": {
                "data": [
                    {
                        "id": "1",
                        "text": "システム開発"
                    },
                    {
                        "id": "2",
                        "text": "ソフトウェア開発"
                    },
                    {
                        "id": "3",
                        "text": "モビール開発"
                    },
                    {
                        "id": "4",
                        "text": "システムメンテナンス"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "jobtype": {
                "data": [
                    {
                        "id": "1",
                        "name": "正社員",
                        "nickname": "正"
                    },
                    {
                        "id": "2",
                        "name": "契約社員",
                        "nickname": "契"
                    },
                    {
                        "id": "3",
                        "name": "アルバイト",
                        "nickname": "ア"
                    },
                    {
                        "id": "4",
                        "name": "派遣社員",
                        "nickname": "派"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "knowledgetype": {
                "data": [
                    {
                        "id": "1",
                        "name": "プログラム",
                        "nickname": "プ"
                    },
                    {
                        "id": "2",
                        "name": "データベース",
                        "nickname": "デ"
                    },
                    {
                        "id": "3",
                        "name": "モベル開発",
                        "nickname": "モ"
                    },
                    {
                        "id": "4",
                        "name": "数学",
                        "nickname": "す"
                    },
                    {
                        "id": "5",
                        "name": "OS",
                        "nickname": "お"
                    },
                    {
                        "id": "6",
                        "name": "フレームワーク",
                        "nickname": "フ"
                    },
                    {
                        "id": "7",
                        "name": "ハードウェア",
                        "nickname": "ハ"
                    },
                    {
                        "id": "8",
                        "name": "クラウド",
                        "nickname": "ク"
                    },
                    {
                        "id": "9",
                        "name": "アプリケーション",
                        "nickname": "ア"
                    },
                    {
                        "id": "10",
                        "name": "マネジメント",
                        "nickname": "マ"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "projecttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "最低価格",
                        "nickname": "低"
                    },
                    {
                        "id": "2",
                        "name": "指定価格",
                        "nickname": "定"
                    },
                    {
                        "id": "3",
                        "name": "中間価格",
                        "nickname": "中"
                    },
                    {
                        "id": "4",
                        "name": "評価",
                        "nickname": "評"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "talenttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "タレント",
                        "nickname": "タ"
                    },
                    {
                        "id": "2",
                        "name": "コンサルタント",
                        "nickname": "コ"
                    },
                    {
                        "id": "3",
                        "name": "派遣者",
                        "nickname": "派"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "tooltype": {
                "data": [
                    {
                        "id": "1",
                        "name": "音声認識",
                        "nickname": "音"
                    },
                    {
                        "id": "2",
                        "name": "画像認識",
                        "nickname": "画"
                    },
                    {
                        "id": "3",
                        "name": "文字認識",
                        "nickname": "文"
                    },
                    {
                        "id": "4",
                        "name": "その他",
                        "nickname": "他"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            }
        },
        "zhCN": {
            "area": {
                "data": [
                    {
                        "id": "1",
                        "text": "东京"
                    },
                    {
                        "id": "2",
                        "text": "北京"
                    },
                    {
                        "id": "3",
                        "text": "纽约"
                    },
                    {
                        "id": "4",
                        "text": "大阪"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "companytype": {
                "data": [
                    {
                        "id": "1",
                        "name": "有限责任公司",
                        "nickname": "有"
                    },
                    {
                        "id": "2",
                        "name": "无限责任公司",
                        "nickname": "无"
                    },
                    {
                        "id": "3",
                        "name": "合同公司",
                        "nickname": "合"
                    },
                    {
                        "id": "4",
                        "name": "跨国公司",
                        "nickname": "国"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "consultanttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "人才",
                        "nickname": "才"
                    },
                    {
                        "id": "2",
                        "name": "咨询师",
                        "nickname": "咨"
                    },
                    {
                        "id": "3",
                        "name": "派遣者",
                        "nickname": "派"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "dispatchertype": {
                "data": [
                    {
                        "id": "1",
                        "name": "人才",
                        "nickname": "才"
                    },
                    {
                        "id": "2",
                        "name": "咨询师",
                        "nickname": "咨"
                    },
                    {
                        "id": "3",
                        "name": "派遣者",
                        "nickname": "派"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "eventtype": {
                "data": [
                    {
                        "id": "1",
                        "name": "AI学习活动",
                        "nickname": "A"
                    },
                    {
                        "id": "2",
                        "name": "派遣营业活动",
                        "nickname": "H"
                    },
                    {
                        "id": "3",
                        "name": "开发学习活动",
                        "nickname": "K"
                    },
                    {
                        "id": "4",
                        "name": "项目招标活动",
                        "nickname": "P"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "industry": {
                "data": [
                    {
                        "id": "1",
                        "text": "系统设计"
                    },
                    {
                        "id": "2",
                        "text": "软件开发"
                    },
                    {
                        "id": "3",
                        "text": "移动开发"
                    },
                    {
                        "id": "4",
                        "text": "系统维护"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "jobtype": {
                "data": [
                    {
                        "id": "1",
                        "name": "正社员",
                        "nickname": "正"
                    },
                    {
                        "id": "2",
                        "name": "契约社员",
                        "nickname": "契"
                    },
                    {
                        "id": "3",
                        "name": "临时工",
                        "nickname": "临"
                    },
                    {
                        "id": "4",
                        "name": "派遣社员",
                        "nickname": "派"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "knowledgetype": {
                "data": [
                    {
                        "id": "1",
                        "name": "程序设计",
                        "nickname": "程"
                    },
                    {
                        "id": "2",
                        "name": "数据库",
                        "nickname": "数"
                    },
                    {
                        "id": "3",
                        "name": "移动开发",
                        "nickname": "移"
                    },
                    {
                        "id": "4",
                        "name": "数学",
                        "nickname": "数"
                    },
                    {
                        "id": "5",
                        "name": "操作系统",
                        "nickname": "操"
                    },
                    {
                        "id": "6",
                        "name": "系统架构",
                        "nickname": "系"
                    },
                    {
                        "id": "7",
                        "name": "硬件",
                        "nickname": "硬"
                    },
                    {
                        "id": "8",
                        "name": "云服务",
                        "nickname": "云"
                    },
                    {
                        "id": "9",
                        "name": "应用开发",
                        "nickname": "应"
                    },
                    {
                        "id": "10",
                        "name": "项目管理",
                        "nickname": "项"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "projecttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "最低价格",
                        "nickname": "低"
                    },
                    {
                        "id": "2",
                        "name": "指定价格",
                        "nickname": "指"
                    },
                    {
                        "id": "3",
                        "name": "中间价格",
                        "nickname": "中"
                    },
                    {
                        "id": "4",
                        "name": "评标",
                        "nickname": "评"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "talenttype": {
                "data": [
                    {
                        "id": "1",
                        "name": "人才",
                        "nickname": "才"
                    },
                    {
                        "id": "2",
                        "name": "咨询师",
                        "nickname": "咨"
                    },
                    {
                        "id": "3",
                        "name": "派遣者",
                        "nickname": "派"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            },
            "tooltype": {
                "data": [
                    {
                        "id": "1",
                        "name": "语音识别",
                        "nickname": "音"
                    },
                    {
                        "id": "2",
                        "name": "图像识别",
                        "nickname": "图"
                    },
                    {
                        "id": "3",
                        "name": "文字识别",
                        "nickname": "文"
                    },
                    {
                        "id": "4",
                        "name": "其他",
                        "nickname": "他"
                    }
                ],
                "err_code": 0,
                "err_msg": "success"
            }
        }
    },
    "dispatchers": {
        "data": {
            "-LbW07-Ak4hTKCxzuXdf": {
                "Fax": "1",
                "HP": "1",
                "Manager": "1",
                "Tel": "1",
                "address": "11",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554258362520,
                "dispatchertype": "1",
                "id": "-LbW07-Ak4hTKCxzuXdf",
                "industry": "1",
                "like_count": 0,
                "name": "test dispatcher2",
                "nickname": "test1",
                "photo": "",
                "update_at": 1554258362971
            },
            "-LbYYS1-2FHP8nrlR4C_": {
                "Fax": "sss",
                "HP": "sss",
                "Manager": "sss",
                "Tel": "sss",
                "address": "xsss",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554300917341,
                "dispatchertype": "3",
                "id": "-LbYYS1-2FHP8nrlR4C_",
                "industry": "2",
                "like_count": 0,
                "name": "sss",
                "nickname": "test1"
            }
        }
    },
    "events": {
        "data": {
            "-LbW07cKyWoNzVpJvAZ5": {
                "Fax": "1",
                "HP": "1",
                "Manager": "1",
                "Tel": "1",
                "address": "11",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554258365093,
                "eventtype": "1",
                "id": "-LbW07cKyWoNzVpJvAZ5",
                "industry": "1",
                "like_count": 0,
                "name": "test event2",
                "nickname": "test1",
                "photo": "",
                "update_at": 1554258365514
            },
            "-LbYZw56kD55Q0BYxpAa": {
                "Fax": "sss",
                "HP": "sss",
                "Manager": "sss",
                "Tel": "sss",
                "address": "sss",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554301306706,
                "eventtype": "1",
                "id": "-LbYZw56kD55Q0BYxpAa",
                "industry": "2",
                "like_count": 0,
                "name": "sss",
                "nickname": "test1"
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "feedback": {
        "data": {
            "-LcQhUJS38a_tNLZ68QO": {
                "CreateDate": "2019/04/14",
                "content": "ssss",
                "userid": "test1@gmail.com"
            },
            "-LcQhZg3xkG-JGlWsdqA": {
                "CreateDate": "2019/04/14",
                "content": "you are welcome",
                "userid": "test1@gmail.com"
            },
            "-LcQi6C6yENbBkd1K9YV": {
                "CreateDate": "2019/04/14",
                "content": "Thank you very much",
                "userid": "test1@gmail.com"
            },
            "-LcQjXB_dX6HNZoHaAm0": {
                "CreateDate": "2019/04/14",
                "content": "You have a good job in AI Times",
                "userid": "test1@gmail.com"
            },
            "-LcQk-r3oBWFdCE2kfwu": {
                "CreateDate": "2019/04/14",
                "content": "お送りいたします。",
                "userid": "test1@gmail.com"
            },
            "-LcQk3BnMUXb8HTlrUyC": {
                "CreateDate": "2019/04/14",
                "content": "お送りいたします。",
                "userid": "test1@gmail.com"
            },
            "-LcQk6z0zItVlzYQKV_M": {
                "CreateDate": "2019/04/14",
                "content": "ありがとうございました。",
                "userid": "test1@gmail.com"
            },
            "-LchbsZDi8P9QUkuyEcJ": {
                "CreateDate": "2019/04/18",
                "content": "出自唐代王维的《送刘司直赴安西》\n\n绝域阳关道，胡沙与塞尘。\n三春时有雁，万里少行人。\n苜蓿随天马，葡萄逐汉臣。\n当令外国惧，不敢觅和亲。",
                "userid": "test1@gmail.com"
            },
            "-LcsZ3wCrGpQk9Iymtey": {
                "CreateDate": "2019/04/20",
                "content": "test",
                "userid": "test1@gmail.com"
            },
            "-LdSF8KI53EpZ7Lzl_dO": {
                "CreateDate": "2019/04/27",
                "content": "hhhhhh",
                "userid": "test2@gmail.com"
            },
            "-LdSF9gF_exURV9E6Svg": {
                "CreateDate": "2019/04/27",
                "content": "hhhhhh",
                "userid": "test2@gmail.com"
            },
            "-LdSFCsuhS1y7-FKc6Wh": {
                "CreateDate": "2019/04/27",
                "content": "zzzzzz",
                "userid": "test2@gmail.com"
            },
            "-LdSGb7kqBZ7NS7JiXmw": {
                "CreateDate": "2019/04/27",
                "content": "123123123",
                "userid": "test1@gmail.com"
            },
            "-LdSTo_vkgPBlJBKIybX": {
                "CreateDate": "2019/04/27",
                "content": "yyyyyy",
                "userid": "test2@gmail.com"
            },
            "-LdSTs67uljXTvx1deSP": {
                "CreateDate": "2019/04/27",
                "content": "uuuuuuu",
                "userid": "test2@gmail.com"
            },
            "-LdSUfaxMysRy4EUYts8": {
                "CreateDate": "2019/04/27",
                "content": "你好好节",
                "userid": "test2@gmail.com"
            },
            "-LdSUgvqFhnvklKOm_1X": {
                "CreateDate": "2019/04/27",
                "content": "你好好节",
                "userid": "test2@gmail.com"
            },
            "-LdSWdDnxHnEN61HLd0r": {
                "CreateDate": "2019/04/27",
                "content": "6666666666666",
                "userid": "test2@gmail.com"
            },
            "-LdSWeiolQUvPA1hSiON": {
                "CreateDate": "2019/04/27",
                "content": "6666666666666",
                "userid": "test2@gmail.com"
            },
            "-LdSWjIm3eJH4cAadymP": {
                "CreateDate": "2019/04/27",
                "content": "你OK",
                "userid": "test2@gmail.com"
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "invoices": {
        "data": [
            {
                "bankaccount": "みずほ銀行○○支店12345678",
                "comment": "特になし",
                "companyId": "2",
                "content": "システム開発",
                "detail": [
                    {
                        "Unit": "円",
                        "name": "a",
                        "price": 550000,
                        "worktime": "1人月"
                    },
                    {
                        "Unit": "円",
                        "name": "b",
                        "price": 450000,
                        "worktime": "1人月"
                    }
                ],
                "endDate": "2018/10/31",
                "invoiceId": "201810",
                "location": "品川",
                "startDate": "2018/10/01",
                "tax": 0.08,
                "totalAmount": 1080000,
                "userid": "1"
            },
            {
                "bankaccount": "みずほ銀行○○支店12345678",
                "comment": "特になし",
                "companyId": "3",
                "content": "システム開発",
                "detail": [
                    {
                        "Unit": "円",
                        "name": "a",
                        "price": 550000,
                        "time": "1人月"
                    },
                    {
                        "Unit": "円",
                        "name": "b",
                        "price": 450000,
                        "time": "1人月"
                    }
                ],
                "endDate": "2018/10/31",
                "invoiceId": "201810",
                "location": "品川",
                "startDate": "2018/10/01",
                "tax": 0.08,
                "totalAmount": 1080000,
                "userid": "1"
            }
        ],
        "err_code": 0,
        "err_msg": "success"
    },
    "jobs": {
        "data": {
            "-LbW05tjlGqALVI2K445": {
                "Fax": "1",
                "HP": "1",
                "Manager": "1",
                "Tel": "1",
                "address": "11",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554258358025,
                "id": "-LbW05tjlGqALVI2K445",
                "industry": "2",
                "jobtype": "1",
                "like_count": 0,
                "name": "test job3",
                "nickname": "test1",
                "photo": "",
                "update_at": 1554464408234
            },
            "-LbYX4GNelvo-RDc_LOb": {
                "Fax": "ssss",
                "HP": "ssss",
                "Manager": "sss",
                "Tel": "ssss",
                "address": "sssss",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554300557881,
                "id": "-LbYX4GNelvo-RDc_LOb",
                "industry": "2",
                "jobtype": "3",
                "like_count": 0,
                "name": "ssss",
                "nickname": "test1"
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "knowledgeapplications": {
        "data": {
            "-LbW07Cj8C37LDyZeKHF": {
                "iHmcxnnRDWPOJAE38On1nCdq0ir2": {
                    "approvalAvatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "approvalName": "test1",
                    "approvalStatus": true,
                    "approval_at": 1556717302575,
                    "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                    "id": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                    "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                    "name": "tei952",
                    "text": "よろしくお願いいたします。",
                    "time": 1556717203100
                }
            },
            "-LbYZZXvYQxtpo2AWpzL": {
                "iHmcxnnRDWPOJAE38On1nCdq0ir2": {
                    "approvalAvatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "approvalName": "test1",
                    "approvalStatus": true,
                    "approval_at": 1556744058368,
                    "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                    "id": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                    "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                    "name": "tei952",
                    "text": "sss",
                    "time": 1556743958723
                }
            },
            "-LedXZi8fzaKO45rL-Kv": {
                "CIxg5db1wHWTu1eeymVp4EkLzfg1": {
                    "approvalAvatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                    "approvalName": "tei952",
                    "approvalStatus": true,
                    "approval_at": 1557649926601,
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "knowledgeid": "-LedXZi8fzaKO45rL-Kv",
                    "name": "test1",
                    "text": "よろしくお願いいたします。",
                    "time": 1557649836830
                }
            }
        }
    },
    "knowledgecertificates": {
        "data": {
            "-LbW07Cj8C37LDyZeKHF": {
                "CIxg5db1wHWTu1eeymVp4EkLzfg1": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "certificatePath": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecertificates%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF?alt=media&token=0a84788e-8a4f-4a7a-a83f-2bab43c82566",
                    "id": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                    "name": "test1",
                    "time": 1556058992137
                },
                "Vn8NjeM3yCh7vsK6mwhEdk9d1h73": {
                    "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                    "certificatePath": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledgecertificates%2FVn8NjeM3yCh7vsK6mwhEdk9d1h73%2F-LbW07Cj8C37LDyZeKHF?alt=media&token=b444bde7-74d6-4d89-bdda-51039271784f",
                    "id": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                    "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                    "name": "test2",
                    "time": 1556060905896
                }
            },
            "-LbYZZXvYQxtpo2AWpzL": {
                "-LctyLWU1ERkDV29z2rk": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "certificatePath": "https://image.baidu.com/search/detail?ct=503316480&z=&tn=baiduimagedetail&ipn=d&word=%E5%AD%A6%E4%B9%A0%E8%AF%81%E6%98%8E%E4%B9%A6&step_word=&ie=utf-8&in=&cl=2&lm=-1&st=-1&hd=undefined&latest=undefined&copyright=undefined&cs=5659746,4131529913&os=2045183806,206696368&simid=3410681258,295304104&pn=2&rn=1&di=81730&ln=1642&fr=&fmq=1555750763902_R&ic=0&s=undefined&se=&sme=&tab=0&width=&height=&face=undefined&is=0,0&istype=2&ist=&jit=&bdtype=0&spn=0&pi=0&gsm=0&objurl=http%3A%2F%2Fimgsa.baidu.com%2Fexp%2Fw%3D500%2Fsign%3D9a7fec740a24ab18e016e13705fae69a%2F4b90f603738da977f10b8f79b351f8198618e3b8.jpg&rpstart=0&rpnum=0&adpicid=0&force=undefined",
                    "id": "-LctyLWU1ERkDV29z2rk",
                    "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                    "name": "test1",
                    "time": 1555750807868
                }
            }
        }
    },
    "knowledgecomments": {
        "data": {
            "-LbW07Cj8C37LDyZeKHF": {
                "contents": {
                    "-LcPpPauyQT7nMHxsSDI": {
                        "-LcxVmYndkXWm-77gAEA": {
                            "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                            "comment": "ｃｃｃ",
                            "contentid": "-LcPpPauyQT7nMHxsSDI",
                            "id": "-LcxVmYndkXWm-77gAEA",
                            "name": "test2",
                            "time": 1555810167344
                        },
                        "-LdMchK9BuyD5k8KGL53": {
                            "comment": "ddd",
                            "contentid": "-LcPpPauyQT7nMHxsSDI",
                            "id": "-LdMchK9BuyD5k8KGL53",
                            "time": 1556248450583
                        },
                        "-LdRL6pbWRNI1nmQABMV": {
                            "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                            "comment": "请老师告诉我答案",
                            "contentid": "-LcPpPauyQT7nMHxsSDI",
                            "id": "-LdRL6pbWRNI1nmQABMV",
                            "name": "tei952",
                            "time": 1556327464435
                        }
                    },
                    "-LcPtGVHXPZU2lKmAWBg": {
                        "-LcxYOh92HaZ7OhFDqD_": {
                            "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                            "comment": "ｃｃｃ",
                            "contentid": "-LcPtGVHXPZU2lKmAWBg",
                            "id": "-LcxYOh92HaZ7OhFDqD_",
                            "name": "test2",
                            "time": 1555810851964
                        },
                        "-Ldv9-JFOVF5t8H0W3mc": {
                            "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                            "comment": "",
                            "contentid": "-LcPtGVHXPZU2lKmAWBg",
                            "id": "-Ldv9-JFOVF5t8H0W3mc",
                            "name": "tei952",
                            "time": 1556844381819
                        },
                        "-Ldv9JYj9Yjt004w758w": {
                            "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                            "comment": "你好！",
                            "contentid": "-LcPtGVHXPZU2lKmAWBg",
                            "id": "-Ldv9JYj9Yjt004w758w",
                            "name": "tei952",
                            "time": 1556844464712
                        }
                    },
                    "-LcPuOOzxujK4Z-uAWMA": {
                        "-LcxYTmeA2BEr_x0WLQI": {
                            "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                            "comment": "ｄｄｄ",
                            "contentid": "-LcPuOOzxujK4Z-uAWMA",
                            "id": "-LcxYTmeA2BEr_x0WLQI",
                            "name": "test2",
                            "time": 1555810872804
                        }
                    },
                    "-LcPuq3uP8_kKl9Si9yX": {
                        "-LcxS6qcmuVQz0OZJPsw": {
                            "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                            "comment": "ｓｓｓｓ",
                            "contentid": "-LcPuq3uP8_kKl9Si9yX",
                            "id": "-LcxS6qcmuVQz0OZJPsw",
                            "name": "test2",
                            "time": 1555809205965
                        },
                        "-LcxUU9sie73l12gKQt_": {
                            "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                            "comment": "ｓｓｓ２",
                            "contentid": "-LcPuq3uP8_kKl9Si9yX",
                            "id": "-LcxUU9sie73l12gKQt_",
                            "name": "test2",
                            "time": 1555809825754
                        }
                    }
                }
            },
            "-LbYZZXvYQxtpo2AWpzL": {
                "contents": {
                    "-LcVaE3TSJd2ov2URtTG": {
                        "-Ld6NM34oRR_yPqyWhmU": {
                            "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                            "comment": "没做完吧",
                            "contentid": "-LcVaE3TSJd2ov2URtTG",
                            "id": "-Ld6NM34oRR_yPqyWhmU",
                            "name": "test2",
                            "time": 1555975730873
                        },
                        "-Ld6NRqWGg-bFf6Ela0v": {
                            "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                            "comment": "可以加新的吗？",
                            "contentid": "-LcVaE3TSJd2ov2URtTG",
                            "id": "-Ld6NRqWGg-bFf6Ela0v",
                            "name": "test2",
                            "time": 1555975753516
                        },
                        "-LdZRdOXR_eosBk5jm3Q": {
                            "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                            "comment": "测试在评论时发消息通知",
                            "contentid": "-LcVaE3TSJd2ov2URtTG",
                            "id": "-LdZRdOXR_eosBk5jm3Q",
                            "name": "tei952",
                            "time": 1556463393491
                        },
                        "-LdZV1Iymxfm4YV1UQRy": {
                            "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                            "comment": "ありがとうございました。",
                            "contentid": "-LcVaE3TSJd2ov2URtTG",
                            "id": "-LdZV1Iymxfm4YV1UQRy",
                            "name": "tei952",
                            "time": 1556464281580
                        }
                    },
                    "-LdZOt-Zkrwc4mXRAKAo": {
                        "-Ldpr732CLcdK6ReeCqX": {
                            "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                            "comment": "请告诉我答案",
                            "contentid": "-LdZOt-Zkrwc4mXRAKAo",
                            "id": "-Ldpr732CLcdK6ReeCqX",
                            "name": "tei952",
                            "time": 1556755546715
                        }
                    }
                }
            }
        }
    },
    "knowledgelikes": {
        "data": {
            "-LbW07Cj8C37LDyZeKHF": {
                "likes": {
                    "-Ld3sLqhvbJJvSgZmxCQ": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "id": "-Ld3sLqhvbJJvSgZmxCQ",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "time": 1555933785875
                    },
                    "-Ld6RsR6U0Nh6__e94gV": {
                        "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                        "id": "-Ld6RsR6U0Nh6__e94gV",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test2",
                        "time": 1555976914980
                    },
                    "-Ld7JTZref-l0VHV0ezB": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "id": "-Ld7JTZref-l0VHV0ezB",
                        "knowledgeid": "-LbW07Cj8C37LDyZeKHF",
                        "name": "test1",
                        "time": 1555991488967
                    }
                }
            },
            "-LbYZZXvYQxtpo2AWpzL": {
                "likes": {
                    "-LdBSqN2qD5za07MH9KQ": {
                        "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                        "id": "-LdBSqN2qD5za07MH9KQ",
                        "knowledgeid": "-LbYZZXvYQxtpo2AWpzL",
                        "name": "test2",
                        "time": 1556061054857
                    }
                }
            },
            "-Ld495mtWIyObJzEEK7s": {
                "likes": {
                    "-Ld49xIGcvb6y2V3Jwki": {
                        "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                        "id": "-Ld49xIGcvb6y2V3Jwki",
                        "knowledgeid": "-Ld495mtWIyObJzEEK7s",
                        "name": "test1",
                        "time": 1555938661815
                    }
                }
            }
        }
    },
    "knowledges": {
        "data": {
            "-LbW07Cj8C37LDyZeKHF": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 4,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "certificate_count": 21,
                "content_count": 79,
                "created_at": 1554258363397,
                "id": "-LbW07Cj8C37LDyZeKHF",
                "industry": "2",
                "introduce": "Angularシステム開発入門",
                "knowledgetype": "1",
                "like_count": 2,
                "name": "Angularシステム開発入門",
                "nickname": "test1",
                "photo": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbW07Cj8C37LDyZeKHF?alt=media&token=f4093689-0f1e-4441-a641-165ba8b40e32",
                "update_at": 1555936196190
            },
            "-LbYZZXvYQxtpo2AWpzL": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com/",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀４－１０－１甲東ビル６０４号室",
                "application_count": 3,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "certificate_count": 1,
                "content_count": 20,
                "created_at": 1554301210432,
                "id": "-LbYZZXvYQxtpo2AWpzL",
                "industry": "2",
                "introduce": "C#入門C#入門C#入門C#入門C#入門",
                "knowledgetype": "1",
                "like_count": 2,
                "name": "C#入門",
                "nickname": "test1",
                "photo": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-LbYZZXvYQxtpo2AWpzL?alt=media&token=1f40f726-848c-4fe6-ab2f-187128c1f418",
                "update_at": 1555937610237
            },
            "-Ld495mtWIyObJzEEK7s": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com/",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀４－１０－１　甲東ビル６０４号室",
                "application_count": 1,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "certificate_count": 0,
                "content_count": 24,
                "created_at": 1555938439185,
                "id": "-Ld495mtWIyObJzEEK7s",
                "industry": "2",
                "introduce": "ハイブリッド応用システム開発の基礎知識",
                "knowledgetype": "1",
                "like_count": 1,
                "name": "ハイブリッド応用システム開発",
                "nickname": "test1",
                "photo": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/knowledges%2FCIxg5db1wHWTu1eeymVp4EkLzfg1%2F-Ld495mtWIyObJzEEK7s?alt=media&token=65834569-9775-4a51-aeae-8e39e3a69776"
            },
            "-LdLtODpcc-J83q1aU5f": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 1,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236050753,
                "id": "-LdLtODpcc-J83q1aU5f",
                "introduce": "Oracle数据库从入门到精通",
                "knowledgetype": "2",
                "like_count": 0,
                "name": "Oracle数据库"
            },
            "-LdLtaiBADqiIat-6k_5": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236102724,
                "id": "-LdLtaiBADqiIat-6k_5",
                "introduce": "MySql数据库从入门到精通",
                "knowledgetype": "2",
                "like_count": 0,
                "name": "MySql数据库",
                "photo": ""
            },
            "-LdLuLklhwL7keqLFNmD": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 25,
                "created_at": 1556236299544,
                "id": "-LdLuLklhwL7keqLFNmD",
                "introduce": "nodejs从入门到精通",
                "knowledgetype": "3",
                "like_count": 0,
                "name": "nodejs入门"
            },
            "-LdLuU-AHWwvMHDT-QpQ": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 30,
                "created_at": 1556236333406,
                "id": "-LdLuU-AHWwvMHDT-QpQ",
                "introduce": "vue入门",
                "knowledgetype": "3",
                "like_count": 0,
                "name": "vue从入门到精通",
                "photo": ""
            },
            "-LdLubY6J4gW1t94t63x": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236368285,
                "id": "-LdLubY6J4gW1t94t63x",
                "introduce": "firebase入门",
                "knowledgetype": "3",
                "like_count": 0,
                "name": "firebsae从入门到精通",
                "photo": ""
            },
            "-LdLv2K4G35jI5thkNgR": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236482059,
                "id": "-LdLv2K4G35jI5thkNgR",
                "introduce": "Spring框架从入门到精通",
                "knowledgetype": "6",
                "like_count": 0,
                "name": "Spring框架"
            },
            "-LdLvCzZr_W7DeKwDw9w": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236525757,
                "id": "-LdLvCzZr_W7DeKwDw9w",
                "introduce": "gpu从入门到精通",
                "knowledgetype": "7",
                "like_count": 0,
                "name": "gpu入门"
            },
            "-LdLvKb6JZ4xEuew0npf": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236556983,
                "id": "-LdLvKb6JZ4xEuew0npf",
                "introduce": "docker从入门到精通",
                "knowledgetype": "8",
                "like_count": 0,
                "name": "docker入门"
            },
            "-LdLvYhoIN8mERmK7vQo": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236616193,
                "id": "-LdLvYhoIN8mERmK7vQo",
                "introduce": "kubernetes从入门到精通",
                "knowledgetype": "8",
                "like_count": 0,
                "name": "kubernetes入门",
                "photo": ""
            },
            "-LdLvjsjW3CGLyxi3Qb2": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236664578,
                "id": "-LdLvjsjW3CGLyxi3Qb2",
                "introduce": "openshift从入门到精通",
                "knowledgetype": "8",
                "like_count": 0,
                "name": "openshift入门"
            },
            "-LdLvzsimpPWmPNFJwdO": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236730161,
                "id": "-LdLvzsimpPWmPNFJwdO",
                "introduce": "人工智能数学基础教育",
                "knowledgetype": "4",
                "like_count": 0,
                "name": "人工智能数学基础"
            },
            "-LdLwA6JjJepFe9MTwD2": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236776080,
                "id": "-LdLwA6JjJepFe9MTwD2",
                "introduce": "windows基础知识",
                "knowledgetype": "6",
                "like_count": 0,
                "name": "windows入门"
            },
            "-LdLwITanyNoAGvVvlCh": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236810433,
                "id": "-LdLwITanyNoAGvVvlCh",
                "introduce": "linux基础教程",
                "knowledgetype": "5",
                "like_count": 0,
                "name": "linux入门"
            },
            "-LdLwZEoLZc4i2v8T5QR": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 0,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 0,
                "created_at": 1556236879200,
                "id": "-LdLwZEoLZc4i2v8T5QR",
                "introduce": "pmp项目管理基础知识",
                "knowledgetype": "10",
                "like_count": 0,
                "name": "pmp项目管理基础"
            },
            "-LedXZi8fzaKO45rL-Kv": {
                "Fax": "03-3532-6513",
                "HP": "http://jp.highwayns.com",
                "Manager": "鄭軍",
                "Tel": "03-5244-9853",
                "address": "東京都中央区八丁堀4-10-1-604",
                "application_count": 1,
                "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                "certificate_count": 0,
                "content_count": 4,
                "created_at": 1557622574206,
                "id": "-LedXZi8fzaKO45rL-Kv",
                "introduce": "LOH是海威咨询出品的免费在线教学和APP教学系统，具有随时随地免费学习，边学边测，教师实时答疑等优点。本课件是学习内容制作教程，欢迎大家学习和使用。",
                "knowledgetype": "10",
                "like_count": 0,
                "name": "LOH教材制作",
                "nickname": "test1"
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "likes": {
        "data": {
            "0": {
                "avatar": "1",
                "name": "Cory Bergman",
                "postid": "11",
                "time": "1404705240"
            },
            "1": {
                "avatar": "2",
                "name": "Nathan Lawson",
                "postid": "12",
                "time": "1404705260"
            },
            "2": {
                "avatar": "3",
                "name": "Nathan Lawson",
                "postid": "13",
                "time": "1404705300"
            },
            "3": {
                "avatar": "4",
                "name": "Vaughn",
                "postid": "14",
                "time": "1404705400"
            },
            "-LbRHgPyDAMcmJnsf_nF": {
                "-LcRJl3HboJ_Wdy9OGmR": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRJl3HboJ_Wdy9OGmR",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "time": 1555253367296
                },
                "-LcRKaog4rXNw24T_s5x": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRKaog4rXNw24T_s5x",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "time": 1555253587466
                },
                "-LcRNB3lUczQABiJS-a1": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-LcRNB3lUczQABiJS-a1",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "time": 1555254265276
                },
                "-Ld4JLmSAlBpV0R3yigs": {
                    "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "id": "-Ld4JLmSAlBpV0R3yigs",
                    "name": "test1",
                    "postid": "-LbRHgPyDAMcmJnsf_nF",
                    "time": 1555941125500
                }
            },
            "-LdLmvv2SvIuEAO7e-ch": {
                "-LdkisnbIV5pE9F4cVsm": {
                    "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                    "id": "-LdkisnbIV5pE9F4cVsm",
                    "name": "tei952",
                    "postid": "-LdLmvv2SvIuEAO7e-ch",
                    "time": 1556669500985
                }
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "more_timeline": {
        "data": [
            {
                "avatar": "9",
                "comment_count": 0,
                "created_at": "1504700591",
                "id": "29",
                "like_count": 1,
                "nickname": "Jean Paul Sartre",
                "original_pic": "https://loremflickr.com/1000/700/nature?lock=1",
                "text": "If you're lonely when you're alone, you're in bad company."
            },
            {
                "avatar": "08",
                "comment_count": 0,
                "created_at": "1504698995",
                "id": "28",
                "like_count": 0,
                "nickname": "Zig Ziglar",
                "original_pic": "",
                "text": "Your attitude, not your aptitude, will determine your altitude."
            },
            {
                "avatar": "1",
                "comment_count": 0,
                "created_at": "1504698321",
                "id": "27",
                "like_count": 2,
                "nickname": "Winston Churchill",
                "original_pic": "https://loremflickr.com/1000/700/nature?lock=8",
                "text": "Success is not final, failure is not fatal: it is the courage to continue that counts."
            },
            {
                "avatar": "4",
                "comment_count": 2,
                "created_at": "1504697858",
                "id": "26",
                "like_count": 0,
                "nickname": "Nishan Panwar",
                "original_pic": "",
                "text": "When life gets hard and you want to give up, remember that life is full of ups and downs, and without the downs, the ups would mean nothing."
            },
            {
                "avatar": "2",
                "comment_count": 0,
                "created_at": "1504693147",
                "id": "25",
                "like_count": 0,
                "nickname": "Paulo Coelho",
                "original_pic": "https://loremflickr.com/1000/700/nature?lock=7",
                "text": "There is only one thing that makes a dream impossible to achieve: the fear of failure."
            },
            {
                "avatar": "9",
                "comment_count": 0,
                "created_at": "1504692969",
                "id": "24",
                "like_count": 0,
                "nickname": "Helen Keller",
                "original_pic": "",
                "text": "When one door of happiness closes, another opens; but often we look so long at the closed door that we do not see the one which has been opened for us."
            }
        ],
        "err_code": 0,
        "err_msg": "success"
    },
    "orders": {
        "data": [
            {
                "bankaccount": "みずほ銀行○○支店12345678",
                "comment": "特になし",
                "companyId": "2",
                "content": "システム開発",
                "detail": [
                    {
                        "Unit": "円",
                        "name": "a",
                        "price": 550000,
                        "time": "1人月"
                    },
                    {
                        "Unit": "円",
                        "name": "b",
                        "price": 450000,
                        "time": "1人月"
                    }
                ],
                "endDate": "2018/10/31",
                "invoiceId": "201810",
                "location": "品川",
                "startDate": "2018/10/01",
                "tax": 0.08,
                "totalAmount": 1080000,
                "userid": "1"
            },
            {
                "comment": "特になし",
                "companyId": "3",
                "content": "システム開発",
                "detail": [
                    {
                        "Unit": "円",
                        "name": "a",
                        "price": 550000,
                        "worktime": "1人月"
                    },
                    {
                        "Unit": "円",
                        "name": "b",
                        "price": 450000,
                        "worktime": "1人月"
                    }
                ],
                "endDate": "2018/10/31",
                "invoiceId": "201810",
                "location": "品川",
                "startDate": "2018/10/01",
                "tax": 0.08,
                "totalAmount": 1080000,
                "userid": "1"
            }
        ],
        "err_code": 0,
        "err_msg": "success"
    },
    "posts": {
        "data": {
            "-LbRHgPyDAMcmJnsf_nF": {
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "comment_count": 6,
                "created_at": 1554179082055,
                "id": "-LbRHgPyDAMcmJnsf_nF",
                "like_count": 4,
                "nickname": "test1",
                "original_pic": "",
                "text": "ddddd"
            },
            "-LbRJGq96GZR5TzYhpNI": {
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "comment_count": 0,
                "created_at": 1554179497492,
                "id": "-LbRJGq96GZR5TzYhpNI",
                "like_count": 0,
                "nickname": "test1",
                "original_pic": "https://wohapp-3a179.firebaseapp.com/",
                "text": "ssss"
            },
            "-Lb_nRjO4acOcnmT0YDo": {
                "comment_count": 0,
                "created_at": 1554338663756,
                "id": "-Lb_nRjO4acOcnmT0YDo",
                "like_count": 0,
                "original_pic": "",
                "text": "gggg"
            },
            "-LbkS5fwgqPoZHiYemmY": {
                "comment_count": 0,
                "created_at": 1554517355403,
                "id": "-LbkS5fwgqPoZHiYemmY",
                "like_count": 0,
                "original_pic": "https://wohapp-3a179.firebaseapp.com/",
                "text": "ssssss"
            },
            "-LbkScA7O38oTZZNaEwm": {
                "comment_count": 0,
                "created_at": 1554517492569,
                "id": "-LbkScA7O38oTZZNaEwm",
                "like_count": 0,
                "original_pic": "https://wohapp-3a179.firebaseapp.com/",
                "text": "xxxx"
            },
            "-Lblq6e_MAgCrFwQ8mKe": {
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "comment_count": 0,
                "created_at": 1554540690238,
                "id": "-Lblq6e_MAgCrFwQ8mKe",
                "like_count": 0,
                "nickname": "test1",
                "original_pic": "https://wohapp-3a179.firebaseapp.com/",
                "text": "hhhh"
            },
            "-LdLmvv2SvIuEAO7e-ch": {
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "comment_count": 1,
                "created_at": 1556234354590,
                "id": "-LdLmvv2SvIuEAO7e-ch",
                "like_count": 1,
                "nickname": "test1",
                "original_pic": "https://wohapp-3a179.firebaseapp.com/",
                "text": "海威学习app即将发布，欢迎大家关注"
            },
            "-LdSWsjVAbtoV6Mttgvm": {
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "comment_count": 0,
                "created_at": 1556347325520,
                "id": "-LdSWsjVAbtoV6Mttgvm",
                "like_count": 0,
                "nickname": "test1",
                "original_pic": "https://wohapp-3a179.firebaseapp.com/",
                "text": ""
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "projects": {
        "data": {
            "-LbW06MHXWWiH_5qTsNa": {
                "Fax": "1",
                "HP": "1",
                "Manager": "1",
                "Tel": "1",
                "address": "11",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554258359951,
                "id": "-LbW06MHXWWiH_5qTsNa",
                "industry": "1",
                "like_count": 0,
                "name": "test project2",
                "nickname": "test1",
                "photo": "",
                "projecttype": "1",
                "update_at": 1554258360368
            },
            "-LbYX_su44sUSukdzHMZ": {
                "Fax": "sss",
                "HP": "sss",
                "Manager": "asss",
                "Tel": "sss",
                "address": "sss",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554300691482,
                "id": "-LbYX_su44sUSukdzHMZ",
                "industry": "2",
                "like_count": 0,
                "name": "sss",
                "nickname": "test1",
                "projecttype": "2"
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "quatations": {
        "data": [
            {
                "bankaccount": "みずほ銀行○○支店12345678",
                "comment": "特になし",
                "companyId": "2",
                "content": "システム開発",
                "detail": [
                    {
                        "Unit": "円",
                        "name": "a",
                        "price": 550000,
                        "worktime": "1人月"
                    },
                    {
                        "Unit": "円",
                        "name": "b",
                        "price": 450000,
                        "worktime": "1人月"
                    }
                ],
                "endDate": "2018/10/31",
                "invoiceId": "201810",
                "location": "品川",
                "startDate": "2018/10/01",
                "tax": 0.08,
                "totalAmount": 1080000,
                "userid": "1"
            },
            {
                "comment": "特になし",
                "companyId": "3",
                "content": "システム開発",
                "detail": [
                    {
                        "Unit": "円",
                        "name": "a",
                        "price": 550000,
                        "time": "1人月"
                    },
                    {
                        "Unit": "円",
                        "name": "b",
                        "price": 450000,
                        "time": "1人月"
                    }
                ],
                "endDate": "2018/10/31",
                "invoiceId": "201810",
                "location": "品川",
                "startDate": "2018/10/01",
                "tax": 0.08,
                "totalAmount": 1080000,
                "userid": "1"
            }
        ],
        "err_code": 0,
        "err_msg": "success"
    },
    "refresh_timeline": {
        "data": [
            {
                "avatar": "5",
                "comment_count": 0,
                "created_at": "1504784104",
                "id": "48",
                "like_count": 0,
                "nickname": "Nicole Sobon",
                "original_pic": "",
                "text": "Sometimes the hardest part isn't letting go, but rather, learning to start over."
            },
            {
                "avatar": "2",
                "comment_count": 0,
                "created_at": "1504783664",
                "id": "47",
                "like_count": 0,
                "nickname": "Indira Gandhi",
                "original_pic": "https://loremflickr.com/1000/700/nature?lock=1",
                "text": "Opportunities are not offered. They must be wrested and worked for. And this calls for perseverance and courage."
            },
            {
                "avatar": "1",
                "comment_count": 2,
                "created_at": "1504781208",
                "id": "46",
                "like_count": 1,
                "nickname": "Sally Nicholls",
                "original_pic": "",
                "text": "There's no point having wishes if you don't at least try to do them.https://twitter.com"
            },
            {
                "avatar": "7",
                "comment_count": 0,
                "created_at": "1504781124",
                "id": "45",
                "like_count": 0,
                "nickname": "Dale Carnegie",
                "original_pic": "https://loremflickr.com/1000/700/nature?lock=3",
                "text": "Remember, happiness doesn't depend upon who you are or what you have; it depends solely upon what you think."
            },
            {
                "avatar": "3",
                "comment_count": 0,
                "created_at": "1504780946",
                "id": "44",
                "like_count": 0,
                "nickname": "Ted Mosby",
                "original_pic": "",
                "text": "Sometimes things have to fall apart to make way for better things."
            },
            {
                "avatar": "5",
                "comment_count": 0,
                "created_at": "1504779710",
                "id": "43",
                "like_count": 0,
                "nickname": "Tim Howard",
                "original_pic": "https://loremflickr.com/70/70/nature?lock=5",
                "text": "It's not about making the amazing saves. It's the little things and small things that made great gatekeepers great."
            },
            {
                "avatar": "7",
                "comment_count": 0,
                "created_at": "1504779092",
                "id": "42",
                "like_count": 0,
                "nickname": "Max Lerner",
                "original_pic": "",
                "text": "The turning point in the process of growing up is when you discover the core of strength within you that survives all hurt."
            }
        ],
        "err_code": 0,
        "err_msg": "success"
    },
    "reports": {
        "data": [
            {
                "companyId": "1",
                "dateMonth": "2018/10",
                "total": 172,
                "userid": "1",
                "workdetail": [
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/01",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/02",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/03",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/04",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/05",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "",
                        "content": "",
                        "date": "2018/10/06",
                        "endTime": "",
                        "startTime": ""
                    },
                    {
                        "break": "",
                        "content": "",
                        "date": "2018/10/07",
                        "endTime": "",
                        "startTime": ""
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/08",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/09",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/10",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/11",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/12",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "",
                        "content": "",
                        "date": "2018/10/13",
                        "endTime": "",
                        "startTime": ""
                    },
                    {
                        "break": "",
                        "content": "",
                        "date": "2018/10/14",
                        "endTime": "",
                        "startTime": ""
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/15",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/16",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/17",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/18",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/19",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "",
                        "content": "",
                        "date": "2018/10/20",
                        "endTime": "",
                        "startTime": ""
                    },
                    {
                        "break": "",
                        "content": "",
                        "date": "2018/10/21",
                        "endTime": "",
                        "startTime": ""
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/22",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/23",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/24",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/25",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/26",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "",
                        "content": "",
                        "date": "2018/10/27",
                        "endTime": "",
                        "startTime": ""
                    },
                    {
                        "break": "",
                        "content": "",
                        "date": "2018/10/28",
                        "endTime": "",
                        "startTime": ""
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/29",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/30",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    },
                    {
                        "break": "1:00",
                        "content": "システム開発",
                        "date": "2018/10/31",
                        "endTime": "19:00",
                        "startTime": "9:00"
                    }
                ]
            }
        ],
        "err_code": 0,
        "err_msg": "success"
    },
    "room-messages": {
        "-LbpDP3nLIekOaNV6i9R": {
            "-Lbz6BqsfiRMQSNY5FlI": {
                ".priority": 1554763271916,
                "message": "test message",
                "name": "test1",
                "timestamp": 1554763271916,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-qutezZa6KGRSqV2a": {
                ".priority": 1554792558355,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554792558355,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-rGEhSY3vQ58qgjWG": {
                ".priority": 1554792650678,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554792650678,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-rl_isGtyeGz7luC-": {
                ".priority": 1554792782327,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554792782327,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-uITy9CACDfU3ghdy": {
                ".priority": 1554793445449,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554793445449,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-uaMGwSf_PTcocZ_B": {
                ".priority": 1554793522780,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554793522780,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-uiUWuuNIBLbgRIgH": {
                ".priority": 1554793556074,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554793556074,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-v34zBASISWQsJhKu": {
                ".priority": 1554793644552,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554793644552,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-vOdYE-xrd0W1exe1": {
                ".priority": 1554793732878,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554793732878,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-vlR74jnOpP05UdxP": {
                ".priority": 1554793830324,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554793830324,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-vvv5h90HWvVgcDIS": {
                ".priority": 1554793873229,
                "message": "this.text",
                "name": "test1",
                "timestamp": 1554793873229,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc-whV-cdlmrlzCXRlL": {
                ".priority": 1554794076296,
                "message": "ffff",
                "name": "test1",
                "timestamp": 1554794076296,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc03SgBAbIUN9UJVwzv": {
                ".priority": 1554796108693,
                "message": "123",
                "name": "test1",
                "timestamp": 1554796108693,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc03VTZbY8BJ6CbFDTJ": {
                ".priority": 1554796120114,
                "message": "333",
                "name": "test1",
                "timestamp": 1554796120114,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1Ii9yP0Amiu_np5EO": {
                ".priority": 1554816885686,
                "message": "sss",
                "name": "test1",
                "timestamp": 1554816885686,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1PnQ4ElEATAntoR2n": {
                ".priority": 1554818742246,
                "message": "sss",
                "name": "test1",
                "timestamp": 1554818742246,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1Qt3QT4IThIzPl7e4": {
                ".priority": 1554819027686,
                "message": "test",
                "name": "test1",
                "timestamp": 1554819027686,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1REfFh2CxCnr7bsnu": {
                ".priority": 1554819120296,
                "message": "window",
                "name": "test1",
                "timestamp": 1554819120296,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1RUwSymUWT55LAfp_": {
                ".priority": 1554819186726,
                "message": "sss",
                "name": "test1",
                "timestamp": 1554819186726,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1UkrPXGWMfcU-dFIo": {
                ".priority": 1554820042445,
                "message": "xxx",
                "name": "test1",
                "timestamp": 1554820042445,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1Uw4O9tjaOTgrPqB4": {
                ".priority": 1554820088526,
                "message": "vvv",
                "name": "test1",
                "timestamp": 1554820088526,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1Wurv-2TLvkB1NCm1": {
                ".priority": 1554820607726,
                "message": "www",
                "name": "test1",
                "timestamp": 1554820607726,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1X-71vWTyw31ijZuE": {
                ".priority": 1554820629235,
                "message": "wwww",
                "name": "test1",
                "timestamp": 1554820629235,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1XHMFH6t7gUMIM2O1": {
                ".priority": 1554820703935,
                "message": "sss",
                "name": "test1",
                "timestamp": 1554820703935,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc1XNRv9g2lUYPTbJkf": {
                ".priority": 1554820728946,
                "message": "www",
                "name": "test1",
                "timestamp": 1554820728946,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc348s0Qg7e6caMSrd9": {
                ".priority": 1554846621411,
                "message": "sss",
                "name": "test1",
                "timestamp": 1554846621411,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc34gu98khx6dIKwolr": {
                ".priority": 1554846764912,
                "message": "eee",
                "name": "test1",
                "timestamp": 1554846764912,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc35a7aubU08uhzhdJu": {
                ".priority": 1554846999311,
                "message": "life",
                "name": "test2",
                "timestamp": 1554846999311,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc37Y0lHmFX1wjZGOrw": {
                ".priority": 1554847510872,
                "message": "sss",
                "name": "test2",
                "timestamp": 1554847510872,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc37nTIUxaqkkN0ei-K": {
                ".priority": 1554847578391,
                "message": "zzz",
                "name": "test2",
                "timestamp": 1554847578391,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc3BAcN0nlPltZkdgCz": {
                ".priority": 1554848463771,
                "message": "www",
                "name": "test2",
                "timestamp": 1554848463771,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc3BENo17qULUs8HOL6": {
                ".priority": 1554848479151,
                "message": "rrr",
                "name": "test2",
                "timestamp": 1554848479151,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc3BKuYu01OczPj7lwx": {
                ".priority": 1554848505891,
                "message": "33333",
                "name": "test2",
                "timestamp": 1554848505891,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc3BQnbzQ6W27mYg8aA": {
                ".priority": 1554848530031,
                "message": "444",
                "name": "test2",
                "timestamp": 1554848530031,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc3Fdy2vCSVkh_ikR8L": {
                ".priority": 1554849636641,
                "message": "www",
                "name": "test2",
                "timestamp": 1554849636641,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc3Fltrtq41wvbuz8Lw": {
                ".priority": 1554849669142,
                "message": "33",
                "name": "test2",
                "timestamp": 1554849669142,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc4UTpPAEYSEprdc1Y8": {
                ".priority": 1554870300132,
                "message": "sss",
                "name": "test2",
                "timestamp": 1554870300132,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc4UWMjcd9ZHUEGpn08": {
                ".priority": 1554870310530,
                "message": "www",
                "name": "test2",
                "timestamp": 1554870310530,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc4Udk2BZTwL6wqeTca": {
                ".priority": 1554870344847,
                "message": "hello",
                "name": "test2",
                "timestamp": 1554870344847,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc4UrQ-1sT_sK6I_ddB": {
                ".priority": 1554870400925,
                "message": "wwww",
                "name": "test1",
                "timestamp": 1554870400925,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc4UuSebj4CshWNXvvV": {
                ".priority": 1554870413510,
                "message": "kkk",
                "name": "test1",
                "timestamp": 1554870413510,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc4Uz-smpDmqFzzOWPn": {
                ".priority": 1554870431956,
                "message": "www",
                "name": "test1",
                "timestamp": 1554870431956,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc4V-IDez8dzpZe0v6i": {
                ".priority": 1554870437242,
                "message": "eee",
                "name": "test1",
                "timestamp": 1554870437242,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc4VS3hh_tUo8eNqGwp": {
                ".priority": 1554870555065,
                "message": "www",
                "name": "test1",
                "timestamp": 1554870555065,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc4ywIMwD5xc8tFUnvY": {
                ".priority": 1554878547300,
                "message": "在 下雨",
                "name": "test1",
                "timestamp": 1554878547300,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc4z55iOhyYmJc6bTKa": {
                ".priority": 1554878587449,
                "message": "是的",
                "name": "test2",
                "timestamp": 1554878587449,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc4z7jSc2zx8SXGvuON": {
                ".priority": 1554878598248,
                "message": "OK",
                "name": "test2",
                "timestamp": 1554878598248,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc4z8t9Dgc5sSqTlZbO": {
                ".priority": 1554878602962,
                "message": "あなた",
                "name": "test1",
                "timestamp": 1554878602962,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc4zFYGxLM8ditcxiGR": {
                ".priority": 1554878630899,
                "message": "牛了",
                "name": "test2",
                "timestamp": 1554878630899,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc4zPZLEOVCdtTL8Dcd": {
                ".priority": 1554878671262,
                "message": "what 是那么ものだ",
                "name": "test1",
                "timestamp": 1554878671262,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc4zyYfffBIlfqKzU3F": {
                ".priority": 1554878818685,
                "message": "是大大",
                "name": "test2",
                "timestamp": 1554878818685,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc5-2sgpsOsdi3-f9WC": {
                ".priority": 1554878840489,
                "message": "压顶  顶替 枯无可奈何花落去枯无可奈何地",
                "name": "test2",
                "timestamp": 1554878840489,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc5-4pEiv6j9qLuECGf": {
                ".priority": 1554878848767,
                "message": "324234234",
                "name": "test2",
                "timestamp": 1554878848767,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc5-Qmgimm3mSDytTHk": {
                ".priority": 1554878938422,
                "message": "he",
                "name": "test1",
                "timestamp": 1554878938422,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc50Uj0pSTroAtb0PcW": {
                ".priority": 1554879216688,
                "message": "554456456",
                "name": "test2",
                "timestamp": 1554879216688,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-Lc52taT3Cx7SWTbrqIu": {
                ".priority": 1554879846955,
                "message": "哒哒哒vwダミーいい",
                "name": "test1",
                "timestamp": 1554879846955,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc9e6vZ5MGnqHn5k4ab": {
                ".priority": 1554956976121,
                "message": "大家好！欢迎👏大家使用本系统",
                "name": "test1",
                "timestamp": 1554956976121,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Lc9eJWD8lqt1QlfHsWE": {
                ".priority": 1554957027665,
                "message": "本系统还有一些问题，请大家多多包涵！",
                "name": "test1",
                "timestamp": 1554957027665,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LcJbU6Fn6LWU0tsBfv_": {
                ".priority": 1555124056662,
                "message": "test",
                "name": "test1",
                "timestamp": 1555124056662,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LcJboA8Wuy5GPFr3Fn9": {
                ".priority": 1555124142961,
                "message": "Hello",
                "name": "test2",
                "timestamp": 1555124142961,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-LcJbx3Am8Pi2HUhjo5V": {
                ".priority": 1555124179388,
                "message": "What are you dining",
                "name": "test2",
                "timestamp": 1555124179388,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-LcJh-4WK-igvbPcTj0u": {
                ".priority": 1555125502632,
                "message": "hi",
                "name": "test1",
                "timestamp": 1555125502632,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LcJh0gGMAOx99C4ifJ-": {
                ".priority": 1555125509101,
                "message": "Hello",
                "name": "test2",
                "timestamp": 1555125509101,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-LcJh6B6d9KDqQqBeloU": {
                ".priority": 1555125531727,
                "message": "🐸",
                "name": "test1",
                "timestamp": 1555125531727,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LcJh87c5vbWHx1JiM8M": {
                ".priority": 1555125539581,
                "message": "🌹",
                "name": "test2",
                "timestamp": 1555125539581,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-LcJhFcmXgexgdvG6zNS": {
                ".priority": 1555125570442,
                "message": "😊",
                "name": "test1",
                "timestamp": 1555125570442,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LcsQX8AW6XVfGbtosY2": {
                ".priority": 1555724903417,
                "message": "你好",
                "name": "test2",
                "timestamp": 1555724903417,
                "type": "messageType",
                "userId": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73"
            },
            "-LdLm-WhFaIqh3ms7VOB": {
                ".priority": 1556234111300,
                "message": "大家好！本系统开发将优先发布海威学习模块，该模块即将进入测试阶段。明天学习会详细和大家讲解！",
                "name": "test1",
                "timestamp": 1556234111300,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LdO9NQDGw8l5w8xfWA8": {
                ".priority": 1556274055005,
                "message": "wqeqeqwe",
                "name": "test1",
                "timestamp": 1556274055005,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LdO9Of7XCqP8siD8cVk": {
                ".priority": 1556274060117,
                "message": "qweqweqwe",
                "name": "test1",
                "timestamp": 1556274060117,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LdPIWGx0DTubHil8OQK": {
                ".priority": 1556293227965,
                "message": "行",
                "name": "tei952",
                "timestamp": 1556293227965,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            },
            "-LdSWuiIhfkW7WGoX3ov": {
                ".priority": 1556347333633,
                "message": "qweqweqw",
                "name": "test1",
                "timestamp": 1556347333633,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LdSqjSwKYGsGkwjq0AU": {
                ".priority": 1556352792746,
                "message": "l",
                "name": "hally601",
                "timestamp": 1556352792746,
                "type": "messageType",
                "userId": "icC70eXYlkOrVQayAOrPo0Os7is2"
            },
            "-LdYe6BVznurbL64NKzk": {
                ".priority": 1556450145422,
                "message": "测试",
                "name": "test1",
                "timestamp": 1556450145422,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LdsVbCINPZJVMJfSyRv": {
                ".priority": 1556799976476,
                "message": "１１１",
                "name": "test1",
                "timestamp": 1556799976476,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            }
        },
        "-LdZLabGR1N_h0cosQNI": {
            "-LdZLkytk_-RSEtTN9VV": {
                ".priority": 1556461850756,
                "message": "hello",
                "name": "test1",
                "timestamp": 1556461850756,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-LdZLz8oeDXMPIu_EwtM": {
                ".priority": 1556461908796,
                "message": "Thank you",
                "name": "tei952",
                "timestamp": 1556461908796,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            },
            "-LdZRdfWX9k-arAZ6_-b": {
                ".priority": 1556463394656,
                "message": "测试在评论时发消息通知",
                "name": "tei952",
                "timestamp": 1556463394656,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            },
            "-LdZV1VF2pc5BGxMv-Lt": {
                ".priority": 1556464282350,
                "message": "ありがとうございました。",
                "name": "tei952",
                "timestamp": 1556464282350,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            },
            "-Ldpr7BnNFjy3FITXJue": {
                ".priority": 1556755547145,
                "message": "请告诉我答案",
                "name": "tei952",
                "timestamp": 1556755547145,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            },
            "-LdsVgc6cM3G4uiM4efI": {
                ".priority": 1556799998686,
                "message": "HELLO",
                "name": "test1",
                "timestamp": 1556799998686,
                "type": "messageType",
                "userId": "CIxg5db1wHWTu1eeymVp4EkLzfg1"
            },
            "-Ldv9-Sdub6cT9i9tDET": {
                ".priority": 1556844382269,
                "message": "",
                "name": "tei952",
                "timestamp": 1556844382269,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            },
            "-Ldv9JgQkZroRermQQ9j": {
                ".priority": 1556844465130,
                "message": "你好！",
                "name": "tei952",
                "timestamp": 1556844465130,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            },
            "-LefQundB1mWKDyStMSA": {
                ".priority": 1557654384118,
                "message": "大家好！目前在陆续进行课程登录测试",
                "name": "tei952",
                "timestamp": 1557654384118,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            },
            "-LefRAhkbRz-Bp6w4dVh": {
                ".priority": 1557654453380,
                "message": "有问题大家请即时报告",
                "name": "tei952",
                "timestamp": 1557654453380,
                "type": "messageType",
                "userId": "iHmcxnnRDWPOJAE38On1nCdq0ir2"
            }
        }
    },
    "room-metadata": {
        "-LbpDP3nLIekOaNV6i9R": {
            "authorizedUsers": {
                "CIxg5db1wHWTu1eeymVp4EkLzfg1": true
            },
            "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
            "createdAt": 1554597388817,
            "createdByUserId": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "createdByUserName": "test1",
            "header": "A",
            "id": "-LbpDP3nLIekOaNV6i9R",
            "location": "Tokyo",
            "name": "test2",
            "type": "private"
        },
        "-LdZLabGR1N_h0cosQNI": {
            "authorizedUsers": {
                "CIxg5db1wHWTu1eeymVp4EkLzfg1": true
            },
            "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "createdAt": 1556461808316,
            "createdByUserId": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "createdByUserName": "test1",
            "header": "A",
            "id": "-LdZLabGR1N_h0cosQNI",
            "location": "Tokyo",
            "name": "tei952",
            "type": "private"
        }
    },
    "talents": {
        "data": {
            "-LbW06_C0f7YZbS0UVec": {
                "Fax": "1",
                "HP": "1",
                "Manager": "1",
                "Tel": "1",
                "address": "11",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554258360796,
                "id": "-LbW06_C0f7YZbS0UVec",
                "industry": "1",
                "like_count": 0,
                "name": "test talent2",
                "nickname": "test1",
                "photo": "",
                "talenttype": "1",
                "update_at": 1554258361238
            },
            "-LbYXsmSycY_ip8MMMCF": {
                "Fax": "ddd",
                "HP": "sss",
                "Manager": "sss",
                "Tel": "ddd",
                "address": "dsdd",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554300768882,
                "id": "-LbYXsmSycY_ip8MMMCF",
                "industry": "2",
                "like_count": 0,
                "name": "sss",
                "nickname": "test1",
                "talenttype": "1"
            },
            "-LbloZda0z9U_gs11lT9": {
                "Fax": "dsdsds",
                "HP": "ssss",
                "Manager": "sss",
                "Tel": "sdss",
                "address": "sss",
                "application_count": 0,
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554540284663,
                "id": "-LbloZda0z9U_gs11lT9",
                "like_count": 0,
                "name": "ssss",
                "nickname": "test1",
                "talenttype": "1"
            }
        }
    },
    "timeline": {
        "data": [
            {
                "avatar": "1",
                "comment_count": 2,
                "created_at": "1504709434",
                "id": "41",
                "like_count": 1,
                "nickname": "Bob Brown",
                "original_pic": "",
                "text": "Behind every successful man there's a lot u unsuccessful years. https://www.google.com/"
            },
            {
                "avatar": "7",
                "comment_count": 0,
                "created_at": "1504708544",
                "id": "40",
                "like_count": 0,
                "nickname": "Jean Kerr",
                "original_pic": "",
                "text": "I think success has no rules, but you can learn a lot from failure. "
            },
            {
                "avatar": "3",
                "comment_count": 2,
                "created_at": "1504708455",
                "id": "39",
                "like_count": 0,
                "nickname": "Colin L. Powell",
                "original_pic": "",
                "text": "There are no secrets to success. It is the result of preparation, hard work, and learning from failure. www.youtube.com "
            },
            {
                "avatar": "5",
                "comment_count": 0,
                "created_at": "1504707590",
                "id": "38",
                "like_count": 2,
                "nickname": "Balzac",
                "original_pic": "https://loremflickr.com/1000/700/nature?lock=5",
                "text": "There is no such thing as a great talent without great will - power."
            },
            {
                "avatar": "7",
                "comment_count": 0,
                "created_at": "1504707580",
                "id": "37",
                "like_count": 0,
                "nickname": "Charles Chaplin",
                "original_pic": "",
                "text": "You have to believe in yourself. That's the secret of success."
            },
            {
                "avatar": "4",
                "comment_count": 1,
                "created_at": "1504707197",
                "id": "36",
                "like_count": 0,
                "nickname": "R.M. Nixon",
                "original_pic": "",
                "text": "Our destiny offers not the cup of despair, but the chalice of opportunity. So let us seize it, not in fear, but in gladness."
            },
            {
                "avatar": "8",
                "comment_count": 0,
                "created_at": "1504706070",
                "id": "35",
                "like_count": 1,
                "nickname": "Erasmus",
                "original_pic": "https://loremflickr.com/1000/700/nature?lock=3",
                "text": "None is of freedom or of life deserving unless he daily conquers it anew."
            },
            {
                "avatar": "3",
                "comment_count": 0,
                "created_at": "1504706060",
                "id": "34",
                "like_count": 0,
                "nickname": "John Ruskin",
                "original_pic": "",
                "text": "Living without an aim is like sailing without a compass."
            },
            {
                "avatar": "6",
                "comment_count": 0,
                "created_at": "1504705260",
                "id": "33",
                "like_count": 0,
                "nickname": "George Eliot",
                "original_pic": "https://loremflickr.com/1000/700/nature?lock=7",
                "text": "What makes life dreary is the want of motive."
            },
            {
                "avatar": "6",
                "comment_count": 1,
                "created_at": "1504705240",
                "id": "32",
                "like_count": 1,
                "nickname": "Lincoln",
                "original_pic": "",
                "text": "Towering genius disdains a beaten path. It seeks regions hitherto unexplored."
            },
            {
                "avatar": "10",
                "comment_count": 1,
                "created_at": "1504705133",
                "id": "31",
                "like_count": 2,
                "nickname": "Erasmus",
                "original_pic": "",
                "text": "None is of freedom or of life deserving unless he daily conquers it anew. "
            },
            {
                "avatar": "8",
                "comment_count": 0,
                "created_at": "1504704742",
                "id": "30",
                "like_count": 0,
                "nickname": "Thomas Addison",
                "original_pic": "",
                "text": "A strong man will struggle with the storms of fate."
            }
        ],
        "err_code": 0,
        "err_msg": "success"
    },
    "tools": {
        "data": {
            "-LbW07QDVIQO5CWJ6-Xy": {
                "Fax": "1",
                "HP": "1",
                "Manager": "1",
                "Tel": "1",
                "address": "11",
                "application_count": 1,
                "applications": {
                    "-LbfMRTfKye_3sxDm8Mp": {
                        "id": "-LbfMRTfKye_3sxDm8Mp",
                        "text": "xss",
                        "time": 1554431985720,
                        "toolid": "-LbW07QDVIQO5CWJ6-Xy"
                    }
                },
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554258364254,
                "id": "-LbW07QDVIQO5CWJ6-Xy",
                "industry": "1",
                "like_count": 1,
                "likes": {
                    "-LckQx7fB4yet8qrIZz9": {
                        "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                        "id": "-LckQx7fB4yet8qrIZz9",
                        "name": "test2",
                        "time": 1555590796040,
                        "toolid": "-LbW07QDVIQO5CWJ6-Xy"
                    }
                },
                "name": "test tool2",
                "nickname": "test1",
                "photo": "",
                "tooltype": "1",
                "update_at": 1554258364678
            },
            "-LbYZjcGci7H_jDGoD-F": {
                "Fax": "sss",
                "HP": "sss",
                "Manager": "sss",
                "Tel": "sss",
                "address": "sss",
                "application_count": 0,
                "area": "1",
                "avatar": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                "created_at": 1554301255816,
                "id": "-LbYZjcGci7H_jDGoD-F",
                "industry": "2",
                "like_count": 1,
                "likes": {
                    "-LckQynkxnRgHHZeqDf3": {
                        "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                        "id": "-LckQynkxnRgHHZeqDf3",
                        "name": "test2",
                        "time": 1555590802881,
                        "toolid": "-LbYZjcGci7H_jDGoD-F"
                    }
                },
                "name": "sss",
                "nickname": "test1",
                "tooltype": "1"
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "user_login": {
        "data": {
            "sid": "e651771fe37dc17c17421331a87721",
            "user": {
                "avatar_url": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/android-icon-xxhdpi-144x144.png?alt=media&token=d6e43d58-52c6-4ed6-ac2d-d68072d5a12a",
                "gender": "m",
                "id": 10001,
                "location": "Tokyo",
                "login_name": "wohapp@highwayns.com",
                "nick_name": "wohApp",
                "points": 267
            }
        },
        "err_code": 0,
        "err_msg": "success"
    },
    "users": {
        "CIxg5db1wHWTu1eeymVp4EkLzfg1": {
            "avatar_url": "",
            "company_count": 8,
            "consultant_count": 2,
            "contact_count": 0,
            "dispatcher_count": 2,
            "event_count": 2,
            "gender": "",
            "id": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
            "job_count": 6,
            "knowledge_count": 3,
            "learnings": {
                "-LbW07Cj8C37LDyZeKHF": {
                    "LearningStatus": true,
                    "approval_at": 1556488258616,
                    "contentOrd": "2"
                },
                "-LbYZZXvYQxtpo2AWpzL": {
                    "LearningStatus": true,
                    "approval_at": 1554951668780,
                    "contentOrd": 2
                },
                "-LdLuLklhwL7keqLFNmD": {
                    "LearningStatus": true,
                    "approval_at": 1557717707369,
                    "contentOrd": "03"
                },
                "-LedXZi8fzaKO45rL-Kv": {
                    "LearningStatus": true,
                    "approval_at": 1557717304945,
                    "contentOrd": "03"
                }
            },
            "location": "",
            "login_name": "test1@gmail.com",
            "name": "test1",
            "photo": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/users%2FCIxg5db1wHWTu1eeymVp4EkLzfg1?alt=media&token=c3889a1d-9cf5-4c58-9fdc-6f078f1ce32e",
            "points": 0,
            "post_count": 5,
            "project_count": 2,
            "rooms": {
                "-LbpDP3nLIekOaNV6i9R": {
                    "active": true,
                    "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                    "header": "A",
                    "id": "-LbpDP3nLIekOaNV6i9R",
                    "location": "Tokyo",
                    "name": "test2"
                },
                "-LdZLabGR1N_h0cosQNI": {
                    "active": true,
                    "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                    "header": "A",
                    "id": "-LdZLabGR1N_h0cosQNI",
                    "location": "Tokyo",
                    "name": "tei952"
                }
            },
            "talent_count": 3,
            "tool_count": 2
        },
        "GQxxS27YoMV4aMVZ69C9uVimoG63": {
            "avatar_url": "",
            "gender": "",
            "id": "GQxxS27YoMV4aMVZ69C9uVimoG63",
            "location": "",
            "login_name": "test5@gmail.com",
            "name": "test5",
            "photo": "",
            "points": 0
        },
        "PHa92muIF0Vl4DmIaSrAYSn2sFz1": {
            "avatar_url": "",
            "gender": "",
            "id": "PHa92muIF0Vl4DmIaSrAYSn2sFz1",
            "location": "",
            "login_name": "xhdpgroop@123.com",
            "name": "无",
            "photo": "",
            "points": 0
        },
        "SltouNWndEXkvLg3nCWCiHXdmnx1": {
            "avatar_url": "",
            "gender": "",
            "id": "SltouNWndEXkvLg3nCWCiHXdmnx1",
            "location": "",
            "login_name": "test3@gmail.com",
            "name": "test3",
            "photo": "",
            "points": 0
        },
        "Vn8NjeM3yCh7vsK6mwhEdk9d1h73": {
            "avatar_url": "",
            "gender": "",
            "id": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
            "invites": {
                "-LbM7zO3wA7flCWYyECk": {
                    "fromUserId": "CIxg5db1wHWTu1eeymVp4EkLzfg1",
                    "fromUserName": "test1",
                    "id": "-LbM7zO3wA7flCWYyECk",
                    "roomId": "-LbLowCug333-9BAkwM9",
                    "status": "declined",
                    "toUserName": "test2"
                }
            },
            "learnings": {
                "-LbW07Cj8C37LDyZeKHF": {
                    "LearningStatus": true,
                    "approval_at": 1556060905815,
                    "contentOrd": "3"
                }
            },
            "location": "",
            "login_name": "test2@gmail.com",
            "name": "test2",
            "photo": "https://firebasestorage.googleapis.com/v0/b/wohapp-3a179.appspot.com/o/users%2FVn8NjeM3yCh7vsK6mwhEdk9d1h73?alt=media&token=c483679f-b290-41b1-b5c6-7512118e3c70",
            "points": 0,
            "rooms": {
                "-LbpDP3nLIekOaNV6i9R": {
                    "active": true,
                    "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                    "header": "A",
                    "id": "-LbpDP3nLIekOaNV6i9R",
                    "location": "Tokyo",
                    "name": "test2"
                }
            }
        },
        "ejGASFLSr1RsV2ZiVGtENSZ0JP33": {
            "avatar_url": "",
            "gender": "",
            "id": "ejGASFLSr1RsV2ZiVGtENSZ0JP33",
            "location": "",
            "login_name": "zhoumeiqi77@icloud.com",
            "name": "IT",
            "photo": "",
            "points": 0
        },
        "err_code": 0,
        "err_msg": "success",
        "fxsAVCvXnrfUbJ1XJXa8ptBAAZv2": {
            "avatar_url": "",
            "gender": "",
            "id": "fxsAVCvXnrfUbJ1XJXa8ptBAAZv2",
            "location": "",
            "login_name": "test4@gmail.com",
            "name": "test4",
            "photo": "",
            "points": 0
        },
        "iHmcxnnRDWPOJAE38On1nCdq0ir2": {
            "avatar_url": "",
            "gender": "",
            "id": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
            "knowledge_count": 1,
            "learnings": {
                "-LbW07Cj8C37LDyZeKHF": {
                    "LearningStatus": true,
                    "approval_at": 1556844271625,
                    "contentOrd": "2"
                },
                "-LbYZZXvYQxtpo2AWpzL": {
                    "LearningStatus": true,
                    "approval_at": 1557654683122,
                    "contentOrd": "04"
                }
            },
            "location": "",
            "login_name": "zhengjun@jp.highwayns.com",
            "name": "tei952",
            "photo": "",
            "points": 0,
            "rooms": {
                "-LbpDP3nLIekOaNV6i9R": {
                    "active": true,
                    "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                    "header": "A",
                    "id": "-LbpDP3nLIekOaNV6i9R",
                    "location": "Tokyo",
                    "name": "test2"
                },
                "-LdZLabGR1N_h0cosQNI": {
                    "active": true,
                    "avatar": "iHmcxnnRDWPOJAE38On1nCdq0ir2",
                    "header": "A",
                    "id": "-LdZLabGR1N_h0cosQNI",
                    "location": "Tokyo",
                    "name": "tei952"
                }
            }
        },
        "icC70eXYlkOrVQayAOrPo0Os7is2": {
            "avatar_url": "",
            "gender": "",
            "id": "icC70eXYlkOrVQayAOrPo0Os7is2",
            "location": "",
            "login_name": "hally601@yahoo.co.jp",
            "name": "hally601",
            "photo": "",
            "points": 0,
            "rooms": {
                "-LbpDP3nLIekOaNV6i9R": {
                    "active": true,
                    "avatar": "Vn8NjeM3yCh7vsK6mwhEdk9d1h73",
                    "header": "A",
                    "id": "-LbpDP3nLIekOaNV6i9R",
                    "location": "Tokyo",
                    "name": "test2"
                }
            }
        }
    }
}